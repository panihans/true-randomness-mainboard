
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009928  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b58  08009b58  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009b58  08009b58  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b58  08009b58  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000184  08009ce4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  08009ce4  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ace2  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344b  00000000  00000000  0003ae96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003f678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bc8  00000000  00000000  00060e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c42bf  00000000  00000000  000729eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  00136d28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ae8 	.word	0x08009ae8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009ae8 	.word	0x08009ae8

08000218 <CDC_On_Receive>:
volatile uint8_t command_received_period = 0;
volatile uint16_t motor1_position_prev = 0;
volatile uint16_t motor2_position_prev = 0;
volatile uint16_t motor3_position_prev = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fc46 	bl	8009ac0 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001c8 	.word	0x200001c8

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f001 f914 	bl	800148a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f8f1 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 fd45 	bl	8000cf4 <MX_GPIO_Init>
  MX_TIM4_Init();
 800026a:	f000 facd 	bl	8000808 <MX_TIM4_Init>
  MX_TIM8_Init();
 800026e:	f000 fb57 	bl	8000920 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000272:	f000 fbc5 	bl	8000a00 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000276:	f000 fc49 	bl	8000b0c <MX_TIM16_Init>
  MX_TIM1_Init();
 800027a:	f000 f94d 	bl	8000518 <MX_TIM1_Init>
  MX_TIM2_Init();
 800027e:	f000 f9fb 	bl	8000678 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000282:	f000 fa4d 	bl	8000720 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000286:	f000 fb15 	bl	80008b4 <MX_TIM7_Init>
  MX_TIM17_Init();
 800028a:	f000 fcb9 	bl	8000c00 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800028e:	f008 fefb 	bl	8009088 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000292:	2104      	movs	r1, #4
 8000294:	4858      	ldr	r0, [pc, #352]	; (80003f8 <main+0x1a0>)
 8000296:	f004 f9f5 	bl	8004684 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800029a:	2104      	movs	r1, #4
 800029c:	4857      	ldr	r0, [pc, #348]	; (80003fc <main+0x1a4>)
 800029e:	f004 f9f1 	bl	8004684 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002a2:	2104      	movs	r1, #4
 80002a4:	4856      	ldr	r0, [pc, #344]	; (8000400 <main+0x1a8>)
 80002a6:	f004 f9ed 	bl	8004684 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002aa:	2100      	movs	r1, #0
 80002ac:	4855      	ldr	r0, [pc, #340]	; (8000404 <main+0x1ac>)
 80002ae:	f004 f843 	bl	8004338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002b2:	2104      	movs	r1, #4
 80002b4:	4853      	ldr	r0, [pc, #332]	; (8000404 <main+0x1ac>)
 80002b6:	f004 f83f 	bl	8004338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002ba:	2108      	movs	r1, #8
 80002bc:	4851      	ldr	r0, [pc, #324]	; (8000404 <main+0x1ac>)
 80002be:	f004 f83b 	bl	8004338 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 80002c2:	4b51      	ldr	r3, [pc, #324]	; (8000408 <main+0x1b0>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 80002c8:	4b4f      	ldr	r3, [pc, #316]	; (8000408 <main+0x1b0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80002ce:	4b4e      	ldr	r3, [pc, #312]	; (8000408 <main+0x1b0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d4:	2100      	movs	r1, #0
 80002d6:	484d      	ldr	r0, [pc, #308]	; (800040c <main+0x1b4>)
 80002d8:	f004 f82e 	bl	8004338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002dc:	2104      	movs	r1, #4
 80002de:	484b      	ldr	r0, [pc, #300]	; (800040c <main+0x1b4>)
 80002e0:	f004 f82a 	bl	8004338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002e4:	2108      	movs	r1, #8
 80002e6:	4849      	ldr	r0, [pc, #292]	; (800040c <main+0x1b4>)
 80002e8:	f004 f826 	bl	8004338 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 80002ec:	4b48      	ldr	r3, [pc, #288]	; (8000410 <main+0x1b8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80002f2:	4b47      	ldr	r3, [pc, #284]	; (8000410 <main+0x1b8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80002f8:	4b45      	ldr	r3, [pc, #276]	; (8000410 <main+0x1b8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80002fe:	2100      	movs	r1, #0
 8000300:	4844      	ldr	r0, [pc, #272]	; (8000414 <main+0x1bc>)
 8000302:	f004 f819 	bl	8004338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000306:	2100      	movs	r1, #0
 8000308:	4843      	ldr	r0, [pc, #268]	; (8000418 <main+0x1c0>)
 800030a:	f004 f815 	bl	8004338 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800030e:	2100      	movs	r1, #0
 8000310:	4842      	ldr	r0, [pc, #264]	; (800041c <main+0x1c4>)
 8000312:	f004 f811 	bl	8004338 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 8000316:	4b42      	ldr	r3, [pc, #264]	; (8000420 <main+0x1c8>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 800031c:	4b41      	ldr	r3, [pc, #260]	; (8000424 <main+0x1cc>)
 800031e:	2200      	movs	r2, #0
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 8000322:	4b41      	ldr	r3, [pc, #260]	; (8000428 <main+0x1d0>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000328:	4840      	ldr	r0, [pc, #256]	; (800042c <main+0x1d4>)
 800032a:	f003 ff43 	bl	80041b4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 800032e:	4b40      	ldr	r3, [pc, #256]	; (8000430 <main+0x1d8>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b01      	cmp	r3, #1
 8000336:	d1fa      	bne.n	800032e <main+0xd6>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000338:	2120      	movs	r1, #32
 800033a:	483e      	ldr	r0, [pc, #248]	; (8000434 <main+0x1dc>)
 800033c:	f001 fbc0 	bl	8001ac0 <HAL_GPIO_TogglePin>
		command_received = 0;
 8000340:	4b3b      	ldr	r3, [pc, #236]	; (8000430 <main+0x1d8>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]

		feedback.thrower = 666;
 8000346:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <main+0x1e0>)
 8000348:	f240 229a 	movw	r2, #666	; 0x29a
 800034c:	60da      	str	r2, [r3, #12]

		uint16_t m1duty = command.motor1 * 130;
 800034e:	4b3b      	ldr	r3, [pc, #236]	; (800043c <main+0x1e4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	b29b      	uxth	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	0192      	lsls	r2, r2, #6
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	80fb      	strh	r3, [r7, #6]
		uint16_t m2duty = command.motor2 * 130;
 800035e:	4b37      	ldr	r3, [pc, #220]	; (800043c <main+0x1e4>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	b29b      	uxth	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	0192      	lsls	r2, r2, #6
 8000368:	4413      	add	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	80bb      	strh	r3, [r7, #4]
		uint16_t m3duty = command.motor3 * 130;
 800036e:	4b33      	ldr	r3, [pc, #204]	; (800043c <main+0x1e4>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	b29b      	uxth	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	0192      	lsls	r2, r2, #6
 8000378:	4413      	add	r3, r2
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	807b      	strh	r3, [r7, #2]
		if (m1duty > 0) {
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d006      	beq.n	8000392 <main+0x13a>
			TIM1->CCR3 = m1duty;
 8000384:	4a20      	ldr	r2, [pc, #128]	; (8000408 <main+0x1b0>)
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR2 = 0;
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <main+0x1b0>)
 800038c:	2200      	movs	r2, #0
 800038e:	639a      	str	r2, [r3, #56]	; 0x38
 8000390:	e006      	b.n	80003a0 <main+0x148>
		} else {
			TIM1->CCR2 = m1duty * -1;
 8000392:	88fb      	ldrh	r3, [r7, #6]
 8000394:	425a      	negs	r2, r3
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <main+0x1b0>)
 8000398:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <main+0x1b0>)
 800039c:	2200      	movs	r2, #0
 800039e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if (m2duty > 0) {
 80003a0:	88bb      	ldrh	r3, [r7, #4]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d006      	beq.n	80003b4 <main+0x15c>
			TIM1->CCR1 = m2duty;
 80003a6:	4a18      	ldr	r2, [pc, #96]	; (8000408 <main+0x1b0>)
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR3 = 0;
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <main+0x1b8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80003b2:	e006      	b.n	80003c2 <main+0x16a>
		} else {
			TIM3->CCR3 = m2duty * -1;
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	425a      	negs	r2, r3
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <main+0x1b8>)
 80003ba:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <main+0x1b0>)
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if (m3duty > 0) {
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d006      	beq.n	80003d6 <main+0x17e>
			TIM3->CCR1 = m3duty;
 80003c8:	4a11      	ldr	r2, [pc, #68]	; (8000410 <main+0x1b8>)
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <main+0x1b8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	639a      	str	r2, [r3, #56]	; 0x38
 80003d4:	e006      	b.n	80003e4 <main+0x18c>
		} else {
			TIM3->CCR2 = m3duty * -1;
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	425a      	negs	r2, r3
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <main+0x1b8>)
 80003dc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR2 = 0;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <main+0x1b8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	639a      	str	r2, [r3, #56]	; 0x38
		}
		command_received_period = current_period;
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <main+0x1e8>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	4b16      	ldr	r3, [pc, #88]	; (8000444 <main+0x1ec>)
 80003ec:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80003ee:	2114      	movs	r1, #20
 80003f0:	4811      	ldr	r0, [pc, #68]	; (8000438 <main+0x1e0>)
 80003f2:	f008 ff0b 	bl	800920c <CDC_Transmit_FS>
	if (command_received == 1) {
 80003f6:	e79a      	b.n	800032e <main+0xd6>
 80003f8:	200005bc 	.word	0x200005bc
 80003fc:	20000440 	.word	0x20000440
 8000400:	200003f4 	.word	0x200003f4
 8000404:	20000570 	.word	0x20000570
 8000408:	40012c00 	.word	0x40012c00
 800040c:	20000524 	.word	0x20000524
 8000410:	40000400 	.word	0x40000400
 8000414:	2000048c 	.word	0x2000048c
 8000418:	20000608 	.word	0x20000608
 800041c:	200004d8 	.word	0x200004d8
 8000420:	40014000 	.word	0x40014000
 8000424:	40014400 	.word	0x40014400
 8000428:	40014800 	.word	0x40014800
 800042c:	20000654 	.word	0x20000654
 8000430:	200001c8 	.word	0x200001c8
 8000434:	48000400 	.word	0x48000400
 8000438:	200001b4 	.word	0x200001b4
 800043c:	200001a0 	.word	0x200001a0
 8000440:	200001c9 	.word	0x200001c9
 8000444:	200001ca 	.word	0x200001ca

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b0a4      	sub	sp, #144	; 0x90
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000452:	2238      	movs	r2, #56	; 0x38
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f009 fb3d 	bl	8009ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046c:	463b      	mov	r3, r7
 800046e:	2244      	movs	r2, #68	; 0x44
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f009 fb2f 	bl	8009ad6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000478:	2000      	movs	r0, #0
 800047a:	f002 fea3 	bl	80031c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800047e:	2322      	movs	r3, #34	; 0x22
 8000480:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000486:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	2302      	movs	r3, #2
 8000496:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000498:	2301      	movs	r3, #1
 800049a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800049c:	2314      	movs	r3, #20
 800049e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ae:	2302      	movs	r3, #2
 80004b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004b8:	4618      	mov	r0, r3
 80004ba:	f002 ff37 	bl	800332c <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004c4:	f000 fcf4 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2303      	movs	r3, #3
 80004ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004e0:	2104      	movs	r1, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fa3a 	bl	800395c <HAL_RCC_ClockConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004ee:	f000 fcdf 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004f8:	2300      	movs	r3, #0
 80004fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fc:	463b      	mov	r3, r7
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 fc10 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800050a:	f000 fcd1 	bl	8000eb0 <Error_Handler>
  }
}
 800050e:	bf00      	nop
 8000510:	3790      	adds	r7, #144	; 0x90
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b098      	sub	sp, #96	; 0x60
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2234      	movs	r2, #52	; 0x34
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f009 fac6 	bl	8009ad6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800054a:	4b49      	ldr	r3, [pc, #292]	; (8000670 <MX_TIM1_Init+0x158>)
 800054c:	4a49      	ldr	r2, [pc, #292]	; (8000674 <MX_TIM1_Init+0x15c>)
 800054e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000550:	4b47      	ldr	r3, [pc, #284]	; (8000670 <MX_TIM1_Init+0x158>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b46      	ldr	r3, [pc, #280]	; (8000670 <MX_TIM1_Init+0x158>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800055c:	4b44      	ldr	r3, [pc, #272]	; (8000670 <MX_TIM1_Init+0x158>)
 800055e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b42      	ldr	r3, [pc, #264]	; (8000670 <MX_TIM1_Init+0x158>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800056a:	4b41      	ldr	r3, [pc, #260]	; (8000670 <MX_TIM1_Init+0x158>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <MX_TIM1_Init+0x158>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000576:	483e      	ldr	r0, [pc, #248]	; (8000670 <MX_TIM1_Init+0x158>)
 8000578:	f003 fe86 	bl	8004288 <HAL_TIM_PWM_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000582:	f000 fc95 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800058a:	2300      	movs	r3, #0
 800058c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000592:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000596:	4619      	mov	r1, r3
 8000598:	4835      	ldr	r0, [pc, #212]	; (8000670 <MX_TIM1_Init+0x158>)
 800059a:	f004 ff63 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005a4:	f000 fc84 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005a8:	2360      	movs	r3, #96	; 0x60
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b0:	2300      	movs	r3, #0
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005b4:	2300      	movs	r3, #0
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005bc:	2300      	movs	r3, #0
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c8:	2200      	movs	r2, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	4828      	ldr	r0, [pc, #160]	; (8000670 <MX_TIM1_Init+0x158>)
 80005ce:	f004 fa65 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80005d8:	f000 fc6a 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e4:	2204      	movs	r2, #4
 80005e6:	4619      	mov	r1, r3
 80005e8:	4821      	ldr	r0, [pc, #132]	; (8000670 <MX_TIM1_Init+0x158>)
 80005ea:	f004 fa57 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80005f4:	f000 fc5c 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000600:	2208      	movs	r2, #8
 8000602:	4619      	mov	r1, r3
 8000604:	481a      	ldr	r0, [pc, #104]	; (8000670 <MX_TIM1_Init+0x158>)
 8000606:	f004 fa49 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000610:	f000 fc4e 	bl	8000eb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800063a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4619      	mov	r1, r3
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <MX_TIM1_Init+0x158>)
 8000652:	f004 ff89 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800065c:	f000 fc28 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <MX_TIM1_Init+0x158>)
 8000662:	f000 fda9 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000666:	bf00      	nop
 8000668:	3760      	adds	r7, #96	; 0x60
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000570 	.word	0x20000570
 8000674:	40012c00 	.word	0x40012c00

08000678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2224      	movs	r2, #36	; 0x24
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f009 fa25 	bl	8009ad6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_TIM2_Init+0xa4>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_TIM2_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_TIM2_Init+0xa4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM2_Init+0xa4>)
 80006ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM2_Init+0xa4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM2_Init+0xa4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006be:	2303      	movs	r3, #3
 80006c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_TIM2_Init+0xa4>)
 80006ea:	f003 ff25 	bl	8004538 <HAL_TIM_Encoder_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80006f4:	f000 fbdc 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_TIM2_Init+0xa4>)
 8000706:	f004 fead 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000710:	f000 fbce 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3730      	adds	r7, #48	; 0x30
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200005bc 	.word	0x200005bc

08000720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <MX_TIM3_Init+0xe0>)
 8000746:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <MX_TIM3_Init+0xe4>)
 8000748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_TIM3_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_TIM3_Init+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_TIM3_Init+0xe0>)
 8000758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800075c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_TIM3_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_TIM3_Init+0xe0>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <MX_TIM3_Init+0xe0>)
 800076c:	f003 fd8c 	bl	8004288 <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000776:	f000 fb9b 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	481d      	ldr	r0, [pc, #116]	; (8000800 <MX_TIM3_Init+0xe0>)
 800078a:	f004 fe6b 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000794:	f000 fb8c 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <MX_TIM3_Init+0xe0>)
 80007b0:	f004 f974 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80007ba:	f000 fb79 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	2204      	movs	r2, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_TIM3_Init+0xe0>)
 80007ca:	f004 f967 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80007d4:	f000 fb6c 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2208      	movs	r2, #8
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <MX_TIM3_Init+0xe0>)
 80007e4:	f004 f95a 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80007ee:	f000 fb5f 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <MX_TIM3_Init+0xe0>)
 80007f4:	f000 fce0 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000524 	.word	0x20000524
 8000804:	40000400 	.word	0x40000400

08000808 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2224      	movs	r2, #36	; 0x24
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f009 f95d 	bl	8009ad6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_TIM4_Init+0xa4>)
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <MX_TIM4_Init+0xa8>)
 800082a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_TIM4_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM4_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM4_Init+0xa4>)
 800083a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM4_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM4_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800084c:	2303      	movs	r3, #3
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_TIM4_Init+0xa4>)
 8000878:	f003 fe5e 	bl	8004538 <HAL_TIM_Encoder_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000882:	f000 fb15 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_TIM4_Init+0xa4>)
 8000894:	f004 fde6 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800089e:	f000 fb07 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000440 	.word	0x20000440
 80008b0:	40000800 	.word	0x40000800

080008b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_TIM7_Init+0x64>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_TIM7_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_TIM7_Init+0x64>)
 80008cc:	2228      	movs	r2, #40	; 0x28
 80008ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_TIM7_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_TIM7_Init+0x64>)
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_TIM7_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_TIM7_Init+0x64>)
 80008e6:	f003 fc0d 	bl	8004104 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80008f0:	f000 fade 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM7_Init+0x64>)
 8000902:	f004 fdaf 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800090c:	f000 fad0 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000654 	.word	0x20000654
 800091c:	40001400 	.word	0x40001400

08000920 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b09a      	sub	sp, #104	; 0x68
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000926:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800092a:	2224      	movs	r2, #36	; 0x24
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f009 f8d1 	bl	8009ad6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2234      	movs	r2, #52	; 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f009 f8c5 	bl	8009ad6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_TIM8_Init+0xd8>)
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <MX_TIM8_Init+0xdc>)
 8000950:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_TIM8_Init+0xd8>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_TIM8_Init+0xd8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_TIM8_Init+0xd8>)
 8000960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000964:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_TIM8_Init+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_TIM8_Init+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_TIM8_Init+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000978:	2303      	movs	r3, #3
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097c:	2300      	movs	r3, #0
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000980:	2301      	movs	r3, #1
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800099c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009a0:	4619      	mov	r1, r3
 80009a2:	4815      	ldr	r0, [pc, #84]	; (80009f8 <MX_TIM8_Init+0xd8>)
 80009a4:	f003 fdc8 	bl	8004538 <HAL_TIM_Encoder_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80009ae:	f000 fa7f 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_TIM8_Init+0xd8>)
 80009c6:	f004 fd4d 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 80009d0:	f000 fa6e 	bl	8000eb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_TIM8_Init+0xd8>)
 80009e2:	f004 fdc1 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 80009ec:	f000 fa60 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3768      	adds	r7, #104	; 0x68
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200003f4 	.word	0x200003f4
 80009fc:	40013400 	.word	0x40013400

08000a00 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b098      	sub	sp, #96	; 0x60
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2234      	movs	r2, #52	; 0x34
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f009 f852 	bl	8009ad6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a34:	4a34      	ldr	r2, [pc, #208]	; (8000b08 <MX_TIM15_Init+0x108>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a60:	f003 fc12 	bl	8004288 <HAL_TIM_PWM_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 fa21 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4821      	ldr	r0, [pc, #132]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000a7e:	f004 fcf1 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 fa12 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8c:	2360      	movs	r3, #96	; 0x60
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a94:	2300      	movs	r3, #0
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000ab2:	f003 fff3 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000abc:	f000 f9f8 	bl	8000eb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000ae8:	f004 fd3e 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000af2:	f000 f9dd 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM15_Init+0x104>)
 8000af8:	f000 fb5e 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000afc:	bf00      	nop
 8000afe:	3760      	adds	r7, #96	; 0x60
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000048c 	.word	0x2000048c
 8000b08:	40014000 	.word	0x40014000

08000b0c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2234      	movs	r2, #52	; 0x34
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 ffd2 	bl	8009ad6 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b34:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <MX_TIM16_Init+0xf0>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b38:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b5e:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b60:	f003 fad0 	bl	8004104 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b6a:	f000 f9a1 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b6e:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000b70:	f003 fb8a 	bl	8004288 <HAL_TIM_PWM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b7a:	f000 f999 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7e:	2360      	movs	r3, #96	; 0x60
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000ba4:	f003 ff7a 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000bae:	f000 f97f 	bl	8000eb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000bda:	f004 fcc5 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000be4:	f000 f964 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM16_Init+0xec>)
 8000bea:	f000 fae5 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000608 	.word	0x20000608
 8000bfc:	40014400 	.word	0x40014400

08000c00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2234      	movs	r2, #52	; 0x34
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f008 ff58 	bl	8009ad6 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c26:	4b31      	ldr	r3, [pc, #196]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <MX_TIM17_Init+0xf0>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c52:	4826      	ldr	r0, [pc, #152]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c54:	f003 fa56 	bl	8004104 <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c5e:	f000 f927 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c62:	4822      	ldr	r0, [pc, #136]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c64:	f003 fb10 	bl	8004288 <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c6e:	f000 f91f 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	; 0x60
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <MX_TIM17_Init+0xec>)
 8000c98:	f003 ff00 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000ca2:	f000 f905 	bl	8000eb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_TIM17_Init+0xec>)
 8000cce:	f004 fc4b 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000cd8:	f000 f8ea 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_TIM17_Init+0xec>)
 8000cde:	f000 fa6b 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200004d8 	.word	0x200004d8
 8000cf0:	40014800 	.word	0x40014800

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_GPIO_Init+0x8c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_GPIO_Init+0x8c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_GPIO_Init+0x8c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_GPIO_Init+0x8c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <MX_GPIO_Init+0x8c>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_GPIO_Init+0x8c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_GPIO_Init+0x90>)
 8000d40:	f000 fea6 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d44:	2308      	movs	r3, #8
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	; (8000d84 <MX_GPIO_Init+0x90>)
 8000d58:	f000 fd18 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_GPIO_Init+0x90>)
 8000d74:	f000 fd0a 	bl	800178c <HAL_GPIO_Init>

}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400

08000d88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	uint16_t motor1_position = TIM2->CNT;
 8000d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000d98:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000da4:	8bfb      	ldrh	r3, [r7, #30]
 8000da6:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	b292      	uxth	r2, r2
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000db0:	8bbb      	ldrh	r3, [r7, #28]
 8000db2:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000db4:	8812      	ldrh	r2, [r2, #0]
 8000db6:	b292      	uxth	r2, r2
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000dbc:	8b7b      	ldrh	r3, [r7, #26]
 8000dbe:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000dc0:	8812      	ldrh	r2, [r2, #0]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000dca:	8bfb      	ldrh	r3, [r7, #30]
 8000dcc:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000dce:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000dd0:	8bbb      	ldrh	r3, [r7, #28]
 8000dd2:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000dd4:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000dd6:	8b7b      	ldrh	r3, [r7, #26]
 8000dd8:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1252      	asrs	r2, r2, #9
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	4a2a      	ldr	r2, [pc, #168]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000df2:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e00:	fb82 1203 	smull	r1, r2, r2, r3
 8000e04:	1252      	asrs	r2, r2, #9
 8000e06:	17db      	asrs	r3, r3, #31
 8000e08:	1a9b      	subs	r3, r3, r2
 8000e0a:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e0c:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1252      	asrs	r2, r2, #9
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e26:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e2a:	f240 229a 	movw	r2, #666	; 0x29a
 8000e2e:	60da      	str	r2, [r3, #12]

	current_period += 1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e3c:	701a      	strb	r2, [r3, #0]
	if (current_period - command_received_period  > 60) {
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e50:	dd11      	ble.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0xee>
		TIM1->CCR1 = 0;
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000e76:	bf00      	nop
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40000800 	.word	0x40000800
 8000e88:	40013400 	.word	0x40013400
 8000e8c:	200001cc 	.word	0x200001cc
 8000e90:	200001ce 	.word	0x200001ce
 8000e94:	200001d0 	.word	0x200001d0
 8000e98:	6bca1af3 	.word	0x6bca1af3
 8000e9c:	200001b4 	.word	0x200001b4
 8000ea0:	200001c9 	.word	0x200001c9
 8000ea4:	200001ca 	.word	0x200001ca
 8000ea8:	40012c00 	.word	0x40012c00
 8000eac:	40000400 	.word	0x40000400

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef6:	f002 fa09 	bl	800330c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <HAL_TIM_PWM_MspInit+0x80>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10c      	bne.n	8000f34 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f24:	6613      	str	r3, [r2, #96]	; 0x60
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f32:	e022      	b.n	8000f7a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <HAL_TIM_PWM_MspInit+0x88>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10c      	bne.n	8000f58 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
}
 8000f56:	e010      	b.n	8000f7a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10b      	bne.n	8000f7a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_TIM_PWM_MspInit+0x84>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
}
 8000f7a:	bf00      	nop
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40000400 	.word	0x40000400
 8000f94:	40014000 	.word	0x40014000

08000f98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d129      	bne.n	800100e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a53      	ldr	r2, [pc, #332]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fea:	2303      	movs	r3, #3
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f000 fbc0 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800100c:	e079      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a3f      	ldr	r2, [pc, #252]	; (8001110 <HAL_TIM_Encoder_MspInit+0x178>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d128      	bne.n	800106a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a3b      	ldr	r2, [pc, #236]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b36      	ldr	r3, [pc, #216]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a35      	ldr	r2, [pc, #212]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001048:	23c0      	movs	r3, #192	; 0xc0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	482c      	ldr	r0, [pc, #176]	; (8001114 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001064:	f000 fb92 	bl	800178c <HAL_GPIO_Init>
}
 8001068:	e04b      	b.n	8001102 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_TIM_Encoder_MspInit+0x180>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d146      	bne.n	8001102 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8001076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 800107a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800107e:	6613      	str	r3, [r2, #96]	; 0x60
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_TIM_Encoder_MspInit+0x174>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80010ce:	2302      	movs	r3, #2
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f000 fb56 	bl	800178c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80010f2:	230a      	movs	r3, #10
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_TIM_Encoder_MspInit+0x17c>)
 80010fe:	f000 fb45 	bl	800178c <HAL_GPIO_Init>
}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40000800 	.word	0x40000800
 8001114:	48000400 	.word	0x48000400
 8001118:	40013400 	.word	0x40013400

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_TIM_Base_MspInit+0x8c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d114      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	6593      	str	r3, [r2, #88]	; 0x58
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2037      	movs	r0, #55	; 0x37
 800114c:	f000 fae9 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001150:	2037      	movs	r0, #55	; 0x37
 8001152:	f000 fb00 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001156:	e022      	b.n	800119e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_TIM_Base_MspInit+0x94>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10c      	bne.n	800117c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
}
 800117a:	e010      	b.n	800119e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_TIM_Base_MspInit+0x98>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10b      	bne.n	800119e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6613      	str	r3, [r2, #96]	; 0x60
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_TIM_Base_MspInit+0x90>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40001400 	.word	0x40001400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40014400 	.word	0x40014400
 80011b4:	40014800 	.word	0x40014800

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_TIM_MspPostInit+0x1b4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d11e      	bne.n	8001218 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b65      	ldr	r3, [pc, #404]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a64      	ldr	r2, [pc, #400]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b62      	ldr	r3, [pc, #392]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
 80011f0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001204:	2306      	movs	r3, #6
 8001206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f000 fabb 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001216:	e0a5      	b.n	8001364 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_TIM_MspPostInit+0x1bc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d139      	bne.n	8001296 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001252:	2350      	movs	r3, #80	; 0x50
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001262:	2302      	movs	r3, #2
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f000 fa8c 	bl	800178c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001274:	2301      	movs	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001284:	2302      	movs	r3, #2
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	483a      	ldr	r0, [pc, #232]	; (8001378 <HAL_TIM_MspPostInit+0x1c0>)
 8001290:	f000 fa7c 	bl	800178c <HAL_GPIO_Init>
}
 8001294:	e066      	b.n	8001364 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a38      	ldr	r2, [pc, #224]	; (800137c <HAL_TIM_MspPostInit+0x1c4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d11d      	bne.n	80012dc <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b8:	2304      	movs	r3, #4
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012c8:	2309      	movs	r3, #9
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f000 fa59 	bl	800178c <HAL_GPIO_Init>
}
 80012da:	e043      	b.n	8001364 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <HAL_TIM_MspPostInit+0x1c8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d11c      	bne.n	8001320 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012fe:	2310      	movs	r3, #16
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800130e:	2301      	movs	r3, #1
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <HAL_TIM_MspPostInit+0x1c0>)
 800131a:	f000 fa37 	bl	800178c <HAL_GPIO_Init>
}
 800131e:	e021      	b.n	8001364 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_TIM_MspPostInit+0x1cc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11c      	bne.n	8001364 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_TIM_MspPostInit+0x1b8>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001352:	2301      	movs	r3, #1
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f000 fa14 	bl	800178c <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	3738      	adds	r7, #56	; 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40012c00 	.word	0x40012c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40000400 	.word	0x40000400
 8001378:	48000400 	.word	0x48000400
 800137c:	40014000 	.word	0x40014000
 8001380:	40014400 	.word	0x40014400
 8001384:	40014800 	.word	0x40014800

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 f8a8 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <USB_LP_IRQHandler+0x10>)
 80013ea:	f000 fc8a 	bl	8001d02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20001344 	.word	0x20001344

080013f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <TIM7_IRQHandler+0x10>)
 80013fe:	f003 f9ce 	bl	800479e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000654 	.word	0x20000654

0800140c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <SystemInit+0x28>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <SystemInit+0x28>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SystemInit+0x28>)
 8001422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001426:	609a      	str	r2, [r3, #8]
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800143a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <LoopForever+0x6>)
  ldr r1, =_edata
 800143e:	490e      	ldr	r1, [pc, #56]	; (8001478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <LoopForever+0xe>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001454:	4c0b      	ldr	r4, [pc, #44]	; (8001484 <LoopForever+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001462:	f7ff ffd3 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f008 fb07 	bl	8009a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146a:	f7fe fef5 	bl	8000258 <main>

0800146e <LoopForever>:

LoopForever:
    b LoopForever
 800146e:	e7fe      	b.n	800146e <LoopForever>
  ldr   r0, =_estack
 8001470:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800147c:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 8001480:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001484:	20001638 	.word	0x20001638

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>

0800148a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f939 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149a:	2000      	movs	r0, #0
 800149c:	f000 f80e 	bl	80014bc <HAL_InitTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	e001      	b.n	80014b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ac:	f7ff fd08 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b0:	79fb      	ldrb	r3, [r7, #7]

}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_InitTick+0x68>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d022      	beq.n	8001516 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_InitTick+0x6c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_InitTick+0x68>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f944 	bl	8001772 <HAL_SYSTICK_Config>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10f      	bne.n	8001510 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d809      	bhi.n	800150a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f6:	2200      	movs	r2, #0
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	f04f 30ff 	mov.w	r0, #4294967295
 80014fe:	f000 f910 	bl	8001722 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_InitTick+0x70>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e007      	b.n	800151a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e004      	b.n	800151a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e001      	b.n	800151a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000008 	.word	0x20000008
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x1c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x20>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4413      	add	r3, r2
 800153e:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x1c>)
 8001540:	6013      	str	r3, [r2, #0]
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	200006a0 	.word	0x200006a0
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200006a0 	.word	0x200006a0

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff40 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff90 	bl	8001660 <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5f 	bl	800160c <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff33 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa4 	bl	80016c8 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800179a:	e15a      	b.n	8001a52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 814c 	beq.w	8001a4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d00b      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 0201 	and.w	r2, r3, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0xea>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b12      	cmp	r3, #18
 8001874:	d123      	bne.n	80018be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	6939      	ldr	r1, [r7, #16]
 80018ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0203 	and.w	r2, r3, #3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80a6 	beq.w	8001a4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001900:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_GPIO_Init+0x2e4>)
 8001902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001904:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <HAL_GPIO_Init+0x2e4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6613      	str	r3, [r2, #96]	; 0x60
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <HAL_GPIO_Init+0x2e4>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001918:	4a56      	ldr	r2, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x2e8>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001942:	d01f      	beq.n	8001984 <HAL_GPIO_Init+0x1f8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <HAL_GPIO_Init+0x2ec>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d019      	beq.n	8001980 <HAL_GPIO_Init+0x1f4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_GPIO_Init+0x2f0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_GPIO_Init+0x1f0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x2f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1ec>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1e8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_GPIO_Init+0x2fc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1e4>
 800196c:	2305      	movs	r3, #5
 800196e:	e00a      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001970:	2306      	movs	r3, #6
 8001972:	e008      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001974:	2304      	movs	r3, #4
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001978:	2303      	movs	r3, #3
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1fa>
 8001984:	2300      	movs	r3, #0
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001996:	4937      	ldr	r1, [pc, #220]	; (8001a74 <HAL_GPIO_Init+0x2e8>)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_GPIO_Init+0x300>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c8:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <HAL_GPIO_Init+0x300>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_GPIO_Init+0x300>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f2:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_GPIO_Init+0x300>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_GPIO_Init+0x300>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x300>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_GPIO_Init+0x300>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_GPIO_Init+0x300>)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f ae9d 	bne.w	800179c <HAL_GPIO_Init+0x10>
  }
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	48001000 	.word	0x48001000
 8001a88:	48001400 	.word	0x48001400
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43d9      	mvns	r1, r3
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af06      	add	r7, sp, #24
 8001afa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0d7      	b.n	8001cb6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f007 fcbc 	bl	8009498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2203      	movs	r2, #3
 8001b24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fe18 	bl	8005762 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e04c      	b.n	8001bd2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3301      	adds	r3, #1
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	b298      	uxth	r0, r3
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	3336      	adds	r3, #54	; 0x36
 8001b76:	4602      	mov	r2, r0
 8001b78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3338      	adds	r3, #56	; 0x38
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	333c      	adds	r3, #60	; 0x3c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3340      	adds	r3, #64	; 0x40
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3ad      	bcc.n	8001b38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e044      	b.n	8001c6c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3b5      	bcc.n	8001be2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	687e      	ldr	r6, [r7, #4]
 8001c7e:	466d      	mov	r5, sp
 8001c80:	f106 0410 	add.w	r4, r6, #16
 8001c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	602b      	str	r3, [r5, #0]
 8001c8c:	1d33      	adds	r3, r6, #4
 8001c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f003 fd81 	bl	8005798 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f001 fa5e 	bl	8003170 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_PCD_Start+0x16>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e012      	b.n	8001cfa <HAL_PCD_Start+0x3c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fd27 	bl	8005734 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fd13 	bl	8007716 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f005 fd18 	bl	8007744 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1e:	d102      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fb5b 	bl	80023dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 fd0a 	bl	8007744 <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3a:	d112      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f007 fc1a 	bl	800958e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f91e 	bl	8001f9e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fcec 	bl	8007744 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d76:	d10b      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fcd5 	bl	8007744 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da4:	d10b      	bne.n	8001dbe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db8:	b292      	uxth	r2, r2
 8001dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 fcbe 	bl	8007744 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd2:	d133      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0204 	bic.w	r2, r2, #4
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0208 	bic.w	r2, r2, #8
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e16:	2100      	movs	r1, #0
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f007 fdad 	bl	8009978 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f007 fbee 	bl	8009600 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e36:	b292      	uxth	r2, r2
 8001e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 fc7f 	bl	8007744 <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e50:	d126      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0208 	orr.w	r2, r2, #8
 8001e64:	b292      	uxth	r2, r2
 8001e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0204 	orr.w	r2, r2, #4
 8001e94:	b292      	uxth	r2, r2
 8001e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f007 fb96 	bl	80095cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f005 fc4d 	bl	8007744 <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d13f      	bne.n	8001f34 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d12b      	bne.n	8001f2e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0204 	orr.w	r2, r2, #4
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0208 	orr.w	r2, r2, #8
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f24:	2101      	movs	r1, #1
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f007 fd26 	bl	8009978 <HAL_PCDEx_LPM_Callback>
 8001f2c:	e002      	b.n	8001f34 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f007 fb4c 	bl	80095cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f005 fc03 	bl	8007744 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f48:	d10e      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f007 fb05 	bl	8009572 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f005 fbe9 	bl	8007744 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f7c:	d10b      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_PCD_SetAddress+0x1a>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e013      	b.n	8001fe0 <HAL_PCD_SetAddress+0x42>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f005 fb8c 	bl	80076ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	70fb      	strb	r3, [r7, #3]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	803b      	strh	r3, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	da0e      	bge.n	800202c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	705a      	strb	r2, [r3, #1]
 800202a:	e00e      	b.n	800204a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0207 	and.w	r2, r3, #7
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002056:	883a      	ldrh	r2, [r7, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	78ba      	ldrb	r2, [r7, #2]
 8002060:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002074:	78bb      	ldrb	r3, [r7, #2]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d102      	bne.n	8002080 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_PCD_EP_Open+0xa6>
 800208a:	2302      	movs	r3, #2
 800208c:	e00e      	b.n	80020ac <HAL_PCD_EP_Open+0xc4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fb9d 	bl	80057dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020aa:	7afb      	ldrb	r3, [r7, #11]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	da0e      	bge.n	80020e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2201      	movs	r2, #1
 80020e2:	705a      	strb	r2, [r3, #1]
 80020e4:	e00e      	b.n	8002104 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 0207 	and.w	r2, r3, #7
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	b2da      	uxtb	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_PCD_EP_Close+0x6a>
 800211a:	2302      	movs	r3, #2
 800211c:	e00e      	b.n	800213c <HAL_PCD_EP_Close+0x88>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fec3 	bl	8005eb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	460b      	mov	r3, r1
 8002152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	f003 0207 	and.w	r2, r3, #7
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2200      	movs	r2, #0
 8002182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002184:	7afb      	ldrb	r3, [r7, #11]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	b2da      	uxtb	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f876 	bl	8006292 <USB_EPStartXfer>
 80021a6:	e005      	b.n	80021b4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 f86f 	bl	8006292 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0207 	and.w	r2, r3, #7
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021e0:	681b      	ldr	r3, [r3, #0]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	460b      	mov	r3, r1
 80021fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2201      	movs	r2, #1
 8002238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800223a:	7afb      	ldrb	r3, [r7, #11]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	b2da      	uxtb	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f81b 	bl	8006292 <USB_EPStartXfer>
 800225c:	e005      	b.n	800226a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6979      	ldr	r1, [r7, #20]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f814 	bl	8006292 <USB_EPStartXfer>
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	d901      	bls.n	8002292 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e04c      	b.n	800232c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da0e      	bge.n	80022b8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	705a      	strb	r2, [r3, #1]
 80022b6:	e00c      	b.n	80022d2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_SetStall+0x7e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e01c      	b.n	800232c <HAL_PCD_EP_SetStall+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f005 f8f5 	bl	80074f0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	2b00      	cmp	r3, #0
 800230e:	d108      	bne.n	8002322 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f005 fa21 	bl	8007764 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d901      	bls.n	8002352 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e040      	b.n	80023d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da0e      	bge.n	8002378 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	705a      	strb	r2, [r3, #1]
 8002376:	e00e      	b.n	8002396 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 0207 	and.w	r2, r3, #7
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_EP_ClrStall+0x82>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e00e      	b.n	80023d4 <HAL_PCD_EP_ClrStall+0xa0>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f005 f8e4 	bl	8007592 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023e4:	e2d1      	b.n	800298a <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8152 	bne.w	80026aa <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d150      	bne.n	80024b2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800241c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002420:	81fb      	strh	r3, [r7, #14]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002430:	b29b      	uxth	r3, r3
 8002432:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3328      	adds	r3, #40	; 0x28
 8002438:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002442:	b29b      	uxth	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	4413      	add	r3, r2
 8002454:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	441a      	add	r2, r3
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002470:	2100      	movs	r1, #0
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f007 f863 	bl	800953e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8282 	beq.w	800298a <PCD_EP_ISR_Handler+0x5ae>
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 827d 	bne.w	800298a <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800249c:	b2da      	uxtb	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b292      	uxth	r2, r2
 80024a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024b0:	e26b      	b.n	800298a <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d032      	beq.n	8002532 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002506:	b29b      	uxth	r3, r3
 8002508:	f005 f979 	bl	80077fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002518:	4013      	ands	r3, r2
 800251a:	823b      	strh	r3, [r7, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	8a3a      	ldrh	r2, [r7, #16]
 8002522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002526:	b292      	uxth	r2, r2
 8002528:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f006 ffda 	bl	80094e4 <HAL_PCD_SetupStageCallback>
 8002530:	e22b      	b.n	800298a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002532:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002536:	2b00      	cmp	r3, #0
 8002538:	f280 8227 	bge.w	800298a <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	83bb      	strh	r3, [r7, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	8bba      	ldrh	r2, [r7, #28]
 8002552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002556:	b292      	uxth	r2, r2
 8002558:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	4413      	add	r3, r2
 8002574:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d019      	beq.n	80025be <PCD_EP_ISR_Handler+0x1e2>
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d015      	beq.n	80025be <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	6959      	ldr	r1, [r3, #20]
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f005 f92b 	bl	80077fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	441a      	add	r2, r3
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025b6:	2100      	movs	r1, #0
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f006 ffa5 	bl	8009508 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d112      	bne.n	800260c <PCD_EP_ISR_Handler+0x230>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002604:	b29a      	uxth	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e02f      	b.n	800266c <PCD_EP_ISR_Handler+0x290>
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b3e      	cmp	r3, #62	; 0x3e
 8002612:	d813      	bhi.n	800263c <PCD_EP_ISR_Handler+0x260>
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <PCD_EP_ISR_Handler+0x252>
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	3301      	adds	r3, #1
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	b29b      	uxth	r3, r3
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	e017      	b.n	800266c <PCD_EP_ISR_Handler+0x290>
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <PCD_EP_ISR_Handler+0x27a>
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	3b01      	subs	r3, #1
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	b29b      	uxth	r3, r3
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	b29b      	uxth	r3, r3
 800265e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002666:	b29a      	uxth	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	827b      	strh	r3, [r7, #18]
 800267e:	8a7b      	ldrh	r3, [r7, #18]
 8002680:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002684:	827b      	strh	r3, [r7, #18]
 8002686:	8a7b      	ldrh	r3, [r7, #18]
 8002688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800268c:	827b      	strh	r3, [r7, #18]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	8a7b      	ldrh	r3, [r7, #18]
 8002694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8013      	strh	r3, [r2, #0]
 80026a8:	e16f      	b.n	800298a <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f280 80e4 	bge.w	800288e <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026dc:	4013      	ands	r3, r2
 80026de:	853b      	strh	r3, [r7, #40]	; 0x28
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f4:	b292      	uxth	r2, r2
 80026f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	7b1b      	ldrb	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d120      	bne.n	8002758 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4413      	add	r3, r2
 8002730:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800273c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8083 	beq.w	800284a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	6959      	ldr	r1, [r3, #20]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	88da      	ldrh	r2, [r3, #6]
 8002750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002752:	f005 f854 	bl	80077fe <USB_ReadPMA>
 8002756:	e078      	b.n	800284a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	78db      	ldrb	r3, [r3, #3]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d108      	bne.n	8002772 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002760:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002762:	461a      	mov	r2, r3
 8002764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f91d 	bl	80029a6 <HAL_PCD_EP_DB_Receive>
 800276c:	4603      	mov	r3, r0
 800276e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002770:	e06b      	b.n	800284a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	847b      	strh	r3, [r7, #34]	; 0x22
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800279e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01f      	beq.n	800280c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d028      	beq.n	800284a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	6959      	ldr	r1, [r3, #20]
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	891a      	ldrh	r2, [r3, #8]
 8002804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002806:	f004 fffa 	bl	80077fe <USB_ReadPMA>
 800280a:	e01e      	b.n	800284a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002830:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	6959      	ldr	r1, [r3, #20]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	895a      	ldrh	r2, [r3, #10]
 8002844:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002846:	f004 ffda 	bl	80077fe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002850:	441a      	add	r2, r3
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800285c:	441a      	add	r2, r3
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <PCD_EP_ISR_Handler+0x498>
 800286a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d206      	bcs.n	8002882 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f006 fe44 	bl	8009508 <HAL_PCD_DataOutStageCallback>
 8002880:	e005      	b.n	800288e <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002888:	4618      	mov	r0, r3
 800288a:	f003 fd02 	bl	8006292 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800288e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d078      	beq.n	800298a <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002898:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	843b      	strh	r3, [r7, #32]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	8c3b      	ldrh	r3, [r7, #32]
 80028d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	78db      	ldrb	r3, [r3, #3]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d108      	bne.n	80028fe <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d144      	bne.n	800297e <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d13f      	bne.n	800297e <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002906:	b29b      	uxth	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	4413      	add	r3, r2
 8002918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002922:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	8bfb      	ldrh	r3, [r7, #30]
 800292a:	429a      	cmp	r2, r3
 800292c:	d906      	bls.n	800293c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	8bfb      	ldrh	r3, [r7, #30]
 8002934:	1ad2      	subs	r2, r2, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	e002      	b.n	8002942 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f006 fdf4 	bl	800953e <HAL_PCD_DataInStageCallback>
 8002956:	e018      	b.n	800298a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	8bfb      	ldrh	r3, [r7, #30]
 800295e:	441a      	add	r2, r3
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	8bfb      	ldrh	r3, [r7, #30]
 800296a:	441a      	add	r2, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fc8b 	bl	8006292 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800297c:	e005      	b.n	800298a <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800297e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002980:	461a      	mov	r2, r3
 8002982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f917 	bl	8002bb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002992:	b29b      	uxth	r3, r3
 8002994:	b21b      	sxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	f6ff ad25 	blt.w	80023e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3738      	adds	r7, #56	; 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d07c      	beq.n	8002ab8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	8b7b      	ldrh	r3, [r7, #26]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d306      	bcc.n	80029fc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	8b7b      	ldrh	r3, [r7, #26]
 80029f4:	1ad2      	subs	r2, r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	619a      	str	r2, [r3, #24]
 80029fa:	e002      	b.n	8002a02 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d123      	bne.n	8002a52 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a24:	833b      	strh	r3, [r7, #24]
 8002a26:	8b3b      	ldrh	r3, [r7, #24]
 8002a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a2c:	833b      	strh	r3, [r7, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	8b3b      	ldrh	r3, [r7, #24]
 8002a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01f      	beq.n	8002a9c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	82fb      	strh	r3, [r7, #22]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	8afb      	ldrh	r3, [r7, #22]
 8002a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a9c:	8b7b      	ldrh	r3, [r7, #26]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8085 	beq.w	8002bae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6959      	ldr	r1, [r3, #20]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	891a      	ldrh	r2, [r3, #8]
 8002ab0:	8b7b      	ldrh	r3, [r7, #26]
 8002ab2:	f004 fea4 	bl	80077fe <USB_ReadPMA>
 8002ab6:	e07a      	b.n	8002bae <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002adc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	8b7b      	ldrh	r3, [r7, #26]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d306      	bcc.n	8002af6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	8b7b      	ldrh	r3, [r7, #26]
 8002aee:	1ad2      	subs	r2, r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	619a      	str	r2, [r3, #24]
 8002af4:	e002      	b.n	8002afc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d123      	bne.n	8002b4c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	83fb      	strh	r3, [r7, #30]
 8002b20:	8bfb      	ldrh	r3, [r7, #30]
 8002b22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b26:	83fb      	strh	r3, [r7, #30]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	8bfb      	ldrh	r3, [r7, #30]
 8002b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11f      	bne.n	8002b96 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	83bb      	strh	r3, [r7, #28]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	8bbb      	ldrh	r3, [r7, #28]
 8002b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b96:	8b7b      	ldrh	r3, [r7, #26]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	6959      	ldr	r1, [r3, #20]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	895a      	ldrh	r2, [r3, #10]
 8002ba8:	8b7b      	ldrh	r3, [r7, #26]
 8002baa:	f004 fe28 	bl	80077fe <USB_ReadPMA>
    }
  }

  return count;
 8002bae:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b092      	sub	sp, #72	; 0x48
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8130 	beq.w	8002e32 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d906      	bls.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	619a      	str	r2, [r3, #24]
 8002c0e:	e002      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d12c      	bne.n	8002c78 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f006 fc8a 	bl	800953e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 822d 	beq.w	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c50:	827b      	strh	r3, [r7, #18]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	8a7b      	ldrh	r3, [r7, #18]
 8002c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	8013      	strh	r3, [r2, #0]
 8002c76:	e20b      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01f      	beq.n	8002cc2 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	441a      	add	r2, r3
 8002cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	f040 81e1 	bne.w	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce0:	441a      	add	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d309      	bcc.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a1a      	ldr	r2, [r3, #32]
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	1ad2      	subs	r2, r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	621a      	str	r2, [r3, #32]
 8002d04:	e014      	b.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d1a:	e009      	b.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d155      	bne.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	00da      	lsls	r2, r3, #3
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d112      	bne.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	801a      	strh	r2, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	e047      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x264>
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d90:	d811      	bhi.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	3301      	adds	r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e032      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x264>
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x214>
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	029b      	lsls	r3, r3, #10
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	e01b      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x264>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	785b      	ldrb	r3, [r3, #1]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d117      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x264>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	4413      	add	r3, r2
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	00da      	lsls	r2, r3, #3
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	6959      	ldr	r1, [r3, #20]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	891a      	ldrh	r2, [r3, #8]
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f004 fca6 	bl	800777c <USB_WritePMA>
 8002e30:	e12e      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e56:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d306      	bcc.n	8002e70 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e68:	1ad2      	subs	r2, r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	619a      	str	r2, [r3, #24]
 8002e6e:	e002      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d12c      	bne.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f006 fb5a 	bl	800953e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 80fd 	bne.w	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
 8002ed6:	e0db      	b.n	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11f      	bne.n	8002f22 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	f040 80b1 	bne.w	8003090 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f34:	441a      	add	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f40:	441a      	add	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d309      	bcc.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	1ad2      	subs	r2, r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	621a      	str	r2, [r3, #32]
 8002f64:	e014      	b.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f7a:	e009      	b.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d155      	bne.n	800304a <HAL_PCD_EP_DB_Transmit+0x492>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb2:	4413      	add	r3, r2
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	00da      	lsls	r2, r3, #3
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d112      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e044      	b.n	800307c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8002ff6:	d811      	bhi.n	800301c <HAL_PCD_EP_DB_Transmit+0x464>
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_PCD_EP_DB_Transmit+0x456>
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	3301      	adds	r3, #1
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	b29b      	uxth	r3, r3
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	b29a      	uxth	r2, r3
 8003016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	e02f      	b.n	800307c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <HAL_PCD_EP_DB_Transmit+0x47a>
 800302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302e:	3b01      	subs	r3, #1
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003034:	b29b      	uxth	r3, r3
 8003036:	029b      	lsls	r3, r3, #10
 8003038:	b29b      	uxth	r3, r3
 800303a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003042:	b29a      	uxth	r2, r3
 8003044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	e018      	b.n	800307c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d114      	bne.n	800307c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	4413      	add	r3, r2
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	00da      	lsls	r2, r3, #3
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	4413      	add	r3, r2
 800306e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	b29a      	uxth	r2, r3
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6959      	ldr	r1, [r3, #20]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	895a      	ldrh	r2, [r3, #10]
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	b29b      	uxth	r3, r3
 800308c:	f004 fb76 	bl	800777c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030aa:	823b      	strh	r3, [r7, #16]
 80030ac:	8a3b      	ldrh	r3, [r7, #16]
 80030ae:	f083 0310 	eor.w	r3, r3, #16
 80030b2:	823b      	strh	r3, [r7, #16]
 80030b4:	8a3b      	ldrh	r3, [r7, #16]
 80030b6:	f083 0320 	eor.w	r3, r3, #32
 80030ba:	823b      	strh	r3, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	8a3b      	ldrh	r3, [r7, #16]
 80030cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3748      	adds	r7, #72	; 0x48
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b087      	sub	sp, #28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	817b      	strh	r3, [r7, #10]
 80030f8:	4613      	mov	r3, r2
 80030fa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003108:	897b      	ldrh	r3, [r7, #10]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e009      	b.n	8003134 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003120:	897a      	ldrh	r2, [r7, #10]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	b29a      	uxth	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	80da      	strh	r2, [r3, #6]
 8003148:	e00b      	b.n	8003162 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2201      	movs	r2, #1
 800314e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	b29a      	uxth	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	b29a      	uxth	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003194:	b29b      	uxth	r3, r3
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d141      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031d2:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d131      	bne.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031e0:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e6:	4a46      	ldr	r2, [pc, #280]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f8:	4a41      	ldr	r2, [pc, #260]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003200:	4b40      	ldr	r3, [pc, #256]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2232      	movs	r2, #50	; 0x32
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a3f      	ldr	r2, [pc, #252]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	0c9b      	lsrs	r3, r3, #18
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003216:	e002      	b.n	800321e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d102      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f2      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003232:	4b33      	ldr	r3, [pc, #204]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d158      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e057      	b.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003244:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324a:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003254:	e04d      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d141      	bne.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d131      	bne.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2232      	movs	r2, #50	; 0x32
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0c9b      	lsrs	r3, r3, #18
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a2:	e002      	b.n	80032aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d102      	bne.n	80032be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f2      	bne.n	80032a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d112      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e011      	b.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032e0:	e007      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ea:	4a05      	ldr	r2, [pc, #20]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40007000 	.word	0x40007000
 8003304:	20000000 	.word	0x20000000
 8003308:	431bde83 	.word	0x431bde83

0800330c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800331a:	6093      	str	r3, [r2, #8]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e308      	b.n	8003950 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d075      	beq.n	8003436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334a:	4ba3      	ldr	r3, [pc, #652]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003354:	4ba0      	ldr	r3, [pc, #640]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d102      	bne.n	800336a <HAL_RCC_OscConfig+0x3e>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d002      	beq.n	8003370 <HAL_RCC_OscConfig+0x44>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b99      	ldr	r3, [pc, #612]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e2e3      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x74>
 8003392:	4b91      	ldr	r3, [pc, #580]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a90      	ldr	r2, [pc, #576]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033aa:	4b8b      	ldr	r3, [pc, #556]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a8a      	ldr	r2, [pc, #552]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a87      	ldr	r2, [pc, #540]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033c4:	4b84      	ldr	r3, [pc, #528]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a83      	ldr	r2, [pc, #524]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a80      	ldr	r2, [pc, #512]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe f8b6 	bl	8001554 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe f8b2 	bl	8001554 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e2a8      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe f8a2 	bl	8001554 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe f89e 	bl	8001554 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e294      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d075      	beq.n	800352e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344c:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d102      	bne.n	8003462 <HAL_RCC_OscConfig+0x136>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d002      	beq.n	8003468 <HAL_RCC_OscConfig+0x13c>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d11f      	bne.n	80034a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x154>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e267      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	4952      	ldr	r1, [pc, #328]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003494:	4b51      	ldr	r3, [pc, #324]	; (80035dc <HAL_RCC_OscConfig+0x2b0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe f80f 	bl	80014bc <HAL_InitTick>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d043      	beq.n	800352c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e253      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a48      	ldr	r2, [pc, #288]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe f84a 	bl	8001554 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c4:	f7fe f846 	bl	8001554 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e23c      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d6:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	4939      	ldr	r1, [pc, #228]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
 80034f6:	e01a      	b.n	800352e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a36      	ldr	r2, [pc, #216]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe f826 	bl	8001554 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350c:	f7fe f822 	bl	8001554 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e218      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1e0>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01c      	beq.n	800357c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003548:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fd ffff 	bl	8001554 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355a:	f7fd fffb 	bl	8001554 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e1f1      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0ef      	beq.n	800355a <HAL_RCC_OscConfig+0x22e>
 800357a:	e01b      	b.n	80035b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fd ffe2 	bl	8001554 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003594:	f7fd ffde 	bl	8001554 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1d4      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ef      	bne.n	8003594 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80ab 	beq.w	8003718 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2b4>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e005      	b.n	80035e2 <HAL_RCC_OscConfig+0x2b6>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	20000004 	.word	0x20000004
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4baf      	ldr	r3, [pc, #700]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	4aae      	ldr	r2, [pc, #696]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6593      	str	r3, [r2, #88]	; 0x58
 80035f2:	4bac      	ldr	r3, [pc, #688]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003602:	4ba9      	ldr	r3, [pc, #676]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360e:	4ba6      	ldr	r3, [pc, #664]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4aa5      	ldr	r2, [pc, #660]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fd ff9b 	bl	8001554 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fd ff97 	bl	8001554 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e18d      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003634:	4b9c      	ldr	r3, [pc, #624]	; (80038a8 <HAL_RCC_OscConfig+0x57c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d108      	bne.n	800365a <HAL_RCC_OscConfig+0x32e>
 8003648:	4b96      	ldr	r3, [pc, #600]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a95      	ldr	r2, [pc, #596]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003658:	e024      	b.n	80036a4 <HAL_RCC_OscConfig+0x378>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d110      	bne.n	8003684 <HAL_RCC_OscConfig+0x358>
 8003662:	4b90      	ldr	r3, [pc, #576]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	4a8e      	ldr	r2, [pc, #568]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003672:	4b8c      	ldr	r3, [pc, #560]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a8a      	ldr	r2, [pc, #552]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003682:	e00f      	b.n	80036a4 <HAL_RCC_OscConfig+0x378>
 8003684:	4b87      	ldr	r3, [pc, #540]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a86      	ldr	r2, [pc, #536]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003694:	4b83      	ldr	r3, [pc, #524]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	4a82      	ldr	r2, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d016      	beq.n	80036da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fd ff52 	bl	8001554 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b4:	f7fd ff4e 	bl	8001554 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e142      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ed      	beq.n	80036b4 <HAL_RCC_OscConfig+0x388>
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd ff3b 	bl	8001554 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd ff37 	bl	8001554 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e12b      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1ed      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	4a64      	ldr	r2, [pc, #400]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003716:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d03c      	beq.n	800379e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01c      	beq.n	8003766 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800372c:	4b5d      	ldr	r3, [pc, #372]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800372e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003732:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd ff0a 	bl	8001554 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003744:	f7fd ff06 	bl	8001554 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0fc      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003756:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ef      	beq.n	8003744 <HAL_RCC_OscConfig+0x418>
 8003764:	e01b      	b.n	800379e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003766:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800376c:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fd feed 	bl	8001554 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800377e:	f7fd fee9 	bl	8001554 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0df      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003790:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ef      	bne.n	800377e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80d3 	beq.w	800394e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a8:	4b3e      	ldr	r3, [pc, #248]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	f000 808d 	beq.w	80038d0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d15a      	bne.n	8003874 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a38      	ldr	r2, [pc, #224]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fec3 	bl	8001554 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fd febf 	bl	8001554 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0b5      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_RCC_OscConfig+0x580>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6a11      	ldr	r1, [r2, #32]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003800:	3a01      	subs	r2, #1
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800380a:	0212      	lsls	r2, r2, #8
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003812:	0852      	lsrs	r2, r2, #1
 8003814:	3a01      	subs	r2, #1
 8003816:	0552      	lsls	r2, r2, #21
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800382a:	06d2      	lsls	r2, r2, #27
 800382c:	430a      	orrs	r2, r1
 800382e:	491d      	ldr	r1, [pc, #116]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fd fe82 	bl	8001554 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fd fe7e 	bl	8001554 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e074      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x528>
 8003872:	e06c      	b.n	800394e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800387a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_RCC_OscConfig+0x578>)
 8003892:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd fe5a 	bl	8001554 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a2:	e00e      	b.n	80038c2 <HAL_RCC_OscConfig+0x596>
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fe50 	bl	8001554 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e046      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c2:	4b25      	ldr	r3, [pc, #148]	; (8003958 <HAL_RCC_OscConfig+0x62c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x584>
 80038ce:	e03e      	b.n	800394e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e039      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <HAL_RCC_OscConfig+0x62c>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0203 	and.w	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d12c      	bne.n	800394a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d123      	bne.n	800394a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d11b      	bne.n	800394a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d113      	bne.n	800394a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	3b01      	subs	r3, #1
 8003930:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d109      	bne.n	800394a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e11e      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b91      	ldr	r3, [pc, #580]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d910      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b8e      	ldr	r3, [pc, #568]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 020f 	bic.w	r2, r3, #15
 800398a:	498c      	ldr	r1, [pc, #560]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b8a      	ldr	r3, [pc, #552]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e106      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d073      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d129      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b8:	4b81      	ldr	r3, [pc, #516]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0f4      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039c8:	f000 f966 	bl	8003c98 <RCC_GetSysClockFreqFromPLLSource>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4a7c      	ldr	r2, [pc, #496]	; (8003bc4 <HAL_RCC_ClockConfig+0x268>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d93f      	bls.n	8003a56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039d6:	4b7a      	ldr	r3, [pc, #488]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d033      	beq.n	8003a56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d12f      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039f6:	4b72      	ldr	r3, [pc, #456]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fe:	4a70      	ldr	r2, [pc, #448]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e024      	b.n	8003a56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0c6      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0be      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a34:	f000 f8ce 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4a61      	ldr	r2, [pc, #388]	; (8003bc4 <HAL_RCC_ClockConfig+0x268>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d909      	bls.n	8003a56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a42:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4a:	4a5d      	ldr	r2, [pc, #372]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b5a      	ldr	r3, [pc, #360]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4957      	ldr	r1, [pc, #348]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7fd fd74 	bl	8001554 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd fd70 	bl	8001554 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e095      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b4e      	ldr	r3, [pc, #312]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d023      	beq.n	8003aec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a42      	ldr	r2, [pc, #264]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ac8:	4b3d      	ldr	r3, [pc, #244]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ad0:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4936      	ldr	r1, [pc, #216]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
 8003aea:	e008      	b.n	8003afe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b80      	cmp	r3, #128	; 0x80
 8003af0:	d105      	bne.n	8003afe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003af2:	4b33      	ldr	r3, [pc, #204]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4a32      	ldr	r2, [pc, #200]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afe:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d21d      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 020f 	bic.w	r2, r3, #15
 8003b14:	4929      	ldr	r1, [pc, #164]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fd1a 	bl	8001554 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fd fd16 	bl	8001554 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e03b      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1ed      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4917      	ldr	r1, [pc, #92]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490f      	ldr	r1, [pc, #60]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b86:	f000 f825 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <HAL_RCC_ClockConfig+0x26c>)
 8003b98:	5cd3      	ldrb	r3, [r2, r3]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_RCC_ClockConfig+0x270>)
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x274>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fc86 	bl	80014bc <HAL_InitTick>
 8003bb0:	4603      	mov	r3, r0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	04c4b400 	.word	0x04c4b400
 8003bc8:	08009b48 	.word	0x08009b48
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bda:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d102      	bne.n	8003bec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003be6:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e047      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bec:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bf8:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e03e      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d136      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c28:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c32:	68d2      	ldr	r2, [r2, #12]
 8003c34:	0a12      	lsrs	r2, r2, #8
 8003c36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c42:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4c:	68d2      	ldr	r2, [r2, #12]
 8003c4e:	0a12      	lsrs	r2, r2, #8
 8003c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]
      break;
 8003c5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0e5b      	lsrs	r3, r3, #25
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e001      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c7c:	693b      	ldr	r3, [r7, #16]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d10c      	bne.n	8003cd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cbc:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cc6:	68d2      	ldr	r2, [r2, #12]
 8003cc8:	0a12      	lsrs	r2, r2, #8
 8003cca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	617b      	str	r3, [r7, #20]
    break;
 8003cd4:	e00c      	b.n	8003cf0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	0a12      	lsrs	r2, r2, #8
 8003ce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
    break;
 8003cee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0e5b      	lsrs	r3, r3, #25
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d0a:	687b      	ldr	r3, [r7, #4]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	007a1200 	.word	0x007a1200
 8003d20:	00f42400 	.word	0x00f42400

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8098 	beq.w	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6e:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a39      	ldr	r2, [pc, #228]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7a:	f7fd fbeb 	bl	8001554 <HAL_GetTick>
 8003d7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d80:	e009      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fd fbe7 	bl	8001554 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d902      	bls.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	74fb      	strb	r3, [r7, #19]
        break;
 8003d94:	e005      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ef      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d159      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da8:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d019      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc4:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de0:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df0:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fd fba7 	bl	8001554 <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e08:	e00b      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fd fba3 	bl	8001554 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d902      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ec      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e4c:	e008      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	74bb      	strb	r3, [r7, #18]
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e60:	7c7b      	ldrb	r3, [r7, #17]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4ba6      	ldr	r3, [pc, #664]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	4aa5      	ldr	r2, [pc, #660]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7e:	4ba0      	ldr	r3, [pc, #640]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f023 0203 	bic.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	499c      	ldr	r1, [pc, #624]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea0:	4b97      	ldr	r3, [pc, #604]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 020c 	bic.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4994      	ldr	r1, [pc, #592]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec2:	4b8f      	ldr	r3, [pc, #572]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	498b      	ldr	r1, [pc, #556]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee4:	4b86      	ldr	r3, [pc, #536]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4983      	ldr	r1, [pc, #524]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f06:	4b7e      	ldr	r3, [pc, #504]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	497a      	ldr	r1, [pc, #488]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f28:	4b75      	ldr	r3, [pc, #468]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	4972      	ldr	r1, [pc, #456]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4969      	ldr	r1, [pc, #420]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4961      	ldr	r1, [pc, #388]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8e:	4b5c      	ldr	r3, [pc, #368]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	4958      	ldr	r1, [pc, #352]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb0:	4b53      	ldr	r3, [pc, #332]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	4950      	ldr	r1, [pc, #320]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d105      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd0:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a4a      	ldr	r2, [pc, #296]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fe8:	4b45      	ldr	r3, [pc, #276]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	4942      	ldr	r1, [pc, #264]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b3d      	ldr	r3, [pc, #244]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a3c      	ldr	r2, [pc, #240]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004020:	4b37      	ldr	r3, [pc, #220]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4934      	ldr	r1, [pc, #208]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800403e:	d105      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004058:	4b29      	ldr	r3, [pc, #164]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	4926      	ldr	r1, [pc, #152]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004076:	d105      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a20      	ldr	r2, [pc, #128]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	4918      	ldr	r1, [pc, #96]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ae:	d105      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a12      	ldr	r2, [pc, #72]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d015      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	490a      	ldr	r1, [pc, #40]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000

08004104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e049      	b.n	80041aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fff6 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fde2 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04a      	b.n	8004262 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a21      	ldr	r2, [pc, #132]	; (8004270 <HAL_TIM_Base_Start_IT+0xbc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d013      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1d      	ldr	r2, [pc, #116]	; (8004274 <HAL_TIM_Base_Start_IT+0xc0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <HAL_TIM_Base_Start_IT+0xc4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1a      	ldr	r2, [pc, #104]	; (800427c <HAL_TIM_Base_Start_IT+0xc8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_Base_Start_IT+0x6c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_TIM_Base_Start_IT+0xcc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d115      	bne.n	800424c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_TIM_Base_Start_IT+0xd0>)
 8004228:	4013      	ands	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b06      	cmp	r3, #6
 8004230:	d015      	beq.n	800425e <HAL_TIM_Base_Start_IT+0xaa>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d011      	beq.n	800425e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	e008      	b.n	800425e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e000      	b.n	8004260 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800
 800427c:	40013400 	.word	0x40013400
 8004280:	40014000 	.word	0x40014000
 8004284:	00010007 	.word	0x00010007

08004288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e049      	b.n	800432e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc fe2a 	bl	8000f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 fd20 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_TIM_PWM_Start+0x24>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	bf14      	ite	ne
 8004354:	2301      	movne	r3, #1
 8004356:	2300      	moveq	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e03c      	b.n	80043d6 <HAL_TIM_PWM_Start+0x9e>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d109      	bne.n	8004376 <HAL_TIM_PWM_Start+0x3e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	e02f      	b.n	80043d6 <HAL_TIM_PWM_Start+0x9e>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b08      	cmp	r3, #8
 800437a:	d109      	bne.n	8004390 <HAL_TIM_PWM_Start+0x58>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	e022      	b.n	80043d6 <HAL_TIM_PWM_Start+0x9e>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d109      	bne.n	80043aa <HAL_TIM_PWM_Start+0x72>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e015      	b.n	80043d6 <HAL_TIM_PWM_Start+0x9e>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d109      	bne.n	80043c4 <HAL_TIM_PWM_Start+0x8c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	bf14      	ite	ne
 80043bc:	2301      	movne	r3, #1
 80043be:	2300      	moveq	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e008      	b.n	80043d6 <HAL_TIM_PWM_Start+0x9e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e097      	b.n	800450e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_PWM_Start+0xb6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ec:	e023      	b.n	8004436 <HAL_TIM_PWM_Start+0xfe>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start+0xc6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	e01b      	b.n	8004436 <HAL_TIM_PWM_Start+0xfe>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0xd6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440c:	e013      	b.n	8004436 <HAL_TIM_PWM_Start+0xfe>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xe6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800441c:	e00b      	b.n	8004436 <HAL_TIM_PWM_Start+0xfe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b10      	cmp	r3, #16
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xf6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800442c:	e003      	b.n	8004436 <HAL_TIM_PWM_Start+0xfe>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 ffea 	bl	8005418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a33      	ldr	r2, [pc, #204]	; (8004518 <HAL_TIM_PWM_Start+0x1e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIM_PWM_Start+0x13e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a32      	ldr	r2, [pc, #200]	; (800451c <HAL_TIM_PWM_Start+0x1e4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIM_PWM_Start+0x13e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a30      	ldr	r2, [pc, #192]	; (8004520 <HAL_TIM_PWM_Start+0x1e8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIM_PWM_Start+0x13e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <HAL_TIM_PWM_Start+0x1ec>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIM_PWM_Start+0x13e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <HAL_TIM_PWM_Start+0x1f0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d101      	bne.n	800447a <HAL_TIM_PWM_Start+0x142>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_TIM_PWM_Start+0x144>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800448e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a20      	ldr	r2, [pc, #128]	; (8004518 <HAL_TIM_PWM_Start+0x1e0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d018      	beq.n	80044cc <HAL_TIM_PWM_Start+0x194>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d013      	beq.n	80044cc <HAL_TIM_PWM_Start+0x194>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <HAL_TIM_PWM_Start+0x1f4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00e      	beq.n	80044cc <HAL_TIM_PWM_Start+0x194>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_TIM_PWM_Start+0x1f8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_TIM_PWM_Start+0x194>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_TIM_PWM_Start+0x1e4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_TIM_PWM_Start+0x194>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_TIM_PWM_Start+0x1e8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d115      	bne.n	80044f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_TIM_PWM_Start+0x1fc>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d015      	beq.n	800450a <HAL_TIM_PWM_Start+0x1d2>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d011      	beq.n	800450a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	e008      	b.n	800450a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e000      	b.n	800450c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40013400 	.word	0x40013400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	00010007 	.word	0x00010007

08004538 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e097      	b.n	800467c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc fd19 	bl	8000f98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800457c:	f023 0307 	bic.w	r3, r3, #7
 8004580:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 fbbd 	bl	8004d0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	4313      	orrs	r3, r2
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045d8:	f023 030c 	bic.w	r3, r3, #12
 80045dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4313      	orrs	r3, r2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	011a      	lsls	r2, r3, #4
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	031b      	lsls	r3, r3, #12
 8004608:	4313      	orrs	r3, r2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4313      	orrs	r3, r2
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004694:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800469c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d110      	bne.n	80046d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ba:	7b7b      	ldrb	r3, [r7, #13]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d001      	beq.n	80046c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e068      	b.n	8004796 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d4:	e031      	b.n	800473a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d110      	bne.n	80046fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046dc:	7bbb      	ldrb	r3, [r7, #14]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e2:	7b3b      	ldrb	r3, [r7, #12]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e054      	b.n	8004796 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	e01d      	b.n	800473a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d108      	bne.n	8004716 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800470a:	7b7b      	ldrb	r3, [r7, #13]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d102      	bne.n	8004716 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004710:	7b3b      	ldrb	r3, [r7, #12]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d001      	beq.n	800471a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e03d      	b.n	8004796 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_TIM_Encoder_Start+0xc2>
 8004740:	2b04      	cmp	r3, #4
 8004742:	d008      	beq.n	8004756 <HAL_TIM_Encoder_Start+0xd2>
 8004744:	e00f      	b.n	8004766 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fe62 	bl	8005418 <TIM_CCxChannelCmd>
      break;
 8004754:	e016      	b.n	8004784 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2201      	movs	r2, #1
 800475c:	2104      	movs	r1, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fe5a 	bl	8005418 <TIM_CCxChannelCmd>
      break;
 8004764:	e00e      	b.n	8004784 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fe52 	bl	8005418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	2104      	movs	r1, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fe4b 	bl	8005418 <TIM_CCxChannelCmd>
      break;
 8004782:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d122      	bne.n	80047fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d11b      	bne.n	80047fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0202 	mvn.w	r2, #2
 80047ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa75 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 80047e6:	e005      	b.n	80047f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa67 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa78 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d122      	bne.n	800484e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d11b      	bne.n	800484e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f06f 0204 	mvn.w	r2, #4
 800481e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fa4b 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 800483a:	e005      	b.n	8004848 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fa3d 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa4e 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b08      	cmp	r3, #8
 800485a:	d122      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d11b      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f06f 0208 	mvn.w	r2, #8
 8004872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2204      	movs	r2, #4
 8004878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa21 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 800488e:	e005      	b.n	800489c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fa13 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa24 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d122      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d11b      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0210 	mvn.w	r2, #16
 80048c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2208      	movs	r2, #8
 80048cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9f7 	bl	8004cd0 <HAL_TIM_IC_CaptureCallback>
 80048e2:	e005      	b.n	80048f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f9e9 	bl	8004cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9fa 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10e      	bne.n	8004922 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0201 	mvn.w	r2, #1
 800491a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc fa33 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 feb7 	bl	80056bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495c:	d10e      	bne.n	800497c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d107      	bne.n	800497c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 feaa 	bl	80056d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d10e      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9a8 	bl	8004cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d10e      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d107      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0220 	mvn.w	r2, #32
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fe6a 	bl	80056a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d10f      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fe70 	bl	80056e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a12:	d10f      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fe62 	bl	80056f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a42:	d10f      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fe54 	bl	800570c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a72:	d10f      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fe46 	bl	8005720 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0fd      	b.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b14      	cmp	r3, #20
 8004ac2:	f200 80f0 	bhi.w	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004ca7 	.word	0x08004ca7
 8004ad4:	08004ca7 	.word	0x08004ca7
 8004ad8:	08004ca7 	.word	0x08004ca7
 8004adc:	08004b61 	.word	0x08004b61
 8004ae0:	08004ca7 	.word	0x08004ca7
 8004ae4:	08004ca7 	.word	0x08004ca7
 8004ae8:	08004ca7 	.word	0x08004ca7
 8004aec:	08004ba3 	.word	0x08004ba3
 8004af0:	08004ca7 	.word	0x08004ca7
 8004af4:	08004ca7 	.word	0x08004ca7
 8004af8:	08004ca7 	.word	0x08004ca7
 8004afc:	08004be3 	.word	0x08004be3
 8004b00:	08004ca7 	.word	0x08004ca7
 8004b04:	08004ca7 	.word	0x08004ca7
 8004b08:	08004ca7 	.word	0x08004ca7
 8004b0c:	08004c25 	.word	0x08004c25
 8004b10:	08004ca7 	.word	0x08004ca7
 8004b14:	08004ca7 	.word	0x08004ca7
 8004b18:	08004ca7 	.word	0x08004ca7
 8004b1c:	08004c65 	.word	0x08004c65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f980 	bl	8004e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	619a      	str	r2, [r3, #24]
      break;
 8004b5e:	e0a3      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f9f0 	bl	8004f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]
      break;
 8004ba0:	e082      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fa59 	bl	8005060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0208 	orr.w	r2, r2, #8
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	61da      	str	r2, [r3, #28]
      break;
 8004be0:	e062      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fac1 	bl	8005170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69d9      	ldr	r1, [r3, #28]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	021a      	lsls	r2, r3, #8
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	61da      	str	r2, [r3, #28]
      break;
 8004c22:	e041      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fb2a 	bl	8005284 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0208 	orr.w	r2, r2, #8
 8004c3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0204 	bic.w	r2, r2, #4
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c62:	e021      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fb6e 	bl	800534c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	021a      	lsls	r2, r3, #8
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004ca6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop

08004cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3c      	ldr	r2, [pc, #240]	; (8004e10 <TIM_Base_SetConfig+0x104>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d00b      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a39      	ldr	r2, [pc, #228]	; (8004e14 <TIM_Base_SetConfig+0x108>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a38      	ldr	r2, [pc, #224]	; (8004e18 <TIM_Base_SetConfig+0x10c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a37      	ldr	r2, [pc, #220]	; (8004e1c <TIM_Base_SetConfig+0x110>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2d      	ldr	r2, [pc, #180]	; (8004e10 <TIM_Base_SetConfig+0x104>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d64:	d017      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <TIM_Base_SetConfig+0x108>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <TIM_Base_SetConfig+0x10c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a28      	ldr	r2, [pc, #160]	; (8004e1c <TIM_Base_SetConfig+0x110>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <TIM_Base_SetConfig+0x104>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00f      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <TIM_Base_SetConfig+0x110>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d007      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0f      	ldr	r2, [pc, #60]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0xe8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a0e      	ldr	r2, [pc, #56]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	615a      	str	r2, [r3, #20]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 0302 	bic.w	r3, r3, #2
 8004e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <TIM_OC1_SetConfig+0x10c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00f      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2b      	ldr	r2, [pc, #172]	; (8004f3c <TIM_OC1_SetConfig+0x110>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <TIM_OC1_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <TIM_OC1_SetConfig+0x118>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_OC1_SetConfig+0x80>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <TIM_OC1_SetConfig+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10c      	bne.n	8004ec6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0308 	bic.w	r3, r3, #8
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <TIM_OC1_SetConfig+0x10c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <TIM_OC1_SetConfig+0x110>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <TIM_OC1_SetConfig+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <TIM_OC1_SetConfig+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_OC1_SetConfig+0xc2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <TIM_OC1_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d111      	bne.n	8004f12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800

08004f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_OC2_SetConfig+0x100>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_OC2_SetConfig+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_OC2_SetConfig+0x104>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10d      	bne.n	8004fd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	; (800504c <TIM_OC2_SetConfig+0x100>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00f      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <TIM_OC2_SetConfig+0x104>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <TIM_OC2_SetConfig+0x108>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <TIM_OC2_SetConfig+0x10c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC2_SetConfig+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a19      	ldr	r2, [pc, #100]	; (800505c <TIM_OC2_SetConfig+0x110>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d113      	bne.n	8005024 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a27      	ldr	r2, [pc, #156]	; (800515c <TIM_OC3_SetConfig+0xfc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d003      	beq.n	80050ca <TIM_OC3_SetConfig+0x6a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a26      	ldr	r2, [pc, #152]	; (8005160 <TIM_OC3_SetConfig+0x100>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10d      	bne.n	80050e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	; (800515c <TIM_OC3_SetConfig+0xfc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <TIM_OC3_SetConfig+0x100>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <TIM_OC3_SetConfig+0x104>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <TIM_OC3_SetConfig+0x108>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC3_SetConfig+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a18      	ldr	r2, [pc, #96]	; (800516c <TIM_OC3_SetConfig+0x10c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800511c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	621a      	str	r2, [r3, #32]
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a28      	ldr	r2, [pc, #160]	; (8005270 <TIM_OC4_SetConfig+0x100>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_OC4_SetConfig+0x6c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a27      	ldr	r2, [pc, #156]	; (8005274 <TIM_OC4_SetConfig+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10d      	bne.n	80051f8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	031b      	lsls	r3, r3, #12
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <TIM_OC4_SetConfig+0x100>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_OC4_SetConfig+0xb0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <TIM_OC4_SetConfig+0x104>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_OC4_SetConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1b      	ldr	r2, [pc, #108]	; (8005278 <TIM_OC4_SetConfig+0x108>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_OC4_SetConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1a      	ldr	r2, [pc, #104]	; (800527c <TIM_OC4_SetConfig+0x10c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC4_SetConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a19      	ldr	r2, [pc, #100]	; (8005280 <TIM_OC4_SetConfig+0x110>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d113      	bne.n	8005248 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005226:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800522e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40013400 	.word	0x40013400
 8005278:	40014000 	.word	0x40014000
 800527c:	40014400 	.word	0x40014400
 8005280:	40014800 	.word	0x40014800

08005284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a17      	ldr	r2, [pc, #92]	; (8005338 <TIM_OC5_SetConfig+0xb4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a16      	ldr	r2, [pc, #88]	; (800533c <TIM_OC5_SetConfig+0xb8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a15      	ldr	r2, [pc, #84]	; (8005340 <TIM_OC5_SetConfig+0xbc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <TIM_OC5_SetConfig+0xc0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC5_SetConfig+0x7a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <TIM_OC5_SetConfig+0xc4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d109      	bne.n	8005312 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005304:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	621a      	str	r2, [r3, #32]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40013400 	.word	0x40013400
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800

0800534c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	051b      	lsls	r3, r3, #20
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <TIM_OC6_SetConfig+0xb8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00f      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a17      	ldr	r2, [pc, #92]	; (8005408 <TIM_OC6_SetConfig+0xbc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00b      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a16      	ldr	r2, [pc, #88]	; (800540c <TIM_OC6_SetConfig+0xc0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d007      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <TIM_OC6_SetConfig+0xc4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC6_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a14      	ldr	r2, [pc, #80]	; (8005414 <TIM_OC6_SetConfig+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d109      	bne.n	80053dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e065      	b.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d018      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d013      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a12      	ldr	r2, [pc, #72]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d10c      	bne.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005522:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40013400 	.word	0x40013400
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40014000 	.word	0x40014000

08005568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005580:	2302      	movs	r3, #2
 8005582:	e087      	b.n	8005694 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d106      	bne.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d126      	bne.n	8005682 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	051b      	lsls	r3, r3, #20
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0e      	ldr	r2, [pc, #56]	; (80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d106      	bne.n	8005682 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40013400 	.word	0x40013400

080056a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005744:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005748:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	b29a      	uxth	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800576a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800576e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	b29b      	uxth	r3, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	4013      	ands	r3, r2
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005798:	b084      	sub	sp, #16
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	f107 0014 	add.w	r0, r7, #20
 80057a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	b004      	add	sp, #16
 80057d8:	4770      	bx	lr
	...

080057dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057dc:	b480      	push	{r7}
 80057de:	b09b      	sub	sp, #108	; 0x6c
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	78db      	ldrb	r3, [r3, #3]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d81f      	bhi.n	800584e <USB_ActivateEndpoint+0x72>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <USB_ActivateEndpoint+0x38>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005825 	.word	0x08005825
 8005818:	08005841 	.word	0x08005841
 800581c:	08005857 	.word	0x08005857
 8005820:	08005833 	.word	0x08005833
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005824:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800582c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005830:	e012      	b.n	8005858 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005832:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005836:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800583a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800583e:	e00b      	b.n	8005858 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005840:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005848:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800584c:	e004      	b.n	8005858 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005854:	e000      	b.n	8005858 <USB_ActivateEndpoint+0x7c>
      break;
 8005856:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	b21b      	sxth	r3, r3
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	b21a      	sxth	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b21b      	sxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b21b      	sxth	r3, r3
 800589e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	7b1b      	ldrb	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f040 8149 	bne.w	8005b60 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8084 	beq.w	80059e0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	4413      	add	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00da      	lsls	r2, r3, #3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	88db      	ldrh	r3, [r3, #6]
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	81fb      	strh	r3, [r7, #14]
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <USB_ActivateEndpoint+0x180>
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	81bb      	strh	r3, [r7, #12]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	89bb      	ldrh	r3, [r7, #12]
 8005948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005958:	b29b      	uxth	r3, r3
 800595a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d020      	beq.n	80059a6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597a:	813b      	strh	r3, [r7, #8]
 800597c:	893b      	ldrh	r3, [r7, #8]
 800597e:	f083 0320 	eor.w	r3, r3, #32
 8005982:	813b      	strh	r3, [r7, #8]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	893b      	ldrh	r3, [r7, #8]
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
 80059a4:	e27f      	b.n	8005ea6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059bc:	817b      	strh	r3, [r7, #10]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	897b      	ldrh	r3, [r7, #10]
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	e262      	b.n	8005ea6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	4413      	add	r3, r2
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00da      	lsls	r2, r3, #3
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	88db      	ldrh	r3, [r3, #6]
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	4413      	add	r3, r2
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	00da      	lsls	r2, r3, #3
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	4413      	add	r3, r2
 8005a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a36:	623b      	str	r3, [r7, #32]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d112      	bne.n	8005a66 <USB_ActivateEndpoint+0x28a>
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e02f      	b.n	8005ac6 <USB_ActivateEndpoint+0x2ea>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a6c:	d813      	bhi.n	8005a96 <USB_ActivateEndpoint+0x2ba>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	663b      	str	r3, [r7, #96]	; 0x60
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <USB_ActivateEndpoint+0x2ac>
 8005a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a84:	3301      	adds	r3, #1
 8005a86:	663b      	str	r3, [r7, #96]	; 0x60
 8005a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e017      	b.n	8005ac6 <USB_ActivateEndpoint+0x2ea>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <USB_ActivateEndpoint+0x2d4>
 8005aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aac:	3b01      	subs	r3, #1
 8005aae:	663b      	str	r3, [r7, #96]	; 0x60
 8005ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	83fb      	strh	r3, [r7, #30]
 8005ad4:	8bfb      	ldrh	r3, [r7, #30]
 8005ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01b      	beq.n	8005b16 <USB_ActivateEndpoint+0x33a>
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af4:	83bb      	strh	r3, [r7, #28]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	8bbb      	ldrh	r3, [r7, #28]
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	837b      	strh	r3, [r7, #26]
 8005b2e:	8b7b      	ldrh	r3, [r7, #26]
 8005b30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b34:	837b      	strh	r3, [r7, #26]
 8005b36:	8b7b      	ldrh	r3, [r7, #26]
 8005b38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b3c:	837b      	strh	r3, [r7, #26]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	441a      	add	r2, r3
 8005b48:	8b7b      	ldrh	r3, [r7, #26]
 8005b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	8013      	strh	r3, [r2, #0]
 8005b5e:	e1a2      	b.n	8005ea6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b76:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bac:	4413      	add	r3, r2
 8005bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	00da      	lsls	r2, r3, #3
 8005bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	891b      	ldrh	r3, [r3, #8]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be0:	4413      	add	r3, r2
 8005be2:	653b      	str	r3, [r7, #80]	; 0x50
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	00da      	lsls	r2, r3, #3
 8005bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	895b      	ldrh	r3, [r3, #10]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c02:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f040 8091 	bne.w	8005d30 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01b      	beq.n	8005c5e <USB_ActivateEndpoint+0x482>
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01b      	beq.n	8005cae <USB_ActivateEndpoint+0x4d2>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ccc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
 8005d2e:	e0ba      	b.n	8005ea6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01d      	beq.n	8005d88 <USB_ActivateEndpoint+0x5ac>
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01d      	beq.n	8005de0 <USB_ActivateEndpoint+0x604>
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	78db      	ldrb	r3, [r3, #3]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d024      	beq.n	8005e32 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e06:	f083 0320 	eor.w	r3, r3, #32
 8005e0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]
 8005e30:	e01d      	b.n	8005e6e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	441a      	add	r2, r3
 8005e56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	376c      	adds	r7, #108	; 0x6c
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop

08005eb8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b08d      	sub	sp, #52	; 0x34
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	7b1b      	ldrb	r3, [r3, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 808e 	bne.w	8005fe8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d044      	beq.n	8005f5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	81bb      	strh	r3, [r7, #12]
 8005ee2:	89bb      	ldrh	r3, [r7, #12]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <USB_DeactivateEndpoint+0x6c>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	817b      	strh	r3, [r7, #10]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f3a:	813b      	strh	r3, [r7, #8]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	893b      	ldrh	r3, [r7, #8]
 8005f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]
 8005f5c:	e192      	b.n	8006284 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	827b      	strh	r3, [r7, #18]
 8005f6c:	8a7b      	ldrh	r3, [r7, #18]
 8005f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01b      	beq.n	8005fae <USB_DeactivateEndpoint+0xf6>
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	823b      	strh	r3, [r7, #16]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8a3b      	ldrh	r3, [r7, #16]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc4:	81fb      	strh	r3, [r7, #14]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	89fb      	ldrh	r3, [r7, #14]
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]
 8005fe6:	e14d      	b.n	8006284 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 80a5 	bne.w	800613c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	843b      	strh	r3, [r7, #32]
 8006000:	8c3b      	ldrh	r3, [r7, #32]
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01b      	beq.n	8006042 <USB_DeactivateEndpoint+0x18a>
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	83fb      	strh	r3, [r7, #30]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	8bfb      	ldrh	r3, [r7, #30]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	83bb      	strh	r3, [r7, #28]
 8006050:	8bbb      	ldrh	r3, [r7, #28]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <USB_DeactivateEndpoint+0x1da>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	837b      	strh	r3, [r7, #26]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8b7b      	ldrh	r3, [r7, #26]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	833b      	strh	r3, [r7, #24]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	8b3b      	ldrh	r3, [r7, #24]
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e0:	82fb      	strh	r3, [r7, #22]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	441a      	add	r2, r3
 80060ec:	8afb      	ldrh	r3, [r7, #22]
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	82bb      	strh	r3, [r7, #20]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8abb      	ldrh	r3, [r7, #20]
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
 800613a:	e0a3      	b.n	8006284 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800614a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800614c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01b      	beq.n	800618c <USB_DeactivateEndpoint+0x2d4>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	441a      	add	r2, r3
 8006176:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006188:	b29b      	uxth	r3, r3
 800618a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	857b      	strh	r3, [r7, #42]	; 0x2a
 800619a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01b      	beq.n	80061dc <USB_DeactivateEndpoint+0x324>
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d8:	b29b      	uxth	r3, r3
 80061da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006248:	b29b      	uxth	r3, r3
 800624a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	847b      	strh	r3, [r7, #34]	; 0x22
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3734      	adds	r7, #52	; 0x34
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b0c4      	sub	sp, #272	; 0x110
 8006296:	af00      	add	r7, sp, #0
 8006298:	1d3b      	adds	r3, r7, #4
 800629a:	6018      	str	r0, [r3, #0]
 800629c:	463b      	mov	r3, r7
 800629e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	f040 8566 	bne.w	8006d78 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d905      	bls.n	80062c8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062c6:	e004      	b.n	80062d2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80062c8:	463b      	mov	r3, r7
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	7b1b      	ldrb	r3, [r3, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d12c      	bne.n	8006336 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6959      	ldr	r1, [r3, #20]
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	88da      	ldrh	r2, [r3, #6]
 80062e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	1d38      	adds	r0, r7, #4
 80062f0:	6800      	ldr	r0, [r0, #0]
 80062f2:	f001 fa43 	bl	800777c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006304:	b29b      	uxth	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	00da      	lsls	r2, r3, #3
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800631e:	f107 0310 	add.w	r3, r7, #16
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006328:	b29a      	uxth	r2, r3
 800632a:	f107 0310 	add.w	r3, r7, #16
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	f000 bcec 	b.w	8006d0e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b02      	cmp	r3, #2
 800633e:	f040 8356 	bne.w	80069ee <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	463b      	mov	r3, r7
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	f240 82fa 	bls.w	8006948 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006394:	b29b      	uxth	r3, r3
 8006396:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063a2:	463b      	mov	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a1a      	ldr	r2, [r3, #32]
 80063a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063ac:	1ad2      	subs	r2, r2, r3
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 815e 	beq.w	800668c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d164      	bne.n	80064aa <USB_EPStartXfer+0x218>
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	4413      	add	r3, r2
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	4413      	add	r3, r2
 8006404:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
 800640a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800640e:	2b00      	cmp	r3, #0
 8006410:	d112      	bne.n	8006438 <USB_EPStartXfer+0x1a6>
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800641c:	b29a      	uxth	r2, r3
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e054      	b.n	80064e2 <USB_EPStartXfer+0x250>
 8006438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643c:	2b3e      	cmp	r3, #62	; 0x3e
 800643e:	d817      	bhi.n	8006470 <USB_EPStartXfer+0x1de>
 8006440:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800644a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <USB_EPStartXfer+0x1ce>
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645a:	3301      	adds	r3, #1
 800645c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006464:	b29b      	uxth	r3, r3
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	b29a      	uxth	r2, r3
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	e038      	b.n	80064e2 <USB_EPStartXfer+0x250>
 8006470:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800647a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <USB_EPStartXfer+0x1fe>
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	3b01      	subs	r3, #1
 800648c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	b29b      	uxth	r3, r3
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	e01b      	b.n	80064e2 <USB_EPStartXfer+0x250>
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d116      	bne.n	80064e2 <USB_EPStartXfer+0x250>
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064bc:	b29b      	uxth	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	4413      	add	r3, r2
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
 80064c6:	463b      	mov	r3, r7
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00da      	lsls	r2, r3, #3
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
 80064d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064dc:	b29a      	uxth	r2, r3
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064e2:	463b      	mov	r3, r7
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	895b      	ldrh	r3, [r3, #10]
 80064e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6959      	ldr	r1, [r3, #20]
 80064f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80064fc:	1d38      	adds	r0, r7, #4
 80064fe:	6800      	ldr	r0, [r0, #0]
 8006500:	f001 f93c 	bl	800777c <USB_WritePMA>
            ep->xfer_buff += len;
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800650e:	441a      	add	r2, r3
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006516:	463b      	mov	r3, r7
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a1a      	ldr	r2, [r3, #32]
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	429a      	cmp	r2, r3
 8006524:	d90e      	bls.n	8006544 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006526:	463b      	mov	r3, r7
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	621a      	str	r2, [r3, #32]
 8006542:	e008      	b.n	8006556 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006556:	463b      	mov	r3, r7
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d164      	bne.n	800662a <USB_EPStartXfer+0x398>
 8006560:	1d3b      	adds	r3, r7, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00da      	lsls	r2, r3, #3
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658e:	2b00      	cmp	r3, #0
 8006590:	d112      	bne.n	80065b8 <USB_EPStartXfer+0x326>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800659c:	b29a      	uxth	r2, r3
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e057      	b.n	8006668 <USB_EPStartXfer+0x3d6>
 80065b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065bc:	2b3e      	cmp	r3, #62	; 0x3e
 80065be:	d817      	bhi.n	80065f0 <USB_EPStartXfer+0x35e>
 80065c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <USB_EPStartXfer+0x34e>
 80065d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065da:	3301      	adds	r3, #1
 80065dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	e03b      	b.n	8006668 <USB_EPStartXfer+0x3d6>
 80065f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <USB_EPStartXfer+0x37e>
 8006606:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800660a:	3b01      	subs	r3, #1
 800660c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006610:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29b      	uxth	r3, r3
 800661a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006622:	b29a      	uxth	r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	e01e      	b.n	8006668 <USB_EPStartXfer+0x3d6>
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d119      	bne.n	8006668 <USB_EPStartXfer+0x3d6>
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	4413      	add	r3, r2
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	00da      	lsls	r2, r3, #3
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	4413      	add	r3, r2
 8006658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800665c:	623b      	str	r3, [r7, #32]
 800665e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006662:	b29a      	uxth	r2, r3
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	891b      	ldrh	r3, [r3, #8]
 800666e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6959      	ldr	r1, [r3, #20]
 8006678:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800667c:	b29b      	uxth	r3, r3
 800667e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006682:	1d38      	adds	r0, r7, #4
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f001 f879 	bl	800777c <USB_WritePMA>
 800668a:	e340      	b.n	8006d0e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d164      	bne.n	8006760 <USB_EPStartXfer+0x4ce>
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	4413      	add	r3, r2
 80066ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	00da      	lsls	r2, r3, #3
 80066b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d112      	bne.n	80066ee <USB_EPStartXfer+0x45c>
 80066c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	e057      	b.n	800679e <USB_EPStartXfer+0x50c>
 80066ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f2:	2b3e      	cmp	r3, #62	; 0x3e
 80066f4:	d817      	bhi.n	8006726 <USB_EPStartXfer+0x494>
 80066f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006700:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <USB_EPStartXfer+0x484>
 800670c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006710:	3301      	adds	r3, #1
 8006712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800671a:	b29b      	uxth	r3, r3
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	b29a      	uxth	r2, r3
 8006720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e03b      	b.n	800679e <USB_EPStartXfer+0x50c>
 8006726:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <USB_EPStartXfer+0x4b4>
 800673c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006740:	3b01      	subs	r3, #1
 8006742:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29b      	uxth	r3, r3
 8006750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006758:	b29a      	uxth	r2, r3
 800675a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	e01e      	b.n	800679e <USB_EPStartXfer+0x50c>
 8006760:	463b      	mov	r3, r7
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d119      	bne.n	800679e <USB_EPStartXfer+0x50c>
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	657b      	str	r3, [r7, #84]	; 0x54
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006778:	b29b      	uxth	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677e:	4413      	add	r3, r2
 8006780:	657b      	str	r3, [r7, #84]	; 0x54
 8006782:	463b      	mov	r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	00da      	lsls	r2, r3, #3
 800678a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678c:	4413      	add	r3, r2
 800678e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006792:	653b      	str	r3, [r7, #80]	; 0x50
 8006794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006798:	b29a      	uxth	r2, r3
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800679e:	463b      	mov	r3, r7
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	891b      	ldrh	r3, [r3, #8]
 80067a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067b8:	1d38      	adds	r0, r7, #4
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	f000 ffde 	bl	800777c <USB_WritePMA>
            ep->xfer_buff += len;
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ca:	441a      	add	r2, r3
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067d2:	463b      	mov	r3, r7
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	463b      	mov	r3, r7
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d90e      	bls.n	8006800 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80067e2:	463b      	mov	r3, r7
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80067ec:	463b      	mov	r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f6:	1ad2      	subs	r2, r2, r3
 80067f8:	463b      	mov	r3, r7
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	621a      	str	r2, [r3, #32]
 80067fe:	e008      	b.n	8006812 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006812:	1d3b      	adds	r3, r7, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	647b      	str	r3, [r7, #68]	; 0x44
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d164      	bne.n	80068ec <USB_EPStartXfer+0x65a>
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	4413      	add	r3, r2
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683a:	463b      	mov	r3, r7
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	4413      	add	r3, r2
 8006846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
 800684c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006850:	2b00      	cmp	r3, #0
 8006852:	d112      	bne.n	800687a <USB_EPStartXfer+0x5e8>
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800685e:	b29a      	uxth	r2, r3
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e054      	b.n	8006924 <USB_EPStartXfer+0x692>
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	2b3e      	cmp	r3, #62	; 0x3e
 8006880:	d817      	bhi.n	80068b2 <USB_EPStartXfer+0x620>
 8006882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800688c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <USB_EPStartXfer+0x610>
 8006898:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800689c:	3301      	adds	r3, #1
 800689e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e038      	b.n	8006924 <USB_EPStartXfer+0x692>
 80068b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <USB_EPStartXfer+0x640>
 80068c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068cc:	3b01      	subs	r3, #1
 80068ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e01b      	b.n	8006924 <USB_EPStartXfer+0x692>
 80068ec:	463b      	mov	r3, r7
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d116      	bne.n	8006924 <USB_EPStartXfer+0x692>
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006904:	4413      	add	r3, r2
 8006906:	647b      	str	r3, [r7, #68]	; 0x44
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	00da      	lsls	r2, r3, #3
 8006910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006912:	4413      	add	r3, r2
 8006914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006918:	643b      	str	r3, [r7, #64]	; 0x40
 800691a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691e:	b29a      	uxth	r2, r3
 8006920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006922:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	895b      	ldrh	r3, [r3, #10]
 800692a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800692e:	463b      	mov	r3, r7
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6959      	ldr	r1, [r3, #20]
 8006934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006938:	b29b      	uxth	r3, r3
 800693a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800693e:	1d38      	adds	r0, r7, #4
 8006940:	6800      	ldr	r0, [r0, #0]
 8006942:	f000 ff1b 	bl	800777c <USB_WritePMA>
 8006946:	e1e2      	b.n	8006d0e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	463b      	mov	r3, r7
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	463b      	mov	r3, r7
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	663b      	str	r3, [r7, #96]	; 0x60
 800699c:	1d3b      	adds	r3, r7, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069aa:	4413      	add	r3, r2
 80069ac:	663b      	str	r3, [r7, #96]	; 0x60
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	00da      	lsls	r2, r3, #3
 80069b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069ca:	463b      	mov	r3, r7
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	891b      	ldrh	r3, [r3, #8]
 80069d0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069d4:	463b      	mov	r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6959      	ldr	r1, [r3, #20]
 80069da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069e4:	1d38      	adds	r0, r7, #4
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	f000 fec8 	bl	800777c <USB_WritePMA>
 80069ec:	e18f      	b.n	8006d0e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	463b      	mov	r3, r7
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 808f 	beq.w	8006b28 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a10:	463b      	mov	r3, r7
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d164      	bne.n	8006ae4 <USB_EPStartXfer+0x852>
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a20:	1d3b      	adds	r3, r7, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a2e:	4413      	add	r3, r2
 8006a30:	673b      	str	r3, [r7, #112]	; 0x70
 8006a32:	463b      	mov	r3, r7
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	00da      	lsls	r2, r3, #3
 8006a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d112      	bne.n	8006a72 <USB_EPStartXfer+0x7e0>
 8006a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6e:	801a      	strh	r2, [r3, #0]
 8006a70:	e054      	b.n	8006b1c <USB_EPStartXfer+0x88a>
 8006a72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a76:	2b3e      	cmp	r3, #62	; 0x3e
 8006a78:	d817      	bhi.n	8006aaa <USB_EPStartXfer+0x818>
 8006a7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <USB_EPStartXfer+0x808>
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a94:	3301      	adds	r3, #1
 8006a96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	029b      	lsls	r3, r3, #10
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	e038      	b.n	8006b1c <USB_EPStartXfer+0x88a>
 8006aaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ab4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <USB_EPStartXfer+0x838>
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	029b      	lsls	r3, r3, #10
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e01b      	b.n	8006b1c <USB_EPStartXfer+0x88a>
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d116      	bne.n	8006b1c <USB_EPStartXfer+0x88a>
 8006aee:	1d3b      	adds	r3, r7, #4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006afc:	4413      	add	r3, r2
 8006afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b00:	463b      	mov	r3, r7
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	00da      	lsls	r2, r3, #3
 8006b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b10:	677b      	str	r3, [r7, #116]	; 0x74
 8006b12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	895b      	ldrh	r3, [r3, #10]
 8006b22:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b26:	e097      	b.n	8006c58 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d168      	bne.n	8006c04 <USB_EPStartXfer+0x972>
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b3a:	1d3b      	adds	r3, r7, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	00da      	lsls	r2, r3, #3
 8006b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d112      	bne.n	8006b92 <USB_EPStartXfer+0x900>
 8006b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	e05d      	b.n	8006c4e <USB_EPStartXfer+0x9bc>
 8006b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b96:	2b3e      	cmp	r3, #62	; 0x3e
 8006b98:	d817      	bhi.n	8006bca <USB_EPStartXfer+0x938>
 8006b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ba4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <USB_EPStartXfer+0x928>
 8006bb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	029b      	lsls	r3, r3, #10
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e041      	b.n	8006c4e <USB_EPStartXfer+0x9bc>
 8006bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <USB_EPStartXfer+0x958>
 8006be0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e024      	b.n	8006c4e <USB_EPStartXfer+0x9bc>
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11f      	bne.n	8006c4e <USB_EPStartXfer+0x9bc>
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c16:	1d3b      	adds	r3, r7, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c26:	4413      	add	r3, r2
 8006c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	00da      	lsls	r2, r3, #3
 8006c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c38:	4413      	add	r3, r2
 8006c3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c4e:	463b      	mov	r3, r7
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	891b      	ldrh	r3, [r3, #8]
 8006c54:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6959      	ldr	r1, [r3, #20]
 8006c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c68:	1d38      	adds	r0, r7, #4
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	f000 fd86 	bl	800777c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d122      	bne.n	8006cc0 <USB_EPStartXfer+0xa2e>
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006c98:	1d3b      	adds	r3, r7, #4
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
 8006cbe:	e026      	b.n	8006d0e <USB_EPStartXfer+0xa7c>
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d121      	bne.n	8006d0e <USB_EPStartXfer+0xa7c>
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006ce8:	1d3b      	adds	r3, r7, #4
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	463b      	mov	r3, r7
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f107 020e 	add.w	r2, r7, #14
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2c:	8013      	strh	r3, [r2, #0]
 8006d2e:	f107 030e 	add.w	r3, r7, #14
 8006d32:	f107 020e 	add.w	r2, r7, #14
 8006d36:	8812      	ldrh	r2, [r2, #0]
 8006d38:	f082 0210 	eor.w	r2, r2, #16
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	f107 030e 	add.w	r3, r7, #14
 8006d42:	f107 020e 	add.w	r2, r7, #14
 8006d46:	8812      	ldrh	r2, [r2, #0]
 8006d48:	f082 0220 	eor.w	r2, r2, #32
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	1d3b      	adds	r3, r7, #4
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	463b      	mov	r3, r7
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f107 030e 	add.w	r3, r7, #14
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8013      	strh	r3, [r2, #0]
 8006d76:	e3b5      	b.n	80074e4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d78:	463b      	mov	r3, r7
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	7b1b      	ldrb	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 8090 	bne.w	8006ea4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d90e      	bls.n	8006db2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006d94:	463b      	mov	r3, r7
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006d9e:	463b      	mov	r3, r7
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	619a      	str	r2, [r3, #24]
 8006db0:	e008      	b.n	8006dc4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dc4:	1d3b      	adds	r3, r7, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dcc:	1d3b      	adds	r3, r7, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ddc:	4413      	add	r3, r2
 8006dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	00da      	lsls	r2, r3, #3
 8006dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dee:	4413      	add	r3, r2
 8006df0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006df8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d116      	bne.n	8006e2e <USB_EPStartXfer+0xb9c>
 8006e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	e32c      	b.n	8007488 <USB_EPStartXfer+0x11f6>
 8006e2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e32:	2b3e      	cmp	r3, #62	; 0x3e
 8006e34:	d818      	bhi.n	8006e68 <USB_EPStartXfer+0xbd6>
 8006e36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e3a:	085b      	lsrs	r3, r3, #1
 8006e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <USB_EPStartXfer+0xbc4>
 8006e4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e50:	3301      	adds	r3, #1
 8006e52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	029b      	lsls	r3, r3, #10
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	e30f      	b.n	8007488 <USB_EPStartXfer+0x11f6>
 8006e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <USB_EPStartXfer+0xbf6>
 8006e7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e82:	3b01      	subs	r3, #1
 8006e84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	029b      	lsls	r3, r3, #10
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e2f1      	b.n	8007488 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	78db      	ldrb	r3, [r3, #3]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	f040 818f 	bne.w	80071ce <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d175      	bne.n	8006fa6 <USB_EPStartXfer+0xd14>
 8006eba:	1d3b      	adds	r3, r7, #4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ec2:	1d3b      	adds	r3, r7, #4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed8:	463b      	mov	r3, r7
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00da      	lsls	r2, r3, #3
 8006ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d116      	bne.n	8006f26 <USB_EPStartXfer+0xc94>
 8006ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e065      	b.n	8006ff2 <USB_EPStartXfer+0xd60>
 8006f26:	463b      	mov	r3, r7
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f2e:	d81a      	bhi.n	8006f66 <USB_EPStartXfer+0xcd4>
 8006f30:	463b      	mov	r3, r7
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <USB_EPStartXfer+0xcc2>
 8006f4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	029b      	lsls	r3, r3, #10
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e045      	b.n	8006ff2 <USB_EPStartXfer+0xd60>
 8006f66:	463b      	mov	r3, r7
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	095b      	lsrs	r3, r3, #5
 8006f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f72:	463b      	mov	r3, r7
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <USB_EPStartXfer+0xcf8>
 8006f80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f84:	3b01      	subs	r3, #1
 8006f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	029b      	lsls	r3, r3, #10
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	e025      	b.n	8006ff2 <USB_EPStartXfer+0xd60>
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d120      	bne.n	8006ff2 <USB_EPStartXfer+0xd60>
 8006fb0:	1d3b      	adds	r3, r7, #4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fb8:	1d3b      	adds	r3, r7, #4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc8:	4413      	add	r3, r2
 8006fca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	00da      	lsls	r2, r3, #3
 8006fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d175      	bne.n	80070f0 <USB_EPStartXfer+0xe5e>
 8007004:	1d3b      	adds	r3, r7, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800700c:	1d3b      	adds	r3, r7, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007014:	b29b      	uxth	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800701c:	4413      	add	r3, r2
 800701e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	00da      	lsls	r2, r3, #3
 800702a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800702e:	4413      	add	r3, r2
 8007030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007038:	463b      	mov	r3, r7
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d116      	bne.n	8007070 <USB_EPStartXfer+0xdde>
 8007042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800704e:	b29a      	uxth	r2, r3
 8007050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	e061      	b.n	8007134 <USB_EPStartXfer+0xea2>
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b3e      	cmp	r3, #62	; 0x3e
 8007078:	d81a      	bhi.n	80070b0 <USB_EPStartXfer+0xe1e>
 800707a:	463b      	mov	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007086:	463b      	mov	r3, r7
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <USB_EPStartXfer+0xe0c>
 8007094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007098:	3301      	adds	r3, #1
 800709a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	e041      	b.n	8007134 <USB_EPStartXfer+0xea2>
 80070b0:	463b      	mov	r3, r7
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070bc:	463b      	mov	r3, r7
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <USB_EPStartXfer+0xe42>
 80070ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ce:	3b01      	subs	r3, #1
 80070d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d8:	b29b      	uxth	r3, r3
 80070da:	029b      	lsls	r3, r3, #10
 80070dc:	b29b      	uxth	r3, r3
 80070de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e021      	b.n	8007134 <USB_EPStartXfer+0xea2>
 80070f0:	463b      	mov	r3, r7
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d11c      	bne.n	8007134 <USB_EPStartXfer+0xea2>
 80070fa:	1d3b      	adds	r3, r7, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007102:	b29b      	uxth	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800710a:	4413      	add	r3, r2
 800710c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	00da      	lsls	r2, r3, #3
 8007118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800711c:	4413      	add	r3, r2
 800711e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007126:	463b      	mov	r3, r7
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007132:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 81a4 	beq.w	8007488 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007140:	1d3b      	adds	r3, r7, #4
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007154:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <USB_EPStartXfer+0xeda>
 8007160:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800716c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 8187 	bne.w	8007488 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800717a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 8180 	bne.w	8007488 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80071a6:	1d3b      	adds	r3, r7, #4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
 80071cc:	e15c      	b.n	8007488 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071ce:	463b      	mov	r3, r7
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	78db      	ldrb	r3, [r3, #3]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 8155 	bne.w	8007484 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	699a      	ldr	r2, [r3, #24]
 80071e0:	463b      	mov	r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d90e      	bls.n	8007208 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071fe:	1ad2      	subs	r2, r2, r3
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	619a      	str	r2, [r3, #24]
 8007206:	e008      	b.n	800721a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800721a:	463b      	mov	r3, r7
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d16f      	bne.n	8007304 <USB_EPStartXfer+0x1072>
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800722c:	1d3b      	adds	r3, r7, #4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007234:	b29b      	uxth	r3, r3
 8007236:	461a      	mov	r2, r3
 8007238:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800723c:	4413      	add	r3, r2
 800723e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007242:	463b      	mov	r3, r7
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	00da      	lsls	r2, r3, #3
 800724a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800724e:	4413      	add	r3, r2
 8007250:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007258:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800725c:	2b00      	cmp	r3, #0
 800725e:	d116      	bne.n	800728e <USB_EPStartXfer+0xffc>
 8007260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	e05f      	b.n	800734e <USB_EPStartXfer+0x10bc>
 800728e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007292:	2b3e      	cmp	r3, #62	; 0x3e
 8007294:	d818      	bhi.n	80072c8 <USB_EPStartXfer+0x1036>
 8007296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <USB_EPStartXfer+0x1024>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	3301      	adds	r3, #1
 80072b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	029b      	lsls	r3, r3, #10
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e042      	b.n	800734e <USB_EPStartXfer+0x10bc>
 80072c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <USB_EPStartXfer+0x1056>
 80072de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e2:	3b01      	subs	r3, #1
 80072e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	029b      	lsls	r3, r3, #10
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	e024      	b.n	800734e <USB_EPStartXfer+0x10bc>
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d11f      	bne.n	800734e <USB_EPStartXfer+0x10bc>
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731e:	b29b      	uxth	r3, r3
 8007320:	461a      	mov	r2, r3
 8007322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007326:	4413      	add	r3, r2
 8007328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800732c:	463b      	mov	r3, r7
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	00da      	lsls	r2, r3, #3
 8007334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007338:	4413      	add	r3, r2
 800733a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800733e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007342:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007346:	b29a      	uxth	r2, r3
 8007348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	1d3b      	adds	r3, r7, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d16f      	bne.n	8007440 <USB_EPStartXfer+0x11ae>
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007368:	1d3b      	adds	r3, r7, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007370:	b29b      	uxth	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007378:	4413      	add	r3, r2
 800737a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800737e:	463b      	mov	r3, r7
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	00da      	lsls	r2, r3, #3
 8007386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800738a:	4413      	add	r3, r2
 800738c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007394:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007398:	2b00      	cmp	r3, #0
 800739a:	d116      	bne.n	80073ca <USB_EPStartXfer+0x1138>
 800739c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	e05e      	b.n	8007488 <USB_EPStartXfer+0x11f6>
 80073ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ce:	2b3e      	cmp	r3, #62	; 0x3e
 80073d0:	d818      	bhi.n	8007404 <USB_EPStartXfer+0x1172>
 80073d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <USB_EPStartXfer+0x1160>
 80073e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ec:	3301      	adds	r3, #1
 80073ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e041      	b.n	8007488 <USB_EPStartXfer+0x11f6>
 8007404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800740e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <USB_EPStartXfer+0x1192>
 800741a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741e:	3b01      	subs	r3, #1
 8007420:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007428:	b29b      	uxth	r3, r3
 800742a:	029b      	lsls	r3, r3, #10
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e023      	b.n	8007488 <USB_EPStartXfer+0x11f6>
 8007440:	463b      	mov	r3, r7
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11e      	bne.n	8007488 <USB_EPStartXfer+0x11f6>
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007452:	b29b      	uxth	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800745a:	4413      	add	r3, r2
 800745c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	00da      	lsls	r2, r3, #3
 8007468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800746c:	4413      	add	r3, r2
 800746e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007476:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e001      	b.n	8007488 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e02e      	b.n	80074e6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007488:	1d3b      	adds	r3, r7, #4
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	463b      	mov	r3, r7
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074be:	1d3b      	adds	r3, r7, #4
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	463b      	mov	r3, r7
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	441a      	add	r2, r3
 80074cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d020      	beq.n	8007544 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007518:	81bb      	strh	r3, [r7, #12]
 800751a:	89bb      	ldrh	r3, [r7, #12]
 800751c:	f083 0310 	eor.w	r3, r3, #16
 8007520:	81bb      	strh	r3, [r7, #12]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	441a      	add	r2, r3
 800752c:	89bb      	ldrh	r3, [r7, #12]
 800752e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753e:	b29b      	uxth	r3, r3
 8007540:	8013      	strh	r3, [r2, #0]
 8007542:	e01f      	b.n	8007584 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755a:	81fb      	strh	r3, [r7, #14]
 800755c:	89fb      	ldrh	r3, [r7, #14]
 800755e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007562:	81fb      	strh	r3, [r7, #14]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	441a      	add	r2, r3
 800756e:	89fb      	ldrh	r3, [r7, #14]
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007592:	b480      	push	{r7}
 8007594:	b087      	sub	sp, #28
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	7b1b      	ldrb	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 809d 	bne.w	80076e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d04c      	beq.n	8007648 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	823b      	strh	r3, [r7, #16]
 80075bc:	8a3b      	ldrh	r3, [r7, #16]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01b      	beq.n	80075fe <USB_EPClearStall+0x6c>
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075dc:	81fb      	strh	r3, [r7, #14]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	89fb      	ldrh	r3, [r7, #14]
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	78db      	ldrb	r3, [r3, #3]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d06c      	beq.n	80076e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800761c:	81bb      	strh	r3, [r7, #12]
 800761e:	89bb      	ldrh	r3, [r7, #12]
 8007620:	f083 0320 	eor.w	r3, r3, #32
 8007624:	81bb      	strh	r3, [r7, #12]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	89bb      	ldrh	r3, [r7, #12]
 8007632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007642:	b29b      	uxth	r3, r3
 8007644:	8013      	strh	r3, [r2, #0]
 8007646:	e04b      	b.n	80076e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	82fb      	strh	r3, [r7, #22]
 8007656:	8afb      	ldrh	r3, [r7, #22]
 8007658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01b      	beq.n	8007698 <USB_EPClearStall+0x106>
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	82bb      	strh	r3, [r7, #20]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	8abb      	ldrh	r3, [r7, #20]
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	827b      	strh	r3, [r7, #18]
 80076b0:	8a7b      	ldrh	r3, [r7, #18]
 80076b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076b6:	827b      	strh	r3, [r7, #18]
 80076b8:	8a7b      	ldrh	r3, [r7, #18]
 80076ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076be:	827b      	strh	r3, [r7, #18]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	8a7b      	ldrh	r3, [r7, #18]
 80076cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2280      	movs	r2, #128	; 0x80
 8007704:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007752:	b29b      	uxth	r3, r3
 8007754:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800777c:	b480      	push	{r7}
 800777e:	b08d      	sub	sp, #52	; 0x34
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	4611      	mov	r1, r2
 8007788:	461a      	mov	r2, r3
 800778a:	460b      	mov	r3, r1
 800778c:	80fb      	strh	r3, [r7, #6]
 800778e:	4613      	mov	r3, r2
 8007790:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007792:	88bb      	ldrh	r3, [r7, #4]
 8007794:	3301      	adds	r3, #1
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b2:	e01b      	b.n	80077ec <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	3301      	adds	r3, #1
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	3302      	adds	r3, #2
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	3301      	adds	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	3b01      	subs	r3, #1
 80077ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e0      	bne.n	80077b4 <USB_WritePMA+0x38>
  }
}
 80077f2:	bf00      	nop
 80077f4:	3734      	adds	r7, #52	; 0x34
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077fe:	b480      	push	{r7}
 8007800:	b08b      	sub	sp, #44	; 0x2c
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	4611      	mov	r1, r2
 800780a:	461a      	mov	r2, r3
 800780c:	460b      	mov	r3, r1
 800780e:	80fb      	strh	r3, [r7, #6]
 8007810:	4613      	mov	r3, r2
 8007812:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007814:	88bb      	ldrh	r3, [r7, #4]
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	b29b      	uxth	r3, r3
 800781a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800782e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
 8007834:	e018      	b.n	8007868 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	3302      	adds	r3, #2
 8007842:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	3301      	adds	r3, #1
 8007850:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	0a1b      	lsrs	r3, r3, #8
 8007856:	b2da      	uxtb	r2, r3
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	3b01      	subs	r3, #1
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e3      	bne.n	8007836 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800786e:	88bb      	ldrh	r3, [r7, #4]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	b2da      	uxtb	r2, r3
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	701a      	strb	r2, [r3, #0]
  }
}
 800788a:	bf00      	nop
 800788c:	372c      	adds	r7, #44	; 0x2c
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078a6:	f002 f89d 	bl	80099e4 <USBD_static_malloc>
 80078aa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078ba:	2302      	movs	r3, #2
 80078bc:	e066      	b.n	800798c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7c1b      	ldrb	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d119      	bne.n	8007902 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d2:	2202      	movs	r2, #2
 80078d4:	2181      	movs	r1, #129	; 0x81
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 ff29 	bl	800972e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e6:	2202      	movs	r2, #2
 80078e8:	2101      	movs	r1, #1
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 ff1f 	bl	800972e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2210      	movs	r2, #16
 80078fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007900:	e016      	b.n	8007930 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	2202      	movs	r2, #2
 8007906:	2181      	movs	r1, #129	; 0x81
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 ff10 	bl	800972e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007914:	2340      	movs	r3, #64	; 0x40
 8007916:	2202      	movs	r2, #2
 8007918:	2101      	movs	r1, #1
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 ff07 	bl	800972e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2210      	movs	r2, #16
 800792c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007930:	2308      	movs	r3, #8
 8007932:	2203      	movs	r2, #3
 8007934:	2182      	movs	r1, #130	; 0x82
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fef9 	bl	800972e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7c1b      	ldrb	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800796c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007970:	2101      	movs	r1, #1
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 ffcb 	bl	800990e <USBD_LL_PrepareReceive>
 8007978:	e007      	b.n	800798a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	2101      	movs	r1, #1
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 ffc2 	bl	800990e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079a0:	2181      	movs	r1, #129	; 0x81
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fee9 	bl	800977a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079ae:	2101      	movs	r1, #1
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fee2 	bl	800977a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079be:	2182      	movs	r1, #130	; 0x82
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 feda 	bl	800977a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00e      	beq.n	80079fe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f0:	4618      	mov	r0, r3
 80079f2:	f002 f805 	bl	8009a00 <USBD_static_free>
    pdev->pClassData = NULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a18:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03a      	beq.n	8007aa8 <USBD_CDC_Setup+0xa0>
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	f040 8097 	bne.w	8007b66 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	88db      	ldrh	r3, [r3, #6]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d029      	beq.n	8007a94 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b25b      	sxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	da11      	bge.n	8007a6e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	88d2      	ldrh	r2, [r2, #6]
 8007a5c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a5e:	6939      	ldr	r1, [r7, #16]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88db      	ldrh	r3, [r3, #6]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fa8d 	bl	8008f86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a6c:	e082      	b.n	8007b74 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	785a      	ldrb	r2, [r3, #1]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a84:	6939      	ldr	r1, [r7, #16]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	88db      	ldrh	r3, [r3, #6]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 faa6 	bl	8008fde <USBD_CtlPrepareRx>
      break;
 8007a92:	e06f      	b.n	8007b74 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	7850      	ldrb	r0, [r2, #1]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	4798      	blx	r3
      break;
 8007aa6:	e065      	b.n	8007b74 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b0b      	cmp	r3, #11
 8007aae:	d84f      	bhi.n	8007b50 <USBD_CDC_Setup+0x148>
 8007ab0:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <USBD_CDC_Setup+0xb0>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007ae9 	.word	0x08007ae9
 8007abc:	08007b5f 	.word	0x08007b5f
 8007ac0:	08007b51 	.word	0x08007b51
 8007ac4:	08007b51 	.word	0x08007b51
 8007ac8:	08007b51 	.word	0x08007b51
 8007acc:	08007b51 	.word	0x08007b51
 8007ad0:	08007b51 	.word	0x08007b51
 8007ad4:	08007b51 	.word	0x08007b51
 8007ad8:	08007b51 	.word	0x08007b51
 8007adc:	08007b51 	.word	0x08007b51
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b39 	.word	0x08007b39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d107      	bne.n	8007b02 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	2202      	movs	r2, #2
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fa43 	bl	8008f86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b00:	e030      	b.n	8007b64 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f9cd 	bl	8008ea4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b0e:	e029      	b.n	8007b64 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d107      	bne.n	8007b2a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b1a:	f107 030f 	add.w	r3, r7, #15
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fa2f 	bl	8008f86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b28:	e01c      	b.n	8007b64 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f9b9 	bl	8008ea4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	75fb      	strb	r3, [r7, #23]
          break;
 8007b36:	e015      	b.n	8007b64 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d00f      	beq.n	8007b62 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f9ad 	bl	8008ea4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b4e:	e008      	b.n	8007b62 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f9a6 	bl	8008ea4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5c:	e002      	b.n	8007b64 <USBD_CDC_Setup+0x15c>
          break;
 8007b5e:	bf00      	nop
 8007b60:	e008      	b.n	8007b74 <USBD_CDC_Setup+0x16c>
          break;
 8007b62:	bf00      	nop
      }
      break;
 8007b64:	e006      	b.n	8007b74 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f99b 	bl	8008ea4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop

08007b80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e04f      	b.n	8007c42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3318      	adds	r3, #24
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d029      	beq.n	8007c14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	3318      	adds	r3, #24
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	78f9      	ldrb	r1, [r7, #3]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4403      	add	r3, r0
 8007be0:	3338      	adds	r3, #56	; 0x38
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007be8:	fb03 f301 	mul.w	r3, r3, r1
 8007bec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d110      	bne.n	8007c14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3318      	adds	r3, #24
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c06:	78f9      	ldrb	r1, [r7, #3]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 fe5d 	bl	80098cc <USBD_LL_Transmit>
 8007c12:	e015      	b.n	8007c40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e015      	b.n	8007c98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fe6d 	bl	8009950 <USBD_LL_GetRxDataSize>
 8007c76:	4602      	mov	r2, r0
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c92:	4611      	mov	r1, r2
 8007c94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <USBD_CDC_EP0_RxReady+0x46>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cc0:	2bff      	cmp	r3, #255	; 0xff
 8007cc2:	d010      	beq.n	8007ce6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007cd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	22ff      	movs	r2, #255	; 0xff
 8007ce2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2243      	movs	r2, #67	; 0x43
 8007cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20000094 	.word	0x20000094

08007d10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2243      	movs	r2, #67	; 0x43
 8007d1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	20000050 	.word	0x20000050

08007d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2243      	movs	r2, #67	; 0x43
 8007d3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200000d8 	.word	0x200000d8

08007d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d5e:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	2000000c 	.word	0x2000000c

08007d70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e004      	b.n	8007d8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b087      	sub	sp, #28
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ddc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e01a      	b.n	8007e4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d114      	bne.n	8007e4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e3e:	2181      	movs	r1, #129	; 0x81
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fd43 	bl	80098cc <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e016      	b.n	8007ea0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7c1b      	ldrb	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e84:	2101      	movs	r1, #1
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fd41 	bl	800990e <USBD_LL_PrepareReceive>
 8007e8c:	e007      	b.n	8007e9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	2101      	movs	r1, #1
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fd38 	bl	800990e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e01f      	b.n	8007f00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	79fa      	ldrb	r2, [r7, #7]
 8007ef2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f001 fb9f 	bl	8009638 <USBD_LL_Init>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e016      	b.n	8007f4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	f107 020e 	add.w	r2, r7, #14
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fbca 	bl	80096f8 <USBD_LL_Start>
 8007f64:	4603      	mov	r3, r0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
  }

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ff16 	bl	8008e30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	2b01      	cmp	r3, #1
 8008026:	d00e      	beq.n	8008046 <USBD_LL_SetupStage+0x5a>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d302      	bcc.n	8008032 <USBD_LL_SetupStage+0x46>
 800802c:	2b02      	cmp	r3, #2
 800802e:	d014      	beq.n	800805a <USBD_LL_SetupStage+0x6e>
 8008030:	e01d      	b.n	800806e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f9d6 	bl	80083ec <USBD_StdDevReq>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
      break;
 8008044:	e020      	b.n	8008088 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa3a 	bl	80084c8 <USBD_StdItfReq>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
      break;
 8008058:	e016      	b.n	8008088 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa76 	bl	8008554 <USBD_StdEPReq>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e00c      	b.n	8008088 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008074:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008078:	b2db      	uxtb	r3, r3
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 fb9b 	bl	80097b8 <USBD_LL_StallEP>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]
      break;
 8008086:	bf00      	nop
  }

  return ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	460b      	mov	r3, r1
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d137      	bne.n	8008116 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d14a      	bne.n	800814e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d913      	bls.n	80080ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	1ad2      	subs	r2, r2, r3
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	4293      	cmp	r3, r2
 80080dc:	bf28      	it	cs
 80080de:	4613      	movcs	r3, r2
 80080e0:	461a      	mov	r2, r3
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 ff97 	bl	8009018 <USBD_CtlContinueRx>
 80080ea:	e030      	b.n	800814e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d105      	bne.n	800810e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 ff93 	bl	800903a <USBD_CtlSendStatus>
 8008114:	e01b      	b.n	800814e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d013      	beq.n	800814a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008128:	2b03      	cmp	r3, #3
 800812a:	d10e      	bne.n	800814a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	7afa      	ldrb	r2, [r7, #11]
 8008136:	4611      	mov	r1, r2
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	4798      	blx	r3
 800813c:	4603      	mov	r3, r0
 800813e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	e002      	b.n	8008150 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800814a:	2303      	movs	r3, #3
 800814c:	e000      	b.n	8008150 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	460b      	mov	r3, r1
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d16a      	bne.n	8008242 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3314      	adds	r3, #20
 8008170:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008178:	2b02      	cmp	r3, #2
 800817a:	d155      	bne.n	8008228 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	429a      	cmp	r2, r3
 8008186:	d914      	bls.n	80081b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	461a      	mov	r2, r3
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 ff0c 	bl	8008fbc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f001 fbaf 	bl	800990e <USBD_LL_PrepareReceive>
 80081b0:	e03a      	b.n	8008228 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d11c      	bne.n	80081f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d316      	bcc.n	80081f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d20f      	bcs.n	80081f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081d8:	2200      	movs	r2, #0
 80081da:	2100      	movs	r1, #0
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 feed 	bl	8008fbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f001 fb8c 	bl	800990e <USBD_LL_PrepareReceive>
 80081f6:	e017      	b.n	8008228 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800820a:	2b03      	cmp	r3, #3
 800820c:	d105      	bne.n	800821a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800821a:	2180      	movs	r1, #128	; 0x80
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f001 facb 	bl	80097b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 ff1c 	bl	8009060 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d123      	bne.n	800827a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff fe9b 	bl	8007f6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008240:	e01b      	b.n	800827a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008254:	2b03      	cmp	r3, #3
 8008256:	d10e      	bne.n	8008276 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	7afa      	ldrb	r2, [r7, #11]
 8008262:	4611      	mov	r1, r2
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	4798      	blx	r3
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	e002      	b.n	800827c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	e000      	b.n	800827c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6852      	ldr	r2, [r2, #4]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	4611      	mov	r1, r2
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	2200      	movs	r2, #0
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fa2d 	bl	800972e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2240      	movs	r2, #64	; 0x40
 80082e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082e4:	2340      	movs	r3, #64	; 0x40
 80082e6:	2200      	movs	r2, #0
 80082e8:	2180      	movs	r1, #128	; 0x80
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 fa1f 	bl	800972e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2240      	movs	r2, #64	; 0x40
 80082fa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	78fa      	ldrb	r2, [r7, #3]
 8008316:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835e:	2b04      	cmp	r3, #4
 8008360:	d105      	bne.n	800836e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838a:	2b03      	cmp	r3, #3
 800838c:	d10b      	bne.n	80083a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	3301      	adds	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083ce:	8a3b      	ldrh	r3, [r7, #16]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	b21a      	sxth	r2, r3
 80083d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083d8:	4313      	orrs	r3, r2
 80083da:	b21b      	sxth	r3, r3
 80083dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083de:	89fb      	ldrh	r3, [r7, #14]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008402:	2b20      	cmp	r3, #32
 8008404:	d004      	beq.n	8008410 <USBD_StdDevReq+0x24>
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d002      	beq.n	8008410 <USBD_StdDevReq+0x24>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <USBD_StdDevReq+0x38>
 800840e:	e050      	b.n	80084b2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]
    break;
 8008422:	e04b      	b.n	80084bc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	2b09      	cmp	r3, #9
 800842a:	d83c      	bhi.n	80084a6 <USBD_StdDevReq+0xba>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <USBD_StdDevReq+0x48>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008489 	.word	0x08008489
 8008438:	0800849d 	.word	0x0800849d
 800843c:	080084a7 	.word	0x080084a7
 8008440:	08008493 	.word	0x08008493
 8008444:	080084a7 	.word	0x080084a7
 8008448:	08008467 	.word	0x08008467
 800844c:	0800845d 	.word	0x0800845d
 8008450:	080084a7 	.word	0x080084a7
 8008454:	0800847f 	.word	0x0800847f
 8008458:	08008471 	.word	0x08008471
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9d0 	bl	8008804 <USBD_GetDescriptor>
      break;
 8008464:	e024      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fb5f 	bl	8008b2c <USBD_SetAddress>
      break;
 800846e:	e01f      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fb9c 	bl	8008bb0 <USBD_SetConfig>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
      break;
 800847c:	e018      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fc39 	bl	8008cf8 <USBD_GetConfig>
      break;
 8008486:	e013      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fc68 	bl	8008d60 <USBD_GetStatus>
      break;
 8008490:	e00e      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc96 	bl	8008dc6 <USBD_SetFeature>
      break;
 800849a:	e009      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fca5 	bl	8008dee <USBD_ClrFeature>
      break;
 80084a4:	e004      	b.n	80084b0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fcfb 	bl	8008ea4 <USBD_CtlError>
      break;
 80084ae:	bf00      	nop
    }
    break;
 80084b0:	e004      	b.n	80084bc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fcf5 	bl	8008ea4 <USBD_CtlError>
    break;
 80084ba:	bf00      	nop
  }

  return ret;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop

080084c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d003      	beq.n	80084ea <USBD_StdItfReq+0x22>
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d001      	beq.n	80084ea <USBD_StdItfReq+0x22>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12a      	bne.n	8008540 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f0:	3b01      	subs	r3, #1
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d81d      	bhi.n	8008532 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	889b      	ldrh	r3, [r3, #4]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d813      	bhi.n	8008528 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	88db      	ldrh	r3, [r3, #6]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d110      	bne.n	800853c <USBD_StdItfReq+0x74>
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fd8a 	bl	800903a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008526:	e009      	b.n	800853c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcba 	bl	8008ea4 <USBD_CtlError>
      break;
 8008530:	e004      	b.n	800853c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fcb5 	bl	8008ea4 <USBD_CtlError>
      break;
 800853a:	e000      	b.n	800853e <USBD_StdItfReq+0x76>
      break;
 800853c:	bf00      	nop
    }
    break;
 800853e:	e004      	b.n	800854a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fcae 	bl	8008ea4 <USBD_CtlError>
    break;
 8008548:	bf00      	nop
  }

  return ret;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	889b      	ldrh	r3, [r3, #4]
 8008566:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008570:	2b20      	cmp	r3, #32
 8008572:	d004      	beq.n	800857e <USBD_StdEPReq+0x2a>
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	d002      	beq.n	800857e <USBD_StdEPReq+0x2a>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <USBD_StdEPReq+0x3e>
 800857c:	e137      	b.n	80087ee <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
    break;
 8008590:	e132      	b.n	80087f8 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d03e      	beq.n	8008618 <USBD_StdEPReq+0xc4>
 800859a:	2b03      	cmp	r3, #3
 800859c:	d002      	beq.n	80085a4 <USBD_StdEPReq+0x50>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d079      	beq.n	8008696 <USBD_StdEPReq+0x142>
 80085a2:	e11e      	b.n	80087e2 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d002      	beq.n	80085b4 <USBD_StdEPReq+0x60>
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d015      	beq.n	80085de <USBD_StdEPReq+0x8a>
 80085b2:	e02b      	b.n	800860c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <USBD_StdEPReq+0x80>
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b80      	cmp	r3, #128	; 0x80
 80085be:	d009      	beq.n	80085d4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f8f7 	bl	80097b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ca:	2180      	movs	r1, #128	; 0x80
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 f8f3 	bl	80097b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085d2:	e020      	b.n	8008616 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fc64 	bl	8008ea4 <USBD_CtlError>
        break;
 80085dc:	e01b      	b.n	8008616 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10e      	bne.n	8008604 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <USBD_StdEPReq+0xb0>
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b80      	cmp	r3, #128	; 0x80
 80085f0:	d008      	beq.n	8008604 <USBD_StdEPReq+0xb0>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	88db      	ldrh	r3, [r3, #6]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d104      	bne.n	8008604 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 f8da 	bl	80097b8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fd18 	bl	800903a <USBD_CtlSendStatus>

        break;
 800860a:	e004      	b.n	8008616 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fc48 	bl	8008ea4 <USBD_CtlError>
        break;
 8008614:	bf00      	nop
      }
      break;
 8008616:	e0e9      	b.n	80087ec <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861e:	2b02      	cmp	r3, #2
 8008620:	d002      	beq.n	8008628 <USBD_StdEPReq+0xd4>
 8008622:	2b03      	cmp	r3, #3
 8008624:	d015      	beq.n	8008652 <USBD_StdEPReq+0xfe>
 8008626:	e02f      	b.n	8008688 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <USBD_StdEPReq+0xf4>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d009      	beq.n	8008648 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 f8bd 	bl	80097b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800863e:	2180      	movs	r1, #128	; 0x80
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f8b9 	bl	80097b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008646:	e025      	b.n	8008694 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fc2a 	bl	8008ea4 <USBD_CtlError>
        break;
 8008650:	e020      	b.n	8008694 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	885b      	ldrh	r3, [r3, #2]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d11b      	bne.n	8008692 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f8c4 	bl	80097f6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fce3 	bl	800903a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008686:	e004      	b.n	8008692 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fc0a 	bl	8008ea4 <USBD_CtlError>
        break;
 8008690:	e000      	b.n	8008694 <USBD_StdEPReq+0x140>
        break;
 8008692:	bf00      	nop
      }
      break;
 8008694:	e0aa      	b.n	80087ec <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869c:	2b02      	cmp	r3, #2
 800869e:	d002      	beq.n	80086a6 <USBD_StdEPReq+0x152>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d032      	beq.n	800870a <USBD_StdEPReq+0x1b6>
 80086a4:	e097      	b.n	80087d6 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <USBD_StdEPReq+0x168>
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b80      	cmp	r3, #128	; 0x80
 80086b0:	d004      	beq.n	80086bc <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fbf5 	bl	8008ea4 <USBD_CtlError>
          break;
 80086ba:	e091      	b.n	80087e0 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da0b      	bge.n	80086dc <USBD_StdEPReq+0x188>
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	3310      	adds	r3, #16
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	4413      	add	r3, r2
 80086d8:	3304      	adds	r3, #4
 80086da:	e00b      	b.n	80086f4 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4413      	add	r3, r2
 80086f2:	3304      	adds	r3, #4
 80086f4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2202      	movs	r2, #2
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fc3f 	bl	8008f86 <USBD_CtlSendData>
        break;
 8008708:	e06a      	b.n	80087e0 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800870a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	da11      	bge.n	8008736 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	f003 020f 	and.w	r2, r3, #15
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	3324      	adds	r3, #36	; 0x24
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d117      	bne.n	800875c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fbb8 	bl	8008ea4 <USBD_CtlError>
            break;
 8008734:	e054      	b.n	80087e0 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fba5 	bl	8008ea4 <USBD_CtlError>
            break;
 800875a:	e041      	b.n	80087e0 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800875c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008760:	2b00      	cmp	r3, #0
 8008762:	da0b      	bge.n	800877c <USBD_StdEPReq+0x228>
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	3310      	adds	r3, #16
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	4413      	add	r3, r2
 8008778:	3304      	adds	r3, #4
 800877a:	e00b      	b.n	8008794 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	3304      	adds	r3, #4
 8008794:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <USBD_StdEPReq+0x24e>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d103      	bne.n	80087aa <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e00e      	b.n	80087c8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 f840 	bl	8009834 <USBD_LL_IsStallEP>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2201      	movs	r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e002      	b.n	80087c8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2202      	movs	r2, #2
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fbd9 	bl	8008f86 <USBD_CtlSendData>
          break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fb63 	bl	8008ea4 <USBD_CtlError>
        break;
 80087de:	bf00      	nop
      }
      break;
 80087e0:	e004      	b.n	80087ec <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fb5d 	bl	8008ea4 <USBD_CtlError>
      break;
 80087ea:	bf00      	nop
    }
    break;
 80087ec:	e004      	b.n	80087f8 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb57 	bl	8008ea4 <USBD_CtlError>
    break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	885b      	ldrh	r3, [r3, #2]
 800881e:	0a1b      	lsrs	r3, r3, #8
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	2b0e      	cmp	r3, #14
 8008826:	f200 8152 	bhi.w	8008ace <USBD_GetDescriptor+0x2ca>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USBD_GetDescriptor+0x2c>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	080088a1 	.word	0x080088a1
 8008834:	080088b9 	.word	0x080088b9
 8008838:	080088f9 	.word	0x080088f9
 800883c:	08008acf 	.word	0x08008acf
 8008840:	08008acf 	.word	0x08008acf
 8008844:	08008a6f 	.word	0x08008a6f
 8008848:	08008a9b 	.word	0x08008a9b
 800884c:	08008acf 	.word	0x08008acf
 8008850:	08008acf 	.word	0x08008acf
 8008854:	08008acf 	.word	0x08008acf
 8008858:	08008acf 	.word	0x08008acf
 800885c:	08008acf 	.word	0x08008acf
 8008860:	08008acf 	.word	0x08008acf
 8008864:	08008acf 	.word	0x08008acf
 8008868:	0800886d 	.word	0x0800886d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	7c12      	ldrb	r2, [r2, #16]
 8008884:	f107 0108 	add.w	r1, r7, #8
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800888e:	e126      	b.n	8008ade <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fb06 	bl	8008ea4 <USBD_CtlError>
      err++;
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	3301      	adds	r3, #1
 800889c:	72fb      	strb	r3, [r7, #11]
    break;
 800889e:	e11e      	b.n	8008ade <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
    break;
 80088b6:	e112      	b.n	8008ade <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7c1b      	ldrb	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f107 0208 	add.w	r2, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80088da:	e100      	b.n	8008ade <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	f107 0208 	add.w	r2, r7, #8
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	2202      	movs	r2, #2
 80088f4:	701a      	strb	r2, [r3, #0]
    break;
 80088f6:	e0f2      	b.n	8008ade <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	885b      	ldrh	r3, [r3, #2]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b05      	cmp	r3, #5
 8008900:	f200 80ac 	bhi.w	8008a5c <USBD_GetDescriptor+0x258>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <USBD_GetDescriptor+0x108>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008925 	.word	0x08008925
 8008910:	08008959 	.word	0x08008959
 8008914:	0800898d 	.word	0x0800898d
 8008918:	080089c1 	.word	0x080089c1
 800891c:	080089f5 	.word	0x080089f5
 8008920:	08008a29 	.word	0x08008a29
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008946:	e091      	b.n	8008a6c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 faaa 	bl	8008ea4 <USBD_CtlError>
        err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
      break;
 8008956:	e089      	b.n	8008a6c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800897a:	e077      	b.n	8008a6c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa90 	bl	8008ea4 <USBD_CtlError>
        err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
      break;
 800898a:	e06f      	b.n	8008a6c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ae:	e05d      	b.n	8008a6c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa76 	bl	8008ea4 <USBD_CtlError>
        err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
      break;
 80089be:	e055      	b.n	8008a6c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e2:	e043      	b.n	8008a6c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa5c 	bl	8008ea4 <USBD_CtlError>
        err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
      break;
 80089f2:	e03b      	b.n	8008a6c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a16:	e029      	b.n	8008a6c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa42 	bl	8008ea4 <USBD_CtlError>
        err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
      break;
 8008a26:	e021      	b.n	8008a6c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a4a:	e00f      	b.n	8008a6c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa28 	bl	8008ea4 <USBD_CtlError>
        err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
      break;
 8008a5a:	e007      	b.n	8008a6c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa20 	bl	8008ea4 <USBD_CtlError>
      err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a6a:	bf00      	nop
    }
    break;
 8008a6c:	e037      	b.n	8008ade <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7c1b      	ldrb	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f107 0208 	add.w	r2, r7, #8
 8008a82:	4610      	mov	r0, r2
 8008a84:	4798      	blx	r3
 8008a86:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a88:	e029      	b.n	8008ade <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa09 	bl	8008ea4 <USBD_CtlError>
      err++;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	3301      	adds	r3, #1
 8008a96:	72fb      	strb	r3, [r7, #11]
    break;
 8008a98:	e021      	b.n	8008ade <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10d      	bne.n	8008abe <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	2207      	movs	r2, #7
 8008aba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008abc:	e00f      	b.n	8008ade <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f9ef 	bl	8008ea4 <USBD_CtlError>
      err++;
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	72fb      	strb	r3, [r7, #11]
    break;
 8008acc:	e007      	b.n	8008ade <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9e7 	bl	8008ea4 <USBD_CtlError>
    err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
    break;
 8008adc:	bf00      	nop
  }

  if (err != 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11e      	bne.n	8008b22 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	88db      	ldrh	r3, [r3, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d016      	beq.n	8008b1a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008aec:	893b      	ldrh	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00e      	beq.n	8008b10 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	88da      	ldrh	r2, [r3, #6]
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	bf28      	it	cs
 8008afc:	4613      	movcs	r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	461a      	mov	r2, r3
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fa3c 	bl	8008f86 <USBD_CtlSendData>
 8008b0e:	e009      	b.n	8008b24 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9c6 	bl	8008ea4 <USBD_CtlError>
 8008b18:	e004      	b.n	8008b24 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa8d 	bl	800903a <USBD_CtlSendStatus>
 8008b20:	e000      	b.n	8008b24 <USBD_GetDescriptor+0x320>
    return;
 8008b22:	bf00      	nop
    }
  }
}
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	889b      	ldrh	r3, [r3, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d130      	bne.n	8008ba0 <USBD_SetAddress+0x74>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d12c      	bne.n	8008ba0 <USBD_SetAddress+0x74>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b4c:	d828      	bhi.n	8008ba0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d104      	bne.n	8008b6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f99c 	bl	8008ea4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	e01c      	b.n	8008ba8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7bfa      	ldrb	r2, [r7, #15]
 8008b72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fe87 	bl	800988e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa5a 	bl	800903a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	e008      	b.n	8008ba8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9e:	e003      	b.n	8008ba8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f97e 	bl	8008ea4 <USBD_CtlError>
  }
}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	4b4b      	ldr	r3, [pc, #300]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008bc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc8:	4b4a      	ldr	r3, [pc, #296]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d905      	bls.n	8008bdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f966 	bl	8008ea4 <USBD_CtlError>
    return USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e087      	b.n	8008cec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d002      	beq.n	8008bec <USBD_SetConfig+0x3c>
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d025      	beq.n	8008c36 <USBD_SetConfig+0x86>
 8008bea:	e071      	b.n	8008cd0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008bec:	4b41      	ldr	r3, [pc, #260]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01c      	beq.n	8008c2e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008bf4:	4b3f      	ldr	r3, [pc, #252]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bfe:	4b3d      	ldr	r3, [pc, #244]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff f9bd 	bl	8007f84 <USBD_SetClassConfig>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f944 	bl	8008ea4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c1c:	e065      	b.n	8008cea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa0b 	bl	800903a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2203      	movs	r2, #3
 8008c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c2c:	e05d      	b.n	8008cea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa03 	bl	800903a <USBD_CtlSendStatus>
    break;
 8008c34:	e059      	b.n	8008cea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c36:	4b2f      	ldr	r3, [pc, #188]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d112      	bne.n	8008c64 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c46:	4b2b      	ldr	r3, [pc, #172]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c50:	4b28      	ldr	r3, [pc, #160]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff f9b0 	bl	8007fbc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9ec 	bl	800903a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c62:	e042      	b.n	8008cea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c64:	4b23      	ldr	r3, [pc, #140]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d02a      	beq.n	8008cc8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff f99e 	bl	8007fbc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c80:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c8a:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff f977 	bl	8007f84 <USBD_SetClassConfig>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00f      	beq.n	8008cc0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f8fe 	bl	8008ea4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f983 	bl	8007fbc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cbe:	e014      	b.n	8008cea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9ba 	bl	800903a <USBD_CtlSendStatus>
    break;
 8008cc6:	e010      	b.n	8008cea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f9b6 	bl	800903a <USBD_CtlSendStatus>
    break;
 8008cce:	e00c      	b.n	8008cea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f8e6 	bl	8008ea4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <USBD_SetConfig+0x144>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff f96c 	bl	8007fbc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce8:	bf00      	nop
  }

  return ret;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200001d2 	.word	0x200001d2

08008cf8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	88db      	ldrh	r3, [r3, #6]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d004      	beq.n	8008d14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8c9 	bl	8008ea4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d12:	e021      	b.n	8008d58 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	db17      	blt.n	8008d4e <USBD_GetConfig+0x56>
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	dd02      	ble.n	8008d28 <USBD_GetConfig+0x30>
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d00b      	beq.n	8008d3e <USBD_GetConfig+0x46>
 8008d26:	e012      	b.n	8008d4e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3308      	adds	r3, #8
 8008d32:	2201      	movs	r2, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f925 	bl	8008f86 <USBD_CtlSendData>
      break;
 8008d3c:	e00c      	b.n	8008d58 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3304      	adds	r3, #4
 8008d42:	2201      	movs	r2, #1
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f91d 	bl	8008f86 <USBD_CtlSendData>
      break;
 8008d4c:	e004      	b.n	8008d58 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f8a7 	bl	8008ea4 <USBD_CtlError>
      break;
 8008d56:	bf00      	nop
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d70:	3b01      	subs	r3, #1
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d81e      	bhi.n	8008db4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	88db      	ldrh	r3, [r3, #6]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d004      	beq.n	8008d88 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f88f 	bl	8008ea4 <USBD_CtlError>
      break;
 8008d86:	e01a      	b.n	8008dbe <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f043 0202 	orr.w	r2, r3, #2
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	330c      	adds	r3, #12
 8008da8:	2202      	movs	r2, #2
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f8ea 	bl	8008f86 <USBD_CtlSendData>
    break;
 8008db2:	e004      	b.n	8008dbe <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f874 	bl	8008ea4 <USBD_CtlError>
    break;
 8008dbc:	bf00      	nop
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	885b      	ldrh	r3, [r3, #2]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d106      	bne.n	8008de6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f92a 	bl	800903a <USBD_CtlSendStatus>
  }
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d80b      	bhi.n	8008e1c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	885b      	ldrh	r3, [r3, #2]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d10c      	bne.n	8008e26 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f910 	bl	800903a <USBD_CtlSendStatus>
      }
      break;
 8008e1a:	e004      	b.n	8008e26 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f840 	bl	8008ea4 <USBD_CtlError>
      break;
 8008e24:	e000      	b.n	8008e28 <USBD_ClrFeature+0x3a>
      break;
 8008e26:	bf00      	nop
  }
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	781a      	ldrb	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff faa8 	bl	80083b0 <SWAPBYTE>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fa9b 	bl	80083b0 <SWAPBYTE>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fa8e 	bl	80083b0 <SWAPBYTE>
 8008e94:	4603      	mov	r3, r0
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	80da      	strh	r2, [r3, #6]
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eae:	2180      	movs	r1, #128	; 0x80
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc81 	bl	80097b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fc7d 	bl	80097b8 <USBD_LL_StallEP>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b086      	sub	sp, #24
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d036      	beq.n	8008f4a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ee0:	6938      	ldr	r0, [r7, #16]
 8008ee2:	f000 f836 	bl	8008f52 <USBD_GetLen>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	3301      	adds	r3, #1
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	4413      	add	r3, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	3301      	adds	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	3301      	adds	r3, #1
 8008f14:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f16:	e013      	b.n	8008f40 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	7812      	ldrb	r2, [r2, #0]
 8008f22:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	3301      	adds	r3, #1
 8008f28:	613b      	str	r3, [r7, #16]
    idx++;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	4413      	add	r3, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e7      	bne.n	8008f18 <USBD_GetString+0x52>
 8008f48:	e000      	b.n	8008f4c <USBD_GetString+0x86>
    return;
 8008f4a:	bf00      	nop
  }
}
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f62:	e005      	b.n	8008f70 <USBD_GetLen+0x1e>
  {
    len++;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	3301      	adds	r3, #1
 8008f68:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1f5      	bne.n	8008f64 <USBD_GetLen+0x12>
  }

  return len;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	2100      	movs	r1, #0
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 fc8d 	bl	80098cc <USBD_LL_Transmit>

  return USBD_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fc7c 	bl	80098cc <USBD_LL_Transmit>

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2203      	movs	r2, #3
 8008fee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	2100      	movs	r1, #0
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fc80 	bl	800990e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	2100      	movs	r1, #0
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fc6f 	bl	800990e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2204      	movs	r2, #4
 8009046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800904a:	2300      	movs	r3, #0
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fc3b 	bl	80098cc <USBD_LL_Transmit>

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2205      	movs	r2, #5
 800906c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009070:	2300      	movs	r3, #0
 8009072:	2200      	movs	r2, #0
 8009074:	2100      	movs	r1, #0
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc49 	bl	800990e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800908c:	2200      	movs	r2, #0
 800908e:	4912      	ldr	r1, [pc, #72]	; (80090d8 <MX_USB_Device_Init+0x50>)
 8009090:	4812      	ldr	r0, [pc, #72]	; (80090dc <MX_USB_Device_Init+0x54>)
 8009092:	f7fe ff09 	bl	8007ea8 <USBD_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800909c:	f7f7 ff08 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090a0:	490f      	ldr	r1, [pc, #60]	; (80090e0 <MX_USB_Device_Init+0x58>)
 80090a2:	480e      	ldr	r0, [pc, #56]	; (80090dc <MX_USB_Device_Init+0x54>)
 80090a4:	f7fe ff30 	bl	8007f08 <USBD_RegisterClass>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090ae:	f7f7 feff 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090b2:	490c      	ldr	r1, [pc, #48]	; (80090e4 <MX_USB_Device_Init+0x5c>)
 80090b4:	4809      	ldr	r0, [pc, #36]	; (80090dc <MX_USB_Device_Init+0x54>)
 80090b6:	f7fe fe5b 	bl	8007d70 <USBD_CDC_RegisterInterface>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090c0:	f7f7 fef6 	bl	8000eb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090c4:	4805      	ldr	r0, [pc, #20]	; (80090dc <MX_USB_Device_Init+0x54>)
 80090c6:	f7fe ff46 	bl	8007f56 <USBD_Start>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090d0:	f7f7 feee 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090d4:	bf00      	nop
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000130 	.word	0x20000130
 80090dc:	200006a4 	.word	0x200006a4
 80090e0:	20000018 	.word	0x20000018
 80090e4:	2000011c 	.word	0x2000011c

080090e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090ec:	2200      	movs	r2, #0
 80090ee:	4905      	ldr	r1, [pc, #20]	; (8009104 <CDC_Init_FS+0x1c>)
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <CDC_Init_FS+0x20>)
 80090f2:	f7fe fe52 	bl	8007d9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090f6:	4905      	ldr	r1, [pc, #20]	; (800910c <CDC_Init_FS+0x24>)
 80090f8:	4803      	ldr	r0, [pc, #12]	; (8009108 <CDC_Init_FS+0x20>)
 80090fa:	f7fe fe67 	bl	8007dcc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009100:	4618      	mov	r0, r3
 8009102:	bd80      	pop	{r7, pc}
 8009104:	20000d5c 	.word	0x20000d5c
 8009108:	200006a4 	.word	0x200006a4
 800910c:	20000974 	.word	0x20000974

08009110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009116:	4618      	mov	r0, r3
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
 800912c:	4613      	mov	r3, r2
 800912e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b23      	cmp	r3, #35	; 0x23
 8009134:	d84a      	bhi.n	80091cc <CDC_Control_FS+0xac>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <CDC_Control_FS+0x1c>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	080091cd 	.word	0x080091cd
 8009140:	080091cd 	.word	0x080091cd
 8009144:	080091cd 	.word	0x080091cd
 8009148:	080091cd 	.word	0x080091cd
 800914c:	080091cd 	.word	0x080091cd
 8009150:	080091cd 	.word	0x080091cd
 8009154:	080091cd 	.word	0x080091cd
 8009158:	080091cd 	.word	0x080091cd
 800915c:	080091cd 	.word	0x080091cd
 8009160:	080091cd 	.word	0x080091cd
 8009164:	080091cd 	.word	0x080091cd
 8009168:	080091cd 	.word	0x080091cd
 800916c:	080091cd 	.word	0x080091cd
 8009170:	080091cd 	.word	0x080091cd
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091cd 	.word	0x080091cd
 800917c:	080091cd 	.word	0x080091cd
 8009180:	080091cd 	.word	0x080091cd
 8009184:	080091cd 	.word	0x080091cd
 8009188:	080091cd 	.word	0x080091cd
 800918c:	080091cd 	.word	0x080091cd
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091cd 	.word	0x080091cd
 8009198:	080091cd 	.word	0x080091cd
 800919c:	080091cd 	.word	0x080091cd
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091cd 	.word	0x080091cd
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091cd 	.word	0x080091cd
 80091c4:	080091cd 	.word	0x080091cd
 80091c8:	080091cd 	.word	0x080091cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091cc:	bf00      	nop
  }

  return (USBD_OK);
 80091ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7f7 f815 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4805      	ldr	r0, [pc, #20]	; (8009208 <CDC_Receive_FS+0x2c>)
 80091f2:	f7fe fdeb 	bl	8007dcc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091f6:	4804      	ldr	r0, [pc, #16]	; (8009208 <CDC_Receive_FS+0x2c>)
 80091f8:	f7fe fe2c 	bl	8007e54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200006a4 	.word	0x200006a4

0800920c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800921c:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <CDC_Transmit_FS+0x48>)
 800921e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009222:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800922e:	2301      	movs	r3, #1
 8009230:	e00b      	b.n	800924a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009232:	887b      	ldrh	r3, [r7, #2]
 8009234:	461a      	mov	r2, r3
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4806      	ldr	r0, [pc, #24]	; (8009254 <CDC_Transmit_FS+0x48>)
 800923a:	f7fe fdae 	bl	8007d9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800923e:	4805      	ldr	r0, [pc, #20]	; (8009254 <CDC_Transmit_FS+0x48>)
 8009240:	f7fe fdd8 	bl	8007df4 <USBD_CDC_TransmitPacket>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	200006a4 	.word	0x200006a4

08009258 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800926a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800926e:	4618      	mov	r0, r3
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
	...

0800927c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2212      	movs	r2, #18
 800928c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800928e:	4b03      	ldr	r3, [pc, #12]	; (800929c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20000150 	.word	0x20000150

080092a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2204      	movs	r2, #4
 80092b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092b2:	4b03      	ldr	r3, [pc, #12]	; (80092c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	20000164 	.word	0x20000164

080092c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d105      	bne.n	80092e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	4907      	ldr	r1, [pc, #28]	; (80092f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092da:	4808      	ldr	r0, [pc, #32]	; (80092fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80092dc:	f7ff fdf3 	bl	8008ec6 <USBD_GetString>
 80092e0:	e004      	b.n	80092ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4904      	ldr	r1, [pc, #16]	; (80092f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092e6:	4805      	ldr	r0, [pc, #20]	; (80092fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80092e8:	f7ff fded 	bl	8008ec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20001144 	.word	0x20001144
 80092fc:	08009b00 	.word	0x08009b00

08009300 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	4904      	ldr	r1, [pc, #16]	; (8009320 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009310:	4804      	ldr	r0, [pc, #16]	; (8009324 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009312:	f7ff fdd8 	bl	8008ec6 <USBD_GetString>
  return USBD_StrDesc;
 8009316:	4b02      	ldr	r3, [pc, #8]	; (8009320 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20001144 	.word	0x20001144
 8009324:	08009b18 	.word	0x08009b18

08009328 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	221a      	movs	r2, #26
 8009338:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800933a:	f000 f843 	bl	80093c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800933e:	4b02      	ldr	r3, [pc, #8]	; (8009348 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000168 	.word	0x20000168

0800934c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d105      	bne.n	800936a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4907      	ldr	r1, [pc, #28]	; (8009380 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009362:	4808      	ldr	r0, [pc, #32]	; (8009384 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009364:	f7ff fdaf 	bl	8008ec6 <USBD_GetString>
 8009368:	e004      	b.n	8009374 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4904      	ldr	r1, [pc, #16]	; (8009380 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800936e:	4805      	ldr	r0, [pc, #20]	; (8009384 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009370:	f7ff fda9 	bl	8008ec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20001144 	.word	0x20001144
 8009384:	08009b2c 	.word	0x08009b2c

08009388 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4907      	ldr	r1, [pc, #28]	; (80093bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800939e:	4808      	ldr	r0, [pc, #32]	; (80093c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093a0:	f7ff fd91 	bl	8008ec6 <USBD_GetString>
 80093a4:	e004      	b.n	80093b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	4904      	ldr	r1, [pc, #16]	; (80093bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093aa:	4805      	ldr	r0, [pc, #20]	; (80093c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093ac:	f7ff fd8b 	bl	8008ec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20001144 	.word	0x20001144
 80093c0:	08009b38 	.word	0x08009b38

080093c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ca:	4b0f      	ldr	r3, [pc, #60]	; (8009408 <Get_SerialNum+0x44>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093d0:	4b0e      	ldr	r3, [pc, #56]	; (800940c <Get_SerialNum+0x48>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093d6:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <Get_SerialNum+0x4c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4413      	add	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d009      	beq.n	80093fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093ea:	2208      	movs	r2, #8
 80093ec:	4909      	ldr	r1, [pc, #36]	; (8009414 <Get_SerialNum+0x50>)
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 f814 	bl	800941c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093f4:	2204      	movs	r2, #4
 80093f6:	4908      	ldr	r1, [pc, #32]	; (8009418 <Get_SerialNum+0x54>)
 80093f8:	68b8      	ldr	r0, [r7, #8]
 80093fa:	f000 f80f 	bl	800941c <IntToUnicode>
  }
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	1fff7590 	.word	0x1fff7590
 800940c:	1fff7594 	.word	0x1fff7594
 8009410:	1fff7598 	.word	0x1fff7598
 8009414:	2000016a 	.word	0x2000016a
 8009418:	2000017a 	.word	0x2000017a

0800941c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
 8009432:	e027      	b.n	8009484 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0f1b      	lsrs	r3, r3, #28
 8009438:	2b09      	cmp	r3, #9
 800943a:	d80b      	bhi.n	8009454 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	0f1b      	lsrs	r3, r3, #28
 8009440:	b2da      	uxtb	r2, r3
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	4619      	mov	r1, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	440b      	add	r3, r1
 800944c:	3230      	adds	r2, #48	; 0x30
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	e00a      	b.n	800946a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0f1b      	lsrs	r3, r3, #28
 8009458:	b2da      	uxtb	r2, r3
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4619      	mov	r1, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	440b      	add	r3, r1
 8009464:	3237      	adds	r2, #55	; 0x37
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	011b      	lsls	r3, r3, #4
 800946e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	3301      	adds	r3, #1
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4413      	add	r3, r2
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	3301      	adds	r3, #1
 8009482:	75fb      	strb	r3, [r7, #23]
 8009484:	7dfa      	ldrb	r2, [r7, #23]
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	429a      	cmp	r2, r3
 800948a:	d3d3      	bcc.n	8009434 <IntToUnicode+0x18>
  }
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a0d      	ldr	r2, [pc, #52]	; (80094dc <HAL_PCD_MspInit+0x44>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d113      	bne.n	80094d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <HAL_PCD_MspInit+0x48>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	4a0c      	ldr	r2, [pc, #48]	; (80094e0 <HAL_PCD_MspInit+0x48>)
 80094b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094b4:	6593      	str	r3, [r2, #88]	; 0x58
 80094b6:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <HAL_PCD_MspInit+0x48>)
 80094b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	2014      	movs	r0, #20
 80094c8:	f7f8 f92b 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80094cc:	2014      	movs	r0, #20
 80094ce:	f7f8 f942 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	40005c00 	.word	0x40005c00
 80094e0:	40021000 	.word	0x40021000

080094e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7fe fd76 	bl	8007fec <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	440b      	add	r3, r1
 8009528:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	4619      	mov	r1, r3
 8009532:	f7fe fdae 	bl	8008092 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009550:	78fa      	ldrb	r2, [r7, #3]
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	440b      	add	r3, r1
 800955e:	333c      	adds	r3, #60	; 0x3c
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	4619      	mov	r1, r3
 8009566:	f7fe fdf7 	bl	8008158 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe fefb 	bl	800837c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009596:	2301      	movs	r3, #1
 8009598:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d001      	beq.n	80095a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095a2:	f7f7 fc85 	bl	8000eb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095ac:	7bfa      	ldrb	r2, [r7, #15]
 80095ae:	4611      	mov	r1, r2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fea8 	bl	8008306 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fe61 	bl	8008284 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fea3 	bl	8008326 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e8:	4b04      	ldr	r3, [pc, #16]	; (80095fc <HAL_PCD_SuspendCallback+0x30>)
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	4a03      	ldr	r2, [pc, #12]	; (80095fc <HAL_PCD_SuspendCallback+0x30>)
 80095ee:	f043 0306 	orr.w	r3, r3, #6
 80095f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	e000ed00 	.word	0xe000ed00

08009600 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009610:	4b08      	ldr	r3, [pc, #32]	; (8009634 <HAL_PCD_ResumeCallback+0x34>)
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	4a07      	ldr	r2, [pc, #28]	; (8009634 <HAL_PCD_ResumeCallback+0x34>)
 8009616:	f023 0306 	bic.w	r3, r3, #6
 800961a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800961c:	f000 f9fa 	bl	8009a14 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fe92 	bl	8008350 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed00 	.word	0xe000ed00

08009638 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009640:	4a2b      	ldr	r2, [pc, #172]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a29      	ldr	r2, [pc, #164]	; (80096f0 <USBD_LL_Init+0xb8>)
 800964c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009650:	4b27      	ldr	r3, [pc, #156]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009652:	4a28      	ldr	r2, [pc, #160]	; (80096f4 <USBD_LL_Init+0xbc>)
 8009654:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009656:	4b26      	ldr	r3, [pc, #152]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009658:	2208      	movs	r2, #8
 800965a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800965c:	4b24      	ldr	r3, [pc, #144]	; (80096f0 <USBD_LL_Init+0xb8>)
 800965e:	2202      	movs	r2, #2
 8009660:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009662:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009664:	2202      	movs	r2, #2
 8009666:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009668:	4b21      	ldr	r3, [pc, #132]	; (80096f0 <USBD_LL_Init+0xb8>)
 800966a:	2200      	movs	r2, #0
 800966c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800966e:	4b20      	ldr	r3, [pc, #128]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009670:	2200      	movs	r2, #0
 8009672:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009674:	4b1e      	ldr	r3, [pc, #120]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009676:	2200      	movs	r2, #0
 8009678:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800967a:	4b1d      	ldr	r3, [pc, #116]	; (80096f0 <USBD_LL_Init+0xb8>)
 800967c:	2200      	movs	r2, #0
 800967e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009680:	481b      	ldr	r0, [pc, #108]	; (80096f0 <USBD_LL_Init+0xb8>)
 8009682:	f7f8 fa37 	bl	8001af4 <HAL_PCD_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800968c:	f7f7 fc10 	bl	8000eb0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009696:	2318      	movs	r3, #24
 8009698:	2200      	movs	r2, #0
 800969a:	2100      	movs	r1, #0
 800969c:	f7f9 fd25 	bl	80030ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096a6:	2358      	movs	r3, #88	; 0x58
 80096a8:	2200      	movs	r2, #0
 80096aa:	2180      	movs	r1, #128	; 0x80
 80096ac:	f7f9 fd1d 	bl	80030ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096b6:	23c0      	movs	r3, #192	; 0xc0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2181      	movs	r1, #129	; 0x81
 80096bc:	f7f9 fd15 	bl	80030ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096ca:	2200      	movs	r2, #0
 80096cc:	2101      	movs	r1, #1
 80096ce:	f7f9 fd0c 	bl	80030ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096dc:	2200      	movs	r2, #0
 80096de:	2182      	movs	r1, #130	; 0x82
 80096e0:	f7f9 fd03 	bl	80030ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20001344 	.word	0x20001344
 80096f4:	40005c00 	.word	0x40005c00

080096f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800970e:	4618      	mov	r0, r3
 8009710:	f7f8 fad5 	bl	8001cbe <HAL_PCD_Start>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	4618      	mov	r0, r3
 800971c:	f000 f980 	bl	8009a20 <USBD_Get_USB_Status>
 8009720:	4603      	mov	r3, r0
 8009722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009724:	7bbb      	ldrb	r3, [r7, #14]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	4608      	mov	r0, r1
 8009738:	4611      	mov	r1, r2
 800973a:	461a      	mov	r2, r3
 800973c:	4603      	mov	r3, r0
 800973e:	70fb      	strb	r3, [r7, #3]
 8009740:	460b      	mov	r3, r1
 8009742:	70bb      	strb	r3, [r7, #2]
 8009744:	4613      	mov	r3, r2
 8009746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009756:	78bb      	ldrb	r3, [r7, #2]
 8009758:	883a      	ldrh	r2, [r7, #0]
 800975a:	78f9      	ldrb	r1, [r7, #3]
 800975c:	f7f8 fc44 	bl	8001fe8 <HAL_PCD_EP_Open>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f95a 	bl	8009a20 <USBD_Get_USB_Status>
 800976c:	4603      	mov	r3, r0
 800976e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009770:	7bbb      	ldrb	r3, [r7, #14]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	460b      	mov	r3, r1
 8009784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	4611      	mov	r1, r2
 8009798:	4618      	mov	r0, r3
 800979a:	f7f8 fc8b 	bl	80020b4 <HAL_PCD_EP_Close>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f93b 	bl	8009a20 <USBD_Get_USB_Status>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097d2:	78fa      	ldrb	r2, [r7, #3]
 80097d4:	4611      	mov	r1, r2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7f8 fd4c 	bl	8002274 <HAL_PCD_EP_SetStall>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f91c 	bl	8009a20 <USBD_Get_USB_Status>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009810:	78fa      	ldrb	r2, [r7, #3]
 8009812:	4611      	mov	r1, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f7f8 fd8d 	bl	8002334 <HAL_PCD_EP_ClrStall>
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4618      	mov	r0, r3
 8009822:	f000 f8fd 	bl	8009a20 <USBD_Get_USB_Status>
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982a:	7bbb      	ldrb	r3, [r7, #14]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009846:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800984c:	2b00      	cmp	r3, #0
 800984e:	da0c      	bge.n	800986a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009856:	68f9      	ldr	r1, [r7, #12]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	440b      	add	r3, r1
 8009864:	3302      	adds	r3, #2
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	e00b      	b.n	8009882 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009870:	68f9      	ldr	r1, [r7, #12]
 8009872:	4613      	mov	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	440b      	add	r3, r1
 800987c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009880:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	4611      	mov	r1, r2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f8 fb76 	bl	8001f9e <HAL_PCD_SetAddress>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f8b1 	bl	8009a20 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	460b      	mov	r3, r1
 80098da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098ea:	7af9      	ldrb	r1, [r7, #11]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	f7f8 fc7d 	bl	80021ee <HAL_PCD_EP_Transmit>
 80098f4:	4603      	mov	r3, r0
 80098f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 f890 	bl	8009a20 <USBD_Get_USB_Status>
 8009900:	4603      	mov	r3, r0
 8009902:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009904:	7dbb      	ldrb	r3, [r7, #22]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b086      	sub	sp, #24
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
 800991a:	460b      	mov	r3, r1
 800991c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800992c:	7af9      	ldrb	r1, [r7, #11]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	f7f8 fc07 	bl	8002144 <HAL_PCD_EP_Receive>
 8009936:	4603      	mov	r3, r0
 8009938:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f86f 	bl	8009a20 <USBD_Get_USB_Status>
 8009942:	4603      	mov	r3, r0
 8009944:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009946:	7dbb      	ldrb	r3, [r7, #22]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7f8 fc29 	bl	80021be <HAL_PCD_EP_GetRxCount>
 800996c:	4603      	mov	r3, r0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <HAL_PCDEx_LPM_Callback+0x18>
 800998a:	2b01      	cmp	r3, #1
 800998c:	d013      	beq.n	80099b6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800998e:	e023      	b.n	80099d8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d007      	beq.n	80099a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009998:	f000 f83c 	bl	8009a14 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	4a0f      	ldr	r2, [pc, #60]	; (80099e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099a2:	f023 0306 	bic.w	r3, r3, #6
 80099a6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fcce 	bl	8008350 <USBD_LL_Resume>
    break;
 80099b4:	e010      	b.n	80099d8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fcb2 	bl	8008326 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	4a04      	ldr	r2, [pc, #16]	; (80099e0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099d0:	f043 0306 	orr.w	r3, r3, #6
 80099d4:	6113      	str	r3, [r2, #16]
    break;
 80099d6:	bf00      	nop
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	e000ed00 	.word	0xe000ed00

080099e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099ec:	4b03      	ldr	r3, [pc, #12]	; (80099fc <USBD_static_malloc+0x18>)
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	200001d4 	.word	0x200001d4

08009a00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a18:	f7f6 fd16 	bl	8000448 <SystemClock_Config>
}
 8009a1c:	bf00      	nop
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d817      	bhi.n	8009a64 <USBD_Get_USB_Status+0x44>
 8009a34:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <USBD_Get_USB_Status+0x1c>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009a4d 	.word	0x08009a4d
 8009a40:	08009a53 	.word	0x08009a53
 8009a44:	08009a59 	.word	0x08009a59
 8009a48:	08009a5f 	.word	0x08009a5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a50:	e00b      	b.n	8009a6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a52:	2303      	movs	r3, #3
 8009a54:	73fb      	strb	r3, [r7, #15]
    break;
 8009a56:	e008      	b.n	8009a6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5c:	e005      	b.n	8009a6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	73fb      	strb	r3, [r7, #15]
    break;
 8009a62:	e002      	b.n	8009a6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a64:	2303      	movs	r3, #3
 8009a66:	73fb      	strb	r3, [r7, #15]
    break;
 8009a68:	bf00      	nop
  }
  return usb_status;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <__libc_init_array>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4e0d      	ldr	r6, [pc, #52]	; (8009ab0 <__libc_init_array+0x38>)
 8009a7c:	4c0d      	ldr	r4, [pc, #52]	; (8009ab4 <__libc_init_array+0x3c>)
 8009a7e:	1ba4      	subs	r4, r4, r6
 8009a80:	10a4      	asrs	r4, r4, #2
 8009a82:	2500      	movs	r5, #0
 8009a84:	42a5      	cmp	r5, r4
 8009a86:	d109      	bne.n	8009a9c <__libc_init_array+0x24>
 8009a88:	4e0b      	ldr	r6, [pc, #44]	; (8009ab8 <__libc_init_array+0x40>)
 8009a8a:	4c0c      	ldr	r4, [pc, #48]	; (8009abc <__libc_init_array+0x44>)
 8009a8c:	f000 f82c 	bl	8009ae8 <_init>
 8009a90:	1ba4      	subs	r4, r4, r6
 8009a92:	10a4      	asrs	r4, r4, #2
 8009a94:	2500      	movs	r5, #0
 8009a96:	42a5      	cmp	r5, r4
 8009a98:	d105      	bne.n	8009aa6 <__libc_init_array+0x2e>
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aa0:	4798      	blx	r3
 8009aa2:	3501      	adds	r5, #1
 8009aa4:	e7ee      	b.n	8009a84 <__libc_init_array+0xc>
 8009aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aaa:	4798      	blx	r3
 8009aac:	3501      	adds	r5, #1
 8009aae:	e7f2      	b.n	8009a96 <__libc_init_array+0x1e>
 8009ab0:	08009b58 	.word	0x08009b58
 8009ab4:	08009b58 	.word	0x08009b58
 8009ab8:	08009b58 	.word	0x08009b58
 8009abc:	08009b5c 	.word	0x08009b5c

08009ac0 <memcpy>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	1e43      	subs	r3, r0, #1
 8009ac4:	440a      	add	r2, r1
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	d100      	bne.n	8009acc <memcpy+0xc>
 8009aca:	bd10      	pop	{r4, pc}
 8009acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ad4:	e7f7      	b.n	8009ac6 <memcpy+0x6>

08009ad6 <memset>:
 8009ad6:	4402      	add	r2, r0
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d100      	bne.n	8009ae0 <memset+0xa>
 8009ade:	4770      	bx	lr
 8009ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae4:	e7f9      	b.n	8009ada <memset+0x4>
	...

08009ae8 <_init>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	bf00      	nop
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr

08009af4 <_fini>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	bf00      	nop
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr
