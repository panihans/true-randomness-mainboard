
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a024  0800a024  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a024  0800a024  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a024  0800a024  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  20000184  0800a1b0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  0800a1b0  00021730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af6d  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003490  00000000  00000000  0003b121  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003f980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020618  00000000  00000000  00040bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d9a  00000000  00000000  000611e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c458e  00000000  00000000  00072f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137510  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  0013758c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009fb4 	.word	0x08009fb4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009fb4 	.word	0x08009fb4

08000218 <CDC_On_Receive>:
volatile uint8_t command_received = 0;
volatile uint8_t command_received_ticker = 0;

volatile float pGain, iGain, dGain = 0;

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b20      	cmp	r3, #32
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2220      	movs	r2, #32
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 feac 	bl	8009f8c <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	69db      	ldr	r3, [r3, #28]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001e0 	.word	0x200001e0

08000258 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dd15      	ble.n	8000296 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b64      	cmp	r3, #100	; 0x64
 800026e:	dc0b      	bgt.n	8000288 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000276:	fb02 f303 	mul.w	r3, r2, r3
 800027a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800027e:	3320      	adds	r3, #32
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000294:	e020      	b.n	80002d8 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	da17      	bge.n	80002cc <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002a2:	db0a      	blt.n	80002ba <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <Set_Motor_Speed+0x8c>)
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80002b0:	3320      	adds	r3, #32
 80002b2:	461a      	mov	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e004      	b.n	80002c4 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	425b      	negs	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	e005      	b.n	80002d8 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	fffffe3e 	.word	0xfffffe3e

080002e8 <Set_Thrower_Speed>:
		*channel_b = 0;
	}
}

inline void Set_Thrower_Speed(volatile uint32_t *channel_a,
		int32_t thrower_speed) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dd0e      	ble.n	8000316 <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	dc0f      	bgt.n	800031e <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	1a9b      	subs	r3, r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800030c:	3308      	adds	r3, #8
 800030e:	461a      	mov	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000314:	e003      	b.n	800031e <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t *channel_a, int32_t servo_speed,
		GPIO_PinState ir_status, int32_t ir_control) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	4613      	mov	r3, r2
 800033a:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d005      	beq.n	800034e <Set_Servo_Speed+0x22>
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d02a      	beq.n	800039e <Set_Servo_Speed+0x72>
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d027      	beq.n	800039e <Set_Servo_Speed+0x72>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b00      	cmp	r3, #0
 8000352:	dd0c      	ble.n	800036e <Set_Servo_Speed+0x42>
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b64      	cmp	r3, #100	; 0x64
 8000358:	dc09      	bgt.n	800036e <Set_Servo_Speed+0x42>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <Set_Servo_Speed+0x80>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f5c3 6392 	rsb	r3, r3, #1168	; 0x490
 8000362:	3307      	adds	r3, #7
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	461a      	mov	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e017      	b.n	800039e <Set_Servo_Speed+0x72>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <Set_Servo_Speed+0x80>)
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	2b00      	cmp	r3, #0
 8000374:	da0f      	bge.n	8000396 <Set_Servo_Speed+0x6a>
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800037c:	db0b      	blt.n	8000396 <Set_Servo_Speed+0x6a>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <Set_Servo_Speed+0x80>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f2a3 42e2 	subw	r2, r3, #1250	; 0x4e2
 8000386:	4613      	mov	r3, r2
 8000388:	079b      	lsls	r3, r3, #30
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	461a      	mov	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	e003      	b.n	800039e <Set_Servo_Speed+0x72>
		} else {
			*channel_a = 0;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800039c:	e7ff      	b.n	800039e <Set_Servo_Speed+0x72>
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	200001a0 	.word	0x200001a0

080003b0 <Calculate_PID>:

Motor motor1;
Motor motor2;
Motor motor3;

inline void Calculate_PID(Motor *motor) {
 80003b0:	b480      	push	{r7}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	pGain = 1;
 80003b8:	4b61      	ldr	r3, [pc, #388]	; (8000540 <Calculate_PID+0x190>)
 80003ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80003be:	601a      	str	r2, [r3, #0]
	iGain = command.pid_type == 0 ? 0.005 : 0.001;
 80003c0:	4b60      	ldr	r3, [pc, #384]	; (8000544 <Calculate_PID+0x194>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d101      	bne.n	80003cc <Calculate_PID+0x1c>
 80003c8:	4b5f      	ldr	r3, [pc, #380]	; (8000548 <Calculate_PID+0x198>)
 80003ca:	e000      	b.n	80003ce <Calculate_PID+0x1e>
 80003cc:	4b5f      	ldr	r3, [pc, #380]	; (800054c <Calculate_PID+0x19c>)
 80003ce:	4a60      	ldr	r2, [pc, #384]	; (8000550 <Calculate_PID+0x1a0>)
 80003d0:	6013      	str	r3, [r2, #0]
	dGain = command.pid_type == 0 ? 5 : 10;
 80003d2:	4b5c      	ldr	r3, [pc, #368]	; (8000544 <Calculate_PID+0x194>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d101      	bne.n	80003de <Calculate_PID+0x2e>
 80003da:	4b5e      	ldr	r3, [pc, #376]	; (8000554 <Calculate_PID+0x1a4>)
 80003dc:	e000      	b.n	80003e0 <Calculate_PID+0x30>
 80003de:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <Calculate_PID+0x1a8>)
 80003e0:	4a5e      	ldr	r2, [pc, #376]	; (800055c <Calculate_PID+0x1ac>)
 80003e2:	6013      	str	r3, [r2, #0]

	int error = motor->target_speed
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
			- (command.pid_type == 0 ?
 80003ea:	4b56      	ldr	r3, [pc, #344]	; (8000544 <Calculate_PID+0x194>)
 80003ec:	699b      	ldr	r3, [r3, #24]
					motor->enc_speed_hist_avg : motor->cur_enc_speed);
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d103      	bne.n	80003fa <Calculate_PID+0x4a>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80003f8:	e005      	b.n	8000406 <Calculate_PID+0x56>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	ee07 3a90 	vmov	s15, r3
 8000402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			- (command.pid_type == 0 ?
 8000406:	ee77 7a67 	vsub.f32	s15, s14, s15
	int error = motor->target_speed
 800040a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800040e:	ee17 3a90 	vmov	r3, s15
 8000412:	617b      	str	r3, [r7, #20]
	int pTerm = error * pGain;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	ee07 3a90 	vmov	s15, r3
 800041a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800041e:	4b48      	ldr	r3, [pc, #288]	; (8000540 <Calculate_PID+0x190>)
 8000420:	edd3 7a00 	vldr	s15, [r3]
 8000424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800042c:	ee17 3a90 	vmov	r3, s15
 8000430:	613b      	str	r3, [r7, #16]

	motor->err_sum += error;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	441a      	add	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	645a      	str	r2, [r3, #68]	; 0x44
	motor->err_sum = clamp(-1000, 1000, motor->err_sum);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000442:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000446:	db07      	blt.n	8000458 <Calculate_PID+0xa8>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000450:	bfa8      	it	ge
 8000452:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000456:	e000      	b.n	800045a <Calculate_PID+0xaa>
 8000458:	4b41      	ldr	r3, [pc, #260]	; (8000560 <Calculate_PID+0x1b0>)
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	6453      	str	r3, [r2, #68]	; 0x44
	float iTerm = iGain * motor->err_sum;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000462:	ee07 3a90 	vmov	s15, r3
 8000466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800046a:	4b39      	ldr	r3, [pc, #228]	; (8000550 <Calculate_PID+0x1a0>)
 800046c:	edd3 7a00 	vldr	s15, [r3]
 8000470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000474:	edc7 7a03 	vstr	s15, [r7, #12]

	float dTerm = dGain * (motor->prev_speed - motor->cur_enc_speed);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	ee07 3a90 	vmov	s15, r3
 8000486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800048a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800048e:	4b33      	ldr	r3, [pc, #204]	; (800055c <Calculate_PID+0x1ac>)
 8000490:	edd3 7a00 	vldr	s15, [r3]
 8000494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000498:	edc7 7a02 	vstr	s15, [r7, #8]
	motor->prev_speed = motor->cur_enc_speed;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	ee07 3a90 	vmov	s15, r3
 80004a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	motor->cur_speed = motor->cur_speed + pTerm + iTerm + dTerm;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	ee07 3a90 	vmov	s15, r3
 80004ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80004c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80004ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	motor->cur_speed = clamp(-100, 100, motor->cur_speed);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80004de:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000564 <Calculate_PID+0x1b4>
 80004e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004ea:	dd01      	ble.n	80004f0 <Calculate_PID+0x140>
 80004ec:	2300      	movs	r3, #0
 80004ee:	e00c      	b.n	800050a <Calculate_PID+0x15a>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80004f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000568 <Calculate_PID+0x1b8>
 80004fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bf4c      	ite	mi
 8000504:	2301      	movmi	r3, #1
 8000506:	2300      	movpl	r3, #0
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <Calculate_PID+0x162>
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <Calculate_PID+0x1bc>)
 8000510:	e00d      	b.n	800052e <Calculate_PID+0x17e>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000518:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000564 <Calculate_PID+0x1b4>
 800051c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000524:	dd01      	ble.n	800052a <Calculate_PID+0x17a>
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <Calculate_PID+0x1c0>)
 8000528:	e001      	b.n	800052e <Calculate_PID+0x17e>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000532:	bf00      	nop
 8000534:	371c      	adds	r7, #28
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200005d0 	.word	0x200005d0
 8000544:	200001a0 	.word	0x200001a0
 8000548:	3ba3d70a 	.word	0x3ba3d70a
 800054c:	3a83126f 	.word	0x3a83126f
 8000550:	20000668 	.word	0x20000668
 8000554:	40a00000 	.word	0x40a00000
 8000558:	41200000 	.word	0x41200000
 800055c:	200001e4 	.word	0x200001e4
 8000560:	fffffc18 	.word	0xfffffc18
 8000564:	42c80000 	.word	0x42c80000
 8000568:	c2c80000 	.word	0xc2c80000
 800056c:	c2c80000 	.word	0xc2c80000
 8000570:	42c80000 	.word	0x42c80000

08000574 <Calculate_Encoder_Diff>:

inline int Calculate_Encoder_Diff(uint16_t prev_pos, uint16_t cur_pos) {
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	80bb      	strh	r3, [r7, #4]
	int diff = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 800058e:	4293      	cmp	r3, r2
 8000590:	d90c      	bls.n	80005ac <Calculate_Encoder_Diff+0x38>
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000598:	4293      	cmp	r3, r2
 800059a:	d807      	bhi.n	80005ac <Calculate_Encoder_Diff+0x38>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80005a2:	33ff      	adds	r3, #255	; 0xff
 80005a4:	88ba      	ldrh	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e015      	b.n	80005d8 <Calculate_Encoder_Diff+0x64>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d80c      	bhi.n	80005d0 <Calculate_Encoder_Diff+0x5c>
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 80005bc:	4293      	cmp	r3, r2
 80005be:	d907      	bls.n	80005d0 <Calculate_Encoder_Diff+0x5c>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 80005c0:	88bb      	ldrh	r3, [r7, #4]
 80005c2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80005c6:	3bff      	subs	r3, #255	; 0xff
 80005c8:	88fa      	ldrh	r2, [r7, #6]
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	e003      	b.n	80005d8 <Calculate_Encoder_Diff+0x64>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 80005d0:	88ba      	ldrh	r2, [r7, #4]
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	60fb      	str	r3, [r7, #12]
	}
	return clamp(-200, 200, diff) / 2;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80005de:	db07      	blt.n	80005f0 <Calculate_Encoder_Diff+0x7c>
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2bc8      	cmp	r3, #200	; 0xc8
 80005e4:	bfa8      	it	ge
 80005e6:	23c8      	movge	r3, #200	; 0xc8
 80005e8:	0fda      	lsrs	r2, r3, #31
 80005ea:	4413      	add	r3, r2
 80005ec:	105b      	asrs	r3, r3, #1
 80005ee:	e001      	b.n	80005f4 <Calculate_Encoder_Diff+0x80>
 80005f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <Handle_Encoder>:

void Handle_Encoder(Motor *motor, uint16_t count) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
	motor->cur_pos = count;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	887a      	ldrh	r2, [r7, #2]
 8000610:	805a      	strh	r2, [r3, #2]
	motor->cur_enc_speed = Calculate_Encoder_Diff(motor->prev_pos,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	885b      	ldrh	r3, [r3, #2]
 800061a:	4619      	mov	r1, r3
 800061c:	4610      	mov	r0, r2
 800061e:	f7ff ffa9 	bl	8000574 <Calculate_Encoder_Diff>
 8000622:	4602      	mov	r2, r0
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]
			motor->cur_pos);
	motor->prev_pos = motor->cur_pos;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	885a      	ldrh	r2, [r3, #2]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	801a      	strh	r2, [r3, #0]

	motor->enc_speed_hist[motor->enc_speed_hist_cnt] = motor->cur_enc_speed;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6859      	ldr	r1, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3202      	adds	r2, #2
 800063c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (motor->enc_speed_hist_cnt >= 9) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	2b08      	cmp	r3, #8
 8000646:	dd03      	ble.n	8000650 <Handle_Encoder+0x50>
		motor->enc_speed_hist_cnt = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	631a      	str	r2, [r3, #48]	; 0x30
 800064e:	e004      	b.n	800065a <Handle_Encoder+0x5a>
	} else {
		motor->enc_speed_hist_cnt += 1;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
	}

	int sum = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	e00a      	b.n	800067a <Handle_Encoder+0x7a>
		sum += motor->enc_speed_hist[i];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	3202      	adds	r2, #2
 800066a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	2b09      	cmp	r3, #9
 800067e:	ddf1      	ble.n	8000664 <Handle_Encoder+0x64>
	}
	motor->enc_speed_hist_avg = sum / 10;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <Handle_Encoder+0xa4>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	1092      	asrs	r2, r2, #2
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	66666667 	.word	0x66666667

080006a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a8:	b598      	push	{r3, r4, r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ac:	f001 f93b 	bl	8001926 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b0:	f000 f8d6 	bl	8000860 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b4:	f000 fd2a 	bl	800110c <MX_GPIO_Init>
	MX_TIM4_Init();
 80006b8:	f000 fab2 	bl	8000c20 <MX_TIM4_Init>
	MX_TIM8_Init();
 80006bc:	f000 fb3c 	bl	8000d38 <MX_TIM8_Init>
	MX_TIM15_Init();
 80006c0:	f000 fbaa 	bl	8000e18 <MX_TIM15_Init>
	MX_TIM16_Init();
 80006c4:	f000 fc2e 	bl	8000f24 <MX_TIM16_Init>
	MX_TIM1_Init();
 80006c8:	f000 f932 	bl	8000930 <MX_TIM1_Init>
	MX_TIM2_Init();
 80006cc:	f000 f9e0 	bl	8000a90 <MX_TIM2_Init>
	MX_TIM3_Init();
 80006d0:	f000 fa32 	bl	8000b38 <MX_TIM3_Init>
	MX_TIM7_Init();
 80006d4:	f000 fafa 	bl	8000ccc <MX_TIM7_Init>
	MX_TIM17_Init();
 80006d8:	f000 fc9e 	bl	8001018 <MX_TIM17_Init>
	MX_USB_Device_Init();
 80006dc:	f008 ff3a 	bl	8009554 <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80006e0:	2104      	movs	r1, #4
 80006e2:	4847      	ldr	r0, [pc, #284]	; (8000800 <main+0x158>)
 80006e4:	f004 fa34 	bl	8004b50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80006e8:	2104      	movs	r1, #4
 80006ea:	4846      	ldr	r0, [pc, #280]	; (8000804 <main+0x15c>)
 80006ec:	f004 fa30 	bl	8004b50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80006f0:	2104      	movs	r1, #4
 80006f2:	4845      	ldr	r0, [pc, #276]	; (8000808 <main+0x160>)
 80006f4:	f004 fa2c 	bl	8004b50 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4844      	ldr	r0, [pc, #272]	; (800080c <main+0x164>)
 80006fc:	f004 f882 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000700:	2104      	movs	r1, #4
 8000702:	4842      	ldr	r0, [pc, #264]	; (800080c <main+0x164>)
 8000704:	f004 f87e 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000708:	2108      	movs	r1, #8
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <main+0x164>)
 800070c:	f004 f87a 	bl	8004804 <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 0;
 8000710:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <main+0x168>)
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <main+0x168>)
 8000718:	2200      	movs	r2, #0
 800071a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <main+0x168>)
 800071e:	2200      	movs	r2, #0
 8000720:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000722:	2100      	movs	r1, #0
 8000724:	483b      	ldr	r0, [pc, #236]	; (8000814 <main+0x16c>)
 8000726:	f004 f86d 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800072a:	2104      	movs	r1, #4
 800072c:	4839      	ldr	r0, [pc, #228]	; (8000814 <main+0x16c>)
 800072e:	f004 f869 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000732:	2108      	movs	r1, #8
 8000734:	4837      	ldr	r0, [pc, #220]	; (8000814 <main+0x16c>)
 8000736:	f004 f865 	bl	8004804 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 800073a:	4b37      	ldr	r3, [pc, #220]	; (8000818 <main+0x170>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8000740:	4b35      	ldr	r3, [pc, #212]	; (8000818 <main+0x170>)
 8000742:	2200      	movs	r2, #0
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <main+0x170>)
 8000748:	2200      	movs	r2, #0
 800074a:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800074c:	2100      	movs	r1, #0
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <main+0x174>)
 8000750:	f004 f858 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000754:	2100      	movs	r1, #0
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <main+0x178>)
 8000758:	f004 f854 	bl	8004804 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800075c:	2100      	movs	r1, #0
 800075e:	4831      	ldr	r0, [pc, #196]	; (8000824 <main+0x17c>)
 8000760:	f004 f850 	bl	8004804 <HAL_TIM_PWM_Start>
	TIM15->CCR1 = 0;
 8000764:	4b30      	ldr	r3, [pc, #192]	; (8000828 <main+0x180>)
 8000766:	2200      	movs	r2, #0
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = ESC_IDLE_CCR;
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <main+0x184>)
 800076c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = 0;
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <main+0x188>)
 8000774:	2200      	movs	r2, #0
 8000776:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Base_Start_IT(&htim7);
 8000778:	482e      	ldr	r0, [pc, #184]	; (8000834 <main+0x18c>)
 800077a:	f003 ff81 	bl	8004680 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (command_received == 1) {
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <main+0x190>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b01      	cmp	r3, #1
 8000786:	d1fa      	bne.n	800077e <main+0xd6>
			command_received = 0;
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <main+0x190>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
			command_received_ticker = 70;
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <main+0x194>)
 8000790:	2246      	movs	r2, #70	; 0x46
 8000792:	701a      	strb	r2, [r3, #0]

			// toggle led
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000794:	2120      	movs	r1, #32
 8000796:	482a      	ldr	r0, [pc, #168]	; (8000840 <main+0x198>)
 8000798:	f001 fbf8 	bl	8001f8c <HAL_GPIO_TogglePin>

			feedback.thrower = 666;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <main+0x19c>)
 800079e:	f240 229a 	movw	r2, #666	; 0x29a
 80007a2:	60da      	str	r2, [r3, #12]
			feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80007a4:	2108      	movs	r1, #8
 80007a6:	4826      	ldr	r0, [pc, #152]	; (8000840 <main+0x198>)
 80007a8:	f001 fbc0 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <main+0x19c>)
 80007b2:	615a      	str	r2, [r3, #20]

			motor1.target_speed = command.motor1;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <main+0x1a0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a24      	ldr	r2, [pc, #144]	; (800084c <main+0x1a4>)
 80007ba:	6393      	str	r3, [r2, #56]	; 0x38
			motor2.target_speed = command.motor2;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <main+0x1a0>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4a23      	ldr	r2, [pc, #140]	; (8000850 <main+0x1a8>)
 80007c2:	6393      	str	r3, [r2, #56]	; 0x38
			motor3.target_speed = command.motor3;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <main+0x1a0>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <main+0x1ac>)
 80007ca:	6393      	str	r3, [r2, #56]	; 0x38

			Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <main+0x1a0>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <main+0x1b0>)
 80007d4:	f7ff fd88 	bl	80002e8 <Set_Thrower_Speed>

			Set_Servo_Speed(&(TIM17->CCR1), command.servo,
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <main+0x1a0>)
 80007da:	691c      	ldr	r4, [r3, #16]
 80007dc:	2108      	movs	r1, #8
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <main+0x198>)
 80007e0:	f001 fba4 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <main+0x1a0>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4621      	mov	r1, r4
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <main+0x1b4>)
 80007f0:	f7ff fd9c 	bl	800032c <Set_Servo_Speed>
					HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);

			CDC_Transmit_FS(&feedback, sizeof(feedback));
 80007f4:	2120      	movs	r1, #32
 80007f6:	4813      	ldr	r0, [pc, #76]	; (8000844 <main+0x19c>)
 80007f8:	f008 ff6e 	bl	80096d8 <CDC_Transmit_FS>
		if (command_received == 1) {
 80007fc:	e7bf      	b.n	800077e <main+0xd6>
 80007fe:	bf00      	nop
 8000800:	2000066c 	.word	0x2000066c
 8000804:	200004a0 	.word	0x200004a0
 8000808:	20000454 	.word	0x20000454
 800080c:	200005d4 	.word	0x200005d4
 8000810:	40012c00 	.word	0x40012c00
 8000814:	20000584 	.word	0x20000584
 8000818:	40000400 	.word	0x40000400
 800081c:	200004ec 	.word	0x200004ec
 8000820:	20000700 	.word	0x20000700
 8000824:	20000538 	.word	0x20000538
 8000828:	40014000 	.word	0x40014000
 800082c:	40014400 	.word	0x40014400
 8000830:	40014800 	.word	0x40014800
 8000834:	2000074c 	.word	0x2000074c
 8000838:	200001e0 	.word	0x200001e0
 800083c:	200001e1 	.word	0x200001e1
 8000840:	48000400 	.word	0x48000400
 8000844:	200001c0 	.word	0x200001c0
 8000848:	200001a0 	.word	0x200001a0
 800084c:	20000620 	.word	0x20000620
 8000850:	2000040c 	.word	0x2000040c
 8000854:	200006b8 	.word	0x200006b8
 8000858:	40014434 	.word	0x40014434
 800085c:	40014834 	.word	0x40014834

08000860 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b0a4      	sub	sp, #144	; 0x90
 8000864:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800086a:	2238      	movs	r2, #56	; 0x38
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f009 fb97 	bl	8009fa2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000874:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000884:	463b      	mov	r3, r7
 8000886:	2244      	movs	r2, #68	; 0x44
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f009 fb89 	bl	8009fa2 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000890:	2000      	movs	r0, #0
 8000892:	f002 fefd 	bl	8003690 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000896:	2322      	movs	r3, #34	; 0x22
 8000898:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 20;
 80008b4:	2314      	movs	r3, #20
 80008b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ff91 	bl	80037f8 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x80>
		Error_Handler();
 80008dc:	f000 fd36 	bl	800134c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2303      	movs	r3, #3
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80008f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008f8:	2104      	movs	r1, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fa94 	bl	8003e28 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xaa>
		Error_Handler();
 8000906:	f000 fd21 	bl	800134c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	603b      	str	r3, [r7, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fc6a 	bl	80041f0 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xc6>
		Error_Handler();
 8000922:	f000 fd13 	bl	800134c <Error_Handler>
	}
}
 8000926:	bf00      	nop
 8000928:	3790      	adds	r7, #144	; 0x90
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b098      	sub	sp, #96	; 0x60
 8000934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2234      	movs	r2, #52	; 0x34
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f009 fb20 	bl	8009fa2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000964:	4a49      	ldr	r2, [pc, #292]	; (8000a8c <MX_TIM1_Init+0x15c>)
 8000966:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000968:	4b47      	ldr	r3, [pc, #284]	; (8000a88 <MX_TIM1_Init+0x158>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000974:	4b44      	ldr	r3, [pc, #272]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <MX_TIM1_Init+0x158>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000982:	4b41      	ldr	r3, [pc, #260]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <MX_TIM1_Init+0x158>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000990:	f003 fee0 	bl	8004754 <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0x6e>
		Error_Handler();
 800099a:	f000 fcd7 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ae:	4619      	mov	r1, r3
 80009b0:	4835      	ldr	r0, [pc, #212]	; (8000a88 <MX_TIM1_Init+0x158>)
 80009b2:	f004 ffbd 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80009bc:	f000 fcc6 	bl	800134c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80009dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4828      	ldr	r0, [pc, #160]	; (8000a88 <MX_TIM1_Init+0x158>)
 80009e6:	f004 fabf 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80009f0:	f000 fcac 	bl	800134c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80009f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009fc:	2204      	movs	r2, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000a02:	f004 fab1 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8000a0c:	f000 fc9e 	bl	800134c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000a14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a18:	2208      	movs	r2, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481a      	ldr	r0, [pc, #104]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000a1e:	f004 faa3 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8000a28:	f000 fc90 	bl	800134c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000a6a:	f004 ffe3 	bl	8005a34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x148>
			!= HAL_OK) {
		Error_Handler();
 8000a74:	f000 fc6a 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM1_Init+0x158>)
 8000a7a:	f000 fdeb 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3760      	adds	r7, #96	; 0x60
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200005d4 	.word	0x200005d4
 8000a8c:	40012c00 	.word	0x40012c00

08000a90 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2224      	movs	r2, #36	; 0x24
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f009 fa7f 	bl	8009fa2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000b02:	f003 ff7f 	bl	8004a04 <HAL_TIM_Encoder_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x80>
		Error_Handler();
 8000b0c:	f000 fc1e 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM2_Init+0xa4>)
 8000b1e:	f004 ff07 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000b28:	f000 fc10 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000066c 	.word	0x2000066c

08000b38 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	615a      	str	r2, [r3, #20]
 8000b5a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <MX_TIM3_Init+0xe4>)
 8000b60:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b74:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000b84:	f003 fde6 	bl	8004754 <HAL_TIM_PWM_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x5a>
		Error_Handler();
 8000b8e:	f000 fbdd 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481d      	ldr	r0, [pc, #116]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000ba2:	f004 fec5 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000bac:	f000 fbce 	bl	800134c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb0:	2360      	movs	r3, #96	; 0x60
 8000bb2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4814      	ldr	r0, [pc, #80]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000bc8:	f004 f9ce 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000bd2:	f000 fbbb 	bl	800134c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000be2:	f004 f9c1 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000bec:	f000 fbae 	bl	800134c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000bfc:	f004 f9b4 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 8000c06:	f000 fba1 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <MX_TIM3_Init+0xe0>)
 8000c0c:	f000 fd22 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000584 	.word	0x20000584
 8000c1c:	40000400 	.word	0x40000400

08000c20 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2224      	movs	r2, #36	; 0x24
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f009 f9b7 	bl	8009fa2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <MX_TIM4_Init+0xa8>)
 8000c42:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c56:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000c90:	f003 feb8 	bl	8004a04 <HAL_TIM_Encoder_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM4_Init+0x7e>
		Error_Handler();
 8000c9a:	f000 fb57 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_TIM4_Init+0xa4>)
 8000cac:	f004 fe40 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8000cb6:	f000 fb49 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200004a0 	.word	0x200004a0
 8000cc8:	40000800 	.word	0x40000800

08000ccc <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <MX_TIM7_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 40;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000ce4:	2228      	movs	r2, #40	; 0x28
 8000ce6:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65044;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000cf0:	f64f 6214 	movw	r2, #65044	; 0xfe14
 8000cf4:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000cfe:	f003 fc67 	bl	80045d0 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM7_Init+0x40>
		Error_Handler();
 8000d08:	f000 fb20 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_TIM7_Init+0x64>)
 8000d1a:	f004 fe09 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000d24:	f000 fb12 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000074c 	.word	0x2000074c
 8000d34:	40001400 	.word	0x40001400

08000d38 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09a      	sub	sp, #104	; 0x68
 8000d3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000d3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d42:	2224      	movs	r2, #36	; 0x24
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f009 f92b 	bl	8009fa2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2234      	movs	r2, #52	; 0x34
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f009 f91f 	bl	8009fa2 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d66:	4a2b      	ldr	r2, [pc, #172]	; (8000e14 <MX_TIM8_Init+0xdc>)
 8000d68:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7c:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d90:	2303      	movs	r3, #3
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	653b      	str	r3, [r7, #80]	; 0x50
	sConfig.IC1Filter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	657b      	str	r3, [r7, #84]	; 0x54
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000da4:	2300      	movs	r3, #0
 8000da6:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000da8:	2301      	movs	r3, #1
 8000daa:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	663b      	str	r3, [r7, #96]	; 0x60
	sConfig.IC2Filter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 8000db4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000db8:	4619      	mov	r1, r3
 8000dba:	4815      	ldr	r0, [pc, #84]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000dbc:	f003 fe22 	bl	8004a04 <HAL_TIM_Encoder_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM8_Init+0x92>
		Error_Handler();
 8000dc6:	f000 fac1 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000dde:	f004 fda7 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM8_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000de8:	f000 fab0 	bl	800134c <Error_Handler>
	}
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_TIM8_Init+0xd8>)
 8000dfa:	f004 fe1b 	bl	8005a34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM8_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8000e04:	f000 faa2 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3768      	adds	r7, #104	; 0x68
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000454 	.word	0x20000454
 8000e14:	40013400 	.word	0x40013400

08000e18 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b098      	sub	sp, #96	; 0x60
 8000e1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2234      	movs	r2, #52	; 0x34
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 f8ac 	bl	8009fa2 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e4c:	4a34      	ldr	r2, [pc, #208]	; (8000f20 <MX_TIM15_Init+0x108>)
 8000e4e:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e62:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8000e76:	4829      	ldr	r0, [pc, #164]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e78:	f003 fc6c 	bl	8004754 <HAL_TIM_PWM_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM15_Init+0x6e>
		Error_Handler();
 8000e82:	f000 fa63 	bl	800134c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8000e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e92:	4619      	mov	r1, r3
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000e96:	f004 fd4b 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM15_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000ea0:	f000 fa54 	bl	800134c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea4:	2360      	movs	r3, #96	; 0x60
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8000ec0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000eca:	f004 f84d 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM15_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8000ed4:	f000 fa3a 	bl	800134c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000f00:	f004 fd98 	bl	8005a34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM15_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8000f0a:	f000 fa1f 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM15_Init+0x104>)
 8000f10:	f000 fba0 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3760      	adds	r7, #96	; 0x60
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200004ec 	.word	0x200004ec
 8000f20:	40014000 	.word	0x40014000

08000f24 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2234      	movs	r2, #52	; 0x34
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f009 f82c 	bl	8009fa2 <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f4c:	4a31      	ldr	r2, [pc, #196]	; (8001014 <MX_TIM16_Init+0xf0>)
 8000f4e:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65300;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f5e:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000f62:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f78:	f003 fb2a 	bl	80045d0 <HAL_TIM_Base_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM16_Init+0x62>
		Error_Handler();
 8000f82:	f000 f9e3 	bl	800134c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 8000f86:	4822      	ldr	r0, [pc, #136]	; (8001010 <MX_TIM16_Init+0xec>)
 8000f88:	f003 fbe4 	bl	8004754 <HAL_TIM_PWM_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM16_Init+0x72>
		Error_Handler();
 8000f92:	f000 f9db 	bl	800134c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 8000fb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <MX_TIM16_Init+0xec>)
 8000fbc:	f003 ffd4 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM16_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8000fc6:	f000 f9c1 	bl	800134c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM16_Init+0xec>)
 8000ff2:	f004 fd1f 	bl	8005a34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM16_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000ffc:	f000 f9a6 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
	HAL_TIM_MspPostInit(&htim16);
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM16_Init+0xec>)
 8001002:	f000 fb27 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000700 	.word	0x20000700
 8001014:	40014400 	.word	0x40014400

08001018 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800101e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001032:	463b      	mov	r3, r7
 8001034:	2234      	movs	r2, #52	; 0x34
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f008 ffb2 	bl	8009fa2 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_TIM17_Init+0xec>)
 8001040:	4a31      	ldr	r2, [pc, #196]	; (8001108 <MX_TIM17_Init+0xf0>)
 8001042:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48;
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <MX_TIM17_Init+0xec>)
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_TIM17_Init+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 65300;
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <MX_TIM17_Init+0xec>)
 8001052:	f64f 7214 	movw	r2, #65300	; 0xff14
 8001056:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <MX_TIM17_Init+0xec>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_TIM17_Init+0xec>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <MX_TIM17_Init+0xec>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 800106a:	4826      	ldr	r0, [pc, #152]	; (8001104 <MX_TIM17_Init+0xec>)
 800106c:	f003 fab0 	bl	80045d0 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM17_Init+0x62>
		Error_Handler();
 8001076:	f000 f969 	bl	800134c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 800107a:	4822      	ldr	r0, [pc, #136]	; (8001104 <MX_TIM17_Init+0xec>)
 800107c:	f003 fb6a 	bl	8004754 <HAL_TIM_PWM_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM17_Init+0x72>
		Error_Handler();
 8001086:	f000 f961 	bl	800134c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108a:	2360      	movs	r3, #96	; 0x60
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001096:	2300      	movs	r3, #0
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <MX_TIM17_Init+0xec>)
 80010b0:	f003 ff5a 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM17_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 80010ba:	f000 f947 	bl	800134c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <MX_TIM17_Init+0xec>)
 80010e6:	f004 fca5 	bl	8005a34 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM17_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 80010f0:	f000 f92c 	bl	800134c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <MX_TIM17_Init+0xec>)
 80010f6:	f000 faad 	bl	8001654 <HAL_TIM_MspPostInit>

}
 80010fa:	bf00      	nop
 80010fc:	3750      	adds	r7, #80	; 0x50
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000538 	.word	0x20000538
 8001108:	40014800 	.word	0x40014800

0800110c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_GPIO_Init+0x8c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <MX_GPIO_Init+0x8c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_GPIO_Init+0x8c>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_GPIO_Init+0x8c>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <MX_GPIO_Init+0x8c>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_GPIO_Init+0x8c>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2120      	movs	r1, #32
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_GPIO_Init+0x90>)
 8001158:	f000 ff00 	bl	8001f5c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800115c:	2308      	movs	r3, #8
 800115e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <MX_GPIO_Init+0x90>)
 8001170:	f000 fd5a 	bl	8001c28 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001174:	2320      	movs	r3, #32
 8001176:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_GPIO_Init+0x90>)
 800118c:	f000 fd4c 	bl	8001c28 <HAL_GPIO_Init>

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	48000400 	.word	0x48000400

080011a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
//	unsigned long t1 = DWT->CYCCNT;

	Handle_Encoder(&motor1, TIM2->CNT);
 80011a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	4853      	ldr	r0, [pc, #332]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80011b4:	f7ff fa24 	bl	8000600 <Handle_Encoder>
	Handle_Encoder(&motor2, TIM4->CNT);
 80011b8:	4b52      	ldr	r3, [pc, #328]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	4851      	ldr	r0, [pc, #324]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80011c2:	f7ff fa1d 	bl	8000600 <Handle_Encoder>
	Handle_Encoder(&motor3, TIM8->CNT);
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	4850      	ldr	r0, [pc, #320]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80011d0:	f7ff fa16 	bl	8000600 <Handle_Encoder>
	feedback.motor1 =
			command.pid_type == 0 ?
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80011d6:	699b      	ldr	r3, [r3, #24]
					motor1.cur_enc_speed : motor1.enc_speed_hist_avg;
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d106      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x4a>
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	e002      	b.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0x50>
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80011ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	feedback.motor1 =
 80011f0:	4b49      	ldr	r3, [pc, #292]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
	feedback.motor2 =
			command.pid_type == 0 ?
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80011f8:	699b      	ldr	r3, [r3, #24]
					motor2.cur_enc_speed : motor2.enc_speed_hist_avg;
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_TIM_PeriodElapsedCallback+0x6c>
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	e002      	b.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x72>
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800120e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	feedback.motor2 =
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001214:	edc3 7a01 	vstr	s15, [r3, #4]
	feedback.motor3 =
			command.pid_type == 0 ?
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800121a:	699b      	ldr	r3, [r3, #24]
					motor3.cur_enc_speed : motor3.enc_speed_hist_avg;
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001220:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	e002      	b.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x94>
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001230:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	feedback.motor3 =
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001236:	edc3 7a02 	vstr	s15, [r3, #8]

	Calculate_PID(&motor1);
 800123a:	4831      	ldr	r0, [pc, #196]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800123c:	f7ff f8b8 	bl	80003b0 <Calculate_PID>
	Calculate_PID(&motor2);
 8001240:	4831      	ldr	r0, [pc, #196]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001242:	f7ff f8b5 	bl	80003b0 <Calculate_PID>
	Calculate_PID(&motor3);
 8001246:	4832      	ldr	r0, [pc, #200]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001248:	f7ff f8b2 	bl	80003b0 <Calculate_PID>
	Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), motor1.cur_speed);
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800124e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001256:	ee17 2a90 	vmov	r2, s15
 800125a:	4930      	ldr	r1, [pc, #192]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800125c:	4830      	ldr	r0, [pc, #192]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800125e:	f7fe fffb 	bl	8000258 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), motor2.cur_speed);
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001264:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126c:	ee17 2a90 	vmov	r2, s15
 8001270:	492c      	ldr	r1, [pc, #176]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001272:	482d      	ldr	r0, [pc, #180]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001274:	f7fe fff0 	bl	8000258 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), motor3.cur_speed);
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800127a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800127e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001282:	ee17 2a90 	vmov	r2, s15
 8001286:	4929      	ldr	r1, [pc, #164]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001288:	4829      	ldr	r0, [pc, #164]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800128a:	f7fe ffe5 	bl	8000258 <Set_Motor_Speed>

	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 800128e:	2108      	movs	r1, #8
 8001290:	4828      	ldr	r0, [pc, #160]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001292:	f000 fe4b 	bl	8001f2c <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x10a>
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x10a>
		TIM17->CCR1 = 0;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0x124>
		command_received_ticker -= 1;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80012c0:	701a      	strb	r2, [r3, #0]
		TIM16->CCR1 = ESC_IDLE_CCR;

		// stop servo
		TIM17->CCR1 = 0;
	}
}
 80012c2:	e018      	b.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x156>
		TIM1->CCR1 = 0;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000620 	.word	0x20000620
 8001304:	40000800 	.word	0x40000800
 8001308:	2000040c 	.word	0x2000040c
 800130c:	40013400 	.word	0x40013400
 8001310:	200006b8 	.word	0x200006b8
 8001314:	200001a0 	.word	0x200001a0
 8001318:	200001c0 	.word	0x200001c0
 800131c:	40012c3c 	.word	0x40012c3c
 8001320:	40012c38 	.word	0x40012c38
 8001324:	4000043c 	.word	0x4000043c
 8001328:	40012c34 	.word	0x40012c34
 800132c:	40000438 	.word	0x40000438
 8001330:	40000434 	.word	0x40000434
 8001334:	48000400 	.word	0x48000400
 8001338:	40014800 	.word	0x40014800
 800133c:	200001e1 	.word	0x200001e1
 8001340:	40012c00 	.word	0x40012c00
 8001344:	40000400 	.word	0x40000400
 8001348:	40014400 	.word	0x40014400

0800134c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001392:	f002 fa21 	bl	80037d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_TIM_PWM_MspInit+0x80>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10c      	bne.n	80013d0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80013ce:	e022      	b.n	8001416 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_TIM_PWM_MspInit+0x88>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10c      	bne.n	80013f4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
}
 80013f2:	e010      	b.n	8001416 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_TIM_PWM_MspInit+0x8c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10b      	bne.n	8001416 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_TIM_PWM_MspInit+0x84>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
}
 8001416:	bf00      	nop
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40012c00 	.word	0x40012c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40000400 	.word	0x40000400
 8001430:	40014000 	.word	0x40014000

08001434 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001454:	d129      	bne.n	80014aa <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001456:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a53      	ldr	r2, [pc, #332]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a4d      	ldr	r2, [pc, #308]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001486:	2303      	movs	r3, #3
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001496:	2301      	movs	r3, #1
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f000 fbc0 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80014a8:	e079      	b.n	800159e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3f      	ldr	r2, [pc, #252]	; (80015ac <HAL_TIM_Encoder_MspInit+0x178>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d128      	bne.n	8001506 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6593      	str	r3, [r2, #88]	; 0x58
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e4:	23c0      	movs	r3, #192	; 0xc0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f4:	2302      	movs	r3, #2
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fc:	4619      	mov	r1, r3
 80014fe:	482c      	ldr	r0, [pc, #176]	; (80015b0 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001500:	f000 fb92 	bl	8001c28 <HAL_GPIO_Init>
}
 8001504:	e04b      	b.n	800159e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <HAL_TIM_Encoder_MspInit+0x180>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d146      	bne.n	800159e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001516:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800151a:	6613      	str	r3, [r2, #96]	; 0x60
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_TIM_Encoder_MspInit+0x174>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800156a:	2302      	movs	r3, #2
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f000 fb56 	bl	8001c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800157c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800158e:	230a      	movs	r3, #10
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_TIM_Encoder_MspInit+0x17c>)
 800159a:	f000 fb45 	bl	8001c28 <HAL_GPIO_Init>
}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	; 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40000800 	.word	0x40000800
 80015b0:	48000400 	.word	0x48000400
 80015b4:	40013400 	.word	0x40013400

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_TIM_Base_MspInit+0x8c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d114      	bne.n	80015f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 80015d0:	f043 0320 	orr.w	r3, r3, #32
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2037      	movs	r0, #55	; 0x37
 80015e8:	f000 fae9 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015ec:	2037      	movs	r0, #55	; 0x37
 80015ee:	f000 fb00 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015f2:	e022      	b.n	800163a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_TIM_Base_MspInit+0x94>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10c      	bne.n	8001618 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6613      	str	r3, [r2, #96]	; 0x60
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
}
 8001616:	e010      	b.n	800163a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <HAL_TIM_Base_MspInit+0x98>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10b      	bne.n	800163a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6613      	str	r3, [r2, #96]	; 0x60
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_TIM_Base_MspInit+0x90>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40001400 	.word	0x40001400
 8001648:	40021000 	.word	0x40021000
 800164c:	40014400 	.word	0x40014400
 8001650:	40014800 	.word	0x40014800

08001654 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_TIM_MspPostInit+0x1b4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11e      	bne.n	80016b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a64      	ldr	r2, [pc, #400]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800168e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016a0:	2306      	movs	r3, #6
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f000 fabb 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80016b2:	e0a5      	b.n	8001800 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_TIM_MspPostInit+0x1bc>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d139      	bne.n	8001732 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
 80016d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80016ee:	2350      	movs	r3, #80	; 0x50
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016fe:	2302      	movs	r3, #2
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f000 fa8c 	bl	8001c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001710:	2301      	movs	r3, #1
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001720:	2302      	movs	r3, #2
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	483a      	ldr	r0, [pc, #232]	; (8001814 <HAL_TIM_MspPostInit+0x1c0>)
 800172c:	f000 fa7c 	bl	8001c28 <HAL_GPIO_Init>
}
 8001730:	e066      	b.n	8001800 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a38      	ldr	r2, [pc, #224]	; (8001818 <HAL_TIM_MspPostInit+0x1c4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d11d      	bne.n	8001778 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4a32      	ldr	r2, [pc, #200]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001754:	2304      	movs	r3, #4
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001764:	2309      	movs	r3, #9
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f000 fa59 	bl	8001c28 <HAL_GPIO_Init>
}
 8001776:	e043      	b.n	8001800 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_TIM_MspPostInit+0x1c8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11c      	bne.n	80017bc <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	4a21      	ldr	r2, [pc, #132]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800179a:	2310      	movs	r3, #16
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80017aa:	2301      	movs	r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	4817      	ldr	r0, [pc, #92]	; (8001814 <HAL_TIM_MspPostInit+0x1c0>)
 80017b6:	f000 fa37 	bl	8001c28 <HAL_GPIO_Init>
}
 80017ba:	e021      	b.n	8001800 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_TIM_MspPostInit+0x1cc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d11c      	bne.n	8001800 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_TIM_MspPostInit+0x1b8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80017ee:	2301      	movs	r3, #1
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f000 fa14 	bl	8001c28 <HAL_GPIO_Init>
}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40012c00 	.word	0x40012c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40000400 	.word	0x40000400
 8001814:	48000400 	.word	0x48000400
 8001818:	40014000 	.word	0x40014000
 800181c:	40014400 	.word	0x40014400
 8001820:	40014800 	.word	0x40014800

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f8a8 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USB_LP_IRQHandler+0x10>)
 8001886:	f000 fca2 	bl	80021ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000143c 	.word	0x2000143c

08001894 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM7_IRQHandler+0x10>)
 800189a:	f003 f9e6 	bl	8004c6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000074c 	.word	0x2000074c

080018a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <SystemInit+0x28>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <SystemInit+0x28>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SystemInit+0x28>)
 80018be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c2:	609a      	str	r2, [r3, #8]
#endif
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018fe:	f7ff ffd3 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001902:	f008 fb1f 	bl	8009f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7fe fecf 	bl	80006a8 <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   r0, =_estack
 800190c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001918:	0800a02c 	.word	0x0800a02c
  ldr r2, =_sbss
 800191c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001920:	20001730 	.word	0x20001730

08001924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_2_IRQHandler>

08001926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f939 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f80e 	bl	8001958 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	e001      	b.n	800194c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001948:	f7ff fd08 	bl	800135c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194c:	79fb      	ldrb	r3, [r7, #7]

}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_InitTick+0x68>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d022      	beq.n	80019b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_InitTick+0x6c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_InitTick+0x68>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001978:	fbb1 f3f3 	udiv	r3, r1, r3
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f944 	bl	8001c0e <HAL_SYSTICK_Config>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10f      	bne.n	80019ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	d809      	bhi.n	80019a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001992:	2200      	movs	r2, #0
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	f04f 30ff 	mov.w	r0, #4294967295
 800199a:	f000 f910 	bl	8001bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_InitTick+0x70>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e007      	b.n	80019b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e004      	b.n	80019b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e001      	b.n	80019b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x1c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x20>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_IncTick+0x1c>)
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000798 	.word	0x20000798
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000798 	.word	0x20000798

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff40 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff33 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa4 	bl	8001b64 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c36:	e15a      	b.n	8001eee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 814c 	beq.w	8001ee8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d00b      	beq.n	8001c70 <HAL_GPIO_Init+0x48>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d007      	beq.n	8001c70 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c64:	2b11      	cmp	r3, #17
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b12      	cmp	r3, #18
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0201 	and.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0xea>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b12      	cmp	r3, #18
 8001d10:	d123      	bne.n	8001d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	6939      	ldr	r1, [r7, #16]
 8001d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0203 	and.w	r2, r3, #3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80a6 	beq.w	8001ee8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9c:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a5a      	ldr	r2, [pc, #360]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db4:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dde:	d01f      	beq.n	8001e20 <HAL_GPIO_Init+0x1f8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_GPIO_Init+0x2ec>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d019      	beq.n	8001e1c <HAL_GPIO_Init+0x1f4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_GPIO_Init+0x1f0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1ec>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a49      	ldr	r2, [pc, #292]	; (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1e8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a48      	ldr	r2, [pc, #288]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1e4>
 8001e08:	2305      	movs	r3, #5
 8001e0a:	e00a      	b.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	e008      	b.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e10:	2304      	movs	r3, #4
 8001e12:	e006      	b.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e14:	2303      	movs	r3, #3
 8001e16:	e004      	b.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e20:	2300      	movs	r3, #0
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e32:	4937      	ldr	r1, [pc, #220]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8e:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f ae9d 	bne.w	8001c38 <HAL_GPIO_Init+0x10>
  }
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	48000400 	.word	0x48000400
 8001f18:	48000800 	.word	0x48000800
 8001f1c:	48000c00 	.word	0x48000c00
 8001f20:	48001000 	.word	0x48001000
 8001f24:	48001400 	.word	0x48001400
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43d9      	mvns	r1, r3
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	400b      	ands	r3, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af06      	add	r7, sp, #24
 8001fc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0d7      	b.n	8002182 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f007 fcbc 	bl	8009964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fe18 	bl	8005c2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e04c      	b.n	800209e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3301      	adds	r3, #1
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	b298      	uxth	r0, r3
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	3336      	adds	r3, #54	; 0x36
 8002042:	4602      	mov	r2, r0
 8002044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3303      	adds	r3, #3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3338      	adds	r3, #56	; 0x38
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	333c      	adds	r3, #60	; 0x3c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	3340      	adds	r3, #64	; 0x40
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	3301      	adds	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d3ad      	bcc.n	8002004 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e044      	b.n	8002138 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	3301      	adds	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d3b5      	bcc.n	80020ae <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	687e      	ldr	r6, [r7, #4]
 800214a:	466d      	mov	r5, sp
 800214c:	f106 0410 	add.w	r4, r6, #16
 8002150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	602b      	str	r3, [r5, #0]
 8002158:	1d33      	adds	r3, r6, #4
 800215a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215c:	6838      	ldr	r0, [r7, #0]
 800215e:	f003 fd81 	bl	8005c64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f001 fa5e 	bl	800363c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800218a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_PCD_Start+0x16>
 800219c:	2302      	movs	r3, #2
 800219e:	e012      	b.n	80021c6 <HAL_PCD_Start+0x3c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fd27 	bl	8005c00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 fd13 	bl	8007be2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 fd18 	bl	8007c10 <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ea:	d102      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fb5b 	bl	80028a8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fd0a 	bl	8007c10 <USB_ReadInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	d112      	bne.n	800222e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221a:	b292      	uxth	r2, r2
 800221c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f007 fc1a 	bl	8009a5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002226:	2100      	movs	r1, #0
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f91e 	bl	800246a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f005 fcec 	bl	8007c10 <USB_ReadInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002242:	d10b      	bne.n	800225c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800224c:	b29a      	uxth	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002256:	b292      	uxth	r2, r2
 8002258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f005 fcd5 	bl	8007c10 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002270:	d10b      	bne.n	800228a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002284:	b292      	uxth	r2, r2
 8002286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fcbe 	bl	8007c10 <USB_ReadInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229e:	d133      	bne.n	8002308 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	b292      	uxth	r2, r2
 80022b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0208 	bic.w	r2, r2, #8
 80022ca:	b292      	uxth	r2, r2
 80022cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022e2:	2100      	movs	r1, #0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f007 fdad 	bl	8009e44 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f007 fbee 	bl	8009acc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002302:	b292      	uxth	r2, r2
 8002304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f005 fc7f 	bl	8007c10 <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800231c:	d126      	bne.n	800236c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0208 	orr.w	r2, r2, #8
 8002330:	b292      	uxth	r2, r2
 8002332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0204 	orr.w	r2, r2, #4
 8002360:	b292      	uxth	r2, r2
 8002362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f007 fb96 	bl	8009a98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f005 fc4d 	bl	8007c10 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b80      	cmp	r3, #128	; 0x80
 800237e:	d13f      	bne.n	8002400 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002392:	b292      	uxth	r2, r2
 8002394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d12b      	bne.n	80023fa <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0204 	orr.w	r2, r2, #4
 80023b4:	b292      	uxth	r2, r2
 80023b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0208 	orr.w	r2, r2, #8
 80023cc:	b292      	uxth	r2, r2
 80023ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023f0:	2101      	movs	r1, #1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f007 fd26 	bl	8009e44 <HAL_PCDEx_LPM_Callback>
 80023f8:	e002      	b.n	8002400 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f007 fb4c 	bl	8009a98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 fc03 	bl	8007c10 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002414:	d10e      	bne.n	8002434 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002428:	b292      	uxth	r2, r2
 800242a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f007 fb05 	bl	8009a3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f005 fbe9 	bl	8007c10 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002448:	d10b      	bne.n	8002462 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800245c:	b292      	uxth	r2, r2
 800245e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_PCD_SetAddress+0x1a>
 8002480:	2302      	movs	r3, #2
 8002482:	e013      	b.n	80024ac <HAL_PCD_SetAddress+0x42>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f005 fb8c 	bl	8007bba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	70fb      	strb	r3, [r7, #3]
 80024c6:	460b      	mov	r3, r1
 80024c8:	803b      	strh	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da0e      	bge.n	80024f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	705a      	strb	r2, [r3, #1]
 80024f6:	e00e      	b.n	8002516 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 0207 	and.w	r2, r3, #7
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002522:	883a      	ldrh	r2, [r7, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	78ba      	ldrb	r2, [r7, #2]
 800252c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002540:	78bb      	ldrb	r3, [r7, #2]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d102      	bne.n	800254c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_PCD_EP_Open+0xa6>
 8002556:	2302      	movs	r3, #2
 8002558:	e00e      	b.n	8002578 <HAL_PCD_EP_Open+0xc4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fb9d 	bl	8005ca8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002576:	7afb      	ldrb	r3, [r7, #11]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800258c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da0e      	bge.n	80025b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	705a      	strb	r2, [r3, #1]
 80025b0:	e00e      	b.n	80025d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 0207 	and.w	r2, r3, #7
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_PCD_EP_Close+0x6a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e00e      	b.n	8002608 <HAL_PCD_EP_Close+0x88>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fec3 	bl	8006384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	460b      	mov	r3, r1
 800261e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	f003 0207 	and.w	r2, r3, #7
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2200      	movs	r2, #0
 800264e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	b2da      	uxtb	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6979      	ldr	r1, [r7, #20]
 800266c:	4618      	mov	r0, r3
 800266e:	f004 f876 	bl	800675e <USB_EPStartXfer>
 8002672:	e005      	b.n	8002680 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6979      	ldr	r1, [r7, #20]
 800267a:	4618      	mov	r0, r3
 800267c:	f004 f86f 	bl	800675e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 0207 	and.w	r2, r3, #7
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80026ac:	681b      	ldr	r3, [r3, #0]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	460b      	mov	r3, r1
 80026c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2201      	movs	r2, #1
 8002704:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002706:	7afb      	ldrb	r3, [r7, #11]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	b2da      	uxtb	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6979      	ldr	r1, [r7, #20]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 f81b 	bl	800675e <USB_EPStartXfer>
 8002728:	e005      	b.n	8002736 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6979      	ldr	r1, [r7, #20]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 f814 	bl	800675e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0207 	and.w	r2, r3, #7
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d901      	bls.n	800275e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e04c      	b.n	80027f8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800275e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002762:	2b00      	cmp	r3, #0
 8002764:	da0e      	bge.n	8002784 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	705a      	strb	r2, [r3, #1]
 8002782:	e00c      	b.n	800279e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_PCD_EP_SetStall+0x7e>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e01c      	b.n	80027f8 <HAL_PCD_EP_SetStall+0xb8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68f9      	ldr	r1, [r7, #12]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f005 f8f5 	bl	80079bc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d108      	bne.n	80027ee <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f005 fa21 	bl	8007c30 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d901      	bls.n	800281e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e040      	b.n	80028a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800281e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002822:	2b00      	cmp	r3, #0
 8002824:	da0e      	bge.n	8002844 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	705a      	strb	r2, [r3, #1]
 8002842:	e00e      	b.n	8002862 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 0207 	and.w	r2, r3, #7
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_PCD_EP_ClrStall+0x82>
 800287e:	2302      	movs	r3, #2
 8002880:	e00e      	b.n	80028a0 <HAL_PCD_EP_ClrStall+0xa0>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	4618      	mov	r0, r3
 8002892:	f005 f8e4 	bl	8007a5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	; 0x38
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028b0:	e2d1      	b.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80028bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80028c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8152 	bne.w	8002b76 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d150      	bne.n	800297e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ec:	81fb      	strh	r3, [r7, #14]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3328      	adds	r3, #40	; 0x28
 8002904:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4413      	add	r3, r2
 8002920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	441a      	add	r2, r3
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800293c:	2100      	movs	r1, #0
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f007 f863 	bl	8009a0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8282 	beq.w	8002e56 <PCD_EP_ISR_Handler+0x5ae>
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 827d 	bne.w	8002e56 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002968:	b2da      	uxtb	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b292      	uxth	r2, r2
 8002970:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800297c:	e26b      	b.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800298e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002994:	2b00      	cmp	r3, #0
 8002996:	d032      	beq.n	80029fe <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f005 f979 	bl	8007cca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029e4:	4013      	ands	r3, r2
 80029e6:	823b      	strh	r3, [r7, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	8a3a      	ldrh	r2, [r7, #16]
 80029ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f006 ffda 	bl	80099b0 <HAL_PCD_SetupStageCallback>
 80029fc:	e22b      	b.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f280 8227 	bge.w	8002e56 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a14:	4013      	ands	r3, r2
 8002a16:	83bb      	strh	r3, [r7, #28]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	8bba      	ldrh	r2, [r7, #28]
 8002a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a22:	b292      	uxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d019      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x1e2>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	6959      	ldr	r1, [r3, #20]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f005 f92b 	bl	8007cca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	441a      	add	r2, r3
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a82:	2100      	movs	r1, #0
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f006 ffa5 	bl	80099d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d112      	bne.n	8002ad8 <PCD_EP_ISR_Handler+0x230>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	e02f      	b.n	8002b38 <PCD_EP_ISR_Handler+0x290>
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ade:	d813      	bhi.n	8002b08 <PCD_EP_ISR_Handler+0x260>
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <PCD_EP_ISR_Handler+0x252>
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	3301      	adds	r3, #1
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	e017      	b.n	8002b38 <PCD_EP_ISR_Handler+0x290>
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <PCD_EP_ISR_Handler+0x27a>
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	827b      	strh	r3, [r7, #18]
 8002b4a:	8a7b      	ldrh	r3, [r7, #18]
 8002b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b50:	827b      	strh	r3, [r7, #18]
 8002b52:	8a7b      	ldrh	r3, [r7, #18]
 8002b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b58:	827b      	strh	r3, [r7, #18]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	8a7b      	ldrh	r3, [r7, #18]
 8002b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]
 8002b74:	e16f      	b.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b88:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f280 80e4 	bge.w	8002d5a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ba8:	4013      	ands	r3, r2
 8002baa:	853b      	strh	r3, [r7, #40]	; 0x28
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002bc4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	7b1b      	ldrb	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d120      	bne.n	8002c24 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c06:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002c08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8083 	beq.w	8002d16 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	6959      	ldr	r1, [r3, #20]
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	88da      	ldrh	r2, [r3, #6]
 8002c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c1e:	f005 f854 	bl	8007cca <USB_ReadPMA>
 8002c22:	e078      	b.n	8002d16 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	78db      	ldrb	r3, [r3, #3]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d108      	bne.n	8002c3e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f91d 	bl	8002e72 <HAL_PCD_EP_DB_Receive>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002c3c:	e06b      	b.n	8002d16 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c58:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	441a      	add	r2, r3
 8002c68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01f      	beq.n	8002cd8 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002cbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d028      	beq.n	8002d16 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	6959      	ldr	r1, [r3, #20]
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	891a      	ldrh	r2, [r3, #8]
 8002cd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cd2:	f004 fffa 	bl	8007cca <USB_ReadPMA>
 8002cd6:	e01e      	b.n	8002d16 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	6959      	ldr	r1, [r3, #20]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	895a      	ldrh	r2, [r3, #10]
 8002d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d12:	f004 ffda 	bl	8007cca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d1c:	441a      	add	r2, r3
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d28:	441a      	add	r2, r3
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <PCD_EP_ISR_Handler+0x498>
 8002d36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d206      	bcs.n	8002d4e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f006 fe44 	bl	80099d4 <HAL_PCD_DataOutStageCallback>
 8002d4c:	e005      	b.n	8002d5a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fd02 	bl	800675e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d078      	beq.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	843b      	strh	r3, [r7, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	8c3b      	ldrh	r3, [r7, #32]
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d108      	bne.n	8002dca <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d144      	bne.n	8002e4a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002dc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d13f      	bne.n	8002e4a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dee:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	699a      	ldr	r2, [r3, #24]
 8002df4:	8bfb      	ldrh	r3, [r7, #30]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d906      	bls.n	8002e08 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	8bfb      	ldrh	r3, [r7, #30]
 8002e00:	1ad2      	subs	r2, r2, r3
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	619a      	str	r2, [r3, #24]
 8002e06:	e002      	b.n	8002e0e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f006 fdf4 	bl	8009a0a <HAL_PCD_DataInStageCallback>
 8002e22:	e018      	b.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	8bfb      	ldrh	r3, [r7, #30]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	8bfb      	ldrh	r3, [r7, #30]
 8002e36:	441a      	add	r2, r3
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fc8b 	bl	800675e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002e48:	e005      	b.n	8002e56 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f917 	bl	8003084 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f6ff ad25 	blt.w	80028b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3738      	adds	r7, #56	; 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07c      	beq.n	8002f84 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	699a      	ldr	r2, [r3, #24]
 8002eb4:	8b7b      	ldrh	r3, [r7, #26]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d306      	bcc.n	8002ec8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	8b7b      	ldrh	r3, [r7, #26]
 8002ec0:	1ad2      	subs	r2, r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	619a      	str	r2, [r3, #24]
 8002ec6:	e002      	b.n	8002ece <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d123      	bne.n	8002f1e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef0:	833b      	strh	r3, [r7, #24]
 8002ef2:	8b3b      	ldrh	r3, [r7, #24]
 8002ef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ef8:	833b      	strh	r3, [r7, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	8b3b      	ldrh	r3, [r7, #24]
 8002f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01f      	beq.n	8002f68 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	82fb      	strh	r3, [r7, #22]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	441a      	add	r2, r3
 8002f52:	8afb      	ldrh	r3, [r7, #22]
 8002f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f68:	8b7b      	ldrh	r3, [r7, #26]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8085 	beq.w	800307a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6959      	ldr	r1, [r3, #20]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	891a      	ldrh	r2, [r3, #8]
 8002f7c:	8b7b      	ldrh	r3, [r7, #26]
 8002f7e:	f004 fea4 	bl	8007cca <USB_ReadPMA>
 8002f82:	e07a      	b.n	800307a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	8b7b      	ldrh	r3, [r7, #26]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d306      	bcc.n	8002fc2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	e002      	b.n	8002fc8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d123      	bne.n	8003018 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	83fb      	strh	r3, [r7, #30]
 8002fec:	8bfb      	ldrh	r3, [r7, #30]
 8002fee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ff2:	83fb      	strh	r3, [r7, #30]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	8bfb      	ldrh	r3, [r7, #30]
 8003004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003014:	b29b      	uxth	r3, r3
 8003016:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11f      	bne.n	8003062 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	83bb      	strh	r3, [r7, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8bbb      	ldrh	r3, [r7, #28]
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003062:	8b7b      	ldrh	r3, [r7, #26]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6959      	ldr	r1, [r3, #20]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	895a      	ldrh	r2, [r3, #10]
 8003074:	8b7b      	ldrh	r3, [r7, #26]
 8003076:	f004 fe28 	bl	8007cca <USB_ReadPMA>
    }
  }

  return count;
 800307a:	8b7b      	ldrh	r3, [r7, #26]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b092      	sub	sp, #72	; 0x48
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8130 	beq.w	80032fe <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d906      	bls.n	80030dc <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	619a      	str	r2, [r3, #24]
 80030da:	e002      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d12c      	bne.n	8003144 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	4619      	mov	r1, r3
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f006 fc8a 	bl	8009a0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 822d 	beq.w	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311c:	827b      	strh	r3, [r7, #18]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	8a7b      	ldrh	r3, [r7, #18]
 800312e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003136:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313e:	b29b      	uxth	r3, r3
 8003140:	8013      	strh	r3, [r2, #0]
 8003142:	e20b      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01f      	beq.n	800318e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	84bb      	strh	r3, [r7, #36]	; 0x24
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 81e1 	bne.w	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031a0:	441a      	add	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031ac:	441a      	add	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6a1a      	ldr	r2, [r3, #32]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d309      	bcc.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6a1a      	ldr	r2, [r3, #32]
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	621a      	str	r2, [r3, #32]
 80031d0:	e014      	b.n	80031fc <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80031da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031e6:	e009      	b.n	80031fc <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d155      	bne.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00da      	lsls	r2, r3, #3
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	2b00      	cmp	r3, #0
 8003230:	d112      	bne.n	8003258 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800323c:	b29a      	uxth	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003250:	b29a      	uxth	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	e047      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	2b3e      	cmp	r3, #62	; 0x3e
 800325c:	d811      	bhi.n	8003282 <HAL_PCD_EP_DB_Transmit+0x1fe>
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	3301      	adds	r3, #1
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	b29b      	uxth	r3, r3
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	b29a      	uxth	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	e032      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <HAL_PCD_EP_DB_Transmit+0x214>
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	3b01      	subs	r3, #1
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	b29b      	uxth	r3, r3
 800329c:	029b      	lsls	r3, r3, #10
 800329e:	b29b      	uxth	r3, r3
 80032a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	e01b      	b.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x264>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d117      	bne.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x264>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	623b      	str	r3, [r7, #32]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	4413      	add	r3, r2
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00da      	lsls	r2, r3, #3
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	4413      	add	r3, r2
 80032da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6959      	ldr	r1, [r3, #20]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	891a      	ldrh	r2, [r3, #8]
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f004 fca6 	bl	8007c48 <USB_WritePMA>
 80032fc:	e12e      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4413      	add	r3, r2
 8003318:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003322:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800332a:	429a      	cmp	r2, r3
 800332c:	d306      	bcc.n	800333c <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003334:	1ad2      	subs	r2, r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	619a      	str	r2, [r3, #24]
 800333a:	e002      	b.n	8003342 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d12c      	bne.n	80033a4 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f006 fb5a 	bl	8009a0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 80fd 	bne.w	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	441a      	add	r2, r3
 800338c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800338e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800339a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339e:	b29b      	uxth	r3, r3
 80033a0:	8013      	strh	r3, [r2, #0]
 80033a2:	e0db      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11f      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	441a      	add	r2, r3
 80033d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 80b1 	bne.w	800355c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003400:	441a      	add	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800340c:	441a      	add	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	429a      	cmp	r2, r3
 800341c:	d309      	bcc.n	8003432 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6a1a      	ldr	r2, [r3, #32]
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	621a      	str	r2, [r3, #32]
 8003430:	e014      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800343a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003446:	e009      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d155      	bne.n	8003516 <HAL_PCD_EP_DB_Transmit+0x492>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	647b      	str	r3, [r7, #68]	; 0x44
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	4413      	add	r3, r2
 8003480:	647b      	str	r3, [r7, #68]	; 0x44
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00da      	lsls	r2, r3, #3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	4413      	add	r3, r2
 800348c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d112      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x43a>
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	e044      	b.n	8003548 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b3e      	cmp	r3, #62	; 0x3e
 80034c2:	d811      	bhi.n	80034e8 <HAL_PCD_EP_DB_Transmit+0x464>
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_PCD_EP_DB_Transmit+0x456>
 80034d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d6:	3301      	adds	r3, #1
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	b29b      	uxth	r3, r3
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	e02f      	b.n	8003548 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_PCD_EP_DB_Transmit+0x47a>
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	3b01      	subs	r3, #1
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	b29b      	uxth	r3, r3
 8003502:	029b      	lsls	r3, r3, #10
 8003504:	b29b      	uxth	r3, r3
 8003506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800350a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800350e:	b29a      	uxth	r2, r3
 8003510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	e018      	b.n	8003548 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d114      	bne.n	8003548 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	4413      	add	r3, r2
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	00da      	lsls	r2, r3, #3
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	4413      	add	r3, r2
 800353a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	b29a      	uxth	r2, r3
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6959      	ldr	r1, [r3, #20]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	895a      	ldrh	r2, [r3, #10]
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	b29b      	uxth	r3, r3
 8003558:	f004 fb76 	bl	8007c48 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003576:	823b      	strh	r3, [r7, #16]
 8003578:	8a3b      	ldrh	r3, [r7, #16]
 800357a:	f083 0310 	eor.w	r3, r3, #16
 800357e:	823b      	strh	r3, [r7, #16]
 8003580:	8a3b      	ldrh	r3, [r7, #16]
 8003582:	f083 0320 	eor.w	r3, r3, #32
 8003586:	823b      	strh	r3, [r7, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	8a3b      	ldrh	r3, [r7, #16]
 8003598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800359c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3748      	adds	r7, #72	; 0x48
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	817b      	strh	r3, [r7, #10]
 80035c4:	4613      	mov	r3, r2
 80035c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	897b      	ldrh	r3, [r7, #10]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e009      	b.n	8003600 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035ec:	897a      	ldrh	r2, [r7, #10]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4413      	add	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003600:	893b      	ldrh	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	b29a      	uxth	r2, r3
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	80da      	strh	r2, [r3, #6]
 8003614:	e00b      	b.n	800362e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2201      	movs	r2, #1
 800361a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	b29a      	uxth	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	b29a      	uxth	r2, r3
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003660:	b29b      	uxth	r3, r3
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003674:	b29b      	uxth	r3, r3
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d141      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800369e:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d131      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ac:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b2:	4a46      	ldr	r2, [pc, #280]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c4:	4a41      	ldr	r2, [pc, #260]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036cc:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2232      	movs	r2, #50	; 0x32
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a3f      	ldr	r2, [pc, #252]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	0c9b      	lsrs	r3, r3, #18
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036e2:	e002      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d102      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f2      	bne.n	80036e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	d158      	bne.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e057      	b.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003716:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003720:	e04d      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d141      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d131      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003750:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003756:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2232      	movs	r2, #50	; 0x32
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800376e:	e002      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3b01      	subs	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d102      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f2      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d112      	bne.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e011      	b.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037ac:	e007      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40007000 	.word	0x40007000
 80037d0:	20000000 	.word	0x20000000
 80037d4:	431bde83 	.word	0x431bde83

080037d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e6:	6093      	str	r3, [r2, #8]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e308      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d075      	beq.n	8003902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003816:	4ba3      	ldr	r3, [pc, #652]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003820:	4ba0      	ldr	r3, [pc, #640]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d102      	bne.n	8003836 <HAL_RCC_OscConfig+0x3e>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d002      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4b99      	ldr	r3, [pc, #612]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05b      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d157      	bne.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e2e3      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d106      	bne.n	800386c <HAL_RCC_OscConfig+0x74>
 800385e:	4b91      	ldr	r3, [pc, #580]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a90      	ldr	r2, [pc, #576]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x98>
 8003876:	4b8b      	ldr	r3, [pc, #556]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a8a      	ldr	r2, [pc, #552]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b88      	ldr	r3, [pc, #544]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a87      	ldr	r2, [pc, #540]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
 8003890:	4b84      	ldr	r3, [pc, #528]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a83      	ldr	r2, [pc, #524]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b81      	ldr	r3, [pc, #516]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a80      	ldr	r2, [pc, #512]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f89e 	bl	80019f0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7fe f89a 	bl	80019f0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e2a8      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ca:	4b76      	ldr	r3, [pc, #472]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe f88a 	bl	80019f0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe f886 	bl	80019f0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e294      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f2:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d075      	beq.n	80039fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003918:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d102      	bne.n	800392e <HAL_RCC_OscConfig+0x136>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d002      	beq.n	8003934 <HAL_RCC_OscConfig+0x13c>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d11f      	bne.n	8003974 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003934:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x154>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e267      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b55      	ldr	r3, [pc, #340]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4952      	ldr	r1, [pc, #328]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003960:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x2b0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd fff7 	bl	8001958 <HAL_InitTick>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d043      	beq.n	80039f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e253      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a48      	ldr	r2, [pc, #288]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe f832 	bl	80019f0 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe f82e 	bl	80019f0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e23c      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a2:	4b40      	ldr	r3, [pc, #256]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	4939      	ldr	r1, [pc, #228]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
 80039c2:	e01a      	b.n	80039fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a36      	ldr	r2, [pc, #216]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe f80e 	bl	80019f0 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d8:	f7fe f80a 	bl	80019f0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e218      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x1e0>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d03c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1e:	f7fd ffe7 	bl	80019f0 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a26:	f7fd ffe3 	bl	80019f0 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1f1      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0ef      	beq.n	8003a26 <HAL_RCC_OscConfig+0x22e>
 8003a46:	e01b      	b.n	8003a80 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd ffca 	bl	80019f0 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7fd ffc6 	bl	80019f0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1d4      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ef      	bne.n	8003a60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80ab 	beq.w	8003be4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_RCC_OscConfig+0x2b4>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e005      	b.n	8003aae <HAL_RCC_OscConfig+0x2b6>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4baf      	ldr	r3, [pc, #700]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	4aae      	ldr	r2, [pc, #696]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6593      	str	r3, [r2, #88]	; 0x58
 8003abe:	4bac      	ldr	r3, [pc, #688]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ace:	4ba9      	ldr	r3, [pc, #676]	; (8003d74 <HAL_RCC_OscConfig+0x57c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ada:	4ba6      	ldr	r3, [pc, #664]	; (8003d74 <HAL_RCC_OscConfig+0x57c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4aa5      	ldr	r2, [pc, #660]	; (8003d74 <HAL_RCC_OscConfig+0x57c>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd ff83 	bl	80019f0 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fd ff7f 	bl	80019f0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e18d      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b00:	4b9c      	ldr	r3, [pc, #624]	; (8003d74 <HAL_RCC_OscConfig+0x57c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d108      	bne.n	8003b26 <HAL_RCC_OscConfig+0x32e>
 8003b14:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a95      	ldr	r2, [pc, #596]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b24:	e024      	b.n	8003b70 <HAL_RCC_OscConfig+0x378>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d110      	bne.n	8003b50 <HAL_RCC_OscConfig+0x358>
 8003b2e:	4b90      	ldr	r3, [pc, #576]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4a8e      	ldr	r2, [pc, #568]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3e:	4b8c      	ldr	r3, [pc, #560]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	4a8a      	ldr	r2, [pc, #552]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b4e:	e00f      	b.n	8003b70 <HAL_RCC_OscConfig+0x378>
 8003b50:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	4a86      	ldr	r2, [pc, #536]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b60:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	4a82      	ldr	r2, [pc, #520]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d016      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fd ff3a 	bl	80019f0 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd ff36 	bl	80019f0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e142      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ed      	beq.n	8003b80 <HAL_RCC_OscConfig+0x388>
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fd ff23 	bl	80019f0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd ff1f 	bl	80019f0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e12b      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc4:	4b6a      	ldr	r3, [pc, #424]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ed      	bne.n	8003bae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd8:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a64      	ldr	r2, [pc, #400]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bf8:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfe:	4a5c      	ldr	r2, [pc, #368]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fef2 	bl	80019f0 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c10:	f7fd feee 	bl	80019f0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0fc      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c22:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <HAL_RCC_OscConfig+0x418>
 8003c30:	e01b      	b.n	8003c6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c32:	4b4f      	ldr	r3, [pc, #316]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c38:	4a4d      	ldr	r2, [pc, #308]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fd fed5 	bl	80019f0 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c4a:	f7fd fed1 	bl	80019f0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0df      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c5c:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ef      	bne.n	8003c4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80d3 	beq.w	8003e1a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c74:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	f000 808d 	beq.w	8003d9c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d15a      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fd feab 	bl	80019f0 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fd fea7 	bl	80019f0 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0b5      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cbc:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCC_OscConfig+0x580>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6a11      	ldr	r1, [r2, #32]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	0112      	lsls	r2, r2, #4
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003cd6:	0212      	lsls	r2, r2, #8
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0552      	lsls	r2, r2, #21
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cea:	0852      	lsrs	r2, r2, #1
 8003cec:	3a01      	subs	r2, #1
 8003cee:	0652      	lsls	r2, r2, #25
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cf6:	06d2      	lsls	r2, r2, #27
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	491d      	ldr	r1, [pc, #116]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd fe6a 	bl	80019f0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd fe66 	bl	80019f0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e074      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x528>
 8003d3e:	e06c      	b.n	8003e1a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd fe42 	bl	80019f0 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6e:	e00e      	b.n	8003d8e <HAL_RCC_OscConfig+0x596>
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40007000 	.word	0x40007000
 8003d78:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fd fe38 	bl	80019f0 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e046      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8e:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_RCC_OscConfig+0x62c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x584>
 8003d9a:	e03e      	b.n	8003e1a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e039      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCC_OscConfig+0x62c>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d12c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d123      	bne.n	8003e16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d11b      	bne.n	8003e16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d113      	bne.n	8003e16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000

08003e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e11e      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b91      	ldr	r3, [pc, #580]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d910      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b8e      	ldr	r3, [pc, #568]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 020f 	bic.w	r2, r3, #15
 8003e56:	498c      	ldr	r1, [pc, #560]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e106      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d073      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d129      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e84:	4b81      	ldr	r3, [pc, #516]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0f4      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e94:	f000 f966 	bl	8004164 <RCC_GetSysClockFreqFromPLLSource>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4a7c      	ldr	r2, [pc, #496]	; (8004090 <HAL_RCC_ClockConfig+0x268>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d93f      	bls.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d033      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d12f      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ec2:	4b72      	ldr	r3, [pc, #456]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eca:	4a70      	ldr	r2, [pc, #448]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e024      	b.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0c6      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef0:	4b66      	ldr	r3, [pc, #408]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0be      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f00:	f000 f8ce 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4a61      	ldr	r2, [pc, #388]	; (8004090 <HAL_RCC_ClockConfig+0x268>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d909      	bls.n	8003f22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f0e:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f16:	4a5d      	ldr	r2, [pc, #372]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b5a      	ldr	r3, [pc, #360]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4957      	ldr	r1, [pc, #348]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f34:	f7fd fd5c 	bl	80019f0 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fd fd58 	bl	80019f0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e095      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b4e      	ldr	r3, [pc, #312]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d023      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a42      	ldr	r2, [pc, #264]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f9c:	4a3b      	ldr	r2, [pc, #236]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4936      	ldr	r1, [pc, #216]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d105      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4a32      	ldr	r2, [pc, #200]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8003fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fca:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d21d      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 020f 	bic.w	r2, r3, #15
 8003fe0:	4929      	ldr	r1, [pc, #164]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fd02 	bl	80019f0 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fd fcfe 	bl	80019f0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e03b      	b.n	800407e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_RCC_ClockConfig+0x260>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d1ed      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4917      	ldr	r1, [pc, #92]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 800402e:	4313      	orrs	r3, r2
 8004030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403e:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	490f      	ldr	r1, [pc, #60]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004052:	f000 f825 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8004056:	4601      	mov	r1, r0
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCC_ClockConfig+0x264>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_RCC_ClockConfig+0x26c>)
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	fa21 f303 	lsr.w	r3, r1, r3
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x270>)
 8004070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x274>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fc6e 	bl	8001958 <HAL_InitTick>
 800407c:	4603      	mov	r3, r0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40022000 	.word	0x40022000
 800408c:	40021000 	.word	0x40021000
 8004090:	04c4b400 	.word	0x04c4b400
 8004094:	0800a014 	.word	0x0800a014
 8004098:	20000000 	.word	0x20000000
 800409c:	20000004 	.word	0x20000004

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d102      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e047      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c4:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e03e      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80040ca:	4b23      	ldr	r3, [pc, #140]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d136      	bne.n	8004144 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3301      	adds	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d10c      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f4:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	4a16      	ldr	r2, [pc, #88]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fe:	68d2      	ldr	r2, [r2, #12]
 8004100:	0a12      	lsrs	r2, r2, #8
 8004102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	617b      	str	r3, [r7, #20]
      break;
 800410c:	e00c      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4a10      	ldr	r2, [pc, #64]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	0a12      	lsrs	r2, r2, #8
 800411c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
      break;
 8004126:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_GetSysClockFreq+0xb8>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0e5b      	lsrs	r3, r3, #25
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	3301      	adds	r3, #1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e001      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004148:	693b      	ldr	r3, [r7, #16]
}
 800414a:	4618      	mov	r0, r3
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	00f42400 	.word	0x00f42400
 8004160:	007a1200 	.word	0x007a1200

08004164 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800416a:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d10c      	bne.n	80041a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004192:	68d2      	ldr	r2, [r2, #12]
 8004194:	0a12      	lsrs	r2, r2, #8
 8004196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
    break;
 80041a0:	e00c      	b.n	80041bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ac:	68d2      	ldr	r2, [r2, #12]
 80041ae:	0a12      	lsrs	r2, r2, #8
 80041b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
    break;
 80041ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0e5b      	lsrs	r3, r3, #25
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041d6:	687b      	ldr	r3, [r7, #4]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40021000 	.word	0x40021000
 80041e8:	007a1200 	.word	0x007a1200
 80041ec:	00f42400 	.word	0x00f42400

080041f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f8:	2300      	movs	r3, #0
 80041fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041fc:	2300      	movs	r3, #0
 80041fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8098 	beq.w	800433e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	4b40      	ldr	r3, [pc, #256]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	4a3f      	ldr	r2, [pc, #252]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
 800422a:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004236:	2301      	movs	r3, #1
 8004238:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423a:	4b3a      	ldr	r3, [pc, #232]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a39      	ldr	r2, [pc, #228]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004246:	f7fd fbd3 	bl	80019f0 <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424c:	e009      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7fd fbcf 	bl	80019f0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d902      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	74fb      	strb	r3, [r7, #19]
        break;
 8004260:	e005      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004262:	4b30      	ldr	r3, [pc, #192]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ef      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d159      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01e      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d019      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	4a1f      	ldr	r2, [pc, #124]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042bc:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fd fb8f 	bl	80019f0 <HAL_GetTick>
 80042d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d4:	e00b      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fd fb8b 	bl	80019f0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d902      	bls.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	74fb      	strb	r3, [r7, #19]
            break;
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ec      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	4903      	ldr	r1, [pc, #12]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004318:	e008      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	74bb      	strb	r3, [r7, #18]
 800431e:	e005      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004320:	40021000 	.word	0x40021000
 8004324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432c:	7c7b      	ldrb	r3, [r7, #17]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4ba6      	ldr	r3, [pc, #664]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	4aa5      	ldr	r2, [pc, #660]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800434a:	4ba0      	ldr	r3, [pc, #640]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f023 0203 	bic.w	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	499c      	ldr	r1, [pc, #624]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800436c:	4b97      	ldr	r3, [pc, #604]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f023 020c 	bic.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	4994      	ldr	r1, [pc, #592]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800438e:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	498b      	ldr	r1, [pc, #556]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043b0:	4b86      	ldr	r3, [pc, #536]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	4983      	ldr	r1, [pc, #524]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d2:	4b7e      	ldr	r3, [pc, #504]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	497a      	ldr	r1, [pc, #488]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043f4:	4b75      	ldr	r3, [pc, #468]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	4972      	ldr	r1, [pc, #456]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004416:	4b6d      	ldr	r3, [pc, #436]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4969      	ldr	r1, [pc, #420]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004438:	4b64      	ldr	r3, [pc, #400]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4961      	ldr	r1, [pc, #388]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	4958      	ldr	r1, [pc, #352]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	4950      	ldr	r1, [pc, #320]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d015      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b4:	4b45      	ldr	r3, [pc, #276]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	4942      	ldr	r1, [pc, #264]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d2:	d105      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d4:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4934      	ldr	r1, [pc, #208]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450c:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a2e      	ldr	r2, [pc, #184]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004516:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	4926      	ldr	r1, [pc, #152]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a20      	ldr	r2, [pc, #128]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800455c:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	4918      	ldr	r1, [pc, #96]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	490a      	ldr	r1, [pc, #40]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e049      	b.n	8004676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc ffde 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fde2 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e04a      	b.n	800472e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a21      	ldr	r2, [pc, #132]	; (800473c <HAL_TIM_Base_Start_IT+0xbc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d018      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x6c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d013      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x6c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_TIM_Base_Start_IT+0xc0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x6c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <HAL_TIM_Base_Start_IT+0xc4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x6c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <HAL_TIM_Base_Start_IT+0xc8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x6c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a19      	ldr	r2, [pc, #100]	; (800474c <HAL_TIM_Base_Start_IT+0xcc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d115      	bne.n	8004718 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <HAL_TIM_Base_Start_IT+0xd0>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b06      	cmp	r3, #6
 80046fc:	d015      	beq.n	800472a <HAL_TIM_Base_Start_IT+0xaa>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004704:	d011      	beq.n	800472a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	e008      	b.n	800472a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e000      	b.n	800472c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40013400 	.word	0x40013400
 800474c:	40014000 	.word	0x40014000
 8004750:	00010007 	.word	0x00010007

08004754 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e049      	b.n	80047fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc fe12 	bl	80013a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fd20 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x24>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e03c      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d109      	bne.n	8004842 <HAL_TIM_PWM_Start+0x3e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	e02f      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d109      	bne.n	800485c <HAL_TIM_PWM_Start+0x58>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	bf14      	ite	ne
 8004854:	2301      	movne	r3, #1
 8004856:	2300      	moveq	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	e022      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d109      	bne.n	8004876 <HAL_TIM_PWM_Start+0x72>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e015      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b10      	cmp	r3, #16
 800487a:	d109      	bne.n	8004890 <HAL_TIM_PWM_Start+0x8c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <HAL_TIM_PWM_Start+0x9e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e097      	b.n	80049da <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xb6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	e023      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xc6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c8:	e01b      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0xd6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d8:	e013      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xe6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0xf6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	e003      	b.n	8004902 <HAL_TIM_PWM_Start+0xfe>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ffea 	bl	80058e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a33      	ldr	r2, [pc, #204]	; (80049e4 <HAL_TIM_PWM_Start+0x1e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a32      	ldr	r2, [pc, #200]	; (80049e8 <HAL_TIM_PWM_Start+0x1e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a30      	ldr	r2, [pc, #192]	; (80049ec <HAL_TIM_PWM_Start+0x1e8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <HAL_TIM_PWM_Start+0x1ec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIM_PWM_Start+0x13e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2d      	ldr	r2, [pc, #180]	; (80049f4 <HAL_TIM_PWM_Start+0x1f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_TIM_PWM_Start+0x142>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_TIM_PWM_Start+0x144>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <HAL_TIM_PWM_Start+0x1e0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d013      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <HAL_TIM_PWM_Start+0x1f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_TIM_PWM_Start+0x1f8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_TIM_PWM_Start+0x1e4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIM_PWM_Start+0x194>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_TIM_PWM_Start+0x1e8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d115      	bne.n	80049c4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <HAL_TIM_PWM_Start+0x1fc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d015      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x1d2>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d011      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e008      	b.n	80049d6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	00010007 	.word	0x00010007

08004a04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e097      	b.n	8004b48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc fd01 	bl	8001434 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004a48:	f023 0307 	bic.w	r3, r3, #7
 8004a4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f000 fbbd 	bl	80051d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	4313      	orrs	r3, r2
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004aa4:	f023 030c 	bic.w	r3, r3, #12
 8004aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	031b      	lsls	r3, r3, #12
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4313      	orrs	r3, r2
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d110      	bne.n	8004ba2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b86:	7b7b      	ldrb	r3, [r7, #13]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e068      	b.n	8004c62 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba0:	e031      	b.n	8004c06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d110      	bne.n	8004bca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba8:	7bbb      	ldrb	r3, [r7, #14]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d102      	bne.n	8004bb4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bae:	7b3b      	ldrb	r3, [r7, #12]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d001      	beq.n	8004bb8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e054      	b.n	8004c62 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc8:	e01d      	b.n	8004c06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d108      	bne.n	8004be2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bd0:	7bbb      	ldrb	r3, [r7, #14]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bd6:	7b7b      	ldrb	r3, [r7, #13]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d102      	bne.n	8004be2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bdc:	7b3b      	ldrb	r3, [r7, #12]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d001      	beq.n	8004be6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e03d      	b.n	8004c62 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_TIM_Encoder_Start+0xc2>
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d008      	beq.n	8004c22 <HAL_TIM_Encoder_Start+0xd2>
 8004c10:	e00f      	b.n	8004c32 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fe62 	bl	80058e4 <TIM_CCxChannelCmd>
      break;
 8004c20:	e016      	b.n	8004c50 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2201      	movs	r2, #1
 8004c28:	2104      	movs	r1, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fe5a 	bl	80058e4 <TIM_CCxChannelCmd>
      break;
 8004c30:	e00e      	b.n	8004c50 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fe52 	bl	80058e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2201      	movs	r2, #1
 8004c46:	2104      	movs	r1, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fe4b 	bl	80058e4 <TIM_CCxChannelCmd>
      break;
 8004c4e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d122      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d11b      	bne.n	8004cc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f06f 0202 	mvn.w	r2, #2
 8004c96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa75 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004cb2:	e005      	b.n	8004cc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa67 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa78 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d122      	bne.n	8004d1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d11b      	bne.n	8004d1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f06f 0204 	mvn.w	r2, #4
 8004cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa4b 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004d06:	e005      	b.n	8004d14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fa3d 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa4e 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d122      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d11b      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0208 	mvn.w	r2, #8
 8004d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2204      	movs	r2, #4
 8004d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fa21 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004d5a:	e005      	b.n	8004d68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fa13 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa24 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d122      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d11b      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0210 	mvn.w	r2, #16
 8004d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2208      	movs	r2, #8
 8004d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f9f7 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004dae:	e005      	b.n	8004dbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9e9 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9fa 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10e      	bne.n	8004dee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f06f 0201 	mvn.w	r2, #1
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fc f9d9 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d10e      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 feb7 	bl	8005b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e28:	d10e      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d107      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 feaa 	bl	8005b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9a8 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d10e      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0220 	mvn.w	r2, #32
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fe6a 	bl	8005b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eae:	d10f      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fe70 	bl	8005bb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ede:	d10f      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eee:	d107      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fe62 	bl	8005bc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f0e:	d10f      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1e:	d107      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fe54 	bl	8005bd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f3e:	d10f      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fe46 	bl	8005bec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e0fd      	b.n	800517e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b14      	cmp	r3, #20
 8004f8e:	f200 80f0 	bhi.w	8005172 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08005173 	.word	0x08005173
 8004fa0:	08005173 	.word	0x08005173
 8004fa4:	08005173 	.word	0x08005173
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	08005173 	.word	0x08005173
 8004fb0:	08005173 	.word	0x08005173
 8004fb4:	08005173 	.word	0x08005173
 8004fb8:	0800506f 	.word	0x0800506f
 8004fbc:	08005173 	.word	0x08005173
 8004fc0:	08005173 	.word	0x08005173
 8004fc4:	08005173 	.word	0x08005173
 8004fc8:	080050af 	.word	0x080050af
 8004fcc:	08005173 	.word	0x08005173
 8004fd0:	08005173 	.word	0x08005173
 8004fd4:	08005173 	.word	0x08005173
 8004fd8:	080050f1 	.word	0x080050f1
 8004fdc:	08005173 	.word	0x08005173
 8004fe0:	08005173 	.word	0x08005173
 8004fe4:	08005173 	.word	0x08005173
 8004fe8:	08005131 	.word	0x08005131
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f980 	bl	80052f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0208 	orr.w	r2, r2, #8
 8005006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0204 	bic.w	r2, r2, #4
 8005016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6999      	ldr	r1, [r3, #24]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	619a      	str	r2, [r3, #24]
      break;
 800502a:	e0a3      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f9f0 	bl	8005418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6999      	ldr	r1, [r3, #24]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	021a      	lsls	r2, r3, #8
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	619a      	str	r2, [r3, #24]
      break;
 800506c:	e082      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fa59 	bl	800552c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0208 	orr.w	r2, r2, #8
 8005088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0204 	bic.w	r2, r2, #4
 8005098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69d9      	ldr	r1, [r3, #28]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	61da      	str	r2, [r3, #28]
      break;
 80050ac:	e062      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fac1 	bl	800563c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	021a      	lsls	r2, r3, #8
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	61da      	str	r2, [r3, #28]
      break;
 80050ee:	e041      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fb2a 	bl	8005750 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800512e:	e021      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb6e 	bl	8005818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop

08005188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <TIM_Base_SetConfig+0x104>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00f      	beq.n	8005210 <TIM_Base_SetConfig+0x38>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x38>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a39      	ldr	r2, [pc, #228]	; (80052e0 <TIM_Base_SetConfig+0x108>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x38>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a38      	ldr	r2, [pc, #224]	; (80052e4 <TIM_Base_SetConfig+0x10c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x38>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a37      	ldr	r2, [pc, #220]	; (80052e8 <TIM_Base_SetConfig+0x110>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <TIM_Base_SetConfig+0x104>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01b      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d017      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <TIM_Base_SetConfig+0x108>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <TIM_Base_SetConfig+0x10c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00f      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <TIM_Base_SetConfig+0x110>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a27      	ldr	r2, [pc, #156]	; (80052ec <TIM_Base_SetConfig+0x114>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0x8a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a10      	ldr	r2, [pc, #64]	; (80052dc <TIM_Base_SetConfig+0x104>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0xe8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <TIM_Base_SetConfig+0x110>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0xe8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a10      	ldr	r2, [pc, #64]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0xe8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0xe8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f023 0302 	bic.w	r3, r3, #2
 8005344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a2c      	ldr	r2, [pc, #176]	; (8005404 <TIM_OC1_SetConfig+0x10c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_OC1_SetConfig+0x80>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <TIM_OC1_SetConfig+0x110>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_OC1_SetConfig+0x80>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a2a      	ldr	r2, [pc, #168]	; (800540c <TIM_OC1_SetConfig+0x114>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_OC1_SetConfig+0x80>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a29      	ldr	r2, [pc, #164]	; (8005410 <TIM_OC1_SetConfig+0x118>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC1_SetConfig+0x80>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a28      	ldr	r2, [pc, #160]	; (8005414 <TIM_OC1_SetConfig+0x11c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10c      	bne.n	8005392 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0308 	bic.w	r3, r3, #8
 800537e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <TIM_OC1_SetConfig+0x10c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_OC1_SetConfig+0xc2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <TIM_OC1_SetConfig+0x110>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_OC1_SetConfig+0xc2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <TIM_OC1_SetConfig+0x114>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_OC1_SetConfig+0xc2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <TIM_OC1_SetConfig+0x118>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC1_SetConfig+0xc2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a17      	ldr	r2, [pc, #92]	; (8005414 <TIM_OC1_SetConfig+0x11c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d111      	bne.n	80053de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0210 	bic.w	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0320 	bic.w	r3, r3, #32
 8005466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a28      	ldr	r2, [pc, #160]	; (8005518 <TIM_OC2_SetConfig+0x100>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC2_SetConfig+0x6c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <TIM_OC2_SetConfig+0x104>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10d      	bne.n	80054a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <TIM_OC2_SetConfig+0x100>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_OC2_SetConfig+0xb0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <TIM_OC2_SetConfig+0x104>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <TIM_OC2_SetConfig+0xb0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <TIM_OC2_SetConfig+0x108>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_OC2_SetConfig+0xb0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <TIM_OC2_SetConfig+0x10c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC2_SetConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a19      	ldr	r2, [pc, #100]	; (8005528 <TIM_OC2_SetConfig+0x110>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d113      	bne.n	80054f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a27      	ldr	r2, [pc, #156]	; (8005628 <TIM_OC3_SetConfig+0xfc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC3_SetConfig+0x6a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a26      	ldr	r2, [pc, #152]	; (800562c <TIM_OC3_SetConfig+0x100>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10d      	bne.n	80055b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800559c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1c      	ldr	r2, [pc, #112]	; (8005628 <TIM_OC3_SetConfig+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_OC3_SetConfig+0xae>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <TIM_OC3_SetConfig+0x100>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_OC3_SetConfig+0xae>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <TIM_OC3_SetConfig+0x104>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_OC3_SetConfig+0xae>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <TIM_OC3_SetConfig+0x108>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_OC3_SetConfig+0xae>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <TIM_OC3_SetConfig+0x10c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d113      	bne.n	8005602 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	621a      	str	r2, [r3, #32]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40013400 	.word	0x40013400
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800

0800563c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800566a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a28      	ldr	r2, [pc, #160]	; (800573c <TIM_OC4_SetConfig+0x100>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_OC4_SetConfig+0x6c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a27      	ldr	r2, [pc, #156]	; (8005740 <TIM_OC4_SetConfig+0x104>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10d      	bne.n	80056c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	031b      	lsls	r3, r3, #12
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1d      	ldr	r2, [pc, #116]	; (800573c <TIM_OC4_SetConfig+0x100>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00f      	beq.n	80056ec <TIM_OC4_SetConfig+0xb0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <TIM_OC4_SetConfig+0x104>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_OC4_SetConfig+0xb0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1b      	ldr	r2, [pc, #108]	; (8005744 <TIM_OC4_SetConfig+0x108>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC4_SetConfig+0xb0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <TIM_OC4_SetConfig+0x10c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC4_SetConfig+0xb0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a19      	ldr	r2, [pc, #100]	; (800574c <TIM_OC4_SetConfig+0x110>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d113      	bne.n	8005714 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	019b      	lsls	r3, r3, #6
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800

08005750 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a17      	ldr	r2, [pc, #92]	; (8005804 <TIM_OC5_SetConfig+0xb4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_OC5_SetConfig+0x7a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <TIM_OC5_SetConfig+0xb8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_OC5_SetConfig+0x7a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <TIM_OC5_SetConfig+0xbc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_OC5_SetConfig+0x7a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a14      	ldr	r2, [pc, #80]	; (8005810 <TIM_OC5_SetConfig+0xc0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC5_SetConfig+0x7a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <TIM_OC5_SetConfig+0xc4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d109      	bne.n	80057de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	621a      	str	r2, [r3, #32]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40013400 	.word	0x40013400
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800

08005818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800585e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	051b      	lsls	r3, r3, #20
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <TIM_OC6_SetConfig+0xb8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00f      	beq.n	8005894 <TIM_OC6_SetConfig+0x7c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <TIM_OC6_SetConfig+0xbc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_OC6_SetConfig+0x7c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <TIM_OC6_SetConfig+0xc0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_OC6_SetConfig+0x7c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <TIM_OC6_SetConfig+0xc4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_OC6_SetConfig+0x7c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <TIM_OC6_SetConfig+0xc8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d109      	bne.n	80058a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	029b      	lsls	r3, r3, #10
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2201      	movs	r2, #1
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	43db      	mvns	r3, r3
 8005906:	401a      	ands	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e065      	b.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d108      	bne.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1b      	ldr	r2, [pc, #108]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d013      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d10c      	bne.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40014000 	.word	0x40014000

08005a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e087      	b.n	8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d106      	bne.n	8005aec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d126      	bne.n	8005b4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	051b      	lsls	r3, r3, #20
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d004      	beq.n	8005b40 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d106      	bne.n	8005b4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40013400 	.word	0x40013400

08005b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005c14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c36:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005c3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c64:	b084      	sub	sp, #16
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	f107 0014 	add.w	r0, r7, #20
 8005c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	b004      	add	sp, #16
 8005ca4:	4770      	bx	lr
	...

08005ca8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b09b      	sub	sp, #108	; 0x6c
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	78db      	ldrb	r3, [r3, #3]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d81f      	bhi.n	8005d1a <USB_ActivateEndpoint+0x72>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <USB_ActivateEndpoint+0x38>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d23 	.word	0x08005d23
 8005cec:	08005cff 	.word	0x08005cff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005cf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cf8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005cfc:	e012      	b.n	8005d24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005d06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d0a:	e00b      	b.n	8005d24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005d0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005d18:	e004      	b.n	8005d24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005d20:	e000      	b.n	8005d24 <USB_ActivateEndpoint+0x7c>
      break;
 8005d22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	b21b      	sxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	b21a      	sxth	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b21b      	sxth	r3, r3
 8005d6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	7b1b      	ldrb	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 8149 	bne.w	800602c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8084 	beq.w	8005eac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4413      	add	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	00da      	lsls	r2, r3, #3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	88db      	ldrh	r3, [r3, #6]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	81fb      	strh	r3, [r7, #14]
 8005de6:	89fb      	ldrh	r3, [r7, #14]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01b      	beq.n	8005e28 <USB_ActivateEndpoint+0x180>
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	81bb      	strh	r3, [r7, #12]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	89bb      	ldrh	r3, [r7, #12]
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d020      	beq.n	8005e72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e46:	813b      	strh	r3, [r7, #8]
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	f083 0320 	eor.w	r3, r3, #32
 8005e4e:	813b      	strh	r3, [r7, #8]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	893b      	ldrh	r3, [r7, #8]
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
 8005e70:	e27f      	b.n	8006372 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	817b      	strh	r3, [r7, #10]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	897b      	ldrh	r3, [r7, #10]
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
 8005eaa:	e262      	b.n	8006372 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	4413      	add	r3, r2
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	00da      	lsls	r2, r3, #3
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	88db      	ldrh	r3, [r3, #6]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	4413      	add	r3, r2
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	00da      	lsls	r2, r3, #3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	4413      	add	r3, r2
 8005efe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d112      	bne.n	8005f32 <USB_ActivateEndpoint+0x28a>
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e02f      	b.n	8005f92 <USB_ActivateEndpoint+0x2ea>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b3e      	cmp	r3, #62	; 0x3e
 8005f38:	d813      	bhi.n	8005f62 <USB_ActivateEndpoint+0x2ba>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	663b      	str	r3, [r7, #96]	; 0x60
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <USB_ActivateEndpoint+0x2ac>
 8005f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f50:	3301      	adds	r3, #1
 8005f52:	663b      	str	r3, [r7, #96]	; 0x60
 8005f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e017      	b.n	8005f92 <USB_ActivateEndpoint+0x2ea>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <USB_ActivateEndpoint+0x2d4>
 8005f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	029b      	lsls	r3, r3, #10
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	83fb      	strh	r3, [r7, #30]
 8005fa0:	8bfb      	ldrh	r3, [r7, #30]
 8005fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01b      	beq.n	8005fe2 <USB_ActivateEndpoint+0x33a>
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc0:	83bb      	strh	r3, [r7, #28]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	8bbb      	ldrh	r3, [r7, #28]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	837b      	strh	r3, [r7, #26]
 8005ffa:	8b7b      	ldrh	r3, [r7, #26]
 8005ffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006000:	837b      	strh	r3, [r7, #26]
 8006002:	8b7b      	ldrh	r3, [r7, #26]
 8006004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006008:	837b      	strh	r3, [r7, #26]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	441a      	add	r2, r3
 8006014:	8b7b      	ldrh	r3, [r7, #26]
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]
 800602a:	e1a2      	b.n	8006372 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	65bb      	str	r3, [r7, #88]	; 0x58
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006078:	4413      	add	r3, r2
 800607a:	65bb      	str	r3, [r7, #88]	; 0x58
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	00da      	lsls	r2, r3, #3
 8006082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006084:	4413      	add	r3, r2
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	891b      	ldrh	r3, [r3, #8]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	b29b      	uxth	r3, r3
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	653b      	str	r3, [r7, #80]	; 0x50
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	4413      	add	r3, r2
 80060ae:	653b      	str	r3, [r7, #80]	; 0x50
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00da      	lsls	r2, r3, #3
 80060b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	895b      	ldrh	r3, [r3, #10]
 80060c4:	085b      	lsrs	r3, r3, #1
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 8091 	bne.w	80061fc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80060e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80060ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <USB_ActivateEndpoint+0x482>
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	877b      	strh	r3, [r7, #58]	; 0x3a
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	873b      	strh	r3, [r7, #56]	; 0x38
 8006138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01b      	beq.n	800617a <USB_ActivateEndpoint+0x4d2>
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006158:	86fb      	strh	r3, [r7, #54]	; 0x36
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006190:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006192:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006198:	86bb      	strh	r3, [r7, #52]	; 0x34
 800619a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800619c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]
 80061fa:	e0ba      	b.n	8006372 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800620c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01d      	beq.n	8006254 <USB_ActivateEndpoint+0x5ac>
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	441a      	add	r2, r3
 800623c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006264:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01d      	beq.n	80062ac <USB_ActivateEndpoint+0x604>
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d024      	beq.n	80062fe <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80062ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80062d2:	f083 0320 	eor.w	r3, r3, #32
 80062d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
 80062fc:	e01d      	b.n	800633a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006314:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006350:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006376:	4618      	mov	r0, r3
 8006378:	376c      	adds	r7, #108	; 0x6c
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop

08006384 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006384:	b480      	push	{r7}
 8006386:	b08d      	sub	sp, #52	; 0x34
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	7b1b      	ldrb	r3, [r3, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 808e 	bne.w	80064b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d044      	beq.n	800642a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	81bb      	strh	r3, [r7, #12]
 80063ae:	89bb      	ldrh	r3, [r7, #12]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01b      	beq.n	80063f0 <USB_DeactivateEndpoint+0x6c>
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	817b      	strh	r3, [r7, #10]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	441a      	add	r2, r3
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006406:	813b      	strh	r3, [r7, #8]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	b29b      	uxth	r3, r3
 8006426:	8013      	strh	r3, [r2, #0]
 8006428:	e192      	b.n	8006750 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	827b      	strh	r3, [r7, #18]
 8006438:	8a7b      	ldrh	r3, [r7, #18]
 800643a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01b      	beq.n	800647a <USB_DeactivateEndpoint+0xf6>
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	823b      	strh	r3, [r7, #16]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	8a3b      	ldrh	r3, [r7, #16]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800648c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006490:	81fb      	strh	r3, [r7, #14]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	89fb      	ldrh	r3, [r7, #14]
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]
 80064b2:	e14d      	b.n	8006750 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 80a5 	bne.w	8006608 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	843b      	strh	r3, [r7, #32]
 80064cc:	8c3b      	ldrh	r3, [r7, #32]
 80064ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01b      	beq.n	800650e <USB_DeactivateEndpoint+0x18a>
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ec:	83fb      	strh	r3, [r7, #30]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	8bfb      	ldrh	r3, [r7, #30]
 80064fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	b29b      	uxth	r3, r3
 800650c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	83bb      	strh	r3, [r7, #28]
 800651c:	8bbb      	ldrh	r3, [r7, #28]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01b      	beq.n	800655e <USB_DeactivateEndpoint+0x1da>
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	837b      	strh	r3, [r7, #26]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	8b7b      	ldrh	r3, [r7, #26]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	833b      	strh	r3, [r7, #24]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	8b3b      	ldrh	r3, [r7, #24]
 8006582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006592:	b29b      	uxth	r3, r3
 8006594:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	82fb      	strh	r3, [r7, #22]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	8afb      	ldrh	r3, [r7, #22]
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e4:	82bb      	strh	r3, [r7, #20]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8abb      	ldrh	r3, [r7, #20]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
 8006606:	e0a3      	b.n	8006750 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <USB_DeactivateEndpoint+0x2d4>
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <USB_DeactivateEndpoint+0x324>
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	853b      	strh	r3, [r7, #40]	; 0x28
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	441a      	add	r2, r3
 800673a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800673c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674c:	b29b      	uxth	r3, r3
 800674e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3734      	adds	r7, #52	; 0x34
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b0c4      	sub	sp, #272	; 0x110
 8006762:	af00      	add	r7, sp, #0
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	6018      	str	r0, [r3, #0]
 8006768:	463b      	mov	r3, r7
 800676a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800676c:	463b      	mov	r3, r7
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b01      	cmp	r3, #1
 8006774:	f040 8566 	bne.w	8007244 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006778:	463b      	mov	r3, r7
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	463b      	mov	r3, r7
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	429a      	cmp	r2, r3
 8006786:	d905      	bls.n	8006794 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006792:	e004      	b.n	800679e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006794:	463b      	mov	r3, r7
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800679e:	463b      	mov	r3, r7
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	7b1b      	ldrb	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d12c      	bne.n	8006802 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	88da      	ldrh	r2, [r3, #6]
 80067b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	1d38      	adds	r0, r7, #4
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f001 fa43 	bl	8007c48 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067c2:	1d3b      	adds	r3, r7, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4413      	add	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	463b      	mov	r3, r7
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	00da      	lsls	r2, r3, #3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	4413      	add	r3, r2
 80067e6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80067ea:	f107 0310 	add.w	r3, r7, #16
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f107 0310 	add.w	r3, r7, #16
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	f000 bcec 	b.w	80071da <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	78db      	ldrb	r3, [r3, #3]
 8006808:	2b02      	cmp	r3, #2
 800680a:	f040 8356 	bne.w	8006eba <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	463b      	mov	r3, r7
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	429a      	cmp	r2, r3
 800681c:	f240 82fa 	bls.w	8006e14 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006820:	1d3b      	adds	r3, r7, #4
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	463b      	mov	r3, r7
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	463b      	mov	r3, r7
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006858:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800685c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006878:	1ad2      	subs	r2, r2, r3
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006880:	1d3b      	adds	r3, r7, #4
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 815e 	beq.w	8006b58 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d164      	bne.n	8006976 <USB_EPStartXfer+0x218>
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	4413      	add	r3, r2
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	00da      	lsls	r2, r3, #3
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	4413      	add	r3, r2
 80068d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d112      	bne.n	8006904 <USB_EPStartXfer+0x1a6>
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e054      	b.n	80069ae <USB_EPStartXfer+0x250>
 8006904:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006908:	2b3e      	cmp	r3, #62	; 0x3e
 800690a:	d817      	bhi.n	800693c <USB_EPStartXfer+0x1de>
 800690c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006916:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <USB_EPStartXfer+0x1ce>
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006926:	3301      	adds	r3, #1
 8006928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800692c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006930:	b29b      	uxth	r3, r3
 8006932:	029b      	lsls	r3, r3, #10
 8006934:	b29a      	uxth	r2, r3
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	e038      	b.n	80069ae <USB_EPStartXfer+0x250>
 800693c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006946:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <USB_EPStartXfer+0x1fe>
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006956:	3b01      	subs	r3, #1
 8006958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006960:	b29b      	uxth	r3, r3
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	b29b      	uxth	r3, r3
 8006966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696e:	b29a      	uxth	r2, r3
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	e01b      	b.n	80069ae <USB_EPStartXfer+0x250>
 8006976:	463b      	mov	r3, r7
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d116      	bne.n	80069ae <USB_EPStartXfer+0x250>
 8006980:	1d3b      	adds	r3, r7, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006988:	b29b      	uxth	r3, r3
 800698a:	461a      	mov	r2, r3
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	4413      	add	r3, r2
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
 8006992:	463b      	mov	r3, r7
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	00da      	lsls	r2, r3, #3
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	4413      	add	r3, r2
 800699e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a2:	633b      	str	r3, [r7, #48]	; 0x30
 80069a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	895b      	ldrh	r3, [r3, #10]
 80069b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069c8:	1d38      	adds	r0, r7, #4
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	f001 f93c 	bl	8007c48 <USB_WritePMA>
            ep->xfer_buff += len;
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069da:	441a      	add	r2, r3
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069e2:	463b      	mov	r3, r7
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1a      	ldr	r2, [r3, #32]
 80069e8:	463b      	mov	r3, r7
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d90e      	bls.n	8006a10 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80069f2:	463b      	mov	r3, r7
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a1a      	ldr	r2, [r3, #32]
 8006a02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	621a      	str	r2, [r3, #32]
 8006a0e:	e008      	b.n	8006a22 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a10:	463b      	mov	r3, r7
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a22:	463b      	mov	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d164      	bne.n	8006af6 <USB_EPStartXfer+0x398>
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	00da      	lsls	r2, r3, #3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d112      	bne.n	8006a84 <USB_EPStartXfer+0x326>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e057      	b.n	8006b34 <USB_EPStartXfer+0x3d6>
 8006a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a88:	2b3e      	cmp	r3, #62	; 0x3e
 8006a8a:	d817      	bhi.n	8006abc <USB_EPStartXfer+0x35e>
 8006a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <USB_EPStartXfer+0x34e>
 8006aa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006aac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	e03b      	b.n	8006b34 <USB_EPStartXfer+0x3d6>
 8006abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <USB_EPStartXfer+0x37e>
 8006ad2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006adc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	029b      	lsls	r3, r3, #10
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e01e      	b.n	8006b34 <USB_EPStartXfer+0x3d6>
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d119      	bne.n	8006b34 <USB_EPStartXfer+0x3d6>
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
 8006b06:	1d3b      	adds	r3, r7, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	4413      	add	r3, r2
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00da      	lsls	r2, r3, #3
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	4413      	add	r3, r2
 8006b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b28:	623b      	str	r3, [r7, #32]
 8006b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b34:	463b      	mov	r3, r7
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	891b      	ldrh	r3, [r3, #8]
 8006b3a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6959      	ldr	r1, [r3, #20]
 8006b44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006b4e:	1d38      	adds	r0, r7, #4
 8006b50:	6800      	ldr	r0, [r0, #0]
 8006b52:	f001 f879 	bl	8007c48 <USB_WritePMA>
 8006b56:	e340      	b.n	80071da <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d164      	bne.n	8006c2c <USB_EPStartXfer+0x4ce>
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	4413      	add	r3, r2
 8006b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	00da      	lsls	r2, r3, #3
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d112      	bne.n	8006bba <USB_EPStartXfer+0x45c>
 8006b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	e057      	b.n	8006c6a <USB_EPStartXfer+0x50c>
 8006bba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc0:	d817      	bhi.n	8006bf2 <USB_EPStartXfer+0x494>
 8006bc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <USB_EPStartXfer+0x484>
 8006bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e03b      	b.n	8006c6a <USB_EPStartXfer+0x50c>
 8006bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USB_EPStartXfer+0x4b4>
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e01e      	b.n	8006c6a <USB_EPStartXfer+0x50c>
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	785b      	ldrb	r3, [r3, #1]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d119      	bne.n	8006c6a <USB_EPStartXfer+0x50c>
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c3c:	1d3b      	adds	r3, r7, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4a:	4413      	add	r3, r2
 8006c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8006c4e:	463b      	mov	r3, r7
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	00da      	lsls	r2, r3, #3
 8006c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c58:	4413      	add	r3, r2
 8006c5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	891b      	ldrh	r3, [r3, #8]
 8006c70:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6959      	ldr	r1, [r3, #20]
 8006c7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c84:	1d38      	adds	r0, r7, #4
 8006c86:	6800      	ldr	r0, [r0, #0]
 8006c88:	f000 ffde 	bl	8007c48 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c96:	441a      	add	r2, r3
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d90e      	bls.n	8006ccc <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	621a      	str	r2, [r3, #32]
 8006cca:	e008      	b.n	8006cde <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006cd6:	463b      	mov	r3, r7
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cde:	1d3b      	adds	r3, r7, #4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d164      	bne.n	8006db8 <USB_EPStartXfer+0x65a>
 8006cee:	1d3b      	adds	r3, r7, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d02:	4413      	add	r3, r2
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d06:	463b      	mov	r3, r7
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	00da      	lsls	r2, r3, #3
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	4413      	add	r3, r2
 8006d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d112      	bne.n	8006d46 <USB_EPStartXfer+0x5e8>
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	801a      	strh	r2, [r3, #0]
 8006d44:	e054      	b.n	8006df0 <USB_EPStartXfer+0x692>
 8006d46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4c:	d817      	bhi.n	8006d7e <USB_EPStartXfer+0x620>
 8006d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <USB_EPStartXfer+0x610>
 8006d64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d68:	3301      	adds	r3, #1
 8006d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	029b      	lsls	r3, r3, #10
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e038      	b.n	8006df0 <USB_EPStartXfer+0x692>
 8006d7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <USB_EPStartXfer+0x640>
 8006d94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	029b      	lsls	r3, r3, #10
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	e01b      	b.n	8006df0 <USB_EPStartXfer+0x692>
 8006db8:	463b      	mov	r3, r7
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d116      	bne.n	8006df0 <USB_EPStartXfer+0x692>
 8006dc2:	1d3b      	adds	r3, r7, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd0:	4413      	add	r3, r2
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00da      	lsls	r2, r3, #3
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006de4:	643b      	str	r3, [r7, #64]	; 0x40
 8006de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	895b      	ldrh	r3, [r3, #10]
 8006df6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006e0a:	1d38      	adds	r0, r7, #4
 8006e0c:	6800      	ldr	r0, [r0, #0]
 8006e0e:	f000 ff1b 	bl	8007c48 <USB_WritePMA>
 8006e12:	e1e2      	b.n	80071da <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	463b      	mov	r3, r7
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e38:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006e3c:	1d3b      	adds	r3, r7, #4
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	441a      	add	r2, r3
 8006e4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	663b      	str	r3, [r7, #96]	; 0x60
 8006e68:	1d3b      	adds	r3, r7, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e76:	4413      	add	r3, r2
 8006e78:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	00da      	lsls	r2, r3, #3
 8006e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e96:	463b      	mov	r3, r7
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	891b      	ldrh	r3, [r3, #8]
 8006e9c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6959      	ldr	r1, [r3, #20]
 8006ea6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006eb0:	1d38      	adds	r0, r7, #4
 8006eb2:	6800      	ldr	r0, [r0, #0]
 8006eb4:	f000 fec8 	bl	8007c48 <USB_WritePMA>
 8006eb8:	e18f      	b.n	80071da <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006eba:	1d3b      	adds	r3, r7, #4
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 808f 	beq.w	8006ff4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8006edc:	463b      	mov	r3, r7
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d164      	bne.n	8006fb0 <USB_EPStartXfer+0x852>
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	673b      	str	r3, [r7, #112]	; 0x70
 8006eec:	1d3b      	adds	r3, r7, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006efa:	4413      	add	r3, r2
 8006efc:	673b      	str	r3, [r7, #112]	; 0x70
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	00da      	lsls	r2, r3, #3
 8006f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d112      	bne.n	8006f3e <USB_EPStartXfer+0x7e0>
 8006f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e054      	b.n	8006fe8 <USB_EPStartXfer+0x88a>
 8006f3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f42:	2b3e      	cmp	r3, #62	; 0x3e
 8006f44:	d817      	bhi.n	8006f76 <USB_EPStartXfer+0x818>
 8006f46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <USB_EPStartXfer+0x808>
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	3301      	adds	r3, #1
 8006f62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	029b      	lsls	r3, r3, #10
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	e038      	b.n	8006fe8 <USB_EPStartXfer+0x88a>
 8006f76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <USB_EPStartXfer+0x838>
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	3b01      	subs	r3, #1
 8006f92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	029b      	lsls	r3, r3, #10
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e01b      	b.n	8006fe8 <USB_EPStartXfer+0x88a>
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d116      	bne.n	8006fe8 <USB_EPStartXfer+0x88a>
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fc8:	4413      	add	r3, r2
 8006fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fcc:	463b      	mov	r3, r7
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	00da      	lsls	r2, r3, #3
 8006fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fdc:	677b      	str	r3, [r7, #116]	; 0x74
 8006fde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	895b      	ldrh	r3, [r3, #10]
 8006fee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006ff2:	e097      	b.n	8007124 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d168      	bne.n	80070d0 <USB_EPStartXfer+0x972>
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700e:	b29b      	uxth	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007016:	4413      	add	r3, r2
 8007018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800701c:	463b      	mov	r3, r7
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	00da      	lsls	r2, r3, #3
 8007024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007028:	4413      	add	r3, r2
 800702a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800702e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007030:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007034:	2b00      	cmp	r3, #0
 8007036:	d112      	bne.n	800705e <USB_EPStartXfer+0x900>
 8007038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007042:	b29a      	uxth	r2, r3
 8007044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007046:	801a      	strh	r2, [r3, #0]
 8007048:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007056:	b29a      	uxth	r2, r3
 8007058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	e05d      	b.n	800711a <USB_EPStartXfer+0x9bc>
 800705e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007062:	2b3e      	cmp	r3, #62	; 0x3e
 8007064:	d817      	bhi.n	8007096 <USB_EPStartXfer+0x938>
 8007066:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007070:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <USB_EPStartXfer+0x928>
 800707c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007080:	3301      	adds	r3, #1
 8007082:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007086:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800708a:	b29b      	uxth	r3, r3
 800708c:	029b      	lsls	r3, r3, #10
 800708e:	b29a      	uxth	r2, r3
 8007090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e041      	b.n	800711a <USB_EPStartXfer+0x9bc>
 8007096:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <USB_EPStartXfer+0x958>
 80070ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070b0:	3b01      	subs	r3, #1
 80070b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	029b      	lsls	r3, r3, #10
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e024      	b.n	800711a <USB_EPStartXfer+0x9bc>
 80070d0:	463b      	mov	r3, r7
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d11f      	bne.n	800711a <USB_EPStartXfer+0x9bc>
 80070da:	1d3b      	adds	r3, r7, #4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070f2:	4413      	add	r3, r2
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070f8:	463b      	mov	r3, r7
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	00da      	lsls	r2, r3, #3
 8007100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007104:	4413      	add	r3, r2
 8007106:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800710a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800710e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007118:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800711a:	463b      	mov	r3, r7
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	891b      	ldrh	r3, [r3, #8]
 8007120:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800712e:	b29b      	uxth	r3, r3
 8007130:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007134:	1d38      	adds	r0, r7, #4
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	f000 fd86 	bl	8007c48 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800713c:	463b      	mov	r3, r7
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d122      	bne.n	800718c <USB_EPStartXfer+0xa2e>
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	463b      	mov	r3, r7
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]
 800718a:	e026      	b.n	80071da <USB_EPStartXfer+0xa7c>
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d121      	bne.n	80071da <USB_EPStartXfer+0xa7c>
 8007196:	1d3b      	adds	r3, r7, #4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	463b      	mov	r3, r7
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80071b4:	1d3b      	adds	r3, r7, #4
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071da:	1d3b      	adds	r3, r7, #4
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	463b      	mov	r3, r7
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f107 020e 	add.w	r2, r7, #14
 80071f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f8:	8013      	strh	r3, [r2, #0]
 80071fa:	f107 030e 	add.w	r3, r7, #14
 80071fe:	f107 020e 	add.w	r2, r7, #14
 8007202:	8812      	ldrh	r2, [r2, #0]
 8007204:	f082 0210 	eor.w	r2, r2, #16
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	f107 030e 	add.w	r3, r7, #14
 800720e:	f107 020e 	add.w	r2, r7, #14
 8007212:	8812      	ldrh	r2, [r2, #0]
 8007214:	f082 0220 	eor.w	r2, r2, #32
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	1d3b      	adds	r3, r7, #4
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	463b      	mov	r3, r7
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	441a      	add	r2, r3
 8007228:	f107 030e 	add.w	r3, r7, #14
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	b29b      	uxth	r3, r3
 8007240:	8013      	strh	r3, [r2, #0]
 8007242:	e3b5      	b.n	80079b0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007244:	463b      	mov	r3, r7
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	7b1b      	ldrb	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 8090 	bne.w	8007370 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	429a      	cmp	r2, r3
 800725e:	d90e      	bls.n	800727e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8007260:	463b      	mov	r3, r7
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800726a:	463b      	mov	r3, r7
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007274:	1ad2      	subs	r2, r2, r3
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	619a      	str	r2, [r3, #24]
 800727c:	e008      	b.n	8007290 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800727e:	463b      	mov	r3, r7
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007290:	1d3b      	adds	r3, r7, #4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072a8:	4413      	add	r3, r2
 80072aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072ae:	463b      	mov	r3, r7
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	00da      	lsls	r2, r3, #3
 80072b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072ba:	4413      	add	r3, r2
 80072bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d116      	bne.n	80072fa <USB_EPStartXfer+0xb9c>
 80072cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e32c      	b.n	8007954 <USB_EPStartXfer+0x11f6>
 80072fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007300:	d818      	bhi.n	8007334 <USB_EPStartXfer+0xbd6>
 8007302:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800730c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <USB_EPStartXfer+0xbc4>
 8007318:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800731c:	3301      	adds	r3, #1
 800731e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007326:	b29b      	uxth	r3, r3
 8007328:	029b      	lsls	r3, r3, #10
 800732a:	b29a      	uxth	r2, r3
 800732c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007330:	801a      	strh	r2, [r3, #0]
 8007332:	e30f      	b.n	8007954 <USB_EPStartXfer+0x11f6>
 8007334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800733e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USB_EPStartXfer+0xbf6>
 800734a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800734e:	3b01      	subs	r3, #1
 8007350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007358:	b29b      	uxth	r3, r3
 800735a:	029b      	lsls	r3, r3, #10
 800735c:	b29b      	uxth	r3, r3
 800735e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007366:	b29a      	uxth	r2, r3
 8007368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e2f1      	b.n	8007954 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007370:	463b      	mov	r3, r7
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	78db      	ldrb	r3, [r3, #3]
 8007376:	2b02      	cmp	r3, #2
 8007378:	f040 818f 	bne.w	800769a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800737c:	463b      	mov	r3, r7
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d175      	bne.n	8007472 <USB_EPStartXfer+0xd14>
 8007386:	1d3b      	adds	r3, r7, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800739e:	4413      	add	r3, r2
 80073a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073b0:	4413      	add	r3, r2
 80073b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ba:	463b      	mov	r3, r7
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d116      	bne.n	80073f2 <USB_EPStartXfer+0xc94>
 80073c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e065      	b.n	80074be <USB_EPStartXfer+0xd60>
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b3e      	cmp	r3, #62	; 0x3e
 80073fa:	d81a      	bhi.n	8007432 <USB_EPStartXfer+0xcd4>
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <USB_EPStartXfer+0xcc2>
 8007416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800741a:	3301      	adds	r3, #1
 800741c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007420:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29a      	uxth	r2, r3
 800742a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e045      	b.n	80074be <USB_EPStartXfer+0xd60>
 8007432:	463b      	mov	r3, r7
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800743e:	463b      	mov	r3, r7
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USB_EPStartXfer+0xcf8>
 800744c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007450:	3b01      	subs	r3, #1
 8007452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007456:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800745a:	b29b      	uxth	r3, r3
 800745c:	029b      	lsls	r3, r3, #10
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	e025      	b.n	80074be <USB_EPStartXfer+0xd60>
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d120      	bne.n	80074be <USB_EPStartXfer+0xd60>
 800747c:	1d3b      	adds	r3, r7, #4
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007484:	1d3b      	adds	r3, r7, #4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748c:	b29b      	uxth	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007494:	4413      	add	r3, r2
 8007496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	00da      	lsls	r2, r3, #3
 80074a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074a6:	4413      	add	r3, r2
 80074a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074b0:	463b      	mov	r3, r7
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	1d3b      	adds	r3, r7, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074c6:	463b      	mov	r3, r7
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	785b      	ldrb	r3, [r3, #1]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d175      	bne.n	80075bc <USB_EPStartXfer+0xe5e>
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074e8:	4413      	add	r3, r2
 80074ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074ee:	463b      	mov	r3, r7
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	00da      	lsls	r2, r3, #3
 80074f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074fa:	4413      	add	r3, r2
 80074fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007504:	463b      	mov	r3, r7
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d116      	bne.n	800753c <USB_EPStartXfer+0xdde>
 800750e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007532:	b29a      	uxth	r2, r3
 8007534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	e061      	b.n	8007600 <USB_EPStartXfer+0xea2>
 800753c:	463b      	mov	r3, r7
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b3e      	cmp	r3, #62	; 0x3e
 8007544:	d81a      	bhi.n	800757c <USB_EPStartXfer+0xe1e>
 8007546:	463b      	mov	r3, r7
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007552:	463b      	mov	r3, r7
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <USB_EPStartXfer+0xe0c>
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007564:	3301      	adds	r3, #1
 8007566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800756a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756e:	b29b      	uxth	r3, r3
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	b29a      	uxth	r2, r3
 8007574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007578:	801a      	strh	r2, [r3, #0]
 800757a:	e041      	b.n	8007600 <USB_EPStartXfer+0xea2>
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007588:	463b      	mov	r3, r7
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <USB_EPStartXfer+0xe42>
 8007596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759a:	3b01      	subs	r3, #1
 800759c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	029b      	lsls	r3, r3, #10
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075b8:	801a      	strh	r2, [r3, #0]
 80075ba:	e021      	b.n	8007600 <USB_EPStartXfer+0xea2>
 80075bc:	463b      	mov	r3, r7
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d11c      	bne.n	8007600 <USB_EPStartXfer+0xea2>
 80075c6:	1d3b      	adds	r3, r7, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075d6:	4413      	add	r3, r2
 80075d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	00da      	lsls	r2, r3, #3
 80075e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075e8:	4413      	add	r3, r2
 80075ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075fe:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 81a4 	beq.w	8007954 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800760c:	1d3b      	adds	r3, r7, #4
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	463b      	mov	r3, r7
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007620:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <USB_EPStartXfer+0xeda>
 800762c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007638:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800763c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 8187 	bne.w	8007954 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007646:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 8180 	bne.w	8007954 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007654:	1d3b      	adds	r3, r7, #4
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	463b      	mov	r3, r7
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007672:	1d3b      	adds	r3, r7, #4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	463b      	mov	r3, r7
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	441a      	add	r2, r3
 8007680:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]
 8007698:	e15c      	b.n	8007954 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800769a:	463b      	mov	r3, r7
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	78db      	ldrb	r3, [r3, #3]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 8155 	bne.w	8007950 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80076a6:	463b      	mov	r3, r7
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	463b      	mov	r3, r7
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90e      	bls.n	80076d4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80076b6:	463b      	mov	r3, r7
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80076c0:	463b      	mov	r3, r7
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ca:	1ad2      	subs	r2, r2, r3
 80076cc:	463b      	mov	r3, r7
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	619a      	str	r2, [r3, #24]
 80076d2:	e008      	b.n	80076e6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80076d4:	463b      	mov	r3, r7
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80076de:	463b      	mov	r3, r7
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076e6:	463b      	mov	r3, r7
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d16f      	bne.n	80077d0 <USB_EPStartXfer+0x1072>
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007700:	b29b      	uxth	r3, r3
 8007702:	461a      	mov	r2, r3
 8007704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007708:	4413      	add	r3, r2
 800770a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800770e:	463b      	mov	r3, r7
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	00da      	lsls	r2, r3, #3
 8007716:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800771a:	4413      	add	r3, r2
 800771c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007724:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007728:	2b00      	cmp	r3, #0
 800772a:	d116      	bne.n	800775a <USB_EPStartXfer+0xffc>
 800772c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007738:	b29a      	uxth	r2, r3
 800773a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	e05f      	b.n	800781a <USB_EPStartXfer+0x10bc>
 800775a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800775e:	2b3e      	cmp	r3, #62	; 0x3e
 8007760:	d818      	bhi.n	8007794 <USB_EPStartXfer+0x1036>
 8007762:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800776c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <USB_EPStartXfer+0x1024>
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800777c:	3301      	adds	r3, #1
 800777e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007786:	b29b      	uxth	r3, r3
 8007788:	029b      	lsls	r3, r3, #10
 800778a:	b29a      	uxth	r2, r3
 800778c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	e042      	b.n	800781a <USB_EPStartXfer+0x10bc>
 8007794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800779e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <USB_EPStartXfer+0x1056>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ae:	3b01      	subs	r3, #1
 80077b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	029b      	lsls	r3, r3, #10
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e024      	b.n	800781a <USB_EPStartXfer+0x10bc>
 80077d0:	463b      	mov	r3, r7
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d11f      	bne.n	800781a <USB_EPStartXfer+0x10bc>
 80077da:	1d3b      	adds	r3, r7, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077e2:	1d3b      	adds	r3, r7, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077f2:	4413      	add	r3, r2
 80077f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	00da      	lsls	r2, r3, #3
 8007800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007804:	4413      	add	r3, r2
 8007806:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800780a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800780e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007822:	463b      	mov	r3, r7
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d16f      	bne.n	800790c <USB_EPStartXfer+0x11ae>
 800782c:	1d3b      	adds	r3, r7, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007834:	1d3b      	adds	r3, r7, #4
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783c:	b29b      	uxth	r3, r3
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007844:	4413      	add	r3, r2
 8007846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800784a:	463b      	mov	r3, r7
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	00da      	lsls	r2, r3, #3
 8007852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007856:	4413      	add	r3, r2
 8007858:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800785c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007860:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007864:	2b00      	cmp	r3, #0
 8007866:	d116      	bne.n	8007896 <USB_EPStartXfer+0x1138>
 8007868:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007874:	b29a      	uxth	r2, r3
 8007876:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788c:	b29a      	uxth	r2, r3
 800788e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e05e      	b.n	8007954 <USB_EPStartXfer+0x11f6>
 8007896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800789a:	2b3e      	cmp	r3, #62	; 0x3e
 800789c:	d818      	bhi.n	80078d0 <USB_EPStartXfer+0x1172>
 800789e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <USB_EPStartXfer+0x1160>
 80078b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	029b      	lsls	r3, r3, #10
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e041      	b.n	8007954 <USB_EPStartXfer+0x11f6>
 80078d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078de:	f003 031f 	and.w	r3, r3, #31
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <USB_EPStartXfer+0x1192>
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ea:	3b01      	subs	r3, #1
 80078ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80078f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	029b      	lsls	r3, r3, #10
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007902:	b29a      	uxth	r2, r3
 8007904:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e023      	b.n	8007954 <USB_EPStartXfer+0x11f6>
 800790c:	463b      	mov	r3, r7
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d11e      	bne.n	8007954 <USB_EPStartXfer+0x11f6>
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007926:	4413      	add	r3, r2
 8007928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	00da      	lsls	r2, r3, #3
 8007934:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007938:	4413      	add	r3, r2
 800793a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800793e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007946:	b29a      	uxth	r2, r3
 8007948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	e001      	b.n	8007954 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e02e      	b.n	80079b2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007954:	1d3b      	adds	r3, r7, #4
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	463b      	mov	r3, r7
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800796a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007972:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007976:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800797a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800797e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007982:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007986:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800798a:	1d3b      	adds	r3, r7, #4
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	463b      	mov	r3, r7
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800799c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d020      	beq.n	8007a10 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e4:	81bb      	strh	r3, [r7, #12]
 80079e6:	89bb      	ldrh	r3, [r7, #12]
 80079e8:	f083 0310 	eor.w	r3, r3, #16
 80079ec:	81bb      	strh	r3, [r7, #12]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	441a      	add	r2, r3
 80079f8:	89bb      	ldrh	r3, [r7, #12]
 80079fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8013      	strh	r3, [r2, #0]
 8007a0e:	e01f      	b.n	8007a50 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a26:	81fb      	strh	r3, [r7, #14]
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a2e:	81fb      	strh	r3, [r7, #14]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	89fb      	ldrh	r3, [r7, #14]
 8007a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	7b1b      	ldrb	r3, [r3, #12]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 809d 	bne.w	8007bac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04c      	beq.n	8007b14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	823b      	strh	r3, [r7, #16]
 8007a88:	8a3b      	ldrh	r3, [r7, #16]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01b      	beq.n	8007aca <USB_EPClearStall+0x6c>
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa8:	81fb      	strh	r3, [r7, #14]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	441a      	add	r2, r3
 8007ab4:	89fb      	ldrh	r3, [r7, #14]
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	78db      	ldrb	r3, [r3, #3]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d06c      	beq.n	8007bac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	81bb      	strh	r3, [r7, #12]
 8007aea:	89bb      	ldrh	r3, [r7, #12]
 8007aec:	f083 0320 	eor.w	r3, r3, #32
 8007af0:	81bb      	strh	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	441a      	add	r2, r3
 8007afc:	89bb      	ldrh	r3, [r7, #12]
 8007afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	8013      	strh	r3, [r2, #0]
 8007b12:	e04b      	b.n	8007bac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	82fb      	strh	r3, [r7, #22]
 8007b22:	8afb      	ldrh	r3, [r7, #22]
 8007b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01b      	beq.n	8007b64 <USB_EPClearStall+0x106>
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	82bb      	strh	r3, [r7, #20]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	8abb      	ldrh	r3, [r7, #20]
 8007b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	827b      	strh	r3, [r7, #18]
 8007b7c:	8a7b      	ldrh	r3, [r7, #18]
 8007b7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b82:	827b      	strh	r3, [r7, #18]
 8007b84:	8a7b      	ldrh	r3, [r7, #18]
 8007b86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b8a:	827b      	strh	r3, [r7, #18]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	8a7b      	ldrh	r3, [r7, #18]
 8007b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bc6:	78fb      	ldrb	r3, [r7, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2280      	movs	r2, #128	; 0x80
 8007bd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c22:	68fb      	ldr	r3, [r7, #12]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b08d      	sub	sp, #52	; 0x34
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4611      	mov	r1, r2
 8007c54:	461a      	mov	r2, r3
 8007c56:	460b      	mov	r3, r1
 8007c58:	80fb      	strh	r3, [r7, #6]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c5e:	88bb      	ldrh	r3, [r7, #4]
 8007c60:	3301      	adds	r3, #1
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c7e:	e01b      	b.n	8007cb8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	3301      	adds	r3, #1
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	3302      	adds	r3, #2
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	3301      	adds	r3, #1
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e0      	bne.n	8007c80 <USB_WritePMA+0x38>
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	3734      	adds	r7, #52	; 0x34
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b08b      	sub	sp, #44	; 0x2c
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	460b      	mov	r3, r1
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ce0:	88bb      	ldrh	r3, [r7, #4]
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cf0:	88fa      	ldrh	r2, [r7, #6]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007d00:	e018      	b.n	8007d34 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	3b01      	subs	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e3      	bne.n	8007d02 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d3a:	88bb      	ldrh	r3, [r7, #4]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	701a      	strb	r2, [r3, #0]
  }
}
 8007d56:	bf00      	nop
 8007d58:	372c      	adds	r7, #44	; 0x2c
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d72:	f002 f89d 	bl	8009eb0 <USBD_static_malloc>
 8007d76:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d86:	2302      	movs	r3, #2
 8007d88:	e066      	b.n	8007e58 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7c1b      	ldrb	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d119      	bne.n	8007dce <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d9e:	2202      	movs	r2, #2
 8007da0:	2181      	movs	r1, #129	; 0x81
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 ff29 	bl	8009bfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007db2:	2202      	movs	r2, #2
 8007db4:	2101      	movs	r1, #1
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 ff1f 	bl	8009bfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2210      	movs	r2, #16
 8007dc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007dcc:	e016      	b.n	8007dfc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dce:	2340      	movs	r3, #64	; 0x40
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	2181      	movs	r1, #129	; 0x81
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 ff10 	bl	8009bfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	2202      	movs	r2, #2
 8007de4:	2101      	movs	r1, #1
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 ff07 	bl	8009bfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2210      	movs	r2, #16
 8007df8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	2203      	movs	r2, #3
 8007e00:	2182      	movs	r1, #130	; 0x82
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fef9 	bl	8009bfa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7c1b      	ldrb	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d109      	bne.n	8007e46 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 ffcb 	bl	8009dda <USBD_LL_PrepareReceive>
 8007e44:	e007      	b.n	8007e56 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e4c:	2340      	movs	r3, #64	; 0x40
 8007e4e:	2101      	movs	r1, #1
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 ffc2 	bl	8009dda <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e6c:	2181      	movs	r1, #129	; 0x81
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fee9 	bl	8009c46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fee2 	bl	8009c46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e8a:	2182      	movs	r1, #130	; 0x82
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 feda 	bl	8009c46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f002 f805 	bl	8009ecc <USBD_static_free>
    pdev->pClassData = NULL;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d03a      	beq.n	8007f74 <USBD_CDC_Setup+0xa0>
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	f040 8097 	bne.w	8008032 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	88db      	ldrh	r3, [r3, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d029      	beq.n	8007f60 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b25b      	sxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da11      	bge.n	8007f3a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007f22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	88d2      	ldrh	r2, [r2, #6]
 8007f28:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f2a:	6939      	ldr	r1, [r7, #16]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	88db      	ldrh	r3, [r3, #6]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fa8d 	bl	8009452 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f38:	e082      	b.n	8008040 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	785a      	ldrb	r2, [r3, #1]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f50:	6939      	ldr	r1, [r7, #16]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	88db      	ldrh	r3, [r3, #6]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 faa6 	bl	80094aa <USBD_CtlPrepareRx>
      break;
 8007f5e:	e06f      	b.n	8008040 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	7850      	ldrb	r0, [r2, #1]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	4798      	blx	r3
      break;
 8007f72:	e065      	b.n	8008040 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b0b      	cmp	r3, #11
 8007f7a:	d84f      	bhi.n	800801c <USBD_CDC_Setup+0x148>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <USBD_CDC_Setup+0xb0>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007fb5 	.word	0x08007fb5
 8007f88:	0800802b 	.word	0x0800802b
 8007f8c:	0800801d 	.word	0x0800801d
 8007f90:	0800801d 	.word	0x0800801d
 8007f94:	0800801d 	.word	0x0800801d
 8007f98:	0800801d 	.word	0x0800801d
 8007f9c:	0800801d 	.word	0x0800801d
 8007fa0:	0800801d 	.word	0x0800801d
 8007fa4:	0800801d 	.word	0x0800801d
 8007fa8:	0800801d 	.word	0x0800801d
 8007fac:	08007fdd 	.word	0x08007fdd
 8007fb0:	08008005 	.word	0x08008005
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d107      	bne.n	8007fce <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fbe:	f107 030c 	add.w	r3, r7, #12
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fa43 	bl	8009452 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fcc:	e030      	b.n	8008030 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f9cd 	bl	8009370 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007fda:	e029      	b.n	8008030 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d107      	bne.n	8007ff6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fe6:	f107 030f 	add.w	r3, r7, #15
 8007fea:	2201      	movs	r2, #1
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fa2f 	bl	8009452 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ff4:	e01c      	b.n	8008030 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f9b9 	bl	8009370 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ffe:	2303      	movs	r3, #3
 8008000:	75fb      	strb	r3, [r7, #23]
          break;
 8008002:	e015      	b.n	8008030 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800a:	2b03      	cmp	r3, #3
 800800c:	d00f      	beq.n	800802e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f9ad 	bl	8009370 <USBD_CtlError>
            ret = USBD_FAIL;
 8008016:	2303      	movs	r3, #3
 8008018:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800801a:	e008      	b.n	800802e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 f9a6 	bl	8009370 <USBD_CtlError>
          ret = USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	75fb      	strb	r3, [r7, #23]
          break;
 8008028:	e002      	b.n	8008030 <USBD_CDC_Setup+0x15c>
          break;
 800802a:	bf00      	nop
 800802c:	e008      	b.n	8008040 <USBD_CDC_Setup+0x16c>
          break;
 800802e:	bf00      	nop
      }
      break;
 8008030:	e006      	b.n	8008040 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f99b 	bl	8009370 <USBD_CtlError>
      ret = USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	75fb      	strb	r3, [r7, #23]
      break;
 800803e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop

0800804c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800805e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800806a:	2303      	movs	r3, #3
 800806c:	e04f      	b.n	800810e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008074:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	3318      	adds	r3, #24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d029      	beq.n	80080e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	3318      	adds	r3, #24
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	78f9      	ldrb	r1, [r7, #3]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	460b      	mov	r3, r1
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	4403      	add	r3, r0
 80080ac:	3338      	adds	r3, #56	; 0x38
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80080b4:	fb03 f301 	mul.w	r3, r3, r1
 80080b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d110      	bne.n	80080e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	3318      	adds	r3, #24
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080d2:	78f9      	ldrb	r1, [r7, #3]
 80080d4:	2300      	movs	r3, #0
 80080d6:	2200      	movs	r2, #0
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fe5d 	bl	8009d98 <USBD_LL_Transmit>
 80080de:	e015      	b.n	800810c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008108:	78fa      	ldrb	r2, [r7, #3]
 800810a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008128:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	e015      	b.n	8008164 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fe6d 	bl	8009e1c <USBD_LL_GetRxDataSize>
 8008142:	4602      	mov	r2, r0
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800815e:	4611      	mov	r1, r2
 8008160:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800817a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d015      	beq.n	80081b2 <USBD_CDC_EP0_RxReady+0x46>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800818c:	2bff      	cmp	r3, #255	; 0xff
 800818e:	d010      	beq.n	80081b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800819e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081a6:	b292      	uxth	r2, r2
 80081a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	22ff      	movs	r2, #255	; 0xff
 80081ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2243      	movs	r2, #67	; 0x43
 80081c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80081ca:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	20000094 	.word	0x20000094

080081dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2243      	movs	r2, #67	; 0x43
 80081e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	20000050 	.word	0x20000050

080081fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2243      	movs	r2, #67	; 0x43
 8008208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800820a:	4b03      	ldr	r3, [pc, #12]	; (8008218 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	200000d8 	.word	0x200000d8

0800821c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	220a      	movs	r2, #10
 8008228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800822a:	4b03      	ldr	r3, [pc, #12]	; (8008238 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	2000000c 	.word	0x2000000c

0800823c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	e004      	b.n	800825a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008266:	b480      	push	{r7}
 8008268:	b087      	sub	sp, #28
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008278:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082de:	2303      	movs	r3, #3
 80082e0:	e01a      	b.n	8008318 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d114      	bne.n	8008316 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800830a:	2181      	movs	r1, #129	; 0x81
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f001 fd43 	bl	8009d98 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800833a:	2303      	movs	r3, #3
 800833c:	e016      	b.n	800836c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	7c1b      	ldrb	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800834c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008350:	2101      	movs	r1, #1
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fd41 	bl	8009dda <USBD_LL_PrepareReceive>
 8008358:	e007      	b.n	800836a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	2101      	movs	r1, #1
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fd38 	bl	8009dda <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	e01f      	b.n	80083cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	79fa      	ldrb	r2, [r7, #7]
 80083be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f001 fb9f 	bl	8009b04 <USBD_LL_Init>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e016      	b.n	800841a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	f107 020e 	add.w	r2, r7, #14
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	4602      	mov	r2, r0
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fbca 	bl	8009bc4 <USBD_LL_Start>
 8008430:	4603      	mov	r3, r0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	4611      	mov	r1, r2
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
 800847a:	4603      	mov	r3, r0
 800847c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	4611      	mov	r1, r2
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
  }

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 ff16 	bl	80092fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d00e      	beq.n	8008512 <USBD_LL_SetupStage+0x5a>
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d302      	bcc.n	80084fe <USBD_LL_SetupStage+0x46>
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d014      	beq.n	8008526 <USBD_LL_SetupStage+0x6e>
 80084fc:	e01d      	b.n	800853a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9d6 	bl	80088b8 <USBD_StdDevReq>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]
      break;
 8008510:	e020      	b.n	8008554 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa3a 	bl	8008994 <USBD_StdItfReq>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]
      break;
 8008524:	e016      	b.n	8008554 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa76 	bl	8008a20 <USBD_StdEPReq>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
      break;
 8008538:	e00c      	b.n	8008554 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008544:	b2db      	uxtb	r3, r3
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fb9b 	bl	8009c84 <USBD_LL_StallEP>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]
      break;
 8008552:	bf00      	nop
  }

  return ret;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	460b      	mov	r3, r1
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d137      	bne.n	80085e2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008578:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008580:	2b03      	cmp	r3, #3
 8008582:	d14a      	bne.n	800861a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	429a      	cmp	r2, r3
 800858e:	d913      	bls.n	80085b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	4293      	cmp	r3, r2
 80085a8:	bf28      	it	cs
 80085aa:	4613      	movcs	r3, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 ff97 	bl	80094e4 <USBD_CtlContinueRx>
 80085b6:	e030      	b.n	800861a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d105      	bne.n	80085da <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 ff93 	bl	8009506 <USBD_CtlSendStatus>
 80085e0:	e01b      	b.n	800861a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d013      	beq.n	8008616 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d10e      	bne.n	8008616 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	7afa      	ldrb	r2, [r7, #11]
 8008602:	4611      	mov	r1, r2
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	e002      	b.n	800861c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008616:	2303      	movs	r3, #3
 8008618:	e000      	b.n	800861c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	460b      	mov	r3, r1
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d16a      	bne.n	800870e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3314      	adds	r3, #20
 800863c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008644:	2b02      	cmp	r3, #2
 8008646:	d155      	bne.n	80086f4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d914      	bls.n	800867e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	461a      	mov	r2, r3
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 ff0c 	bl	8009488 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008670:	2300      	movs	r3, #0
 8008672:	2200      	movs	r2, #0
 8008674:	2100      	movs	r1, #0
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f001 fbaf 	bl	8009dda <USBD_LL_PrepareReceive>
 800867c:	e03a      	b.n	80086f4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	429a      	cmp	r2, r3
 8008688:	d11c      	bne.n	80086c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008692:	429a      	cmp	r2, r3
 8008694:	d316      	bcc.n	80086c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d20f      	bcs.n	80086c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 feed 	bl	8009488 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b6:	2300      	movs	r3, #0
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f001 fb8c 	bl	8009dda <USBD_LL_PrepareReceive>
 80086c2:	e017      	b.n	80086f4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d105      	bne.n	80086e6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086e6:	2180      	movs	r1, #128	; 0x80
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f001 facb 	bl	8009c84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 ff1c 	bl	800952c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d123      	bne.n	8008746 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff fe9b 	bl	800843a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800870c:	e01b      	b.n	8008746 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d013      	beq.n	8008742 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008720:	2b03      	cmp	r3, #3
 8008722:	d10e      	bne.n	8008742 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	7afa      	ldrb	r2, [r7, #11]
 800872e:	4611      	mov	r1, r2
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	4798      	blx	r3
 8008734:	4603      	mov	r3, r0
 8008736:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	e002      	b.n	8008748 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008742:	2303      	movs	r3, #3
 8008744:	e000      	b.n	8008748 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6852      	ldr	r2, [r2, #4]
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	4611      	mov	r1, r2
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008794:	2340      	movs	r3, #64	; 0x40
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 fa2d 	bl	8009bfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2240      	movs	r2, #64	; 0x40
 80087ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b0:	2340      	movs	r3, #64	; 0x40
 80087b2:	2200      	movs	r2, #0
 80087b4:	2180      	movs	r1, #128	; 0x80
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 fa1f 	bl	8009bfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2240      	movs	r2, #64	; 0x40
 80087c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2204      	movs	r2, #4
 800880a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	2b04      	cmp	r3, #4
 800882c:	d105      	bne.n	800883a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008856:	2b03      	cmp	r3, #3
 8008858:	d10b      	bne.n	8008872 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	3301      	adds	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800889a:	8a3b      	ldrh	r3, [r7, #16]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	b21a      	sxth	r2, r3
 80088a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088aa:	89fb      	ldrh	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d004      	beq.n	80088dc <USBD_StdDevReq+0x24>
 80088d2:	2b40      	cmp	r3, #64	; 0x40
 80088d4:	d002      	beq.n	80088dc <USBD_StdDevReq+0x24>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <USBD_StdDevReq+0x38>
 80088da:	e050      	b.n	800897e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
 80088ea:	4603      	mov	r3, r0
 80088ec:	73fb      	strb	r3, [r7, #15]
    break;
 80088ee:	e04b      	b.n	8008988 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d83c      	bhi.n	8008972 <USBD_StdDevReq+0xba>
 80088f8:	a201      	add	r2, pc, #4	; (adr r2, 8008900 <USBD_StdDevReq+0x48>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008955 	.word	0x08008955
 8008904:	08008969 	.word	0x08008969
 8008908:	08008973 	.word	0x08008973
 800890c:	0800895f 	.word	0x0800895f
 8008910:	08008973 	.word	0x08008973
 8008914:	08008933 	.word	0x08008933
 8008918:	08008929 	.word	0x08008929
 800891c:	08008973 	.word	0x08008973
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800893d 	.word	0x0800893d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9d0 	bl	8008cd0 <USBD_GetDescriptor>
      break;
 8008930:	e024      	b.n	800897c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fb5f 	bl	8008ff8 <USBD_SetAddress>
      break;
 800893a:	e01f      	b.n	800897c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fb9c 	bl	800907c <USBD_SetConfig>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
      break;
 8008948:	e018      	b.n	800897c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fc39 	bl	80091c4 <USBD_GetConfig>
      break;
 8008952:	e013      	b.n	800897c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008954:	6839      	ldr	r1, [r7, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fc68 	bl	800922c <USBD_GetStatus>
      break;
 800895c:	e00e      	b.n	800897c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fc96 	bl	8009292 <USBD_SetFeature>
      break;
 8008966:	e009      	b.n	800897c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fca5 	bl	80092ba <USBD_ClrFeature>
      break;
 8008970:	e004      	b.n	800897c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fcfb 	bl	8009370 <USBD_CtlError>
      break;
 800897a:	bf00      	nop
    }
    break;
 800897c:	e004      	b.n	8008988 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fcf5 	bl	8009370 <USBD_CtlError>
    break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop

08008994 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d003      	beq.n	80089b6 <USBD_StdItfReq+0x22>
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d001      	beq.n	80089b6 <USBD_StdItfReq+0x22>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d12a      	bne.n	8008a0c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089bc:	3b01      	subs	r3, #1
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d81d      	bhi.n	80089fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	889b      	ldrh	r3, [r3, #4]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d813      	bhi.n	80089f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	88db      	ldrh	r3, [r3, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d110      	bne.n	8008a08 <USBD_StdItfReq+0x74>
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10d      	bne.n	8008a08 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fd8a 	bl	8009506 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80089f2:	e009      	b.n	8008a08 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fcba 	bl	8009370 <USBD_CtlError>
      break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fcb5 	bl	8009370 <USBD_CtlError>
      break;
 8008a06:	e000      	b.n	8008a0a <USBD_StdItfReq+0x76>
      break;
 8008a08:	bf00      	nop
    }
    break;
 8008a0a:	e004      	b.n	8008a16 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fcae 	bl	8009370 <USBD_CtlError>
    break;
 8008a14:	bf00      	nop
  }

  return ret;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	889b      	ldrh	r3, [r3, #4]
 8008a32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d004      	beq.n	8008a4a <USBD_StdEPReq+0x2a>
 8008a40:	2b40      	cmp	r3, #64	; 0x40
 8008a42:	d002      	beq.n	8008a4a <USBD_StdEPReq+0x2a>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <USBD_StdEPReq+0x3e>
 8008a48:	e137      	b.n	8008cba <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a5c:	e132      	b.n	8008cc4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d03e      	beq.n	8008ae4 <USBD_StdEPReq+0xc4>
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d002      	beq.n	8008a70 <USBD_StdEPReq+0x50>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d079      	beq.n	8008b62 <USBD_StdEPReq+0x142>
 8008a6e:	e11e      	b.n	8008cae <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d002      	beq.n	8008a80 <USBD_StdEPReq+0x60>
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d015      	beq.n	8008aaa <USBD_StdEPReq+0x8a>
 8008a7e:	e02b      	b.n	8008ad8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <USBD_StdEPReq+0x80>
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b80      	cmp	r3, #128	; 0x80
 8008a8a:	d009      	beq.n	8008aa0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f8f7 	bl	8009c84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a96:	2180      	movs	r1, #128	; 0x80
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f8f3 	bl	8009c84 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a9e:	e020      	b.n	8008ae2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fc64 	bl	8009370 <USBD_CtlError>
        break;
 8008aa8:	e01b      	b.n	8008ae2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10e      	bne.n	8008ad0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <USBD_StdEPReq+0xb0>
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b80      	cmp	r3, #128	; 0x80
 8008abc:	d008      	beq.n	8008ad0 <USBD_StdEPReq+0xb0>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	88db      	ldrh	r3, [r3, #6]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f8da 	bl	8009c84 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fd18 	bl	8009506 <USBD_CtlSendStatus>

        break;
 8008ad6:	e004      	b.n	8008ae2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc48 	bl	8009370 <USBD_CtlError>
        break;
 8008ae0:	bf00      	nop
      }
      break;
 8008ae2:	e0e9      	b.n	8008cb8 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d002      	beq.n	8008af4 <USBD_StdEPReq+0xd4>
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d015      	beq.n	8008b1e <USBD_StdEPReq+0xfe>
 8008af2:	e02f      	b.n	8008b54 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <USBD_StdEPReq+0xf4>
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b80      	cmp	r3, #128	; 0x80
 8008afe:	d009      	beq.n	8008b14 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f8bd 	bl	8009c84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0a:	2180      	movs	r1, #128	; 0x80
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f8b9 	bl	8009c84 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b12:	e025      	b.n	8008b60 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fc2a 	bl	8009370 <USBD_CtlError>
        break;
 8008b1c:	e020      	b.n	8008b60 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11b      	bne.n	8008b5e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d004      	beq.n	8008b3a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 f8c4 	bl	8009cc2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fce3 	bl	8009506 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b52:	e004      	b.n	8008b5e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fc0a 	bl	8009370 <USBD_CtlError>
        break;
 8008b5c:	e000      	b.n	8008b60 <USBD_StdEPReq+0x140>
        break;
 8008b5e:	bf00      	nop
      }
      break;
 8008b60:	e0aa      	b.n	8008cb8 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d002      	beq.n	8008b72 <USBD_StdEPReq+0x152>
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d032      	beq.n	8008bd6 <USBD_StdEPReq+0x1b6>
 8008b70:	e097      	b.n	8008ca2 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <USBD_StdEPReq+0x168>
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	2b80      	cmp	r3, #128	; 0x80
 8008b7c:	d004      	beq.n	8008b88 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fbf5 	bl	8009370 <USBD_CtlError>
          break;
 8008b86:	e091      	b.n	8008cac <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da0b      	bge.n	8008ba8 <USBD_StdEPReq+0x188>
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	3310      	adds	r3, #16
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	e00b      	b.n	8008bc0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fc3f 	bl	8009452 <USBD_CtlSendData>
        break;
 8008bd4:	e06a      	b.n	8008cac <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	da11      	bge.n	8008c02 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3324      	adds	r3, #36	; 0x24
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d117      	bne.n	8008c28 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fbb8 	bl	8009370 <USBD_CtlError>
            break;
 8008c00:	e054      	b.n	8008cac <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	f003 020f 	and.w	r2, r3, #15
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	440b      	add	r3, r1
 8008c14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fba5 	bl	8009370 <USBD_CtlError>
            break;
 8008c26:	e041      	b.n	8008cac <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da0b      	bge.n	8008c48 <USBD_StdEPReq+0x228>
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	3310      	adds	r3, #16
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	4413      	add	r3, r2
 8008c44:	3304      	adds	r3, #4
 8008c46:	e00b      	b.n	8008c60 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	3304      	adds	r3, #4
 8008c60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <USBD_StdEPReq+0x24e>
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b80      	cmp	r3, #128	; 0x80
 8008c6c:	d103      	bne.n	8008c76 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	e00e      	b.n	8008c94 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f840 	bl	8009d00 <USBD_LL_IsStallEP>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e002      	b.n	8008c94 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2202      	movs	r2, #2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fbd9 	bl	8009452 <USBD_CtlSendData>
          break;
 8008ca0:	e004      	b.n	8008cac <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb63 	bl	8009370 <USBD_CtlError>
        break;
 8008caa:	bf00      	nop
      }
      break;
 8008cac:	e004      	b.n	8008cb8 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fb5d 	bl	8009370 <USBD_CtlError>
      break;
 8008cb6:	bf00      	nop
    }
    break;
 8008cb8:	e004      	b.n	8008cc4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fb57 	bl	8009370 <USBD_CtlError>
    break;
 8008cc2:	bf00      	nop
  }

  return ret;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	2b0e      	cmp	r3, #14
 8008cf2:	f200 8152 	bhi.w	8008f9a <USBD_GetDescriptor+0x2ca>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <USBD_GetDescriptor+0x2c>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d6d 	.word	0x08008d6d
 8008d00:	08008d85 	.word	0x08008d85
 8008d04:	08008dc5 	.word	0x08008dc5
 8008d08:	08008f9b 	.word	0x08008f9b
 8008d0c:	08008f9b 	.word	0x08008f9b
 8008d10:	08008f3b 	.word	0x08008f3b
 8008d14:	08008f67 	.word	0x08008f67
 8008d18:	08008f9b 	.word	0x08008f9b
 8008d1c:	08008f9b 	.word	0x08008f9b
 8008d20:	08008f9b 	.word	0x08008f9b
 8008d24:	08008f9b 	.word	0x08008f9b
 8008d28:	08008f9b 	.word	0x08008f9b
 8008d2c:	08008f9b 	.word	0x08008f9b
 8008d30:	08008f9b 	.word	0x08008f9b
 8008d34:	08008d39 	.word	0x08008d39
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d5a:	e126      	b.n	8008faa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fb06 	bl	8009370 <USBD_CtlError>
      err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
    break;
 8008d6a:	e11e      	b.n	8008faa <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	7c12      	ldrb	r2, [r2, #16]
 8008d78:	f107 0108 	add.w	r1, r7, #8
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3
 8008d80:	60f8      	str	r0, [r7, #12]
    break;
 8008d82:	e112      	b.n	8008faa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7c1b      	ldrb	r3, [r3, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10d      	bne.n	8008da8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	f107 0208 	add.w	r2, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	2202      	movs	r2, #2
 8008da4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008da6:	e100      	b.n	8008faa <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	f107 0208 	add.w	r2, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	701a      	strb	r2, [r3, #0]
    break;
 8008dc2:	e0f2      	b.n	8008faa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	885b      	ldrh	r3, [r3, #2]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	f200 80ac 	bhi.w	8008f28 <USBD_GetDescriptor+0x258>
 8008dd0:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <USBD_GetDescriptor+0x108>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008df1 	.word	0x08008df1
 8008ddc:	08008e25 	.word	0x08008e25
 8008de0:	08008e59 	.word	0x08008e59
 8008de4:	08008e8d 	.word	0x08008e8d
 8008de8:	08008ec1 	.word	0x08008ec1
 8008dec:	08008ef5 	.word	0x08008ef5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7c12      	ldrb	r2, [r2, #16]
 8008e08:	f107 0108 	add.w	r1, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e12:	e091      	b.n	8008f38 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 faaa 	bl	8009370 <USBD_CtlError>
        err++;
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	72fb      	strb	r3, [r7, #11]
      break;
 8008e22:	e089      	b.n	8008f38 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e46:	e077      	b.n	8008f38 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa90 	bl	8009370 <USBD_CtlError>
        err++;
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	3301      	adds	r3, #1
 8008e54:	72fb      	strb	r3, [r7, #11]
      break;
 8008e56:	e06f      	b.n	8008f38 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7c12      	ldrb	r2, [r2, #16]
 8008e70:	f107 0108 	add.w	r1, r7, #8
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
 8008e78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e7a:	e05d      	b.n	8008f38 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa76 	bl	8009370 <USBD_CtlError>
        err++;
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	3301      	adds	r3, #1
 8008e88:	72fb      	strb	r3, [r7, #11]
      break;
 8008e8a:	e055      	b.n	8008f38 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	7c12      	ldrb	r2, [r2, #16]
 8008ea4:	f107 0108 	add.w	r1, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eae:	e043      	b.n	8008f38 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa5c 	bl	8009370 <USBD_CtlError>
        err++;
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	72fb      	strb	r3, [r7, #11]
      break;
 8008ebe:	e03b      	b.n	8008f38 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	7c12      	ldrb	r2, [r2, #16]
 8008ed8:	f107 0108 	add.w	r1, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee2:	e029      	b.n	8008f38 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa42 	bl	8009370 <USBD_CtlError>
        err++;
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef2:	e021      	b.n	8008f38 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00b      	beq.n	8008f18 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7c12      	ldrb	r2, [r2, #16]
 8008f0c:	f107 0108 	add.w	r1, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f16:	e00f      	b.n	8008f38 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa28 	bl	8009370 <USBD_CtlError>
        err++;
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	3301      	adds	r3, #1
 8008f24:	72fb      	strb	r3, [r7, #11]
      break;
 8008f26:	e007      	b.n	8008f38 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa20 	bl	8009370 <USBD_CtlError>
      err++;
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	3301      	adds	r3, #1
 8008f34:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008f36:	bf00      	nop
    }
    break;
 8008f38:	e037      	b.n	8008faa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7c1b      	ldrb	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	f107 0208 	add.w	r2, r7, #8
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4798      	blx	r3
 8008f52:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f54:	e029      	b.n	8008faa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa09 	bl	8009370 <USBD_CtlError>
      err++;
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	3301      	adds	r3, #1
 8008f62:	72fb      	strb	r3, [r7, #11]
    break;
 8008f64:	e021      	b.n	8008faa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	7c1b      	ldrb	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10d      	bne.n	8008f8a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	f107 0208 	add.w	r2, r7, #8
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4798      	blx	r3
 8008f7e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	2207      	movs	r2, #7
 8008f86:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f88:	e00f      	b.n	8008faa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f9ef 	bl	8009370 <USBD_CtlError>
      err++;
 8008f92:	7afb      	ldrb	r3, [r7, #11]
 8008f94:	3301      	adds	r3, #1
 8008f96:	72fb      	strb	r3, [r7, #11]
    break;
 8008f98:	e007      	b.n	8008faa <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f9e7 	bl	8009370 <USBD_CtlError>
    err++;
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	72fb      	strb	r3, [r7, #11]
    break;
 8008fa8:	bf00      	nop
  }

  if (err != 0U)
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d11e      	bne.n	8008fee <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	88db      	ldrh	r3, [r3, #6]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d016      	beq.n	8008fe6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008fb8:	893b      	ldrh	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00e      	beq.n	8008fdc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	88da      	ldrh	r2, [r3, #6]
 8008fc2:	893b      	ldrh	r3, [r7, #8]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	bf28      	it	cs
 8008fc8:	4613      	movcs	r3, r2
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fce:	893b      	ldrh	r3, [r7, #8]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa3c 	bl	8009452 <USBD_CtlSendData>
 8008fda:	e009      	b.n	8008ff0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9c6 	bl	8009370 <USBD_CtlError>
 8008fe4:	e004      	b.n	8008ff0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa8d 	bl	8009506 <USBD_CtlSendStatus>
 8008fec:	e000      	b.n	8008ff0 <USBD_GetDescriptor+0x320>
    return;
 8008fee:	bf00      	nop
    }
  }
}
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop

08008ff8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	889b      	ldrh	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d130      	bne.n	800906c <USBD_SetAddress+0x74>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	88db      	ldrh	r3, [r3, #6]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d12c      	bne.n	800906c <USBD_SetAddress+0x74>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	885b      	ldrh	r3, [r3, #2]
 8009016:	2b7f      	cmp	r3, #127	; 0x7f
 8009018:	d828      	bhi.n	800906c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009024:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	2b03      	cmp	r3, #3
 800902e:	d104      	bne.n	800903a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f99c 	bl	8009370 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009038:	e01c      	b.n	8009074 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	7bfa      	ldrb	r2, [r7, #15]
 800903e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fe87 	bl	8009d5a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa5a 	bl	8009506 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d004      	beq.n	8009062 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009060:	e008      	b.n	8009074 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	e003      	b.n	8009074 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f97e 	bl	8009370 <USBD_CtlError>
  }
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	885b      	ldrh	r3, [r3, #2]
 800908e:	b2da      	uxtb	r2, r3
 8009090:	4b4b      	ldr	r3, [pc, #300]	; (80091c0 <USBD_SetConfig+0x144>)
 8009092:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009094:	4b4a      	ldr	r3, [pc, #296]	; (80091c0 <USBD_SetConfig+0x144>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d905      	bls.n	80090a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f966 	bl	8009370 <USBD_CtlError>
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e087      	b.n	80091b8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d002      	beq.n	80090b8 <USBD_SetConfig+0x3c>
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d025      	beq.n	8009102 <USBD_SetConfig+0x86>
 80090b6:	e071      	b.n	800919c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80090b8:	4b41      	ldr	r3, [pc, #260]	; (80091c0 <USBD_SetConfig+0x144>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01c      	beq.n	80090fa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80090c0:	4b3f      	ldr	r3, [pc, #252]	; (80091c0 <USBD_SetConfig+0x144>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	461a      	mov	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80090ca:	4b3d      	ldr	r3, [pc, #244]	; (80091c0 <USBD_SetConfig+0x144>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff f9bd 	bl	8008450 <USBD_SetClassConfig>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f944 	bl	8009370 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80090e8:	e065      	b.n	80091b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa0b 	bl	8009506 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2203      	movs	r2, #3
 80090f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80090f8:	e05d      	b.n	80091b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa03 	bl	8009506 <USBD_CtlSendStatus>
    break;
 8009100:	e059      	b.n	80091b6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009102:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <USBD_SetConfig+0x144>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d112      	bne.n	8009130 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009112:	4b2b      	ldr	r3, [pc, #172]	; (80091c0 <USBD_SetConfig+0x144>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800911c:	4b28      	ldr	r3, [pc, #160]	; (80091c0 <USBD_SetConfig+0x144>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff f9b0 	bl	8008488 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f9ec 	bl	8009506 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800912e:	e042      	b.n	80091b6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009130:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <USBD_SetConfig+0x144>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d02a      	beq.n	8009194 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff f99e 	bl	8008488 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800914c:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <USBD_SetConfig+0x144>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009156:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <USBD_SetConfig+0x144>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff f977 	bl	8008450 <USBD_SetClassConfig>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00f      	beq.n	800918c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8fe 	bl	8009370 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	b2db      	uxtb	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff f983 	bl	8008488 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2202      	movs	r2, #2
 8009186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800918a:	e014      	b.n	80091b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f9ba 	bl	8009506 <USBD_CtlSendStatus>
    break;
 8009192:	e010      	b.n	80091b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f9b6 	bl	8009506 <USBD_CtlSendStatus>
    break;
 800919a:	e00c      	b.n	80091b6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8e6 	bl	8009370 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091a4:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <USBD_SetConfig+0x144>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff f96c 	bl	8008488 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	73fb      	strb	r3, [r7, #15]
    break;
 80091b4:	bf00      	nop
  }

  return ret;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	200001e8 	.word	0x200001e8

080091c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	88db      	ldrh	r3, [r3, #6]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d004      	beq.n	80091e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f8c9 	bl	8009370 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80091de:	e021      	b.n	8009224 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	db17      	blt.n	800921a <USBD_GetConfig+0x56>
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	dd02      	ble.n	80091f4 <USBD_GetConfig+0x30>
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d00b      	beq.n	800920a <USBD_GetConfig+0x46>
 80091f2:	e012      	b.n	800921a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3308      	adds	r3, #8
 80091fe:	2201      	movs	r2, #1
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f925 	bl	8009452 <USBD_CtlSendData>
      break;
 8009208:	e00c      	b.n	8009224 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3304      	adds	r3, #4
 800920e:	2201      	movs	r2, #1
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f91d 	bl	8009452 <USBD_CtlSendData>
      break;
 8009218:	e004      	b.n	8009224 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8a7 	bl	8009370 <USBD_CtlError>
      break;
 8009222:	bf00      	nop
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923c:	3b01      	subs	r3, #1
 800923e:	2b02      	cmp	r3, #2
 8009240:	d81e      	bhi.n	8009280 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	88db      	ldrh	r3, [r3, #6]
 8009246:	2b02      	cmp	r3, #2
 8009248:	d004      	beq.n	8009254 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f88f 	bl	8009370 <USBD_CtlError>
      break;
 8009252:	e01a      	b.n	800928a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f043 0202 	orr.w	r2, r3, #2
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	330c      	adds	r3, #12
 8009274:	2202      	movs	r2, #2
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f8ea 	bl	8009452 <USBD_CtlSendData>
    break;
 800927e:	e004      	b.n	800928a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f874 	bl	8009370 <USBD_CtlError>
    break;
 8009288:	bf00      	nop
  }
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	885b      	ldrh	r3, [r3, #2]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d106      	bne.n	80092b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f92a 	bl	8009506 <USBD_CtlSendStatus>
  }
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ca:	3b01      	subs	r3, #1
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d80b      	bhi.n	80092e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d10c      	bne.n	80092f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f910 	bl	8009506 <USBD_CtlSendStatus>
      }
      break;
 80092e6:	e004      	b.n	80092f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f840 	bl	8009370 <USBD_CtlError>
      break;
 80092f0:	e000      	b.n	80092f4 <USBD_ClrFeature+0x3a>
      break;
 80092f2:	bf00      	nop
  }
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	781a      	ldrb	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff faa8 	bl	800887c <SWAPBYTE>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3301      	adds	r3, #1
 8009338:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f7ff fa9b 	bl	800887c <SWAPBYTE>
 8009346:	4603      	mov	r3, r0
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3301      	adds	r3, #1
 8009352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3301      	adds	r3, #1
 8009358:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff fa8e 	bl	800887c <SWAPBYTE>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	80da      	strh	r2, [r3, #6]
}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800937a:	2180      	movs	r1, #128	; 0x80
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fc81 	bl	8009c84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fc7d 	bl	8009c84 <USBD_LL_StallEP>
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b086      	sub	sp, #24
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d036      	beq.n	8009416 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093ac:	6938      	ldr	r0, [r7, #16]
 80093ae:	f000 f836 	bl	800941e <USBD_GetLen>
 80093b2:	4603      	mov	r3, r0
 80093b4:	3301      	adds	r3, #1
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	4413      	add	r3, r2
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	7812      	ldrb	r2, [r2, #0]
 80093ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	3301      	adds	r3, #1
 80093d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	4413      	add	r3, r2
 80093d8:	2203      	movs	r2, #3
 80093da:	701a      	strb	r2, [r3, #0]
  idx++;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	3301      	adds	r3, #1
 80093e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093e2:	e013      	b.n	800940c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	4413      	add	r3, r2
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	7812      	ldrb	r2, [r2, #0]
 80093ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3301      	adds	r3, #1
 80093f4:	613b      	str	r3, [r7, #16]
    idx++;
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	3301      	adds	r3, #1
 80093fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	2200      	movs	r2, #0
 8009404:	701a      	strb	r2, [r3, #0]
    idx++;
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	3301      	adds	r3, #1
 800940a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e7      	bne.n	80093e4 <USBD_GetString+0x52>
 8009414:	e000      	b.n	8009418 <USBD_GetString+0x86>
    return;
 8009416:	bf00      	nop
  }
}
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800942e:	e005      	b.n	800943c <USBD_GetLen+0x1e>
  {
    len++;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	3301      	adds	r3, #1
 8009434:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	3301      	adds	r3, #1
 800943a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1f5      	bne.n	8009430 <USBD_GetLen+0x12>
  }

  return len;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2202      	movs	r2, #2
 8009462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fc8d 	bl	8009d98 <USBD_LL_Transmit>

  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	2100      	movs	r1, #0
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fc7c 	bl	8009d98 <USBD_LL_Transmit>

  return USBD_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2203      	movs	r2, #3
 80094ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	2100      	movs	r1, #0
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fc80 	bl	8009dda <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	2100      	movs	r1, #0
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fc6f 	bl	8009dda <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2204      	movs	r2, #4
 8009512:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009516:	2300      	movs	r3, #0
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc3b 	bl	8009d98 <USBD_LL_Transmit>

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2205      	movs	r2, #5
 8009538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953c:	2300      	movs	r3, #0
 800953e:	2200      	movs	r2, #0
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fc49 	bl	8009dda <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009558:	2200      	movs	r2, #0
 800955a:	4912      	ldr	r1, [pc, #72]	; (80095a4 <MX_USB_Device_Init+0x50>)
 800955c:	4812      	ldr	r0, [pc, #72]	; (80095a8 <MX_USB_Device_Init+0x54>)
 800955e:	f7fe ff09 	bl	8008374 <USBD_Init>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009568:	f7f7 fef0 	bl	800134c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800956c:	490f      	ldr	r1, [pc, #60]	; (80095ac <MX_USB_Device_Init+0x58>)
 800956e:	480e      	ldr	r0, [pc, #56]	; (80095a8 <MX_USB_Device_Init+0x54>)
 8009570:	f7fe ff30 	bl	80083d4 <USBD_RegisterClass>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800957a:	f7f7 fee7 	bl	800134c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800957e:	490c      	ldr	r1, [pc, #48]	; (80095b0 <MX_USB_Device_Init+0x5c>)
 8009580:	4809      	ldr	r0, [pc, #36]	; (80095a8 <MX_USB_Device_Init+0x54>)
 8009582:	f7fe fe5b 	bl	800823c <USBD_CDC_RegisterInterface>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800958c:	f7f7 fede 	bl	800134c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009590:	4805      	ldr	r0, [pc, #20]	; (80095a8 <MX_USB_Device_Init+0x54>)
 8009592:	f7fe ff46 	bl	8008422 <USBD_Start>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800959c:	f7f7 fed6 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80095a0:	bf00      	nop
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	20000130 	.word	0x20000130
 80095a8:	2000079c 	.word	0x2000079c
 80095ac:	20000018 	.word	0x20000018
 80095b0:	2000011c 	.word	0x2000011c

080095b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095b8:	2200      	movs	r2, #0
 80095ba:	4905      	ldr	r1, [pc, #20]	; (80095d0 <CDC_Init_FS+0x1c>)
 80095bc:	4805      	ldr	r0, [pc, #20]	; (80095d4 <CDC_Init_FS+0x20>)
 80095be:	f7fe fe52 	bl	8008266 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095c2:	4905      	ldr	r1, [pc, #20]	; (80095d8 <CDC_Init_FS+0x24>)
 80095c4:	4803      	ldr	r0, [pc, #12]	; (80095d4 <CDC_Init_FS+0x20>)
 80095c6:	f7fe fe67 	bl	8008298 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000e54 	.word	0x20000e54
 80095d4:	2000079c 	.word	0x2000079c
 80095d8:	20000a6c 	.word	0x20000a6c

080095dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
 80095f8:	4613      	mov	r3, r2
 80095fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b23      	cmp	r3, #35	; 0x23
 8009600:	d84a      	bhi.n	8009698 <CDC_Control_FS+0xac>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <CDC_Control_FS+0x1c>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009699 	.word	0x08009699
 800960c:	08009699 	.word	0x08009699
 8009610:	08009699 	.word	0x08009699
 8009614:	08009699 	.word	0x08009699
 8009618:	08009699 	.word	0x08009699
 800961c:	08009699 	.word	0x08009699
 8009620:	08009699 	.word	0x08009699
 8009624:	08009699 	.word	0x08009699
 8009628:	08009699 	.word	0x08009699
 800962c:	08009699 	.word	0x08009699
 8009630:	08009699 	.word	0x08009699
 8009634:	08009699 	.word	0x08009699
 8009638:	08009699 	.word	0x08009699
 800963c:	08009699 	.word	0x08009699
 8009640:	08009699 	.word	0x08009699
 8009644:	08009699 	.word	0x08009699
 8009648:	08009699 	.word	0x08009699
 800964c:	08009699 	.word	0x08009699
 8009650:	08009699 	.word	0x08009699
 8009654:	08009699 	.word	0x08009699
 8009658:	08009699 	.word	0x08009699
 800965c:	08009699 	.word	0x08009699
 8009660:	08009699 	.word	0x08009699
 8009664:	08009699 	.word	0x08009699
 8009668:	08009699 	.word	0x08009699
 800966c:	08009699 	.word	0x08009699
 8009670:	08009699 	.word	0x08009699
 8009674:	08009699 	.word	0x08009699
 8009678:	08009699 	.word	0x08009699
 800967c:	08009699 	.word	0x08009699
 8009680:	08009699 	.word	0x08009699
 8009684:	08009699 	.word	0x08009699
 8009688:	08009699 	.word	0x08009699
 800968c:	08009699 	.word	0x08009699
 8009690:	08009699 	.word	0x08009699
 8009694:	08009699 	.word	0x08009699
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009698:	bf00      	nop
  }

  return (USBD_OK);
 800969a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7f6 fdaf 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4805      	ldr	r0, [pc, #20]	; (80096d4 <CDC_Receive_FS+0x2c>)
 80096be:	f7fe fdeb 	bl	8008298 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096c2:	4804      	ldr	r0, [pc, #16]	; (80096d4 <CDC_Receive_FS+0x2c>)
 80096c4:	f7fe fe2c 	bl	8008320 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	2000079c 	.word	0x2000079c

080096d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096e8:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <CDC_Transmit_FS+0x48>)
 80096ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e00b      	b.n	8009716 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096fe:	887b      	ldrh	r3, [r7, #2]
 8009700:	461a      	mov	r2, r3
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	4806      	ldr	r0, [pc, #24]	; (8009720 <CDC_Transmit_FS+0x48>)
 8009706:	f7fe fdae 	bl	8008266 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800970a:	4805      	ldr	r0, [pc, #20]	; (8009720 <CDC_Transmit_FS+0x48>)
 800970c:	f7fe fdd8 	bl	80082c0 <USBD_CDC_TransmitPacket>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	2000079c 	.word	0x2000079c

08009724 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	4613      	mov	r3, r2
 8009730:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800973a:	4618      	mov	r0, r3
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	6039      	str	r1, [r7, #0]
 8009752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2212      	movs	r2, #18
 8009758:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800975a:	4b03      	ldr	r3, [pc, #12]	; (8009768 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	20000150 	.word	0x20000150

0800976c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2204      	movs	r2, #4
 800977c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	20000164 	.word	0x20000164

08009790 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d105      	bne.n	80097ae <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	4907      	ldr	r1, [pc, #28]	; (80097c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80097a6:	4808      	ldr	r0, [pc, #32]	; (80097c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80097a8:	f7ff fdf3 	bl	8009392 <USBD_GetString>
 80097ac:	e004      	b.n	80097b8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4904      	ldr	r1, [pc, #16]	; (80097c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80097b2:	4805      	ldr	r0, [pc, #20]	; (80097c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80097b4:	f7ff fded 	bl	8009392 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097b8:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	2000123c 	.word	0x2000123c
 80097c8:	08009fcc 	.word	0x08009fcc

080097cc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	4904      	ldr	r1, [pc, #16]	; (80097ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80097dc:	4804      	ldr	r0, [pc, #16]	; (80097f0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80097de:	f7ff fdd8 	bl	8009392 <USBD_GetString>
  return USBD_StrDesc;
 80097e2:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	2000123c 	.word	0x2000123c
 80097f0:	08009fe4 	.word	0x08009fe4

080097f4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	221a      	movs	r2, #26
 8009804:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009806:	f000 f843 	bl	8009890 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800980a:	4b02      	ldr	r3, [pc, #8]	; (8009814 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000168 	.word	0x20000168

08009818 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800982e:	4808      	ldr	r0, [pc, #32]	; (8009850 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009830:	f7ff fdaf 	bl	8009392 <USBD_GetString>
 8009834:	e004      	b.n	8009840 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4904      	ldr	r1, [pc, #16]	; (800984c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800983a:	4805      	ldr	r0, [pc, #20]	; (8009850 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800983c:	f7ff fda9 	bl	8009392 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	2000123c 	.word	0x2000123c
 8009850:	08009ff8 	.word	0x08009ff8

08009854 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d105      	bne.n	8009872 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	4907      	ldr	r1, [pc, #28]	; (8009888 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800986a:	4808      	ldr	r0, [pc, #32]	; (800988c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800986c:	f7ff fd91 	bl	8009392 <USBD_GetString>
 8009870:	e004      	b.n	800987c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4904      	ldr	r1, [pc, #16]	; (8009888 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009876:	4805      	ldr	r0, [pc, #20]	; (800988c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009878:	f7ff fd8b 	bl	8009392 <USBD_GetString>
  }
  return USBD_StrDesc;
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	2000123c 	.word	0x2000123c
 800988c:	0800a004 	.word	0x0800a004

08009890 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009896:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <Get_SerialNum+0x44>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <Get_SerialNum+0x48>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <Get_SerialNum+0x4c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098b6:	2208      	movs	r2, #8
 80098b8:	4909      	ldr	r1, [pc, #36]	; (80098e0 <Get_SerialNum+0x50>)
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f814 	bl	80098e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098c0:	2204      	movs	r2, #4
 80098c2:	4908      	ldr	r1, [pc, #32]	; (80098e4 <Get_SerialNum+0x54>)
 80098c4:	68b8      	ldr	r0, [r7, #8]
 80098c6:	f000 f80f 	bl	80098e8 <IntToUnicode>
  }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	1fff7590 	.word	0x1fff7590
 80098d8:	1fff7594 	.word	0x1fff7594
 80098dc:	1fff7598 	.word	0x1fff7598
 80098e0:	2000016a 	.word	0x2000016a
 80098e4:	2000017a 	.word	0x2000017a

080098e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	75fb      	strb	r3, [r7, #23]
 80098fe:	e027      	b.n	8009950 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	2b09      	cmp	r3, #9
 8009906:	d80b      	bhi.n	8009920 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	b2da      	uxtb	r2, r3
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4619      	mov	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	440b      	add	r3, r1
 8009918:	3230      	adds	r2, #48	; 0x30
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e00a      	b.n	8009936 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0f1b      	lsrs	r3, r3, #28
 8009924:	b2da      	uxtb	r2, r3
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4619      	mov	r1, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	440b      	add	r3, r1
 8009930:	3237      	adds	r2, #55	; 0x37
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	3301      	adds	r3, #1
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4413      	add	r3, r2
 8009946:	2200      	movs	r2, #0
 8009948:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	3301      	adds	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
 8009950:	7dfa      	ldrb	r2, [r7, #23]
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	429a      	cmp	r2, r3
 8009956:	d3d3      	bcc.n	8009900 <IntToUnicode+0x18>
  }
}
 8009958:	bf00      	nop
 800995a:	371c      	adds	r7, #28
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a0d      	ldr	r2, [pc, #52]	; (80099a8 <HAL_PCD_MspInit+0x44>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d113      	bne.n	800999e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009976:	4b0d      	ldr	r3, [pc, #52]	; (80099ac <HAL_PCD_MspInit+0x48>)
 8009978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997a:	4a0c      	ldr	r2, [pc, #48]	; (80099ac <HAL_PCD_MspInit+0x48>)
 800997c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009980:	6593      	str	r3, [r2, #88]	; 0x58
 8009982:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <HAL_PCD_MspInit+0x48>)
 8009984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800998e:	2200      	movs	r2, #0
 8009990:	2100      	movs	r1, #0
 8009992:	2014      	movs	r0, #20
 8009994:	f7f8 f913 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009998:	2014      	movs	r0, #20
 800999a:	f7f8 f92a 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	40005c00 	.word	0x40005c00
 80099ac:	40021000 	.word	0x40021000

080099b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fe fd76 	bl	80084b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	440b      	add	r3, r1
 80099f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	4619      	mov	r1, r3
 80099fe:	f7fe fdae 	bl	800855e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	440b      	add	r3, r1
 8009a2a:	333c      	adds	r3, #60	; 0x3c
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7fe fdf7 	bl	8008624 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fefb 	bl	8008848 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a62:	2301      	movs	r3, #1
 8009a64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d001      	beq.n	8009a72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a6e:	f7f7 fc6d 	bl	800134c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a78:	7bfa      	ldrb	r2, [r7, #15]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fea8 	bl	80087d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe fe61 	bl	8008750 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fea3 	bl	80087f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <HAL_PCD_SuspendCallback+0x30>)
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	4a03      	ldr	r2, [pc, #12]	; (8009ac8 <HAL_PCD_SuspendCallback+0x30>)
 8009aba:	f043 0306 	orr.w	r3, r3, #6
 8009abe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	e000ed00 	.word	0xe000ed00

08009acc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009adc:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <HAL_PCD_ResumeCallback+0x34>)
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	4a07      	ldr	r2, [pc, #28]	; (8009b00 <HAL_PCD_ResumeCallback+0x34>)
 8009ae2:	f023 0306 	bic.w	r3, r3, #6
 8009ae6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ae8:	f000 f9fa 	bl	8009ee0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe fe92 	bl	800881c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	e000ed00 	.word	0xe000ed00

08009b04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009b0c:	4a2b      	ldr	r2, [pc, #172]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a29      	ldr	r2, [pc, #164]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009b1c:	4b27      	ldr	r3, [pc, #156]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b1e:	4a28      	ldr	r2, [pc, #160]	; (8009bc0 <USBD_LL_Init+0xbc>)
 8009b20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b22:	4b26      	ldr	r3, [pc, #152]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b24:	2208      	movs	r2, #8
 8009b26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b28:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b2e:	4b23      	ldr	r3, [pc, #140]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b30:	2202      	movs	r2, #2
 8009b32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009b34:	4b21      	ldr	r3, [pc, #132]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b3a:	4b20      	ldr	r3, [pc, #128]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009b40:	4b1e      	ldr	r3, [pc, #120]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b46:	4b1d      	ldr	r3, [pc, #116]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b4c:	481b      	ldr	r0, [pc, #108]	; (8009bbc <USBD_LL_Init+0xb8>)
 8009b4e:	f7f8 fa37 	bl	8001fc0 <HAL_PCD_Init>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009b58:	f7f7 fbf8 	bl	800134c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b62:	2318      	movs	r3, #24
 8009b64:	2200      	movs	r2, #0
 8009b66:	2100      	movs	r1, #0
 8009b68:	f7f9 fd25 	bl	80035b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b72:	2358      	movs	r3, #88	; 0x58
 8009b74:	2200      	movs	r2, #0
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	f7f9 fd1d 	bl	80035b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b82:	23c0      	movs	r3, #192	; 0xc0
 8009b84:	2200      	movs	r2, #0
 8009b86:	2181      	movs	r1, #129	; 0x81
 8009b88:	f7f9 fd15 	bl	80035b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b96:	2200      	movs	r2, #0
 8009b98:	2101      	movs	r1, #1
 8009b9a:	f7f9 fd0c 	bl	80035b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2182      	movs	r1, #130	; 0x82
 8009bac:	f7f9 fd03 	bl	80035b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	2000143c 	.word	0x2000143c
 8009bc0:	40005c00 	.word	0x40005c00

08009bc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f8 fad5 	bl	800218a <HAL_PCD_Start>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f980 	bl	8009eec <USBD_Get_USB_Status>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	4608      	mov	r0, r1
 8009c04:	4611      	mov	r1, r2
 8009c06:	461a      	mov	r2, r3
 8009c08:	4603      	mov	r3, r0
 8009c0a:	70fb      	strb	r3, [r7, #3]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70bb      	strb	r3, [r7, #2]
 8009c10:	4613      	mov	r3, r2
 8009c12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c22:	78bb      	ldrb	r3, [r7, #2]
 8009c24:	883a      	ldrh	r2, [r7, #0]
 8009c26:	78f9      	ldrb	r1, [r7, #3]
 8009c28:	f7f8 fc44 	bl	80024b4 <HAL_PCD_EP_Open>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 f95a 	bl	8009eec <USBD_Get_USB_Status>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7f8 fc8b 	bl	8002580 <HAL_PCD_EP_Close>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f93b 	bl	8009eec <USBD_Get_USB_Status>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f8 fd4c 	bl	8002740 <HAL_PCD_EP_SetStall>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f91c 	bl	8009eec <USBD_Get_USB_Status>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7f8 fd8d 	bl	8002800 <HAL_PCD_EP_ClrStall>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f8fd 	bl	8009eec <USBD_Get_USB_Status>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	da0c      	bge.n	8009d36 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d22:	68f9      	ldr	r1, [r7, #12]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	440b      	add	r3, r1
 8009d30:	3302      	adds	r3, #2
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	e00b      	b.n	8009d4e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d36:	78fb      	ldrb	r3, [r7, #3]
 8009d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	00db      	lsls	r3, r3, #3
 8009d46:	440b      	add	r3, r1
 8009d48:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009d4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d74:	78fa      	ldrb	r2, [r7, #3]
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f8 fb76 	bl	800246a <HAL_PCD_SetAddress>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 f8b1 	bl	8009eec <USBD_Get_USB_Status>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	607a      	str	r2, [r7, #4]
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	460b      	mov	r3, r1
 8009da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009db6:	7af9      	ldrb	r1, [r7, #11]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	f7f8 fc7d 	bl	80026ba <HAL_PCD_EP_Transmit>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f890 	bl	8009eec <USBD_Get_USB_Status>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b086      	sub	sp, #24
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	460b      	mov	r3, r1
 8009de8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009df8:	7af9      	ldrb	r1, [r7, #11]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	f7f8 fc07 	bl	8002610 <HAL_PCD_EP_Receive>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 f86f 	bl	8009eec <USBD_Get_USB_Status>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e12:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e2e:	78fa      	ldrb	r2, [r7, #3]
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7f8 fc29 	bl	800268a <HAL_PCD_EP_GetRxCount>
 8009e38:	4603      	mov	r3, r0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <HAL_PCDEx_LPM_Callback+0x18>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d013      	beq.n	8009e82 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009e5a:	e023      	b.n	8009ea4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009e64:	f000 f83c 	bl	8009ee0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e68:	4b10      	ldr	r3, [pc, #64]	; (8009eac <HAL_PCDEx_LPM_Callback+0x68>)
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	4a0f      	ldr	r2, [pc, #60]	; (8009eac <HAL_PCDEx_LPM_Callback+0x68>)
 8009e6e:	f023 0306 	bic.w	r3, r3, #6
 8009e72:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fcce 	bl	800881c <USBD_LL_Resume>
    break;
 8009e80:	e010      	b.n	8009ea4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fcb2 	bl	80087f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <HAL_PCDEx_LPM_Callback+0x68>)
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	4a04      	ldr	r2, [pc, #16]	; (8009eac <HAL_PCDEx_LPM_Callback+0x68>)
 8009e9c:	f043 0306 	orr.w	r3, r3, #6
 8009ea0:	6113      	str	r3, [r2, #16]
    break;
 8009ea2:	bf00      	nop
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	e000ed00 	.word	0xe000ed00

08009eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009eb8:	4b03      	ldr	r3, [pc, #12]	; (8009ec8 <USBD_static_malloc+0x18>)
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	200001ec 	.word	0x200001ec

08009ecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]

}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009ee4:	f7f6 fcbc 	bl	8000860 <SystemClock_Config>
}
 8009ee8:	bf00      	nop
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009efa:	79fb      	ldrb	r3, [r7, #7]
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d817      	bhi.n	8009f30 <USBD_Get_USB_Status+0x44>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBD_Get_USB_Status+0x1c>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f19 	.word	0x08009f19
 8009f0c:	08009f1f 	.word	0x08009f1f
 8009f10:	08009f25 	.word	0x08009f25
 8009f14:	08009f2b 	.word	0x08009f2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1c:	e00b      	b.n	8009f36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	73fb      	strb	r3, [r7, #15]
    break;
 8009f22:	e008      	b.n	8009f36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f24:	2301      	movs	r3, #1
 8009f26:	73fb      	strb	r3, [r7, #15]
    break;
 8009f28:	e005      	b.n	8009f36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2e:	e002      	b.n	8009f36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f30:	2303      	movs	r3, #3
 8009f32:	73fb      	strb	r3, [r7, #15]
    break;
 8009f34:	bf00      	nop
  }
  return usb_status;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <__libc_init_array>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	4e0d      	ldr	r6, [pc, #52]	; (8009f7c <__libc_init_array+0x38>)
 8009f48:	4c0d      	ldr	r4, [pc, #52]	; (8009f80 <__libc_init_array+0x3c>)
 8009f4a:	1ba4      	subs	r4, r4, r6
 8009f4c:	10a4      	asrs	r4, r4, #2
 8009f4e:	2500      	movs	r5, #0
 8009f50:	42a5      	cmp	r5, r4
 8009f52:	d109      	bne.n	8009f68 <__libc_init_array+0x24>
 8009f54:	4e0b      	ldr	r6, [pc, #44]	; (8009f84 <__libc_init_array+0x40>)
 8009f56:	4c0c      	ldr	r4, [pc, #48]	; (8009f88 <__libc_init_array+0x44>)
 8009f58:	f000 f82c 	bl	8009fb4 <_init>
 8009f5c:	1ba4      	subs	r4, r4, r6
 8009f5e:	10a4      	asrs	r4, r4, #2
 8009f60:	2500      	movs	r5, #0
 8009f62:	42a5      	cmp	r5, r4
 8009f64:	d105      	bne.n	8009f72 <__libc_init_array+0x2e>
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f6c:	4798      	blx	r3
 8009f6e:	3501      	adds	r5, #1
 8009f70:	e7ee      	b.n	8009f50 <__libc_init_array+0xc>
 8009f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f76:	4798      	blx	r3
 8009f78:	3501      	adds	r5, #1
 8009f7a:	e7f2      	b.n	8009f62 <__libc_init_array+0x1e>
 8009f7c:	0800a024 	.word	0x0800a024
 8009f80:	0800a024 	.word	0x0800a024
 8009f84:	0800a024 	.word	0x0800a024
 8009f88:	0800a028 	.word	0x0800a028

08009f8c <memcpy>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	1e43      	subs	r3, r0, #1
 8009f90:	440a      	add	r2, r1
 8009f92:	4291      	cmp	r1, r2
 8009f94:	d100      	bne.n	8009f98 <memcpy+0xc>
 8009f96:	bd10      	pop	{r4, pc}
 8009f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa0:	e7f7      	b.n	8009f92 <memcpy+0x6>

08009fa2 <memset>:
 8009fa2:	4402      	add	r2, r0
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d100      	bne.n	8009fac <memset+0xa>
 8009faa:	4770      	bx	lr
 8009fac:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb0:	e7f9      	b.n	8009fa6 <memset+0x4>
	...

08009fb4 <_init>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr

08009fc0 <_fini>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	bf00      	nop
 8009fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc6:	bc08      	pop	{r3}
 8009fc8:	469e      	mov	lr, r3
 8009fca:	4770      	bx	lr
