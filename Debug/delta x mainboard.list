
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009984  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb4  08009bb4  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08009bb4  08009bb4  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bb4  08009bb4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08009bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000190  08009d4c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08009d4c  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad80  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003465  00000000  00000000  0003af40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bde  00000000  00000000  00060ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4342  00000000  00000000  00072ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136e13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b44 	.word	0x08009b44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08009b44 	.word	0x08009b44

08000218 <CDC_On_Receive>:
volatile uint8_t motor1_target_rpm = 0;
volatile uint8_t motor2_target_rpm = 0;
volatile uint8_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fc74 	bl	8009b1c <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001ac 	.word	0x200001ac
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001d4 	.word	0x200001d4

08000258 <Set_Motor_Speed>:

int min_duty = 20000;
int max_duty = 65000;
int max_speed = 100;

inline void Set_Motor_Speed(volatile uint32_t * channel_a, volatile uint32_t * channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b087      	sub	sp, #28
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	int speed_cof = (max_duty - min_duty) / max_speed;
 8000264:	4b25      	ldr	r3, [pc, #148]	; (80002fc <Set_Motor_Speed+0xa4>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b25      	ldr	r3, [pc, #148]	; (8000300 <Set_Motor_Speed+0xa8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1ad2      	subs	r2, r2, r3
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <Set_Motor_Speed+0xac>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	fb92 f3f3 	sdiv	r3, r2, r3
 8000276:	617b      	str	r3, [r7, #20]
	int speed_cof_n = speed_cof * -1;
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	425b      	negs	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
	if (motor_speed > 0) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b00      	cmp	r3, #0
 8000282:	dd14      	ble.n	80002ae <Set_Motor_Speed+0x56>
		// forward
		if (motor_speed <= 100) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b64      	cmp	r3, #100	; 0x64
 8000288:	dc0a      	bgt.n	80002a0 <Set_Motor_Speed+0x48>
			// 0 to 100 compact range
			*channel_a = motor_speed * speed_cof + min_duty;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	fb02 f203 	mul.w	r2, r2, r3
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <Set_Motor_Speed+0xa8>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4413      	add	r3, r2
 8000298:	461a      	mov	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	e002      	b.n	80002a6 <Set_Motor_Speed+0x4e>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 80002ac:	e020      	b.n	80002f0 <Set_Motor_Speed+0x98>
	} else if (motor_speed < 0) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da17      	bge.n	80002e4 <Set_Motor_Speed+0x8c>
		if (motor_speed >= -100) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002ba:	db0a      	blt.n	80002d2 <Set_Motor_Speed+0x7a>
			*channel_b = motor_speed * speed_cof_n + min_duty;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	fb02 f203 	mul.w	r2, r2, r3
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <Set_Motor_Speed+0xa8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	461a      	mov	r2, r3
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	e004      	b.n	80002dc <Set_Motor_Speed+0x84>
			*channel_b = motor_speed * -1;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	425b      	negs	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
}
 80002e2:	e005      	b.n	80002f0 <Set_Motor_Speed+0x98>
		*channel_a = 0;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	371c      	adds	r7, #28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000000 	.word	0x20000000
 8000304:	20000008 	.word	0x20000008

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f001 f8eb 	bl	80014e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000310:	f000 f8c8 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f000 fd1c 	bl	8000d50 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000318:	f000 faa4 	bl	8000864 <MX_TIM4_Init>
  MX_TIM8_Init();
 800031c:	f000 fb2e 	bl	800097c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000320:	f000 fb9c 	bl	8000a5c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000324:	f000 fc20 	bl	8000b68 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000328:	f000 f924 	bl	8000574 <MX_TIM1_Init>
  MX_TIM2_Init();
 800032c:	f000 f9d2 	bl	80006d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000330:	f000 fa24 	bl	800077c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000334:	f000 faec 	bl	8000910 <MX_TIM7_Init>
  MX_TIM17_Init();
 8000338:	f000 fc90 	bl	8000c5c <MX_TIM17_Init>
  MX_USB_Device_Init();
 800033c:	f008 fed2 	bl	80090e4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000340:	2104      	movs	r1, #4
 8000342:	483e      	ldr	r0, [pc, #248]	; (800043c <main+0x134>)
 8000344:	f004 f9cc 	bl	80046e0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000348:	2104      	movs	r1, #4
 800034a:	483d      	ldr	r0, [pc, #244]	; (8000440 <main+0x138>)
 800034c:	f004 f9c8 	bl	80046e0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000350:	2104      	movs	r1, #4
 8000352:	483c      	ldr	r0, [pc, #240]	; (8000444 <main+0x13c>)
 8000354:	f004 f9c4 	bl	80046e0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000358:	2100      	movs	r1, #0
 800035a:	483b      	ldr	r0, [pc, #236]	; (8000448 <main+0x140>)
 800035c:	f004 f81a 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000360:	2104      	movs	r1, #4
 8000362:	4839      	ldr	r0, [pc, #228]	; (8000448 <main+0x140>)
 8000364:	f004 f816 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000368:	2108      	movs	r1, #8
 800036a:	4837      	ldr	r0, [pc, #220]	; (8000448 <main+0x140>)
 800036c:	f004 f812 	bl	8004394 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000370:	4b36      	ldr	r3, [pc, #216]	; (800044c <main+0x144>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000376:	4b35      	ldr	r3, [pc, #212]	; (800044c <main+0x144>)
 8000378:	2200      	movs	r2, #0
 800037a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 800037c:	4b33      	ldr	r3, [pc, #204]	; (800044c <main+0x144>)
 800037e:	2200      	movs	r2, #0
 8000380:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000382:	2100      	movs	r1, #0
 8000384:	4832      	ldr	r0, [pc, #200]	; (8000450 <main+0x148>)
 8000386:	f004 f805 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800038a:	2104      	movs	r1, #4
 800038c:	4830      	ldr	r0, [pc, #192]	; (8000450 <main+0x148>)
 800038e:	f004 f801 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000392:	2108      	movs	r1, #8
 8000394:	482e      	ldr	r0, [pc, #184]	; (8000450 <main+0x148>)
 8000396:	f003 fffd 	bl	8004394 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 800039a:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <main+0x14c>)
 800039c:	2200      	movs	r2, #0
 800039e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <main+0x14c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <main+0x14c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80003ac:	2100      	movs	r1, #0
 80003ae:	482a      	ldr	r0, [pc, #168]	; (8000458 <main+0x150>)
 80003b0:	f003 fff0 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80003b4:	2100      	movs	r1, #0
 80003b6:	4829      	ldr	r0, [pc, #164]	; (800045c <main+0x154>)
 80003b8:	f003 ffec 	bl	8004394 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80003bc:	2100      	movs	r1, #0
 80003be:	4828      	ldr	r0, [pc, #160]	; (8000460 <main+0x158>)
 80003c0:	f003 ffe8 	bl	8004394 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <main+0x15c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <main+0x160>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <main+0x164>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 80003d6:	4826      	ldr	r0, [pc, #152]	; (8000470 <main+0x168>)
 80003d8:	f003 ff1a 	bl	8004210 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 80003dc:	4b25      	ldr	r3, [pc, #148]	; (8000474 <main+0x16c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d1fa      	bne.n	80003dc <main+0xd4>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80003e6:	2120      	movs	r1, #32
 80003e8:	4823      	ldr	r0, [pc, #140]	; (8000478 <main+0x170>)
 80003ea:	f001 fb97 	bl	8001b1c <HAL_GPIO_TogglePin>
		command_received = 0;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <main+0x16c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]

		feedback.thrower = 666;
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <main+0x174>)
 80003f6:	f240 229a 	movw	r2, #666	; 0x29a
 80003fa:	60da      	str	r2, [r3, #12]

		Set_Motor_Speed(&(TIM1->CCR3), &(TIM1->CCR2), command.motor1);
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <main+0x178>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	4920      	ldr	r1, [pc, #128]	; (8000484 <main+0x17c>)
 8000404:	4820      	ldr	r0, [pc, #128]	; (8000488 <main+0x180>)
 8000406:	f7ff ff27 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <main+0x178>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	461a      	mov	r2, r3
 8000410:	491e      	ldr	r1, [pc, #120]	; (800048c <main+0x184>)
 8000412:	481f      	ldr	r0, [pc, #124]	; (8000490 <main+0x188>)
 8000414:	f7ff ff20 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <main+0x178>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	461a      	mov	r2, r3
 800041e:	491d      	ldr	r1, [pc, #116]	; (8000494 <main+0x18c>)
 8000420:	481d      	ldr	r0, [pc, #116]	; (8000498 <main+0x190>)
 8000422:	f7ff ff19 	bl	8000258 <Set_Motor_Speed>

		command_received_period = current_period;
 8000426:	4b1d      	ldr	r3, [pc, #116]	; (800049c <main+0x194>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <main+0x198>)
 800042e:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000430:	2114      	movs	r1, #20
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <main+0x174>)
 8000434:	f008 ff18 	bl	8009268 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000438:	e7d0      	b.n	80003dc <main+0xd4>
 800043a:	bf00      	nop
 800043c:	200005c8 	.word	0x200005c8
 8000440:	2000044c 	.word	0x2000044c
 8000444:	20000400 	.word	0x20000400
 8000448:	2000057c 	.word	0x2000057c
 800044c:	40012c00 	.word	0x40012c00
 8000450:	20000530 	.word	0x20000530
 8000454:	40000400 	.word	0x40000400
 8000458:	20000498 	.word	0x20000498
 800045c:	20000614 	.word	0x20000614
 8000460:	200004e4 	.word	0x200004e4
 8000464:	40014000 	.word	0x40014000
 8000468:	40014400 	.word	0x40014400
 800046c:	40014800 	.word	0x40014800
 8000470:	20000660 	.word	0x20000660
 8000474:	200001d4 	.word	0x200001d4
 8000478:	48000400 	.word	0x48000400
 800047c:	200001c0 	.word	0x200001c0
 8000480:	200001ac 	.word	0x200001ac
 8000484:	40012c38 	.word	0x40012c38
 8000488:	40012c3c 	.word	0x40012c3c
 800048c:	4000043c 	.word	0x4000043c
 8000490:	40012c34 	.word	0x40012c34
 8000494:	40000438 	.word	0x40000438
 8000498:	40000434 	.word	0x40000434
 800049c:	200001d5 	.word	0x200001d5
 80004a0:	200001d6 	.word	0x200001d6

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b0a4      	sub	sp, #144	; 0x90
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004ae:	2238      	movs	r2, #56	; 0x38
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f009 fb3d 	bl	8009b32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2244      	movs	r2, #68	; 0x44
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f009 fb2f 	bl	8009b32 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f002 fea3 	bl	8003220 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80004da:	2322      	movs	r3, #34	; 0x22
 80004dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e4:	2340      	movs	r3, #64	; 0x40
 80004e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004e8:	2301      	movs	r3, #1
 80004ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ec:	2302      	movs	r3, #2
 80004ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f0:	2302      	movs	r3, #2
 80004f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80004f8:	2314      	movs	r3, #20
 80004fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004fe:	2302      	movs	r3, #2
 8000500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000504:	2302      	movs	r3, #2
 8000506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800050a:	2302      	movs	r3, #2
 800050c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000514:	4618      	mov	r0, r3
 8000516:	f002 ff37 	bl	8003388 <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000520:	f000 fcf4 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	2303      	movs	r3, #3
 800052a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000538:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800053c:	2104      	movs	r1, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fa3a 	bl	80039b8 <HAL_RCC_ClockConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800054a:	f000 fcdf 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000554:	2300      	movs	r3, #0
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fc10 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000566:	f000 fcd1 	bl	8000f0c <Error_Handler>
  }
}
 800056a:	bf00      	nop
 800056c:	3790      	adds	r7, #144	; 0x90
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b098      	sub	sp, #96	; 0x60
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000586:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2234      	movs	r2, #52	; 0x34
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f009 fac6 	bl	8009b32 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005a6:	4b49      	ldr	r3, [pc, #292]	; (80006cc <MX_TIM1_Init+0x158>)
 80005a8:	4a49      	ldr	r2, [pc, #292]	; (80006d0 <MX_TIM1_Init+0x15c>)
 80005aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005ac:	4b47      	ldr	r3, [pc, #284]	; (80006cc <MX_TIM1_Init+0x158>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b46      	ldr	r3, [pc, #280]	; (80006cc <MX_TIM1_Init+0x158>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005b8:	4b44      	ldr	r3, [pc, #272]	; (80006cc <MX_TIM1_Init+0x158>)
 80005ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	4b42      	ldr	r3, [pc, #264]	; (80006cc <MX_TIM1_Init+0x158>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <MX_TIM1_Init+0x158>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <MX_TIM1_Init+0x158>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d2:	483e      	ldr	r0, [pc, #248]	; (80006cc <MX_TIM1_Init+0x158>)
 80005d4:	f003 fe86 	bl	80042e4 <HAL_TIM_PWM_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80005de:	f000 fc95 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e2:	2300      	movs	r3, #0
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005e6:	2300      	movs	r3, #0
 80005e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f2:	4619      	mov	r1, r3
 80005f4:	4835      	ldr	r0, [pc, #212]	; (80006cc <MX_TIM1_Init+0x158>)
 80005f6:	f004 ff63 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000600:	f000 fc84 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060c:	2300      	movs	r3, #0
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	4828      	ldr	r0, [pc, #160]	; (80006cc <MX_TIM1_Init+0x158>)
 800062a:	f004 fa65 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000634:	f000 fc6a 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800063c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000640:	2204      	movs	r2, #4
 8000642:	4619      	mov	r1, r3
 8000644:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_TIM1_Init+0x158>)
 8000646:	f004 fa57 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000650:	f000 fc5c 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800065c:	2208      	movs	r2, #8
 800065e:	4619      	mov	r1, r3
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <MX_TIM1_Init+0x158>)
 8000662:	f004 fa49 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800066c:	f000 fc4e 	bl	8000f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000688:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM1_Init+0x158>)
 80006ae:	f004 ff89 	bl	80055c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80006b8:	f000 fc28 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM1_Init+0x158>)
 80006be:	f000 fda9 	bl	8001214 <HAL_TIM_MspPostInit>

}
 80006c2:	bf00      	nop
 80006c4:	3760      	adds	r7, #96	; 0x60
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000057c 	.word	0x2000057c
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2224      	movs	r2, #36	; 0x24
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f009 fa25 	bl	8009b32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_TIM2_Init+0xa4>)
 80006f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_TIM2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800071a:	2303      	movs	r3, #3
 800071c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000732:	2301      	movs	r3, #1
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000746:	f003 ff25 	bl	8004594 <HAL_TIM_Encoder_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000750:	f000 fbdc 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_TIM2_Init+0xa4>)
 8000762:	f004 fead 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800076c:	f000 fbce 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	; 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200005c8 	.word	0x200005c8

0800077c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a0:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MX_TIM3_Init+0xe0>)
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <MX_TIM3_Init+0xe4>)
 80007a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <MX_TIM3_Init+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_TIM3_Init+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_TIM3_Init+0xe0>)
 80007b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_TIM3_Init+0xe0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_TIM3_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <MX_TIM3_Init+0xe0>)
 80007c8:	f003 fd8c 	bl	80042e4 <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007d2:	f000 fb9b 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	481d      	ldr	r0, [pc, #116]	; (800085c <MX_TIM3_Init+0xe0>)
 80007e6:	f004 fe6b 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007f0:	f000 fb8c 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	; 0x60
 80007f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_TIM3_Init+0xe0>)
 800080c:	f004 f974 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000816:	f000 fb79 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_TIM3_Init+0xe0>)
 8000826:	f004 f967 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000830:	f000 fb6c 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	2208      	movs	r2, #8
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM3_Init+0xe0>)
 8000840:	f004 f95a 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800084a:	f000 fb5f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM3_Init+0xe0>)
 8000850:	f000 fce0 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000530 	.word	0x20000530
 8000860:	40000400 	.word	0x40000400

08000864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2224      	movs	r2, #36	; 0x24
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 f95d 	bl	8009b32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_TIM4_Init+0xa4>)
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <MX_TIM4_Init+0xa8>)
 8000886:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_TIM4_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_TIM4_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_TIM4_Init+0xa4>)
 8000896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM4_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM4_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008a8:	2303      	movs	r3, #3
 80008aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b0:	2301      	movs	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c0:	2301      	movs	r3, #1
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_TIM4_Init+0xa4>)
 80008d4:	f003 fe5e 	bl	8004594 <HAL_TIM_Encoder_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80008de:	f000 fb15 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_TIM4_Init+0xa4>)
 80008f0:	f004 fde6 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80008fa:	f000 fb07 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000044c 	.word	0x2000044c
 800090c:	40000800 	.word	0x40000800

08000910 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_TIM7_Init+0x64>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_TIM7_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_TIM7_Init+0x64>)
 8000928:	2228      	movs	r2, #40	; 0x28
 800092a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_TIM7_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_TIM7_Init+0x64>)
 8000934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000938:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_TIM7_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_TIM7_Init+0x64>)
 8000942:	f003 fc0d 	bl	8004160 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800094c:	f000 fade 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_TIM7_Init+0x64>)
 800095e:	f004 fdaf 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 fad0 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000660 	.word	0x20000660
 8000978:	40001400 	.word	0x40001400

0800097c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09a      	sub	sp, #104	; 0x68
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000982:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000986:	2224      	movs	r2, #36	; 0x24
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f009 f8d1 	bl	8009b32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f009 f8c5 	bl	8009b32 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009aa:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <MX_TIM8_Init+0xdc>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_TIM8_Init+0xd8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009d4:	2303      	movs	r3, #3
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009dc:	2301      	movs	r3, #1
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e8:	2300      	movs	r3, #0
 80009ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ec:	2301      	movs	r3, #1
 80009ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009fc:	4619      	mov	r1, r3
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <MX_TIM8_Init+0xd8>)
 8000a00:	f003 fdc8 	bl	8004594 <HAL_TIM_Encoder_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000a0a:	f000 fa7f 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM8_Init+0xd8>)
 8000a22:	f004 fd4d 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000a2c:	f000 fa6e 	bl	8000f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM8_Init+0xd8>)
 8000a3e:	f004 fdc1 	bl	80055c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000a48:	f000 fa60 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3768      	adds	r7, #104	; 0x68
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000400 	.word	0x20000400
 8000a58:	40013400 	.word	0x40013400

08000a5c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b098      	sub	sp, #96	; 0x60
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2234      	movs	r2, #52	; 0x34
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f009 f852 	bl	8009b32 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000a90:	4a34      	ldr	r2, [pc, #208]	; (8000b64 <MX_TIM15_Init+0x108>)
 8000a92:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000aba:	4829      	ldr	r0, [pc, #164]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000abc:	f003 fc12 	bl	80042e4 <HAL_TIM_PWM_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 fa21 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ad2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4821      	ldr	r0, [pc, #132]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000ada:	f004 fcf1 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 fa12 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000b0e:	f003 fff3 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000b18:	f000 f9f8 	bl	8000f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000b44:	f004 fd3e 	bl	80055c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b4e:	f000 f9dd 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_TIM15_Init+0x104>)
 8000b54:	f000 fb5e 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000b58:	bf00      	nop
 8000b5a:	3760      	adds	r7, #96	; 0x60
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000498 	.word	0x20000498
 8000b64:	40014000 	.word	0x40014000

08000b68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2234      	movs	r2, #52	; 0x34
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 ffd2 	bl	8009b32 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000b90:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <MX_TIM16_Init+0xf0>)
 8000b92:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bba:	4826      	ldr	r0, [pc, #152]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000bbc:	f003 fad0 	bl	8004160 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000bc6:	f000 f9a1 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bca:	4822      	ldr	r0, [pc, #136]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000bcc:	f003 fb8a 	bl	80042e4 <HAL_TIM_PWM_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000bd6:	f000 f999 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2360      	movs	r3, #96	; 0x60
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000be6:	2300      	movs	r3, #0
 8000be8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4815      	ldr	r0, [pc, #84]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000c00:	f003 ff7a 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 f97f 	bl	8000f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000c36:	f004 fcc5 	bl	80055c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000c40:	f000 f964 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <MX_TIM16_Init+0xec>)
 8000c46:	f000 fae5 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	; 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000614 	.word	0x20000614
 8000c58:	40014400 	.word	0x40014400

08000c5c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2234      	movs	r2, #52	; 0x34
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f008 ff58 	bl	8009b32 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000c84:	4a31      	ldr	r2, [pc, #196]	; (8000d4c <MX_TIM17_Init+0xf0>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000cb0:	f003 fa56 	bl	8004160 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000cba:	f000 f927 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000cbe:	4822      	ldr	r0, [pc, #136]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000cc0:	f003 fb10 	bl	80042e4 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000cca:	f000 f91f 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4815      	ldr	r0, [pc, #84]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000cf4:	f003 ff00 	bl	8004af8 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000cfe:	f000 f905 	bl	8000f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	4807      	ldr	r0, [pc, #28]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000d2a:	f004 fc4b 	bl	80055c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000d34:	f000 f8ea 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_TIM17_Init+0xec>)
 8000d3a:	f000 fa6b 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	; 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200004e4 	.word	0x200004e4
 8000d4c:	40014800 	.word	0x40014800

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_GPIO_Init+0x90>)
 8000d9c:	f000 fea6 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da0:	2308      	movs	r3, #8
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <MX_GPIO_Init+0x90>)
 8000db4:	f000 fd18 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db8:	2320      	movs	r3, #32
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_GPIO_Init+0x90>)
 8000dd0:	f000 fd0a 	bl	80017e8 <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	48000400 	.word	0x48000400

08000de4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000e00:	8bfb      	ldrh	r3, [r7, #30]
 8000e02:	4a39      	ldr	r2, [pc, #228]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	b292      	uxth	r2, r2
 8000e08:	1a9b      	subs	r3, r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000e0c:	8bbb      	ldrh	r3, [r7, #28]
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	b292      	uxth	r2, r2
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000e18:	8b7b      	ldrh	r3, [r7, #26]
 8000e1a:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e1c:	8812      	ldrh	r2, [r2, #0]
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000e24:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e26:	8bfb      	ldrh	r3, [r7, #30]
 8000e28:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000e2a:	4a30      	ldr	r2, [pc, #192]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e2c:	8bbb      	ldrh	r3, [r7, #28]
 8000e2e:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000e30:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e32:	8b7b      	ldrh	r3, [r7, #26]
 8000e34:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e42:	fb82 1203 	smull	r1, r2, r2, r3
 8000e46:	1252      	asrs	r2, r2, #9
 8000e48:	17db      	asrs	r3, r3, #31
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e4e:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e56:	fb02 f303 	mul.w	r3, r2, r3
 8000e5a:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e60:	1252      	asrs	r2, r2, #9
 8000e62:	17db      	asrs	r3, r3, #31
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e68:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e76:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7a:	1252      	asrs	r2, r2, #9
 8000e7c:	17db      	asrs	r3, r3, #31
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e82:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e86:	f240 229a 	movw	r2, #666	; 0x29a
 8000e8a:	60da      	str	r2, [r3, #12]

	// pwm pid


	// timeout
	current_period += 1;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e98:	701a      	strb	r2, [r3, #0]
	if (current_period - command_received_period  > 60) {
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b3c      	cmp	r3, #60	; 0x3c
 8000eac:	dd11      	ble.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0xee>
		TIM1->CCR1 = 0;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40000800 	.word	0x40000800
 8000ee4:	40013400 	.word	0x40013400
 8000ee8:	200001d8 	.word	0x200001d8
 8000eec:	200001da 	.word	0x200001da
 8000ef0:	200001dc 	.word	0x200001dc
 8000ef4:	6bca1af3 	.word	0x6bca1af3
 8000ef8:	200001c0 	.word	0x200001c0
 8000efc:	200001d5 	.word	0x200001d5
 8000f00:	200001d6 	.word	0x200001d6
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	40000400 	.word	0x40000400

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f52:	f002 fa09 	bl	8003368 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_TIM_PWM_MspInit+0x80>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10c      	bne.n	8000f90 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f8e:	e022      	b.n	8000fd6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <HAL_TIM_PWM_MspInit+0x88>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10c      	bne.n	8000fb4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
}
 8000fb2:	e010      	b.n	8000fd6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x84>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40014000 	.word	0x40014000

08000ff4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001014:	d129      	bne.n	800106a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a53      	ldr	r2, [pc, #332]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001046:	2303      	movs	r3, #3
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001056:	2301      	movs	r3, #1
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f000 fbc0 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001068:	e079      	b.n	800115e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <HAL_TIM_Encoder_MspInit+0x178>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d128      	bne.n	80010c6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6593      	str	r3, [r2, #88]	; 0x58
 8001080:	4b39      	ldr	r3, [pc, #228]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a35      	ldr	r2, [pc, #212]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010b4:	2302      	movs	r3, #2
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	482c      	ldr	r0, [pc, #176]	; (8001170 <HAL_TIM_Encoder_MspInit+0x17c>)
 80010c0:	f000 fb92 	bl	80017e8 <HAL_GPIO_Init>
}
 80010c4:	e04b      	b.n	800115e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <HAL_TIM_Encoder_MspInit+0x180>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d146      	bne.n	800115e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 80010d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010da:	6613      	str	r3, [r2, #96]	; 0x60
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	4a18      	ldr	r2, [pc, #96]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_TIM_Encoder_MspInit+0x174>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800112a:	2302      	movs	r3, #2
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f000 fb56 	bl	80017e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800114e:	230a      	movs	r3, #10
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_TIM_Encoder_MspInit+0x17c>)
 800115a:	f000 fb45 	bl	80017e8 <HAL_GPIO_Init>
}
 800115e:	bf00      	nop
 8001160:	3738      	adds	r7, #56	; 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	40000800 	.word	0x40000800
 8001170:	48000400 	.word	0x48000400
 8001174:	40013400 	.word	0x40013400

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d114      	bne.n	80011b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2037      	movs	r0, #55	; 0x37
 80011a8:	f000 fae9 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011ac:	2037      	movs	r0, #55	; 0x37
 80011ae:	f000 fb00 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011b2:	e022      	b.n	80011fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_TIM_Base_MspInit+0x94>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10c      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
}
 80011d6:	e010      	b.n	80011fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x98>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10b      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6613      	str	r3, [r2, #96]	; 0x60
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40001400 	.word	0x40001400
 8001208:	40021000 	.word	0x40021000
 800120c:	40014400 	.word	0x40014400
 8001210:	40014800 	.word	0x40014800

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a65      	ldr	r2, [pc, #404]	; (80013c8 <HAL_TIM_MspPostInit+0x1b4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11e      	bne.n	8001274 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b65      	ldr	r3, [pc, #404]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a64      	ldr	r2, [pc, #400]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800124e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001260:	2306      	movs	r3, #6
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f000 fabb 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001272:	e0a5      	b.n	80013c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a55      	ldr	r2, [pc, #340]	; (80013d0 <HAL_TIM_MspPostInit+0x1bc>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d139      	bne.n	80012f2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a52      	ldr	r2, [pc, #328]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012ae:	2350      	movs	r3, #80	; 0x50
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012be:	2302      	movs	r3, #2
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f000 fa8c 	bl	80017e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d0:	2301      	movs	r3, #1
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	483a      	ldr	r0, [pc, #232]	; (80013d4 <HAL_TIM_MspPostInit+0x1c0>)
 80012ec:	f000 fa7c 	bl	80017e8 <HAL_GPIO_Init>
}
 80012f0:	e066      	b.n	80013c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_TIM_MspPostInit+0x1c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d11d      	bne.n	8001338 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001314:	2304      	movs	r3, #4
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001324:	2309      	movs	r3, #9
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f000 fa59 	bl	80017e8 <HAL_GPIO_Init>
}
 8001336:	e043      	b.n	80013c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_TIM_MspPostInit+0x1c8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11c      	bne.n	800137c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800135a:	2310      	movs	r3, #16
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800136a:	2301      	movs	r3, #1
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <HAL_TIM_MspPostInit+0x1c0>)
 8001376:	f000 fa37 	bl	80017e8 <HAL_GPIO_Init>
}
 800137a:	e021      	b.n	80013c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_TIM_MspPostInit+0x1cc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11c      	bne.n	80013c0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_TIM_MspPostInit+0x1b8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80013ae:	2301      	movs	r3, #1
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f000 fa14 	bl	80017e8 <HAL_GPIO_Init>
}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40012c00 	.word	0x40012c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40000400 	.word	0x40000400
 80013d4:	48000400 	.word	0x48000400
 80013d8:	40014000 	.word	0x40014000
 80013dc:	40014400 	.word	0x40014400
 80013e0:	40014800 	.word	0x40014800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001438:	f000 f8a8 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USB_LP_IRQHandler+0x10>)
 8001446:	f000 fc8a 	bl	8001d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20001350 	.word	0x20001350

08001454 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <TIM7_IRQHandler+0x10>)
 800145a:	f003 f9ce 	bl	80047fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000660 	.word	0x20000660

08001468 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <SystemInit+0x28>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <SystemInit+0x28>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SystemInit+0x28>)
 800147e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001482:	609a      	str	r2, [r3, #8]
#endif
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001496:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490e      	ldr	r1, [pc, #56]	; (80014d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0b      	ldr	r4, [pc, #44]	; (80014e0 <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014be:	f7ff ffd3 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f008 fb07 	bl	8009ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c6:	f7fe ff1f 	bl	8000308 <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   r0, =_estack
 80014cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80014d8:	08009bbc 	.word	0x08009bbc
  ldr r2, =_sbss
 80014dc:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80014e0:	20001644 	.word	0x20001644

080014e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>

080014e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f939 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f80e 	bl	8001518 <HAL_InitTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	71fb      	strb	r3, [r7, #7]
 8001506:	e001      	b.n	800150c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001508:	f7ff fd08 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150c:	79fb      	ldrb	r3, [r7, #7]

}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_InitTick+0x68>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d022      	beq.n	8001572 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_InitTick+0x6c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_InitTick+0x68>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f944 	bl	80017ce <HAL_SYSTICK_Config>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	d809      	bhi.n	8001566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001552:	2200      	movs	r2, #0
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	f04f 30ff 	mov.w	r0, #4294967295
 800155a:	f000 f910 	bl	800177e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_InitTick+0x70>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e007      	b.n	8001576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e004      	b.n	8001576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e001      	b.n	8001576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000014 	.word	0x20000014
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000010 	.word	0x20000010

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x1c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x20>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x1c>)
 800159c:	6013      	str	r3, [r2, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	200006ac 	.word	0x200006ac
 80015ac:	20000014 	.word	0x20000014

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200006ac 	.word	0x200006ac

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff40 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff33 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa4 	bl	8001724 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017f6:	e15a      	b.n	8001aae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 814c 	beq.w	8001aa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d00b      	beq.n	8001830 <HAL_GPIO_Init+0x48>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001824:	2b11      	cmp	r3, #17
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0xea>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80a6 	beq.w	8001aa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195c:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6613      	str	r3, [r2, #96]	; 0x60
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_GPIO_Init+0x2e4>)
 800196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001974:	4a56      	ldr	r2, [pc, #344]	; (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199e:	d01f      	beq.n	80019e0 <HAL_GPIO_Init+0x1f8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x2ec>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d019      	beq.n	80019dc <HAL_GPIO_Init+0x1f4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x2f0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_GPIO_Init+0x1f0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x2f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00d      	beq.n	80019d4 <HAL_GPIO_Init+0x1ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2f8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_Init+0x1e8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2fc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_GPIO_Init+0x1e4>
 80019c8:	2305      	movs	r3, #5
 80019ca:	e00a      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019cc:	2306      	movs	r3, #6
 80019ce:	e008      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019d8:	2302      	movs	r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019e0:	2300      	movs	r3, #0
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f2:	4937      	ldr	r1, [pc, #220]	; (8001ad0 <HAL_GPIO_Init+0x2e8>)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a24:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4e:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_GPIO_Init+0x300>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f47f ae9d 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48001400 	.word	0x48001400
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43d9      	mvns	r1, r3
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af06      	add	r7, sp, #24
 8001b56:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0d7      	b.n	8001d12 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f007 fcbc 	bl	80094f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fe18 	bl	80057be <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e04c      	b.n	8001c2e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	b298      	uxth	r0, r3
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3336      	adds	r3, #54	; 0x36
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3303      	adds	r3, #3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3338      	adds	r3, #56	; 0x38
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	333c      	adds	r3, #60	; 0x3c
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	3340      	adds	r3, #64	; 0x40
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d3ad      	bcc.n	8001b94 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e044      	b.n	8001cc8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3b5      	bcc.n	8001c3e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	687e      	ldr	r6, [r7, #4]
 8001cda:	466d      	mov	r5, sp
 8001cdc:	f106 0410 	add.w	r4, r6, #16
 8001ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	602b      	str	r3, [r5, #0]
 8001ce8:	1d33      	adds	r3, r6, #4
 8001cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f003 fd81 	bl	80057f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f001 fa5e 	bl	80031cc <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_Start+0x16>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e012      	b.n	8001d56 <HAL_PCD_Start+0x3c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fd27 	bl	8005790 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fd13 	bl	8007772 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 fd18 	bl	80077a0 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d7a:	d102      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fb5b 	bl	8002438 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 fd0a 	bl	80077a0 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d96:	d112      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001daa:	b292      	uxth	r2, r2
 8001dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f007 fc1a 	bl	80095ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001db6:	2100      	movs	r1, #0
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f91e 	bl	8001ffa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 fcec 	bl	80077a0 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dd2:	d10b      	bne.n	8001dec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f005 fcd5 	bl	80077a0 <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e00:	d10b      	bne.n	8001e1a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e14:	b292      	uxth	r2, r2
 8001e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f005 fcbe 	bl	80077a0 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2e:	d133      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	b292      	uxth	r2, r2
 8001e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e72:	2100      	movs	r1, #0
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f007 fdad 	bl	80099d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f007 fbee 	bl	800965c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fc7f 	bl	80077a0 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eac:	d126      	bne.n	8001efc <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0208 	orr.w	r2, r2, #8
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f007 fb96 	bl	8009628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 fc4d 	bl	80077a0 <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d13f      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f22:	b292      	uxth	r2, r2
 8001f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d12b      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0204 	orr.w	r2, r2, #4
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0208 	orr.w	r2, r2, #8
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f80:	2101      	movs	r1, #1
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f007 fd26 	bl	80099d4 <HAL_PCDEx_LPM_Callback>
 8001f88:	e002      	b.n	8001f90 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f007 fb4c 	bl	8009628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f005 fc03 	bl	80077a0 <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f007 fb05 	bl	80095ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fbe9 	bl	80077a0 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fec:	b292      	uxth	r2, r2
 8001fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_PCD_SetAddress+0x1a>
 8002010:	2302      	movs	r3, #2
 8002012:	e013      	b.n	800203c <HAL_PCD_SetAddress+0x42>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f005 fb8c 	bl	800774a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	70fb      	strb	r3, [r7, #3]
 8002056:	460b      	mov	r3, r1
 8002058:	803b      	strh	r3, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	da0e      	bge.n	8002088 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	705a      	strb	r2, [r3, #1]
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 0207 	and.w	r2, r3, #7
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020b2:	883a      	ldrh	r2, [r7, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	78ba      	ldrb	r2, [r7, #2]
 80020bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020d0:	78bb      	ldrb	r3, [r7, #2]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d102      	bne.n	80020dc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_PCD_EP_Open+0xa6>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e00e      	b.n	8002108 <HAL_PCD_EP_Open+0xc4>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fb9d 	bl	8005838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002106:	7afb      	ldrb	r3, [r7, #11]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800211c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da0e      	bge.n	8002142 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	705a      	strb	r2, [r3, #1]
 8002140:	e00e      	b.n	8002160 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 0207 	and.w	r2, r3, #7
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_PCD_EP_Close+0x6a>
 8002176:	2302      	movs	r3, #2
 8002178:	e00e      	b.n	8002198 <HAL_PCD_EP_Close+0x88>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68f9      	ldr	r1, [r7, #12]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fec3 	bl	8005f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	460b      	mov	r3, r1
 80021ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	f003 0207 	and.w	r2, r3, #7
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e0:	7afb      	ldrb	r3, [r7, #11]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6979      	ldr	r1, [r7, #20]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 f876 	bl	80062ee <USB_EPStartXfer>
 8002202:	e005      	b.n	8002210 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6979      	ldr	r1, [r7, #20]
 800220a:	4618      	mov	r0, r3
 800220c:	f004 f86f 	bl	80062ee <USB_EPStartXfer>
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 0207 	and.w	r2, r3, #7
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800223c:	681b      	ldr	r3, [r3, #0]
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	460b      	mov	r3, r1
 8002258:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2201      	movs	r2, #1
 8002294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	b2da      	uxtb	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6979      	ldr	r1, [r7, #20]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f81b 	bl	80062ee <USB_EPStartXfer>
 80022b8:	e005      	b.n	80022c6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6979      	ldr	r1, [r7, #20]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 f814 	bl	80062ee <USB_EPStartXfer>
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 0207 	and.w	r2, r3, #7
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d901      	bls.n	80022ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e04c      	b.n	8002388 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da0e      	bge.n	8002314 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	705a      	strb	r2, [r3, #1]
 8002312:	e00c      	b.n	800232e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	b2da      	uxtb	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_PCD_EP_SetStall+0x7e>
 800234a:	2302      	movs	r3, #2
 800234c:	e01c      	b.n	8002388 <HAL_PCD_EP_SetStall+0xb8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	4618      	mov	r0, r3
 800235e:	f005 f8f5 	bl	800754c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	2b00      	cmp	r3, #0
 800236a:	d108      	bne.n	800237e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f005 fa21 	bl	80077c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d901      	bls.n	80023ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e040      	b.n	8002430 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da0e      	bge.n	80023d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	705a      	strb	r2, [r3, #1]
 80023d2:	e00e      	b.n	80023f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 0207 	and.w	r2, r3, #7
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_PCD_EP_ClrStall+0x82>
 800240e:	2302      	movs	r3, #2
 8002410:	e00e      	b.n	8002430 <HAL_PCD_EP_ClrStall+0xa0>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	4618      	mov	r0, r3
 8002422:	f005 f8e4 	bl	80075ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08e      	sub	sp, #56	; 0x38
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002440:	e2d1      	b.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800244a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800244c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002458:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 8152 	bne.w	8002706 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d150      	bne.n	800250e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247c:	81fb      	strh	r3, [r7, #14]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	89fb      	ldrh	r3, [r7, #14]
 8002484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248c:	b29b      	uxth	r3, r3
 800248e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3328      	adds	r3, #40	; 0x28
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	441a      	add	r2, r3
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024cc:	2100      	movs	r1, #0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f007 f863 	bl	800959a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8282 	beq.w	80029e6 <PCD_EP_ISR_Handler+0x5ae>
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 827d 	bne.w	80029e6 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b292      	uxth	r2, r2
 8002500:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800250c:	e26b      	b.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800251e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d032      	beq.n	800258e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002530:	b29b      	uxth	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	4413      	add	r3, r2
 8002542:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002562:	b29b      	uxth	r3, r3
 8002564:	f005 f979 	bl	800785a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29a      	uxth	r2, r3
 8002570:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002574:	4013      	ands	r3, r2
 8002576:	823b      	strh	r3, [r7, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	8a3a      	ldrh	r2, [r7, #16]
 800257e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002582:	b292      	uxth	r2, r2
 8002584:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f006 ffda 	bl	8009540 <HAL_PCD_SetupStageCallback>
 800258c:	e22b      	b.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800258e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002592:	2b00      	cmp	r3, #0
 8002594:	f280 8227 	bge.w	80029e6 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a4:	4013      	ands	r3, r2
 80025a6:	83bb      	strh	r3, [r7, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	8bba      	ldrh	r2, [r7, #28]
 80025ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d019      	beq.n	800261a <PCD_EP_ISR_Handler+0x1e2>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d015      	beq.n	800261a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f005 f92b 	bl	800785a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	441a      	add	r2, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002612:	2100      	movs	r1, #0
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f006 ffa5 	bl	8009564 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4413      	add	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d112      	bne.n	8002668 <PCD_EP_ISR_Handler+0x230>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800264c:	b29a      	uxth	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002660:	b29a      	uxth	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e02f      	b.n	80026c8 <PCD_EP_ISR_Handler+0x290>
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b3e      	cmp	r3, #62	; 0x3e
 800266e:	d813      	bhi.n	8002698 <PCD_EP_ISR_Handler+0x260>
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <PCD_EP_ISR_Handler+0x252>
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	3301      	adds	r3, #1
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	b29b      	uxth	r3, r3
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	b29a      	uxth	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	e017      	b.n	80026c8 <PCD_EP_ISR_Handler+0x290>
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <PCD_EP_ISR_Handler+0x27a>
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	3b01      	subs	r3, #1
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d8:	827b      	strh	r3, [r7, #18]
 80026da:	8a7b      	ldrh	r3, [r7, #18]
 80026dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026e0:	827b      	strh	r3, [r7, #18]
 80026e2:	8a7b      	ldrh	r3, [r7, #18]
 80026e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026e8:	827b      	strh	r3, [r7, #18]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	8a7b      	ldrh	r3, [r7, #18]
 80026f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	b29b      	uxth	r3, r3
 8002702:	8013      	strh	r3, [r2, #0]
 8002704:	e16f      	b.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002718:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800271c:	2b00      	cmp	r3, #0
 800271e:	f280 80e4 	bge.w	80028ea <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29a      	uxth	r2, r3
 8002734:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002738:	4013      	ands	r3, r2
 800273a:	853b      	strh	r3, [r7, #40]	; 0x28
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800274c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002750:	b292      	uxth	r2, r2
 8002752:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002754:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	7b1b      	ldrb	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d120      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8083 	beq.w	80028a6 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	6959      	ldr	r1, [r3, #20]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	88da      	ldrh	r2, [r3, #6]
 80027ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ae:	f005 f854 	bl	800785a <USB_ReadPMA>
 80027b2:	e078      	b.n	80028a6 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d108      	bne.n	80027ce <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027be:	461a      	mov	r2, r3
 80027c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f91d 	bl	8002a02 <HAL_PCD_EP_DB_Receive>
 80027c8:	4603      	mov	r3, r0
 80027ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027cc:	e06b      	b.n	80028a6 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	441a      	add	r2, r3
 80027f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280a:	b29b      	uxth	r3, r3
 800280c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01f      	beq.n	8002868 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4413      	add	r3, r2
 8002842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800284e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002850:	2b00      	cmp	r3, #0
 8002852:	d028      	beq.n	80028a6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	6959      	ldr	r1, [r3, #20]
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	891a      	ldrh	r2, [r3, #8]
 8002860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002862:	f004 fffa 	bl	800785a <USB_ReadPMA>
 8002866:	e01e      	b.n	80028a6 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	4413      	add	r3, r2
 8002882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800288e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	6959      	ldr	r1, [r3, #20]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	895a      	ldrh	r2, [r3, #10]
 80028a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a2:	f004 ffda 	bl	800785a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ac:	441a      	add	r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b8:	441a      	add	r2, r3
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <PCD_EP_ISR_Handler+0x498>
 80028c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d206      	bcs.n	80028de <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f006 fe44 	bl	8009564 <HAL_PCD_DataOutStageCallback>
 80028dc:	e005      	b.n	80028ea <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 fd02 	bl	80062ee <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d078      	beq.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80028f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	843b      	strh	r3, [r7, #32]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	8c3b      	ldrh	r3, [r7, #32]
 8002934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293c:	b29b      	uxth	r3, r3
 800293e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	78db      	ldrb	r3, [r3, #3]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d108      	bne.n	800295a <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800294c:	2b02      	cmp	r3, #2
 800294e:	d144      	bne.n	80029da <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002950:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d13f      	bne.n	80029da <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8bfb      	ldrh	r3, [r7, #30]
 8002986:	429a      	cmp	r2, r3
 8002988:	d906      	bls.n	8002998 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	8bfb      	ldrh	r3, [r7, #30]
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e002      	b.n	800299e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f006 fdf4 	bl	800959a <HAL_PCD_DataInStageCallback>
 80029b2:	e018      	b.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
 80029ba:	441a      	add	r2, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	8bfb      	ldrh	r3, [r7, #30]
 80029c6:	441a      	add	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 fc8b 	bl	80062ee <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029d8:	e005      	b.n	80029e6 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029dc:	461a      	mov	r2, r3
 80029de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f917 	bl	8002c14 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f6ff ad25 	blt.w	8002442 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3738      	adds	r7, #56	; 0x38
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b088      	sub	sp, #32
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d07c      	beq.n	8002b14 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d306      	bcc.n	8002a58 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	8b7b      	ldrh	r3, [r7, #26]
 8002a50:	1ad2      	subs	r2, r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	619a      	str	r2, [r3, #24]
 8002a56:	e002      	b.n	8002a5e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d123      	bne.n	8002aae <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a80:	833b      	strh	r3, [r7, #24]
 8002a82:	8b3b      	ldrh	r3, [r7, #24]
 8002a84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a88:	833b      	strh	r3, [r7, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	441a      	add	r2, r3
 8002a98:	8b3b      	ldrh	r3, [r7, #24]
 8002a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01f      	beq.n	8002af8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	82fb      	strh	r3, [r7, #22]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	8afb      	ldrh	r3, [r7, #22]
 8002ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8085 	beq.w	8002c0a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6959      	ldr	r1, [r3, #20]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	891a      	ldrh	r2, [r3, #8]
 8002b0c:	8b7b      	ldrh	r3, [r7, #26]
 8002b0e:	f004 fea4 	bl	800785a <USB_ReadPMA>
 8002b12:	e07a      	b.n	8002c0a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d306      	bcc.n	8002b52 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	8b7b      	ldrh	r3, [r7, #26]
 8002b4a:	1ad2      	subs	r2, r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	619a      	str	r2, [r3, #24]
 8002b50:	e002      	b.n	8002b58 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d123      	bne.n	8002ba8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	83fb      	strh	r3, [r7, #30]
 8002b7c:	8bfb      	ldrh	r3, [r7, #30]
 8002b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b82:	83fb      	strh	r3, [r7, #30]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	8bfb      	ldrh	r3, [r7, #30]
 8002b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bcc:	83bb      	strh	r3, [r7, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	441a      	add	r2, r3
 8002bdc:	8bbb      	ldrh	r3, [r7, #28]
 8002bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bf2:	8b7b      	ldrh	r3, [r7, #26]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6959      	ldr	r1, [r3, #20]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	895a      	ldrh	r2, [r3, #10]
 8002c04:	8b7b      	ldrh	r3, [r7, #26]
 8002c06:	f004 fe28 	bl	800785a <USB_ReadPMA>
    }
  }

  return count;
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b092      	sub	sp, #72	; 0x48
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8130 	beq.w	8002e8e <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c52:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d906      	bls.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c64:	1ad2      	subs	r2, r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	619a      	str	r2, [r3, #24]
 8002c6a:	e002      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d12c      	bne.n	8002cd4 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f006 fc8a 	bl	800959a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 822d 	beq.w	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	827b      	strh	r3, [r7, #18]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	8a7b      	ldrh	r3, [r7, #18]
 8002cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]
 8002cd2:	e20b      	b.n	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01f      	beq.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	441a      	add	r2, r3
 8002d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 81e1 	bne.w	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d30:	441a      	add	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d3c:	441a      	add	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d309      	bcc.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	1ad2      	subs	r2, r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	621a      	str	r2, [r3, #32]
 8002d60:	e014      	b.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d76:	e009      	b.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d155      	bne.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	00da      	lsls	r2, r3, #3
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d112      	bne.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	e047      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x264>
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	2b3e      	cmp	r3, #62	; 0x3e
 8002dec:	d811      	bhi.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	3301      	adds	r3, #1
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	029b      	lsls	r3, r3, #10
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	e032      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x214>
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	029b      	lsls	r3, r3, #10
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	e01b      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	785b      	ldrb	r3, [r3, #1]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d117      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	00da      	lsls	r2, r3, #3
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6959      	ldr	r1, [r3, #20]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	891a      	ldrh	r2, [r3, #8]
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f004 fca6 	bl	80077d8 <USB_WritePMA>
 8002e8c:	e12e      	b.n	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	699a      	ldr	r2, [r3, #24]
 8002eb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d306      	bcc.n	8002ecc <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	619a      	str	r2, [r3, #24]
 8002eca:	e002      	b.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12c      	bne.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f006 fb5a 	bl	800959a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 80fd 	bne.w	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
 8002f32:	e0db      	b.n	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11f      	bne.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f58:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	441a      	add	r2, r3
 8002f68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 80b1 	bne.w	80030ec <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f90:	441a      	add	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d309      	bcc.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	621a      	str	r2, [r3, #32]
 8002fc0:	e014      	b.n	8002fec <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fd6:	e009      	b.n	8002fec <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d155      	bne.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x492>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	4413      	add	r3, r2
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	00da      	lsls	r2, r3, #3
 8003018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301a:	4413      	add	r3, r2
 800301c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003020:	643b      	str	r3, [r7, #64]	; 0x40
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d112      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x43a>
 8003028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003032:	b29a      	uxth	r2, r3
 8003034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003046:	b29a      	uxth	r2, r3
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	e044      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	2b3e      	cmp	r3, #62	; 0x3e
 8003052:	d811      	bhi.n	8003078 <HAL_PCD_EP_DB_Transmit+0x464>
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_PCD_EP_DB_Transmit+0x456>
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003066:	3301      	adds	r3, #1
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	b29b      	uxth	r3, r3
 800306e:	029b      	lsls	r3, r3, #10
 8003070:	b29a      	uxth	r2, r3
 8003072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	e02f      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308a:	3b01      	subs	r3, #1
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003090:	b29b      	uxth	r3, r3
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	b29b      	uxth	r3, r3
 8003096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800309a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	e018      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d114      	bne.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	4413      	add	r3, r2
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	00da      	lsls	r2, r3, #3
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	4413      	add	r3, r2
 80030ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6959      	ldr	r1, [r3, #20]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	895a      	ldrh	r2, [r3, #10]
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f004 fb76 	bl	80077d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003106:	823b      	strh	r3, [r7, #16]
 8003108:	8a3b      	ldrh	r3, [r7, #16]
 800310a:	f083 0310 	eor.w	r3, r3, #16
 800310e:	823b      	strh	r3, [r7, #16]
 8003110:	8a3b      	ldrh	r3, [r7, #16]
 8003112:	f083 0320 	eor.w	r3, r3, #32
 8003116:	823b      	strh	r3, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	8a3b      	ldrh	r3, [r7, #16]
 8003128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3748      	adds	r7, #72	; 0x48
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003146:	b480      	push	{r7}
 8003148:	b087      	sub	sp, #28
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	897b      	ldrh	r3, [r7, #10]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	e009      	b.n	8003190 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800317c:	897a      	ldrh	r2, [r7, #10]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003190:	893b      	ldrh	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	80da      	strh	r2, [r3, #6]
 80031a4:	e00b      	b.n	80031be <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2201      	movs	r2, #1
 80031aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003204:	b29b      	uxth	r3, r3
 8003206:	f043 0302 	orr.w	r3, r3, #2
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d141      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800322e:	4b4b      	ldr	r3, [pc, #300]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d131      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800323c:	4b47      	ldr	r3, [pc, #284]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003242:	4a46      	ldr	r2, [pc, #280]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324c:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003254:	4a41      	ldr	r2, [pc, #260]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325c:	4b40      	ldr	r3, [pc, #256]	; (8003360 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2232      	movs	r2, #50	; 0x32
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003272:	e002      	b.n	800327a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3b01      	subs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	d102      	bne.n	800328e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f2      	bne.n	8003274 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800328e:	4b33      	ldr	r3, [pc, #204]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329a:	d158      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e057      	b.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032a0:	4b2e      	ldr	r3, [pc, #184]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a6:	4a2d      	ldr	r2, [pc, #180]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032b0:	e04d      	b.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d141      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d131      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ce:	4a23      	ldr	r2, [pc, #140]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032e0:	4a1e      	ldr	r2, [pc, #120]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2232      	movs	r2, #50	; 0x32
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9b      	lsrs	r3, r3, #18
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	e002      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3b01      	subs	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d102      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f2      	bne.n	8003300 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d112      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e011      	b.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800333c:	e007      	b.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40007000 	.word	0x40007000
 8003360:	2000000c 	.word	0x2000000c
 8003364:	431bde83 	.word	0x431bde83

08003368 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003376:	6093      	str	r3, [r2, #8]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e308      	b.n	80039ac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4ba3      	ldr	r3, [pc, #652]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4ba0      	ldr	r3, [pc, #640]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d102      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3e>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_OscConfig+0x44>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b99      	ldr	r3, [pc, #612]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05b      	beq.n	8003490 <HAL_RCC_OscConfig+0x108>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d157      	bne.n	8003490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e2e3      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x74>
 80033ee:	4b91      	ldr	r3, [pc, #580]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a90      	ldr	r2, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x98>
 8003406:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a8a      	ldr	r2, [pc, #552]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a87      	ldr	r2, [pc, #540]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a80      	ldr	r2, [pc, #512]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f8b6 	bl	80015b0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe f8b2 	bl	80015b0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e2a8      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xc0>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f8a2 	bl	80015b0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe f89e 	bl	80015b0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e294      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003482:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0xe8>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d075      	beq.n	800358a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a8:	4b62      	ldr	r3, [pc, #392]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x136>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_OscConfig+0x13c>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11f      	bne.n	8003504 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034c4:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x154>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e267      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b55      	ldr	r3, [pc, #340]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	4952      	ldr	r1, [pc, #328]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034f0:	4b51      	ldr	r3, [pc, #324]	; (8003638 <HAL_RCC_OscConfig+0x2b0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe f80f 	bl	8001518 <HAL_InitTick>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d043      	beq.n	8003588 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e253      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a48      	ldr	r2, [pc, #288]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f84a 	bl	80015b0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe f846 	bl	80015b0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e23c      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003532:	4b40      	ldr	r3, [pc, #256]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	4939      	ldr	r1, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
 8003552:	e01a      	b.n	800358a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a36      	ldr	r2, [pc, #216]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe f826 	bl	80015b0 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe f822 	bl	80015b0 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e218      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1e0>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03c      	beq.n	8003610 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fd ffff 	bl	80015b0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fd fffb 	bl	80015b0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e1f1      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ef      	beq.n	80035b6 <HAL_RCC_OscConfig+0x22e>
 80035d6:	e01b      	b.n	8003610 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fd ffe2 	bl	80015b0 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fd ffde 	bl	80015b0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1d4      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ef      	bne.n	80035f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80ab 	beq.w	8003774 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_RCC_OscConfig+0x2b4>
 800362e:	2301      	movs	r3, #1
 8003630:	e005      	b.n	800363e <HAL_RCC_OscConfig+0x2b6>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	20000010 	.word	0x20000010
 800363c:	2300      	movs	r3, #0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4baf      	ldr	r3, [pc, #700]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	4aae      	ldr	r2, [pc, #696]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	6593      	str	r3, [r2, #88]	; 0x58
 800364e:	4bac      	ldr	r3, [pc, #688]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800365a:	2301      	movs	r3, #1
 800365c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365e:	4ba9      	ldr	r3, [pc, #676]	; (8003904 <HAL_RCC_OscConfig+0x57c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d118      	bne.n	800369c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366a:	4ba6      	ldr	r3, [pc, #664]	; (8003904 <HAL_RCC_OscConfig+0x57c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4aa5      	ldr	r2, [pc, #660]	; (8003904 <HAL_RCC_OscConfig+0x57c>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003676:	f7fd ff9b 	bl	80015b0 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fd ff97 	bl	80015b0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e18d      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003690:	4b9c      	ldr	r3, [pc, #624]	; (8003904 <HAL_RCC_OscConfig+0x57c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d108      	bne.n	80036b6 <HAL_RCC_OscConfig+0x32e>
 80036a4:	4b96      	ldr	r3, [pc, #600]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	4a95      	ldr	r2, [pc, #596]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b4:	e024      	b.n	8003700 <HAL_RCC_OscConfig+0x378>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d110      	bne.n	80036e0 <HAL_RCC_OscConfig+0x358>
 80036be:	4b90      	ldr	r3, [pc, #576]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	4a8e      	ldr	r2, [pc, #568]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ce:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	4a8a      	ldr	r2, [pc, #552]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036de:	e00f      	b.n	8003700 <HAL_RCC_OscConfig+0x378>
 80036e0:	4b87      	ldr	r3, [pc, #540]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	4a86      	ldr	r2, [pc, #536]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f0:	4b83      	ldr	r3, [pc, #524]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	4a82      	ldr	r2, [pc, #520]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fd ff52 	bl	80015b0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fd ff4e 	bl	80015b0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e142      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ed      	beq.n	8003710 <HAL_RCC_OscConfig+0x388>
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7fd ff3b 	bl	80015b0 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd ff37 	bl	80015b0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e12b      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ed      	bne.n	800373e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003762:	7ffb      	ldrb	r3, [r7, #31]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	4a64      	ldr	r2, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d03c      	beq.n	80037fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003788:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	4a5c      	ldr	r2, [pc, #368]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd ff0a 	bl	80015b0 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a0:	f7fd ff06 	bl	80015b0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0fc      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80037b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <HAL_RCC_OscConfig+0x418>
 80037c0:	e01b      	b.n	80037fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037c2:	4b4f      	ldr	r3, [pc, #316]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80037c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c8:	4a4d      	ldr	r2, [pc, #308]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fd feed 	bl	80015b0 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037da:	f7fd fee9 	bl	80015b0 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0df      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ec:	4b44      	ldr	r3, [pc, #272]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80037ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ef      	bne.n	80037da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80d3 	beq.w	80039aa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003804:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f000 808d 	beq.w	800392c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d15a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a38      	ldr	r2, [pc, #224]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd fec3 	bl	80015b0 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382e:	f7fd febf 	bl	80015b0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0b5      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <HAL_RCC_OscConfig+0x580>)
 8003852:	4013      	ands	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6a11      	ldr	r1, [r2, #32]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385c:	3a01      	subs	r2, #1
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003866:	0212      	lsls	r2, r2, #8
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0552      	lsls	r2, r2, #21
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003886:	06d2      	lsls	r2, r2, #27
 8003888:	430a      	orrs	r2, r1
 800388a:	491d      	ldr	r1, [pc, #116]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800388c:	4313      	orrs	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fe82 	bl	80015b0 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fe7e 	bl	80015b0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e074      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x528>
 80038ce:	e06c      	b.n	80039aa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <HAL_RCC_OscConfig+0x578>)
 80038ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fd fe5a 	bl	80015b0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fe:	e00e      	b.n	800391e <HAL_RCC_OscConfig+0x596>
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
 8003908:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fd fe50 	bl	80015b0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e046      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_RCC_OscConfig+0x62c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x584>
 800392a:	e03e      	b.n	80039aa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e039      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_RCC_OscConfig+0x62c>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0203 	and.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	429a      	cmp	r2, r3
 800394a:	d12c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	3b01      	subs	r3, #1
 8003958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d123      	bne.n	80039a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d11b      	bne.n	80039a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d113      	bne.n	80039a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	3b01      	subs	r3, #1
 800398c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e11e      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b91      	ldr	r3, [pc, #580]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d910      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b8e      	ldr	r3, [pc, #568]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 020f 	bic.w	r2, r3, #15
 80039e6:	498c      	ldr	r1, [pc, #560]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b8a      	ldr	r3, [pc, #552]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e106      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d073      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d129      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a14:	4b81      	ldr	r3, [pc, #516]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0f4      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a24:	f000 f966 	bl	8003cf4 <RCC_GetSysClockFreqFromPLLSource>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4a7c      	ldr	r2, [pc, #496]	; (8003c20 <HAL_RCC_ClockConfig+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d93f      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a32:	4b7a      	ldr	r3, [pc, #488]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d033      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d12f      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5a:	4a70      	ldr	r2, [pc, #448]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e024      	b.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0c6      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0be      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a90:	f000 f8ce 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4a61      	ldr	r2, [pc, #388]	; (8003c20 <HAL_RCC_ClockConfig+0x268>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d909      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa6:	4a5d      	ldr	r2, [pc, #372]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b5a      	ldr	r3, [pc, #360]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4957      	ldr	r1, [pc, #348]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fd fd74 	bl	80015b0 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fd fd70 	bl	80015b0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e095      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b4e      	ldr	r3, [pc, #312]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a42      	ldr	r2, [pc, #264]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b24:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4936      	ldr	r1, [pc, #216]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d21d      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 020f 	bic.w	r2, r3, #15
 8003b70:	4929      	ldr	r1, [pc, #164]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b78:	f7fd fd1a 	bl	80015b0 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fd fd16 	bl	80015b0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e03b      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1ed      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4917      	ldr	r1, [pc, #92]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490f      	ldr	r1, [pc, #60]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be2:	f000 f825 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003be6:	4601      	mov	r1, r0
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <HAL_RCC_ClockConfig+0x26c>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <HAL_RCC_ClockConfig+0x270>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_RCC_ClockConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fc86 	bl	8001518 <HAL_InitTick>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40022000 	.word	0x40022000
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	04c4b400 	.word	0x04c4b400
 8003c24:	08009ba4 	.word	0x08009ba4
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	20000010 	.word	0x20000010

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d102      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e047      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c54:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e03e      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c5a:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d136      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c66:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c84:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8e:	68d2      	ldr	r2, [r2, #12]
 8003c90:	0a12      	lsrs	r2, r2, #8
 8003c92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	617b      	str	r3, [r7, #20]
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	0a12      	lsrs	r2, r2, #8
 8003cac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
      break;
 8003cb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	0e5b      	lsrs	r3, r3, #25
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cd8:	693b      	ldr	r3, [r7, #16]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	007a1200 	.word	0x007a1200

08003cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d10c      	bne.n	8003d32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d18:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d22:	68d2      	ldr	r2, [r2, #12]
 8003d24:	0a12      	lsrs	r2, r2, #8
 8003d26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
    break;
 8003d30:	e00c      	b.n	8003d4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3c:	68d2      	ldr	r2, [r2, #12]
 8003d3e:	0a12      	lsrs	r2, r2, #8
 8003d40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    break;
 8003d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0e5b      	lsrs	r3, r3, #25
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d66:	687b      	ldr	r3, [r7, #4]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40021000 	.word	0x40021000
 8003d78:	007a1200 	.word	0x007a1200
 8003d7c:	00f42400 	.word	0x00f42400

08003d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8098 	beq.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10d      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dca:	4b3a      	ldr	r3, [pc, #232]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a39      	ldr	r2, [pc, #228]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd6:	f7fd fbeb 	bl	80015b0 <HAL_GetTick>
 8003dda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ddc:	e009      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dde:	f7fd fbe7 	bl	80015b0 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d902      	bls.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	74fb      	strb	r3, [r7, #19]
        break;
 8003df0:	e005      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0ef      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d159      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e04:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d019      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3c:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fd fba7 	bl	80015b0 <HAL_GetTick>
 8003e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e64:	e00b      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fd fba3 	bl	80015b0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d902      	bls.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e7c:	e006      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ec      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea8:	e008      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	74bb      	strb	r3, [r7, #18]
 8003eae:	e005      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7c7b      	ldrb	r3, [r7, #17]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4ba6      	ldr	r3, [pc, #664]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	4aa5      	ldr	r2, [pc, #660]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eda:	4ba0      	ldr	r3, [pc, #640]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f023 0203 	bic.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	499c      	ldr	r1, [pc, #624]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003efc:	4b97      	ldr	r3, [pc, #604]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 020c 	bic.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4994      	ldr	r1, [pc, #592]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1e:	4b8f      	ldr	r3, [pc, #572]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	498b      	ldr	r1, [pc, #556]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f40:	4b86      	ldr	r3, [pc, #536]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4983      	ldr	r1, [pc, #524]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f62:	4b7e      	ldr	r3, [pc, #504]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	497a      	ldr	r1, [pc, #488]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f84:	4b75      	ldr	r3, [pc, #468]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	4972      	ldr	r1, [pc, #456]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4969      	ldr	r1, [pc, #420]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc8:	4b64      	ldr	r3, [pc, #400]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4961      	ldr	r1, [pc, #388]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fea:	4b5c      	ldr	r3, [pc, #368]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	4958      	ldr	r1, [pc, #352]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	4950      	ldr	r1, [pc, #320]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a4a      	ldr	r2, [pc, #296]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004044:	4b45      	ldr	r3, [pc, #276]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	4942      	ldr	r1, [pc, #264]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d105      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004064:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a3c      	ldr	r2, [pc, #240]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800407c:	4b37      	ldr	r3, [pc, #220]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	4934      	ldr	r1, [pc, #208]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800409a:	d105      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a2e      	ldr	r2, [pc, #184]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d015      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c2:	4926      	ldr	r1, [pc, #152]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d2:	d105      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	4918      	ldr	r1, [pc, #96]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410a:	d105      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4a12      	ldr	r2, [pc, #72]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004116:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004124:	4b0d      	ldr	r3, [pc, #52]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	490a      	ldr	r1, [pc, #40]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004142:	d105      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004150:	7cbb      	ldrb	r3, [r7, #18]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000

08004160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e049      	b.n	8004206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fff6 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 fde2 	bl	8004d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e04a      	b.n	80042be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a21      	ldr	r2, [pc, #132]	; (80042cc <HAL_TIM_Base_Start_IT+0xbc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d013      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x6c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x6c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x6c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d115      	bne.n	80042a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b06      	cmp	r3, #6
 800428c:	d015      	beq.n	80042ba <HAL_TIM_Base_Start_IT+0xaa>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d011      	beq.n	80042ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	e008      	b.n	80042ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e000      	b.n	80042bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	00010007 	.word	0x00010007

080042e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e049      	b.n	800438a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc fe2a 	bl	8000f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fd20 	bl	8004d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x24>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e03c      	b.n	8004432 <HAL_TIM_PWM_Start+0x9e>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d109      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x3e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	bf14      	ite	ne
 80043ca:	2301      	movne	r3, #1
 80043cc:	2300      	moveq	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e02f      	b.n	8004432 <HAL_TIM_PWM_Start+0x9e>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x58>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e022      	b.n	8004432 <HAL_TIM_PWM_Start+0x9e>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	d109      	bne.n	8004406 <HAL_TIM_PWM_Start+0x72>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e015      	b.n	8004432 <HAL_TIM_PWM_Start+0x9e>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x8c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e008      	b.n	8004432 <HAL_TIM_PWM_Start+0x9e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e097      	b.n	800456a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0xb6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	e023      	b.n	8004492 <HAL_TIM_PWM_Start+0xfe>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0xc6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	e01b      	b.n	8004492 <HAL_TIM_PWM_Start+0xfe>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0xd6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004468:	e013      	b.n	8004492 <HAL_TIM_PWM_Start+0xfe>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0xe6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004478:	e00b      	b.n	8004492 <HAL_TIM_PWM_Start+0xfe>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b10      	cmp	r3, #16
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0xf6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004488:	e003      	b.n	8004492 <HAL_TIM_PWM_Start+0xfe>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2202      	movs	r2, #2
 800448e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 ffea 	bl	8005474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <HAL_TIM_PWM_Start+0x1e0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x13e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_TIM_PWM_Start+0x1e4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x13e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	; (800457c <HAL_TIM_PWM_Start+0x1e8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x13e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <HAL_TIM_PWM_Start+0x1ec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x13e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <HAL_TIM_PWM_Start+0x1f0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x142>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_TIM_PWM_Start+0x144>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <HAL_TIM_PWM_Start+0x1e0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_TIM_PWM_Start+0x194>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d013      	beq.n	8004528 <HAL_TIM_PWM_Start+0x194>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a20      	ldr	r2, [pc, #128]	; (8004588 <HAL_TIM_PWM_Start+0x1f4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_TIM_PWM_Start+0x194>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1f      	ldr	r2, [pc, #124]	; (800458c <HAL_TIM_PWM_Start+0x1f8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_TIM_PWM_Start+0x194>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <HAL_TIM_PWM_Start+0x1e4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_TIM_PWM_Start+0x194>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a16      	ldr	r2, [pc, #88]	; (800457c <HAL_TIM_PWM_Start+0x1e8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d115      	bne.n	8004554 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <HAL_TIM_PWM_Start+0x1fc>)
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b06      	cmp	r3, #6
 8004538:	d015      	beq.n	8004566 <HAL_TIM_PWM_Start+0x1d2>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004540:	d011      	beq.n	8004566 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	e008      	b.n	8004566 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e000      	b.n	8004568 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	00010007 	.word	0x00010007

08004594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e097      	b.n	80046d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc fd19 	bl	8000ff4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80045d8:	f023 0307 	bic.w	r3, r3, #7
 80045dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f000 fbbd 	bl	8004d68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	4313      	orrs	r3, r2
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004634:	f023 030c 	bic.w	r3, r3, #12
 8004638:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	4313      	orrs	r3, r2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	011a      	lsls	r2, r3, #4
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	031b      	lsls	r3, r3, #12
 8004664:	4313      	orrs	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	4313      	orrs	r3, r2
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004700:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004708:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d110      	bne.n	8004732 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d102      	bne.n	800471c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004716:	7b7b      	ldrb	r3, [r7, #13]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d001      	beq.n	8004720 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e068      	b.n	80047f2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004730:	e031      	b.n	8004796 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d110      	bne.n	800475a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d102      	bne.n	8004744 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800473e:	7b3b      	ldrb	r3, [r7, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e054      	b.n	80047f2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004758:	e01d      	b.n	8004796 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d108      	bne.n	8004772 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004760:	7bbb      	ldrb	r3, [r7, #14]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004766:	7b7b      	ldrb	r3, [r7, #13]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d102      	bne.n	8004772 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800476c:	7b3b      	ldrb	r3, [r7, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e03d      	b.n	80047f2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_TIM_Encoder_Start+0xc2>
 800479c:	2b04      	cmp	r3, #4
 800479e:	d008      	beq.n	80047b2 <HAL_TIM_Encoder_Start+0xd2>
 80047a0:	e00f      	b.n	80047c2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fe62 	bl	8005474 <TIM_CCxChannelCmd>
      break;
 80047b0:	e016      	b.n	80047e0 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2201      	movs	r2, #1
 80047b8:	2104      	movs	r1, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fe5a 	bl	8005474 <TIM_CCxChannelCmd>
      break;
 80047c0:	e00e      	b.n	80047e0 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fe52 	bl	8005474 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	2104      	movs	r1, #4
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fe4b 	bl	8005474 <TIM_CCxChannelCmd>
      break;
 80047de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d122      	bne.n	8004856 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d11b      	bne.n	8004856 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f06f 0202 	mvn.w	r2, #2
 8004826:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fa75 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 8004842:	e005      	b.n	8004850 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fa67 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa78 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d122      	bne.n	80048aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d11b      	bne.n	80048aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0204 	mvn.w	r2, #4
 800487a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fa4b 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 8004896:	e005      	b.n	80048a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa3d 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa4e 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d122      	bne.n	80048fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d11b      	bne.n	80048fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0208 	mvn.w	r2, #8
 80048ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fa21 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 80048ea:	e005      	b.n	80048f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fa13 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa24 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d122      	bne.n	8004952 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b10      	cmp	r3, #16
 8004918:	d11b      	bne.n	8004952 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0210 	mvn.w	r2, #16
 8004922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2208      	movs	r2, #8
 8004928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f9f7 	bl	8004d2c <HAL_TIM_IC_CaptureCallback>
 800493e:	e005      	b.n	800494c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9e9 	bl	8004d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9fa 	bl	8004d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10e      	bne.n	800497e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d107      	bne.n	800497e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0201 	mvn.w	r2, #1
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fc fa33 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d10e      	bne.n	80049aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d107      	bne.n	80049aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 feb7 	bl	8005718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 feaa 	bl	800572c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9a8 	bl	8004d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0220 	mvn.w	r2, #32
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fe6a 	bl	8005704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3e:	d10f      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fe70 	bl	8005740 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6e:	d10f      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fe62 	bl	8005754 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9e:	d10f      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fe54 	bl	8005768 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ace:	d10f      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fe46 	bl	800577c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0fd      	b.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b14      	cmp	r3, #20
 8004b1e:	f200 80f0 	bhi.w	8004d02 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b7d 	.word	0x08004b7d
 8004b2c:	08004d03 	.word	0x08004d03
 8004b30:	08004d03 	.word	0x08004d03
 8004b34:	08004d03 	.word	0x08004d03
 8004b38:	08004bbd 	.word	0x08004bbd
 8004b3c:	08004d03 	.word	0x08004d03
 8004b40:	08004d03 	.word	0x08004d03
 8004b44:	08004d03 	.word	0x08004d03
 8004b48:	08004bff 	.word	0x08004bff
 8004b4c:	08004d03 	.word	0x08004d03
 8004b50:	08004d03 	.word	0x08004d03
 8004b54:	08004d03 	.word	0x08004d03
 8004b58:	08004c3f 	.word	0x08004c3f
 8004b5c:	08004d03 	.word	0x08004d03
 8004b60:	08004d03 	.word	0x08004d03
 8004b64:	08004d03 	.word	0x08004d03
 8004b68:	08004c81 	.word	0x08004c81
 8004b6c:	08004d03 	.word	0x08004d03
 8004b70:	08004d03 	.word	0x08004d03
 8004b74:	08004d03 	.word	0x08004d03
 8004b78:	08004cc1 	.word	0x08004cc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f980 	bl	8004e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6999      	ldr	r1, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	619a      	str	r2, [r3, #24]
      break;
 8004bba:	e0a3      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f9f0 	bl	8004fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	619a      	str	r2, [r3, #24]
      break;
 8004bfc:	e082      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa59 	bl	80050bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0208 	orr.w	r2, r2, #8
 8004c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0204 	bic.w	r2, r2, #4
 8004c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69d9      	ldr	r1, [r3, #28]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]
      break;
 8004c3c:	e062      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fac1 	bl	80051cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69d9      	ldr	r1, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	61da      	str	r2, [r3, #28]
      break;
 8004c7e:	e041      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fb2a 	bl	80052e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0208 	orr.w	r2, r2, #8
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0204 	bic.w	r2, r2, #4
 8004caa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cbe:	e021      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fb6e 	bl	80053a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	021a      	lsls	r2, r3, #8
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop

08004d18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <TIM_Base_SetConfig+0x104>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a39      	ldr	r2, [pc, #228]	; (8004e70 <TIM_Base_SetConfig+0x108>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a38      	ldr	r2, [pc, #224]	; (8004e74 <TIM_Base_SetConfig+0x10c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x38>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <TIM_Base_SetConfig+0x110>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <TIM_Base_SetConfig+0x104>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01b      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d017      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <TIM_Base_SetConfig+0x108>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <TIM_Base_SetConfig+0x10c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <TIM_Base_SetConfig+0x110>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <TIM_Base_SetConfig+0x114>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <TIM_Base_SetConfig+0x118>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <TIM_Base_SetConfig+0x11c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <TIM_Base_SetConfig+0x104>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_Base_SetConfig+0xe8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <TIM_Base_SetConfig+0x110>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <TIM_Base_SetConfig+0xe8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <TIM_Base_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_Base_SetConfig+0xe8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a0f      	ldr	r2, [pc, #60]	; (8004e80 <TIM_Base_SetConfig+0x118>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_Base_SetConfig+0xe8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a0e      	ldr	r2, [pc, #56]	; (8004e84 <TIM_Base_SetConfig+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d103      	bne.n	8004e58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	615a      	str	r2, [r3, #20]
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40000400 	.word	0x40000400
 8004e74:	40000800 	.word	0x40000800
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800

08004e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f023 0201 	bic.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 0302 	bic.w	r3, r3, #2
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <TIM_OC1_SetConfig+0x10c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_OC1_SetConfig+0x80>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a2b      	ldr	r2, [pc, #172]	; (8004f98 <TIM_OC1_SetConfig+0x110>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_OC1_SetConfig+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <TIM_OC1_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_OC1_SetConfig+0x80>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <TIM_OC1_SetConfig+0x118>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_OC1_SetConfig+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <TIM_OC1_SetConfig+0x11c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d10c      	bne.n	8004f22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0308 	bic.w	r3, r3, #8
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 0304 	bic.w	r3, r3, #4
 8004f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <TIM_OC1_SetConfig+0x10c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00f      	beq.n	8004f4a <TIM_OC1_SetConfig+0xc2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <TIM_OC1_SetConfig+0x110>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <TIM_OC1_SetConfig+0xc2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <TIM_OC1_SetConfig+0x114>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_OC1_SetConfig+0xc2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <TIM_OC1_SetConfig+0x118>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC1_SetConfig+0xc2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <TIM_OC1_SetConfig+0x11c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d111      	bne.n	8004f6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0210 	bic.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0320 	bic.w	r3, r3, #32
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <TIM_OC2_SetConfig+0x100>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_OC2_SetConfig+0x6c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a27      	ldr	r2, [pc, #156]	; (80050ac <TIM_OC2_SetConfig+0x104>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d10d      	bne.n	8005030 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <TIM_OC2_SetConfig+0x100>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_OC2_SetConfig+0xb0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <TIM_OC2_SetConfig+0x104>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_OC2_SetConfig+0xb0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <TIM_OC2_SetConfig+0x108>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC2_SetConfig+0xb0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <TIM_OC2_SetConfig+0x10c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC2_SetConfig+0xb0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <TIM_OC2_SetConfig+0x110>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d113      	bne.n	8005080 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800

080050bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <TIM_OC3_SetConfig+0xfc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC3_SetConfig+0x6a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a26      	ldr	r2, [pc, #152]	; (80051bc <TIM_OC3_SetConfig+0x100>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10d      	bne.n	8005142 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <TIM_OC3_SetConfig+0xfc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_OC3_SetConfig+0xae>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <TIM_OC3_SetConfig+0x100>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_OC3_SetConfig+0xae>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <TIM_OC3_SetConfig+0x104>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC3_SetConfig+0xae>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <TIM_OC3_SetConfig+0x108>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC3_SetConfig+0xae>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <TIM_OC3_SetConfig+0x10c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d113      	bne.n	8005192 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800521a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	031b      	lsls	r3, r3, #12
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a28      	ldr	r2, [pc, #160]	; (80052cc <TIM_OC4_SetConfig+0x100>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC4_SetConfig+0x6c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <TIM_OC4_SetConfig+0x104>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10d      	bne.n	8005254 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	031b      	lsls	r3, r3, #12
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005252:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <TIM_OC4_SetConfig+0x100>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00f      	beq.n	800527c <TIM_OC4_SetConfig+0xb0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <TIM_OC4_SetConfig+0x104>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <TIM_OC4_SetConfig+0xb0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <TIM_OC4_SetConfig+0x108>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_OC4_SetConfig+0xb0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <TIM_OC4_SetConfig+0x10c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC4_SetConfig+0xb0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_OC4_SetConfig+0x110>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d113      	bne.n	80052a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005282:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800528a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	019b      	lsls	r3, r3, #6
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40013400 	.word	0x40013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800

080052e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a17      	ldr	r2, [pc, #92]	; (8005394 <TIM_OC5_SetConfig+0xb4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00f      	beq.n	800535a <TIM_OC5_SetConfig+0x7a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a16      	ldr	r2, [pc, #88]	; (8005398 <TIM_OC5_SetConfig+0xb8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00b      	beq.n	800535a <TIM_OC5_SetConfig+0x7a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a15      	ldr	r2, [pc, #84]	; (800539c <TIM_OC5_SetConfig+0xbc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <TIM_OC5_SetConfig+0x7a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a14      	ldr	r2, [pc, #80]	; (80053a0 <TIM_OC5_SetConfig+0xc0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_OC5_SetConfig+0x7a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <TIM_OC5_SetConfig+0xc4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d109      	bne.n	800536e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	621a      	str	r2, [r3, #32]
}
 8005388:	bf00      	nop
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40013400 	.word	0x40013400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800

080053a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <TIM_OC6_SetConfig+0xb8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00f      	beq.n	8005424 <TIM_OC6_SetConfig+0x7c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <TIM_OC6_SetConfig+0xbc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_OC6_SetConfig+0x7c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a16      	ldr	r2, [pc, #88]	; (8005468 <TIM_OC6_SetConfig+0xc0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_OC6_SetConfig+0x7c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a15      	ldr	r2, [pc, #84]	; (800546c <TIM_OC6_SetConfig+0xc4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC6_SetConfig+0x7c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <TIM_OC6_SetConfig+0xc8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d109      	bne.n	8005438 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	029b      	lsls	r3, r3, #10
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2201      	movs	r2, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e065      	b.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d108      	bne.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005512:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d018      	beq.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d013      	beq.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00e      	beq.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10c      	bne.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40014000 	.word	0x40014000

080055c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055dc:	2302      	movs	r3, #2
 80055de:	e087      	b.n	80056f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a27      	ldr	r2, [pc, #156]	; (80056fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a25      	ldr	r2, [pc, #148]	; (8005700 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d106      	bne.n	800567c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d126      	bne.n	80056de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	051b      	lsls	r3, r3, #20
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0e      	ldr	r2, [pc, #56]	; (80056fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a0d      	ldr	r2, [pc, #52]	; (8005700 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d106      	bne.n	80056de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40012c00 	.word	0x40012c00
 8005700:	40013400 	.word	0x40013400

08005704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057c6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4013      	ands	r3, r2
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	f107 0014 	add.w	r0, r7, #20
 8005802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	b004      	add	sp, #16
 8005834:	4770      	bx	lr
	...

08005838 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005838:	b480      	push	{r7}
 800583a:	b09b      	sub	sp, #108	; 0x6c
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d81f      	bhi.n	80058aa <USB_ActivateEndpoint+0x72>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <USB_ActivateEndpoint+0x38>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005881 	.word	0x08005881
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058b3 	.word	0x080058b3
 800587c:	0800588f 	.word	0x0800588f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005880:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005888:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800588c:	e012      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800588e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005892:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005896:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800589a:	e00b      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800589c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058a8:	e004      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058b0:	e000      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>
      break;
 80058b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	b21a      	sxth	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	7b1b      	ldrb	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 8149 	bne.w	8005bbc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8084 	beq.w	8005a3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	4413      	add	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	00da      	lsls	r2, r3, #3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	88db      	ldrh	r3, [r3, #6]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	b29b      	uxth	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	81fb      	strh	r3, [r7, #14]
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <USB_ActivateEndpoint+0x180>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	81bb      	strh	r3, [r7, #12]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	89bb      	ldrh	r3, [r7, #12]
 80059a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	78db      	ldrb	r3, [r3, #3]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d020      	beq.n	8005a02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	813b      	strh	r3, [r7, #8]
 80059d8:	893b      	ldrh	r3, [r7, #8]
 80059da:	f083 0320 	eor.w	r3, r3, #32
 80059de:	813b      	strh	r3, [r7, #8]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	893b      	ldrh	r3, [r7, #8]
 80059ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	8013      	strh	r3, [r2, #0]
 8005a00:	e27f      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	897b      	ldrh	r3, [r7, #10]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
 8005a3a:	e262      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	4413      	add	r3, r2
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	88db      	ldrh	r3, [r3, #6]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	4413      	add	r3, r2
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d112      	bne.n	8005ac2 <USB_ActivateEndpoint+0x28a>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e02f      	b.n	8005b22 <USB_ActivateEndpoint+0x2ea>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac8:	d813      	bhi.n	8005af2 <USB_ActivateEndpoint+0x2ba>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <USB_ActivateEndpoint+0x2ac>
 8005ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	029b      	lsls	r3, r3, #10
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e017      	b.n	8005b22 <USB_ActivateEndpoint+0x2ea>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	663b      	str	r3, [r7, #96]	; 0x60
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <USB_ActivateEndpoint+0x2d4>
 8005b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	83fb      	strh	r3, [r7, #30]
 8005b30:	8bfb      	ldrh	r3, [r7, #30]
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01b      	beq.n	8005b72 <USB_ActivateEndpoint+0x33a>
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b50:	83bb      	strh	r3, [r7, #28]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	8bbb      	ldrh	r3, [r7, #28]
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	837b      	strh	r3, [r7, #26]
 8005b8a:	8b7b      	ldrh	r3, [r7, #26]
 8005b8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b90:	837b      	strh	r3, [r7, #26]
 8005b92:	8b7b      	ldrh	r3, [r7, #26]
 8005b94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b98:	837b      	strh	r3, [r7, #26]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	8b7b      	ldrh	r3, [r7, #26]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	e1a2      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c08:	4413      	add	r3, r2
 8005c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	891b      	ldrh	r3, [r3, #8]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3c:	4413      	add	r3, r2
 8005c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	00da      	lsls	r2, r3, #3
 8005c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8091 	bne.w	8005d8c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01b      	beq.n	8005cba <USB_ActivateEndpoint+0x482>
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01b      	beq.n	8005d0a <USB_ActivateEndpoint+0x4d2>
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]
 8005d8a:	e0ba      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01d      	beq.n	8005de4 <USB_ActivateEndpoint+0x5ac>
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005df4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01d      	beq.n	8005e3c <USB_ActivateEndpoint+0x604>
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	78db      	ldrb	r3, [r3, #3]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d024      	beq.n	8005e8e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e62:	f083 0320 	eor.w	r3, r3, #32
 8005e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
 8005e8c:	e01d      	b.n	8005eca <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	376c      	adds	r7, #108	; 0x6c
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop

08005f14 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b08d      	sub	sp, #52	; 0x34
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	7b1b      	ldrb	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 808e 	bne.w	8006044 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d044      	beq.n	8005fba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	81bb      	strh	r3, [r7, #12]
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <USB_DeactivateEndpoint+0x6c>
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	817b      	strh	r3, [r7, #10]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	813b      	strh	r3, [r7, #8]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	441a      	add	r2, r3
 8005fa2:	893b      	ldrh	r3, [r7, #8]
 8005fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	8013      	strh	r3, [r2, #0]
 8005fb8:	e192      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	827b      	strh	r3, [r7, #18]
 8005fc8:	8a7b      	ldrh	r3, [r7, #18]
 8005fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01b      	beq.n	800600a <USB_DeactivateEndpoint+0xf6>
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	823b      	strh	r3, [r7, #16]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8a3b      	ldrh	r3, [r7, #16]
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	81fb      	strh	r3, [r7, #14]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e14d      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 80a5 	bne.w	8006198 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	843b      	strh	r3, [r7, #32]
 800605c:	8c3b      	ldrh	r3, [r7, #32]
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <USB_DeactivateEndpoint+0x18a>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	83fb      	strh	r3, [r7, #30]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8bfb      	ldrh	r3, [r7, #30]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	83bb      	strh	r3, [r7, #28]
 80060ac:	8bbb      	ldrh	r3, [r7, #28]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01b      	beq.n	80060ee <USB_DeactivateEndpoint+0x1da>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	837b      	strh	r3, [r7, #26]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	833b      	strh	r3, [r7, #24]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8b3b      	ldrh	r3, [r7, #24]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	82fb      	strh	r3, [r7, #22]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	8afb      	ldrh	r3, [r7, #22]
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	82bb      	strh	r3, [r7, #20]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8abb      	ldrh	r3, [r7, #20]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
 8006196:	e0a3      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <USB_DeactivateEndpoint+0x2d4>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <USB_DeactivateEndpoint+0x324>
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	853b      	strh	r3, [r7, #40]	; 0x28
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	847b      	strh	r3, [r7, #34]	; 0x22
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3734      	adds	r7, #52	; 0x34
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b0c4      	sub	sp, #272	; 0x110
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	6018      	str	r0, [r3, #0]
 80062f8:	463b      	mov	r3, r7
 80062fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b01      	cmp	r3, #1
 8006304:	f040 8566 	bne.w	8006dd4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006308:	463b      	mov	r3, r7
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	429a      	cmp	r2, r3
 8006316:	d905      	bls.n	8006324 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006322:	e004      	b.n	800632e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	7b1b      	ldrb	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d12c      	bne.n	8006392 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6959      	ldr	r1, [r3, #20]
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	88da      	ldrh	r2, [r3, #6]
 8006344:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006348:	b29b      	uxth	r3, r3
 800634a:	1d38      	adds	r0, r7, #4
 800634c:	6800      	ldr	r0, [r0, #0]
 800634e:	f001 fa43 	bl	80077d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00da      	lsls	r2, r3, #3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800637a:	f107 0310 	add.w	r3, r7, #16
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006384:	b29a      	uxth	r2, r3
 8006386:	f107 0310 	add.w	r3, r7, #16
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	f000 bcec 	b.w	8006d6a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f040 8356 	bne.w	8006a4a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a1a      	ldr	r2, [r3, #32]
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f240 82fa 	bls.w	80069a4 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 815e 	beq.w	80066e8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800642c:	1d3b      	adds	r3, r7, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d164      	bne.n	8006506 <USB_EPStartXfer+0x218>
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	4413      	add	r3, r2
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	00da      	lsls	r2, r3, #3
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	4413      	add	r3, r2
 8006460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
 8006466:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800646a:	2b00      	cmp	r3, #0
 800646c:	d112      	bne.n	8006494 <USB_EPStartXfer+0x1a6>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006478:	b29a      	uxth	r2, r3
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648c:	b29a      	uxth	r2, r3
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e054      	b.n	800653e <USB_EPStartXfer+0x250>
 8006494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006498:	2b3e      	cmp	r3, #62	; 0x3e
 800649a:	d817      	bhi.n	80064cc <USB_EPStartXfer+0x1de>
 800649c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <USB_EPStartXfer+0x1ce>
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	3301      	adds	r3, #1
 80064b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e038      	b.n	800653e <USB_EPStartXfer+0x250>
 80064cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <USB_EPStartXfer+0x1fe>
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e6:	3b01      	subs	r3, #1
 80064e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	029b      	lsls	r3, r3, #10
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e01b      	b.n	800653e <USB_EPStartXfer+0x250>
 8006506:	463b      	mov	r3, r7
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d116      	bne.n	800653e <USB_EPStartXfer+0x250>
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	4413      	add	r3, r2
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00da      	lsls	r2, r3, #3
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652c:	4413      	add	r3, r2
 800652e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006532:	633b      	str	r3, [r7, #48]	; 0x30
 8006534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006538:	b29a      	uxth	r2, r3
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	895b      	ldrh	r3, [r3, #10]
 8006544:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006552:	b29b      	uxth	r3, r3
 8006554:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006558:	1d38      	adds	r0, r7, #4
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	f001 f93c 	bl	80077d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800656a:	441a      	add	r2, r3
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d90e      	bls.n	80065a0 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	621a      	str	r2, [r3, #32]
 800659e:	e008      	b.n	80065b2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80065a0:	463b      	mov	r3, r7
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80065aa:	463b      	mov	r3, r7
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065b2:	463b      	mov	r3, r7
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d164      	bne.n	8006686 <USB_EPStartXfer+0x398>
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d112      	bne.n	8006614 <USB_EPStartXfer+0x326>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e057      	b.n	80066c4 <USB_EPStartXfer+0x3d6>
 8006614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006618:	2b3e      	cmp	r3, #62	; 0x3e
 800661a:	d817      	bhi.n	800664c <USB_EPStartXfer+0x35e>
 800661c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006626:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <USB_EPStartXfer+0x34e>
 8006632:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006636:	3301      	adds	r3, #1
 8006638:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800663c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006640:	b29b      	uxth	r3, r3
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	b29a      	uxth	r2, r3
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e03b      	b.n	80066c4 <USB_EPStartXfer+0x3d6>
 800664c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <USB_EPStartXfer+0x37e>
 8006662:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006666:	3b01      	subs	r3, #1
 8006668:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800666c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006670:	b29b      	uxth	r3, r3
 8006672:	029b      	lsls	r3, r3, #10
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667e:	b29a      	uxth	r2, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e01e      	b.n	80066c4 <USB_EPStartXfer+0x3d6>
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d119      	bne.n	80066c4 <USB_EPStartXfer+0x3d6>
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	4413      	add	r3, r2
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	00da      	lsls	r2, r3, #3
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066c4:	463b      	mov	r3, r7
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	891b      	ldrh	r3, [r3, #8]
 80066ca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6959      	ldr	r1, [r3, #20]
 80066d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80066de:	1d38      	adds	r0, r7, #4
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f001 f879 	bl	80077d8 <USB_WritePMA>
 80066e6:	e340      	b.n	8006d6a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d164      	bne.n	80067bc <USB_EPStartXfer+0x4ce>
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006706:	4413      	add	r3, r2
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670a:	463b      	mov	r3, r7
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	00da      	lsls	r2, r3, #3
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	4413      	add	r3, r2
 8006716:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800671a:	64bb      	str	r3, [r7, #72]	; 0x48
 800671c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006720:	2b00      	cmp	r3, #0
 8006722:	d112      	bne.n	800674a <USB_EPStartXfer+0x45c>
 8006724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800672e:	b29a      	uxth	r2, r3
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006742:	b29a      	uxth	r2, r3
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	e057      	b.n	80067fa <USB_EPStartXfer+0x50c>
 800674a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674e:	2b3e      	cmp	r3, #62	; 0x3e
 8006750:	d817      	bhi.n	8006782 <USB_EPStartXfer+0x494>
 8006752:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800675c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <USB_EPStartXfer+0x484>
 8006768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676c:	3301      	adds	r3, #1
 800676e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006776:	b29b      	uxth	r3, r3
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	b29a      	uxth	r2, r3
 800677c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e03b      	b.n	80067fa <USB_EPStartXfer+0x50c>
 8006782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800678c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <USB_EPStartXfer+0x4b4>
 8006798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679c:	3b01      	subs	r3, #1
 800679e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e01e      	b.n	80067fa <USB_EPStartXfer+0x50c>
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d119      	bne.n	80067fa <USB_EPStartXfer+0x50c>
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	657b      	str	r3, [r7, #84]	; 0x54
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067da:	4413      	add	r3, r2
 80067dc:	657b      	str	r3, [r7, #84]	; 0x54
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00da      	lsls	r2, r3, #3
 80067e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
 80067f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	891b      	ldrh	r3, [r3, #8]
 8006800:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006814:	1d38      	adds	r0, r7, #4
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	f000 ffde 	bl	80077d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006826:	441a      	add	r2, r3
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	429a      	cmp	r2, r3
 800683c:	d90e      	bls.n	800685c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a1a      	ldr	r2, [r3, #32]
 800684e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	621a      	str	r2, [r3, #32]
 800685a:	e008      	b.n	800686e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	647b      	str	r3, [r7, #68]	; 0x44
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d164      	bne.n	8006948 <USB_EPStartXfer+0x65a>
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	4413      	add	r3, r2
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d112      	bne.n	80068d6 <USB_EPStartXfer+0x5e8>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e054      	b.n	8006980 <USB_EPStartXfer+0x692>
 80068d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068da:	2b3e      	cmp	r3, #62	; 0x3e
 80068dc:	d817      	bhi.n	800690e <USB_EPStartXfer+0x620>
 80068de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <USB_EPStartXfer+0x610>
 80068f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f8:	3301      	adds	r3, #1
 80068fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006902:	b29b      	uxth	r3, r3
 8006904:	029b      	lsls	r3, r3, #10
 8006906:	b29a      	uxth	r2, r3
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e038      	b.n	8006980 <USB_EPStartXfer+0x692>
 800690e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <USB_EPStartXfer+0x640>
 8006924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006928:	3b01      	subs	r3, #1
 800692a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800692e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006940:	b29a      	uxth	r2, r3
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e01b      	b.n	8006980 <USB_EPStartXfer+0x692>
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d116      	bne.n	8006980 <USB_EPStartXfer+0x692>
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006960:	4413      	add	r3, r2
 8006962:	647b      	str	r3, [r7, #68]	; 0x44
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	00da      	lsls	r2, r3, #3
 800696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696e:	4413      	add	r3, r2
 8006970:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
 8006976:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800697a:	b29a      	uxth	r2, r3
 800697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	895b      	ldrh	r3, [r3, #10]
 8006986:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800698a:	463b      	mov	r3, r7
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6959      	ldr	r1, [r3, #20]
 8006990:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006994:	b29b      	uxth	r3, r3
 8006996:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800699a:	1d38      	adds	r0, r7, #4
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f000 ff1b 	bl	80077d8 <USB_WritePMA>
 80069a2:	e1e2      	b.n	8006d6a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	663b      	str	r3, [r7, #96]	; 0x60
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a06:	4413      	add	r3, r2
 8006a08:	663b      	str	r3, [r7, #96]	; 0x60
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	00da      	lsls	r2, r3, #3
 8006a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a26:	463b      	mov	r3, r7
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	891b      	ldrh	r3, [r3, #8]
 8006a2c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6959      	ldr	r1, [r3, #20]
 8006a36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a40:	1d38      	adds	r0, r7, #4
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	f000 fec8 	bl	80077d8 <USB_WritePMA>
 8006a48:	e18f      	b.n	8006d6a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 808f 	beq.w	8006b84 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d164      	bne.n	8006b40 <USB_EPStartXfer+0x852>
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a7c:	1d3b      	adds	r3, r7, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8a:	4413      	add	r3, r2
 8006a8c:	673b      	str	r3, [r7, #112]	; 0x70
 8006a8e:	463b      	mov	r3, r7
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	00da      	lsls	r2, r3, #3
 8006a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d112      	bne.n	8006ace <USB_EPStartXfer+0x7e0>
 8006aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e054      	b.n	8006b78 <USB_EPStartXfer+0x88a>
 8006ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad4:	d817      	bhi.n	8006b06 <USB_EPStartXfer+0x818>
 8006ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <USB_EPStartXfer+0x808>
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	3301      	adds	r3, #1
 8006af2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e038      	b.n	8006b78 <USB_EPStartXfer+0x88a>
 8006b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <USB_EPStartXfer+0x838>
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	029b      	lsls	r3, r3, #10
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	e01b      	b.n	8006b78 <USB_EPStartXfer+0x88a>
 8006b40:	463b      	mov	r3, r7
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d116      	bne.n	8006b78 <USB_EPStartXfer+0x88a>
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b58:	4413      	add	r3, r2
 8006b5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	00da      	lsls	r2, r3, #3
 8006b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b66:	4413      	add	r3, r2
 8006b68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b6c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b82:	e097      	b.n	8006cb4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d168      	bne.n	8006c60 <USB_EPStartXfer+0x972>
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	00da      	lsls	r2, r3, #3
 8006bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d112      	bne.n	8006bee <USB_EPStartXfer+0x900>
 8006bc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e05d      	b.n	8006caa <USB_EPStartXfer+0x9bc>
 8006bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8006bf4:	d817      	bhi.n	8006c26 <USB_EPStartXfer+0x938>
 8006bf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <USB_EPStartXfer+0x928>
 8006c0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c10:	3301      	adds	r3, #1
 8006c12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e041      	b.n	8006caa <USB_EPStartXfer+0x9bc>
 8006c26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USB_EPStartXfer+0x958>
 8006c3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e024      	b.n	8006caa <USB_EPStartXfer+0x9bc>
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d11f      	bne.n	8006caa <USB_EPStartXfer+0x9bc>
 8006c6a:	1d3b      	adds	r3, r7, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c82:	4413      	add	r3, r2
 8006c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	00da      	lsls	r2, r3, #3
 8006c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006caa:	463b      	mov	r3, r7
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	891b      	ldrh	r3, [r3, #8]
 8006cb0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6959      	ldr	r1, [r3, #20]
 8006cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cc4:	1d38      	adds	r0, r7, #4
 8006cc6:	6800      	ldr	r0, [r0, #0]
 8006cc8:	f000 fd86 	bl	80077d8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d122      	bne.n	8006d1c <USB_EPStartXfer+0xa2e>
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	463b      	mov	r3, r7
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	441a      	add	r2, r3
 8006d02:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8013      	strh	r3, [r2, #0]
 8006d1a:	e026      	b.n	8006d6a <USB_EPStartXfer+0xa7c>
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d121      	bne.n	8006d6a <USB_EPStartXfer+0xa7c>
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d40:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d44:	1d3b      	adds	r3, r7, #4
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	463b      	mov	r3, r7
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f107 020e 	add.w	r2, r7, #14
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d88:	8013      	strh	r3, [r2, #0]
 8006d8a:	f107 030e 	add.w	r3, r7, #14
 8006d8e:	f107 020e 	add.w	r2, r7, #14
 8006d92:	8812      	ldrh	r2, [r2, #0]
 8006d94:	f082 0210 	eor.w	r2, r2, #16
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f107 030e 	add.w	r3, r7, #14
 8006d9e:	f107 020e 	add.w	r2, r7, #14
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	f082 0220 	eor.w	r2, r2, #32
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	f107 030e 	add.w	r3, r7, #14
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]
 8006dd2:	e3b5      	b.n	8007540 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8090 	bne.w	8006f00 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006de0:	463b      	mov	r3, r7
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d90e      	bls.n	8006e0e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	619a      	str	r2, [r3, #24]
 8006e0c:	e008      	b.n	8006e20 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e18:	463b      	mov	r3, r7
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e28:	1d3b      	adds	r3, r7, #4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e38:	4413      	add	r3, r2
 8006e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e3e:	463b      	mov	r3, r7
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	00da      	lsls	r2, r3, #3
 8006e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d116      	bne.n	8006e8a <USB_EPStartXfer+0xb9c>
 8006e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	e32c      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8006e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e90:	d818      	bhi.n	8006ec4 <USB_EPStartXfer+0xbd6>
 8006e92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <USB_EPStartXfer+0xbc4>
 8006ea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eac:	3301      	adds	r3, #1
 8006eae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	029b      	lsls	r3, r3, #10
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e30f      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8006ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <USB_EPStartXfer+0xbf6>
 8006eda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	e2f1      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	78db      	ldrb	r3, [r3, #3]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	f040 818f 	bne.w	800722a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d175      	bne.n	8007002 <USB_EPStartXfer+0xd14>
 8006f16:	1d3b      	adds	r3, r7, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f2e:	4413      	add	r3, r2
 8006f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	00da      	lsls	r2, r3, #3
 8006f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d116      	bne.n	8006f82 <USB_EPStartXfer+0xc94>
 8006f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e065      	b.n	800704e <USB_EPStartXfer+0xd60>
 8006f82:	463b      	mov	r3, r7
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8a:	d81a      	bhi.n	8006fc2 <USB_EPStartXfer+0xcd4>
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f98:	463b      	mov	r3, r7
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <USB_EPStartXfer+0xcc2>
 8006fa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006faa:	3301      	adds	r3, #1
 8006fac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	029b      	lsls	r3, r3, #10
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e045      	b.n	800704e <USB_EPStartXfer+0xd60>
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <USB_EPStartXfer+0xcf8>
 8006fdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e025      	b.n	800704e <USB_EPStartXfer+0xd60>
 8007002:	463b      	mov	r3, r7
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d120      	bne.n	800704e <USB_EPStartXfer+0xd60>
 800700c:	1d3b      	adds	r3, r7, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007024:	4413      	add	r3, r2
 8007026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	00da      	lsls	r2, r3, #3
 8007032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007036:	4413      	add	r3, r2
 8007038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800703c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	1d3b      	adds	r3, r7, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d175      	bne.n	800714c <USB_EPStartXfer+0xe5e>
 8007060:	1d3b      	adds	r3, r7, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007068:	1d3b      	adds	r3, r7, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007078:	4413      	add	r3, r2
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800707e:	463b      	mov	r3, r7
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00da      	lsls	r2, r3, #3
 8007086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800708a:	4413      	add	r3, r2
 800708c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007094:	463b      	mov	r3, r7
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d116      	bne.n	80070cc <USB_EPStartXfer+0xdde>
 800709e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	e061      	b.n	8007190 <USB_EPStartXfer+0xea2>
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b3e      	cmp	r3, #62	; 0x3e
 80070d4:	d81a      	bhi.n	800710c <USB_EPStartXfer+0xe1e>
 80070d6:	463b      	mov	r3, r7
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <USB_EPStartXfer+0xe0c>
 80070f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f4:	3301      	adds	r3, #1
 80070f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	b29b      	uxth	r3, r3
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	b29a      	uxth	r2, r3
 8007104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	e041      	b.n	8007190 <USB_EPStartXfer+0xea2>
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <USB_EPStartXfer+0xe42>
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	3b01      	subs	r3, #1
 800712c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007134:	b29b      	uxth	r3, r3
 8007136:	029b      	lsls	r3, r3, #10
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e021      	b.n	8007190 <USB_EPStartXfer+0xea2>
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d11c      	bne.n	8007190 <USB_EPStartXfer+0xea2>
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007166:	4413      	add	r3, r2
 8007168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	00da      	lsls	r2, r3, #3
 8007174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007178:	4413      	add	r3, r2
 800717a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800717e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007182:	463b      	mov	r3, r7
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	b29a      	uxth	r2, r3
 800718a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800718e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007190:	463b      	mov	r3, r7
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 81a4 	beq.w	80074e4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800719c:	1d3b      	adds	r3, r7, #4
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <USB_EPStartXfer+0xeda>
 80071bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8187 	bne.w	80074e4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f040 8180 	bne.w	80074e4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071e4:	1d3b      	adds	r3, r7, #4
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	463b      	mov	r3, r7
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e15c      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	2b01      	cmp	r3, #1
 8007232:	f040 8155 	bne.w	80074e0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d90e      	bls.n	8007264 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007246:	463b      	mov	r3, r7
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	463b      	mov	r3, r7
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	619a      	str	r2, [r3, #24]
 8007262:	e008      	b.n	8007276 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007264:	463b      	mov	r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2200      	movs	r2, #0
 8007274:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	785b      	ldrb	r3, [r3, #1]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d16f      	bne.n	8007360 <USB_EPStartXfer+0x1072>
 8007280:	1d3b      	adds	r3, r7, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007290:	b29b      	uxth	r3, r3
 8007292:	461a      	mov	r2, r3
 8007294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007298:	4413      	add	r3, r2
 800729a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00da      	lsls	r2, r3, #3
 80072a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d116      	bne.n	80072ea <USB_EPStartXfer+0xffc>
 80072bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e05f      	b.n	80073aa <USB_EPStartXfer+0x10bc>
 80072ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ee:	2b3e      	cmp	r3, #62	; 0x3e
 80072f0:	d818      	bhi.n	8007324 <USB_EPStartXfer+0x1036>
 80072f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <USB_EPStartXfer+0x1024>
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730c:	3301      	adds	r3, #1
 800730e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29a      	uxth	r2, r3
 800731c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	e042      	b.n	80073aa <USB_EPStartXfer+0x10bc>
 8007324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800732e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <USB_EPStartXfer+0x1056>
 800733a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733e:	3b01      	subs	r3, #1
 8007340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007348:	b29b      	uxth	r3, r3
 800734a:	029b      	lsls	r3, r3, #10
 800734c:	b29b      	uxth	r3, r3
 800734e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e024      	b.n	80073aa <USB_EPStartXfer+0x10bc>
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d11f      	bne.n	80073aa <USB_EPStartXfer+0x10bc>
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007372:	1d3b      	adds	r3, r7, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007382:	4413      	add	r3, r2
 8007384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	00da      	lsls	r2, r3, #3
 8007390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007394:	4413      	add	r3, r2
 8007396:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800739a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800739e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	1d3b      	adds	r3, r7, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b2:	463b      	mov	r3, r7
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d16f      	bne.n	800749c <USB_EPStartXfer+0x11ae>
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d4:	4413      	add	r3, r2
 80073d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073da:	463b      	mov	r3, r7
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	00da      	lsls	r2, r3, #3
 80073e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d116      	bne.n	8007426 <USB_EPStartXfer+0x1138>
 80073f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e05e      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8007426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800742a:	2b3e      	cmp	r3, #62	; 0x3e
 800742c:	d818      	bhi.n	8007460 <USB_EPStartXfer+0x1172>
 800742e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <USB_EPStartXfer+0x1160>
 8007444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007448:	3301      	adds	r3, #1
 800744a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800744e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007452:	b29b      	uxth	r3, r3
 8007454:	029b      	lsls	r3, r3, #10
 8007456:	b29a      	uxth	r2, r3
 8007458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	e041      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8007460:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800746a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <USB_EPStartXfer+0x1192>
 8007476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747a:	3b01      	subs	r3, #1
 800747c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007484:	b29b      	uxth	r3, r3
 8007486:	029b      	lsls	r3, r3, #10
 8007488:	b29b      	uxth	r3, r3
 800748a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007492:	b29a      	uxth	r2, r3
 8007494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	e023      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d11e      	bne.n	80074e4 <USB_EPStartXfer+0x11f6>
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074b6:	4413      	add	r3, r2
 80074b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074bc:	463b      	mov	r3, r7
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	00da      	lsls	r2, r3, #3
 80074c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074c8:	4413      	add	r3, r2
 80074ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	e001      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e02e      	b.n	8007542 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007502:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007506:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800750a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800750e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007516:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800752c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	b29b      	uxth	r3, r3
 800753e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d020      	beq.n	80075a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	81bb      	strh	r3, [r7, #12]
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f083 0310 	eor.w	r3, r3, #16
 800757c:	81bb      	strh	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	89bb      	ldrh	r3, [r7, #12]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	e01f      	b.n	80075e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b6:	81fb      	strh	r3, [r7, #14]
 80075b8:	89fb      	ldrh	r3, [r7, #14]
 80075ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075be:	81fb      	strh	r3, [r7, #14]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075dc:	b29b      	uxth	r3, r3
 80075de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b087      	sub	sp, #28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	7b1b      	ldrb	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 809d 	bne.w	800773c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d04c      	beq.n	80076a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	823b      	strh	r3, [r7, #16]
 8007618:	8a3b      	ldrh	r3, [r7, #16]
 800761a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01b      	beq.n	800765a <USB_EPClearStall+0x6c>
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	81fb      	strh	r3, [r7, #14]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	78db      	ldrb	r3, [r3, #3]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d06c      	beq.n	800773c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007678:	81bb      	strh	r3, [r7, #12]
 800767a:	89bb      	ldrh	r3, [r7, #12]
 800767c:	f083 0320 	eor.w	r3, r3, #32
 8007680:	81bb      	strh	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	441a      	add	r2, r3
 800768c:	89bb      	ldrh	r3, [r7, #12]
 800768e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	e04b      	b.n	800773c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	82fb      	strh	r3, [r7, #22]
 80076b2:	8afb      	ldrh	r3, [r7, #22]
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <USB_EPClearStall+0x106>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	82bb      	strh	r3, [r7, #20]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	8abb      	ldrh	r3, [r7, #20]
 80076e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	827b      	strh	r3, [r7, #18]
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007712:	827b      	strh	r3, [r7, #18]
 8007714:	8a7b      	ldrh	r3, [r7, #18]
 8007716:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800771a:	827b      	strh	r3, [r7, #18]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077b2:	68fb      	ldr	r3, [r7, #12]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077d8:	b480      	push	{r7}
 80077da:	b08d      	sub	sp, #52	; 0x34
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	4611      	mov	r1, r2
 80077e4:	461a      	mov	r2, r3
 80077e6:	460b      	mov	r3, r1
 80077e8:	80fb      	strh	r3, [r7, #6]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077ee:	88bb      	ldrh	r3, [r7, #4]
 80077f0:	3301      	adds	r3, #1
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800780e:	e01b      	b.n	8007848 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	3301      	adds	r3, #1
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	b29a      	uxth	r2, r3
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	3302      	adds	r3, #2
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	3301      	adds	r3, #1
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	3b01      	subs	r3, #1
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e0      	bne.n	8007810 <USB_WritePMA+0x38>
  }
}
 800784e:	bf00      	nop
 8007850:	3734      	adds	r7, #52	; 0x34
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800785a:	b480      	push	{r7}
 800785c:	b08b      	sub	sp, #44	; 0x2c
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	4611      	mov	r1, r2
 8007866:	461a      	mov	r2, r3
 8007868:	460b      	mov	r3, r1
 800786a:	80fb      	strh	r3, [r7, #6]
 800786c:	4613      	mov	r3, r2
 800786e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007870:	88bb      	ldrh	r3, [r7, #4]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800788a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
 8007890:	e018      	b.n	80078c4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	3302      	adds	r3, #2
 800789e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	0a1b      	lsrs	r3, r3, #8
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	3b01      	subs	r3, #1
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e3      	bne.n	8007892 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078ca:	88bb      	ldrh	r3, [r7, #4]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	701a      	strb	r2, [r3, #0]
  }
}
 80078e6:	bf00      	nop
 80078e8:	372c      	adds	r7, #44	; 0x2c
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007902:	f002 f89d 	bl	8009a40 <USBD_static_malloc>
 8007906:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d105      	bne.n	800791a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007916:	2302      	movs	r3, #2
 8007918:	e066      	b.n	80079e8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d119      	bne.n	800795e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	2202      	movs	r2, #2
 8007930:	2181      	movs	r1, #129	; 0x81
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 ff29 	bl	800978a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800793e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007942:	2202      	movs	r2, #2
 8007944:	2101      	movs	r1, #1
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 ff1f 	bl	800978a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2210      	movs	r2, #16
 8007958:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800795c:	e016      	b.n	800798c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800795e:	2340      	movs	r3, #64	; 0x40
 8007960:	2202      	movs	r2, #2
 8007962:	2181      	movs	r1, #129	; 0x81
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 ff10 	bl	800978a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007970:	2340      	movs	r3, #64	; 0x40
 8007972:	2202      	movs	r2, #2
 8007974:	2101      	movs	r1, #1
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 ff07 	bl	800978a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2210      	movs	r2, #16
 8007988:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800798c:	2308      	movs	r3, #8
 800798e:	2203      	movs	r2, #3
 8007990:	2182      	movs	r1, #130	; 0x82
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 fef9 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c1b      	ldrb	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079cc:	2101      	movs	r1, #1
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 ffcb 	bl	800996a <USBD_LL_PrepareReceive>
 80079d4:	e007      	b.n	80079e6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	2101      	movs	r1, #1
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 ffc2 	bl	800996a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079fc:	2181      	movs	r1, #129	; 0x81
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 fee9 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fee2 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a1a:	2182      	movs	r1, #130	; 0x82
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 feda 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00e      	beq.n	8007a5a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f002 f805 	bl	8009a5c <USBD_static_free>
    pdev->pClassData = NULL;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a74:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d03a      	beq.n	8007b04 <USBD_CDC_Setup+0xa0>
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	f040 8097 	bne.w	8007bc2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	88db      	ldrh	r3, [r3, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d029      	beq.n	8007af0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da11      	bge.n	8007aca <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ab2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	88d2      	ldrh	r2, [r2, #6]
 8007ab8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	88db      	ldrh	r3, [r3, #6]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fa8d 	bl	8008fe2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007ac8:	e082      	b.n	8007bd0 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	785a      	ldrb	r2, [r3, #1]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	88db      	ldrh	r3, [r3, #6]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ae0:	6939      	ldr	r1, [r7, #16]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 faa6 	bl	800903a <USBD_CtlPrepareRx>
      break;
 8007aee:	e06f      	b.n	8007bd0 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	7850      	ldrb	r0, [r2, #1]
 8007afc:	2200      	movs	r2, #0
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	4798      	blx	r3
      break;
 8007b02:	e065      	b.n	8007bd0 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b0b      	cmp	r3, #11
 8007b0a:	d84f      	bhi.n	8007bac <USBD_CDC_Setup+0x148>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <USBD_CDC_Setup+0xb0>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b45 	.word	0x08007b45
 8007b18:	08007bbb 	.word	0x08007bbb
 8007b1c:	08007bad 	.word	0x08007bad
 8007b20:	08007bad 	.word	0x08007bad
 8007b24:	08007bad 	.word	0x08007bad
 8007b28:	08007bad 	.word	0x08007bad
 8007b2c:	08007bad 	.word	0x08007bad
 8007b30:	08007bad 	.word	0x08007bad
 8007b34:	08007bad 	.word	0x08007bad
 8007b38:	08007bad 	.word	0x08007bad
 8007b3c:	08007b6d 	.word	0x08007b6d
 8007b40:	08007b95 	.word	0x08007b95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d107      	bne.n	8007b5e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b4e:	f107 030c 	add.w	r3, r7, #12
 8007b52:	2202      	movs	r2, #2
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fa43 	bl	8008fe2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b5c:	e030      	b.n	8007bc0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f9cd 	bl	8008f00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6a:	e029      	b.n	8007bc0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d107      	bne.n	8007b86 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b76:	f107 030f 	add.w	r3, r7, #15
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fa2f 	bl	8008fe2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b84:	e01c      	b.n	8007bc0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 f9b9 	bl	8008f00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
          break;
 8007b92:	e015      	b.n	8007bc0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d00f      	beq.n	8007bbe <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f9ad 	bl	8008f00 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007baa:	e008      	b.n	8007bbe <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 f9a6 	bl	8008f00 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb8:	e002      	b.n	8007bc0 <USBD_CDC_Setup+0x15c>
          break;
 8007bba:	bf00      	nop
 8007bbc:	e008      	b.n	8007bd0 <USBD_CDC_Setup+0x16c>
          break;
 8007bbe:	bf00      	nop
      }
      break;
 8007bc0:	e006      	b.n	8007bd0 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f99b 	bl	8008f00 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bce:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop

08007bdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e04f      	b.n	8007c9e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	3318      	adds	r3, #24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d029      	beq.n	8007c70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	3318      	adds	r3, #24
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	78f9      	ldrb	r1, [r7, #3]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	460b      	mov	r3, r1
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	4403      	add	r3, r0
 8007c3c:	3338      	adds	r3, #56	; 0x38
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c44:	fb03 f301 	mul.w	r3, r3, r1
 8007c48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d110      	bne.n	8007c70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3318      	adds	r3, #24
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c62:	78f9      	ldrb	r1, [r7, #3]
 8007c64:	2300      	movs	r3, #0
 8007c66:	2200      	movs	r2, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fe5d 	bl	8009928 <USBD_LL_Transmit>
 8007c6e:	e015      	b.n	8007c9c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e015      	b.n	8007cf4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fe6d 	bl	80099ac <USBD_LL_GetRxDataSize>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d015      	beq.n	8007d42 <USBD_CDC_EP0_RxReady+0x46>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d1c:	2bff      	cmp	r3, #255	; 0xff
 8007d1e:	d010      	beq.n	8007d42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d36:	b292      	uxth	r2, r2
 8007d38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2243      	movs	r2, #67	; 0x43
 8007d58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	200000a0 	.word	0x200000a0

08007d6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2243      	movs	r2, #67	; 0x43
 8007d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d7a:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	2000005c 	.word	0x2000005c

08007d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2243      	movs	r2, #67	; 0x43
 8007d98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d9a:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	200000e4 	.word	0x200000e4

08007dac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	220a      	movs	r2, #10
 8007db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007dba:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	20000018 	.word	0x20000018

08007dcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e004      	b.n	8007dea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e38:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e60:	2301      	movs	r3, #1
 8007e62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e01a      	b.n	8007ea8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d114      	bne.n	8007ea6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e9a:	2181      	movs	r1, #129	; 0x81
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fd43 	bl	8009928 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e016      	b.n	8007efc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c1b      	ldrb	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fd41 	bl	800996a <USBD_LL_PrepareReceive>
 8007ee8:	e007      	b.n	8007efa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fd38 	bl	800996a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e01f      	b.n	8007f5c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	79fa      	ldrb	r2, [r7, #7]
 8007f4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f001 fb9f 	bl	8009694 <USBD_LL_Init>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e016      	b.n	8007faa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	f107 020e 	add.w	r2, r7, #14
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fbca 	bl	8009754 <USBD_LL_Start>
 8007fc0:	4603      	mov	r3, r0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d007      	beq.n	800803e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
  }

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff16 	bl	8008e8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800807c:	f003 031f 	and.w	r3, r3, #31
 8008080:	2b01      	cmp	r3, #1
 8008082:	d00e      	beq.n	80080a2 <USBD_LL_SetupStage+0x5a>
 8008084:	2b01      	cmp	r3, #1
 8008086:	d302      	bcc.n	800808e <USBD_LL_SetupStage+0x46>
 8008088:	2b02      	cmp	r3, #2
 800808a:	d014      	beq.n	80080b6 <USBD_LL_SetupStage+0x6e>
 800808c:	e01d      	b.n	80080ca <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f9d6 	bl	8008448 <USBD_StdDevReq>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e020      	b.n	80080e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa3a 	bl	8008524 <USBD_StdItfReq>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e016      	b.n	80080e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa76 	bl	80085b0 <USBD_StdEPReq>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e00c      	b.n	80080e4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fb9b 	bl	8009814 <USBD_LL_StallEP>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
      break;
 80080e2:	bf00      	nop
  }

  return ret;
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b086      	sub	sp, #24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	460b      	mov	r3, r1
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d137      	bne.n	8008172 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008108:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008110:	2b03      	cmp	r3, #3
 8008112:	d14a      	bne.n	80081aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	429a      	cmp	r2, r3
 800811e:	d913      	bls.n	8008148 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	4293      	cmp	r3, r2
 8008138:	bf28      	it	cs
 800813a:	4613      	movcs	r3, r2
 800813c:	461a      	mov	r2, r3
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 ff97 	bl	8009074 <USBD_CtlContinueRx>
 8008146:	e030      	b.n	80081aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800815a:	2b03      	cmp	r3, #3
 800815c:	d105      	bne.n	800816a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 ff93 	bl	8009096 <USBD_CtlSendStatus>
 8008170:	e01b      	b.n	80081aa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d013      	beq.n	80081a6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008184:	2b03      	cmp	r3, #3
 8008186:	d10e      	bne.n	80081a6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	7afa      	ldrb	r2, [r7, #11]
 8008192:	4611      	mov	r1, r2
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	4798      	blx	r3
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
 80081a4:	e002      	b.n	80081ac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e000      	b.n	80081ac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	460b      	mov	r3, r1
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d16a      	bne.n	800829e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3314      	adds	r3, #20
 80081cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d155      	bne.n	8008284 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d914      	bls.n	800820e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 ff0c 	bl	8009018 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008200:	2300      	movs	r3, #0
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f001 fbaf 	bl	800996a <USBD_LL_PrepareReceive>
 800820c:	e03a      	b.n	8008284 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d11c      	bne.n	8008254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008222:	429a      	cmp	r2, r3
 8008224:	d316      	bcc.n	8008254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008230:	429a      	cmp	r2, r3
 8008232:	d20f      	bcs.n	8008254 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 feed 	bl	8009018 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008246:	2300      	movs	r3, #0
 8008248:	2200      	movs	r2, #0
 800824a:	2100      	movs	r1, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f001 fb8c 	bl	800996a <USBD_LL_PrepareReceive>
 8008252:	e017      	b.n	8008284 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008266:	2b03      	cmp	r3, #3
 8008268:	d105      	bne.n	8008276 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008276:	2180      	movs	r1, #128	; 0x80
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f001 facb 	bl	8009814 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 ff1c 	bl	80090bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800828a:	2b01      	cmp	r3, #1
 800828c:	d123      	bne.n	80082d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff fe9b 	bl	8007fca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800829c:	e01b      	b.n	80082d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d013      	beq.n	80082d2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d10e      	bne.n	80082d2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	7afa      	ldrb	r2, [r7, #11]
 80082be:	4611      	mov	r1, r2
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	4798      	blx	r3
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	e002      	b.n	80082d8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e000      	b.n	80082d8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6852      	ldr	r2, [r2, #4]
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	4611      	mov	r1, r2
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	2200      	movs	r2, #0
 8008328:	2100      	movs	r1, #0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 fa2d 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2240      	movs	r2, #64	; 0x40
 800833c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	2200      	movs	r2, #0
 8008344:	2180      	movs	r1, #128	; 0x80
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fa1f 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2240      	movs	r2, #64	; 0x40
 8008356:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2204      	movs	r2, #4
 800839a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d105      	bne.n	80083ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d10b      	bne.n	8008402 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	3301      	adds	r3, #1
 8008422:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800842a:	8a3b      	ldrh	r3, [r7, #16]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	b21a      	sxth	r2, r3
 8008430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008434:	4313      	orrs	r3, r2
 8008436:	b21b      	sxth	r3, r3
 8008438:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800843a:	89fb      	ldrh	r3, [r7, #14]
}
 800843c:	4618      	mov	r0, r3
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845e:	2b20      	cmp	r3, #32
 8008460:	d004      	beq.n	800846c <USBD_StdDevReq+0x24>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d002      	beq.n	800846c <USBD_StdDevReq+0x24>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <USBD_StdDevReq+0x38>
 800846a:	e050      	b.n	800850e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
 800847a:	4603      	mov	r3, r0
 800847c:	73fb      	strb	r3, [r7, #15]
    break;
 800847e:	e04b      	b.n	8008518 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b09      	cmp	r3, #9
 8008486:	d83c      	bhi.n	8008502 <USBD_StdDevReq+0xba>
 8008488:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <USBD_StdDevReq+0x48>)
 800848a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848e:	bf00      	nop
 8008490:	080084e5 	.word	0x080084e5
 8008494:	080084f9 	.word	0x080084f9
 8008498:	08008503 	.word	0x08008503
 800849c:	080084ef 	.word	0x080084ef
 80084a0:	08008503 	.word	0x08008503
 80084a4:	080084c3 	.word	0x080084c3
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	08008503 	.word	0x08008503
 80084b0:	080084db 	.word	0x080084db
 80084b4:	080084cd 	.word	0x080084cd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f9d0 	bl	8008860 <USBD_GetDescriptor>
      break;
 80084c0:	e024      	b.n	800850c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fb5f 	bl	8008b88 <USBD_SetAddress>
      break;
 80084ca:	e01f      	b.n	800850c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fb9c 	bl	8008c0c <USBD_SetConfig>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
      break;
 80084d8:	e018      	b.n	800850c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc39 	bl	8008d54 <USBD_GetConfig>
      break;
 80084e2:	e013      	b.n	800850c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fc68 	bl	8008dbc <USBD_GetStatus>
      break;
 80084ec:	e00e      	b.n	800850c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fc96 	bl	8008e22 <USBD_SetFeature>
      break;
 80084f6:	e009      	b.n	800850c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fca5 	bl	8008e4a <USBD_ClrFeature>
      break;
 8008500:	e004      	b.n	800850c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fcfb 	bl	8008f00 <USBD_CtlError>
      break;
 800850a:	bf00      	nop
    }
    break;
 800850c:	e004      	b.n	8008518 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fcf5 	bl	8008f00 <USBD_CtlError>
    break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853a:	2b20      	cmp	r3, #32
 800853c:	d003      	beq.n	8008546 <USBD_StdItfReq+0x22>
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d001      	beq.n	8008546 <USBD_StdItfReq+0x22>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d12a      	bne.n	800859c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854c:	3b01      	subs	r3, #1
 800854e:	2b02      	cmp	r3, #2
 8008550:	d81d      	bhi.n	800858e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	d813      	bhi.n	8008584 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	88db      	ldrh	r3, [r3, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d110      	bne.n	8008598 <USBD_StdItfReq+0x74>
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10d      	bne.n	8008598 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fd8a 	bl	8009096 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008582:	e009      	b.n	8008598 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fcba 	bl	8008f00 <USBD_CtlError>
      break;
 800858c:	e004      	b.n	8008598 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fcb5 	bl	8008f00 <USBD_CtlError>
      break;
 8008596:	e000      	b.n	800859a <USBD_StdItfReq+0x76>
      break;
 8008598:	bf00      	nop
    }
    break;
 800859a:	e004      	b.n	80085a6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fcae 	bl	8008f00 <USBD_CtlError>
    break;
 80085a4:	bf00      	nop
  }

  return ret;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	889b      	ldrh	r3, [r3, #4]
 80085c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d004      	beq.n	80085da <USBD_StdEPReq+0x2a>
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d002      	beq.n	80085da <USBD_StdEPReq+0x2a>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <USBD_StdEPReq+0x3e>
 80085d8:	e137      	b.n	800884a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]
    break;
 80085ec:	e132      	b.n	8008854 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d03e      	beq.n	8008674 <USBD_StdEPReq+0xc4>
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d002      	beq.n	8008600 <USBD_StdEPReq+0x50>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d079      	beq.n	80086f2 <USBD_StdEPReq+0x142>
 80085fe:	e11e      	b.n	800883e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008606:	2b02      	cmp	r3, #2
 8008608:	d002      	beq.n	8008610 <USBD_StdEPReq+0x60>
 800860a:	2b03      	cmp	r3, #3
 800860c:	d015      	beq.n	800863a <USBD_StdEPReq+0x8a>
 800860e:	e02b      	b.n	8008668 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00c      	beq.n	8008630 <USBD_StdEPReq+0x80>
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b80      	cmp	r3, #128	; 0x80
 800861a:	d009      	beq.n	8008630 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 f8f7 	bl	8009814 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008626:	2180      	movs	r1, #128	; 0x80
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f8f3 	bl	8009814 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800862e:	e020      	b.n	8008672 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc64 	bl	8008f00 <USBD_CtlError>
        break;
 8008638:	e01b      	b.n	8008672 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10e      	bne.n	8008660 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <USBD_StdEPReq+0xb0>
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d008      	beq.n	8008660 <USBD_StdEPReq+0xb0>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	88db      	ldrh	r3, [r3, #6]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d104      	bne.n	8008660 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 f8da 	bl	8009814 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fd18 	bl	8009096 <USBD_CtlSendStatus>

        break;
 8008666:	e004      	b.n	8008672 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fc48 	bl	8008f00 <USBD_CtlError>
        break;
 8008670:	bf00      	nop
      }
      break;
 8008672:	e0e9      	b.n	8008848 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	2b02      	cmp	r3, #2
 800867c:	d002      	beq.n	8008684 <USBD_StdEPReq+0xd4>
 800867e:	2b03      	cmp	r3, #3
 8008680:	d015      	beq.n	80086ae <USBD_StdEPReq+0xfe>
 8008682:	e02f      	b.n	80086e4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <USBD_StdEPReq+0xf4>
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b80      	cmp	r3, #128	; 0x80
 800868e:	d009      	beq.n	80086a4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f8bd 	bl	8009814 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 f8b9 	bl	8009814 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086a2:	e025      	b.n	80086f0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc2a 	bl	8008f00 <USBD_CtlError>
        break;
 80086ac:	e020      	b.n	80086f0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	885b      	ldrh	r3, [r3, #2]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d11b      	bne.n	80086ee <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d004      	beq.n	80086ca <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f8c4 	bl	8009852 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fce3 	bl	8009096 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086e2:	e004      	b.n	80086ee <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fc0a 	bl	8008f00 <USBD_CtlError>
        break;
 80086ec:	e000      	b.n	80086f0 <USBD_StdEPReq+0x140>
        break;
 80086ee:	bf00      	nop
      }
      break;
 80086f0:	e0aa      	b.n	8008848 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d002      	beq.n	8008702 <USBD_StdEPReq+0x152>
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d032      	beq.n	8008766 <USBD_StdEPReq+0x1b6>
 8008700:	e097      	b.n	8008832 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <USBD_StdEPReq+0x168>
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	d004      	beq.n	8008718 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fbf5 	bl	8008f00 <USBD_CtlError>
          break;
 8008716:	e091      	b.n	800883c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	da0b      	bge.n	8008738 <USBD_StdEPReq+0x188>
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	3310      	adds	r3, #16
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	3304      	adds	r3, #4
 8008736:	e00b      	b.n	8008750 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	3304      	adds	r3, #4
 8008750:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2202      	movs	r2, #2
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fc3f 	bl	8008fe2 <USBD_CtlSendData>
        break;
 8008764:	e06a      	b.n	800883c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800876a:	2b00      	cmp	r3, #0
 800876c:	da11      	bge.n	8008792 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	3324      	adds	r3, #36	; 0x24
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d117      	bne.n	80087b8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fbb8 	bl	8008f00 <USBD_CtlError>
            break;
 8008790:	e054      	b.n	800883c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d104      	bne.n	80087b8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fba5 	bl	8008f00 <USBD_CtlError>
            break;
 80087b6:	e041      	b.n	800883c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da0b      	bge.n	80087d8 <USBD_StdEPReq+0x228>
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	3310      	adds	r3, #16
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	4413      	add	r3, r2
 80087d4:	3304      	adds	r3, #4
 80087d6:	e00b      	b.n	80087f0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	3304      	adds	r3, #4
 80087f0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <USBD_StdEPReq+0x24e>
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b80      	cmp	r3, #128	; 0x80
 80087fc:	d103      	bne.n	8008806 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e00e      	b.n	8008824 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 f840 	bl	8009890 <USBD_LL_IsStallEP>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	e002      	b.n	8008824 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2202      	movs	r2, #2
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fbd9 	bl	8008fe2 <USBD_CtlSendData>
          break;
 8008830:	e004      	b.n	800883c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fb63 	bl	8008f00 <USBD_CtlError>
        break;
 800883a:	bf00      	nop
      }
      break;
 800883c:	e004      	b.n	8008848 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fb5d 	bl	8008f00 <USBD_CtlError>
      break;
 8008846:	bf00      	nop
    }
    break;
 8008848:	e004      	b.n	8008854 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fb57 	bl	8008f00 <USBD_CtlError>
    break;
 8008852:	bf00      	nop
  }

  return ret;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	2b0e      	cmp	r3, #14
 8008882:	f200 8152 	bhi.w	8008b2a <USBD_GetDescriptor+0x2ca>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBD_GetDescriptor+0x2c>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088fd 	.word	0x080088fd
 8008890:	08008915 	.word	0x08008915
 8008894:	08008955 	.word	0x08008955
 8008898:	08008b2b 	.word	0x08008b2b
 800889c:	08008b2b 	.word	0x08008b2b
 80088a0:	08008acb 	.word	0x08008acb
 80088a4:	08008af7 	.word	0x08008af7
 80088a8:	08008b2b 	.word	0x08008b2b
 80088ac:	08008b2b 	.word	0x08008b2b
 80088b0:	08008b2b 	.word	0x08008b2b
 80088b4:	08008b2b 	.word	0x08008b2b
 80088b8:	08008b2b 	.word	0x08008b2b
 80088bc:	08008b2b 	.word	0x08008b2b
 80088c0:	08008b2b 	.word	0x08008b2b
 80088c4:	080088c9 	.word	0x080088c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	7c12      	ldrb	r2, [r2, #16]
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088ea:	e126      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb06 	bl	8008f00 <USBD_CtlError>
      err++;
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	3301      	adds	r3, #1
 80088f8:	72fb      	strb	r3, [r7, #11]
    break;
 80088fa:	e11e      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
    break;
 8008912:	e112      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7c1b      	ldrb	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10d      	bne.n	8008938 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008924:	f107 0208 	add.w	r2, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	2202      	movs	r2, #2
 8008934:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008936:	e100      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	f107 0208 	add.w	r2, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
    break;
 8008952:	e0f2      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	885b      	ldrh	r3, [r3, #2]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b05      	cmp	r3, #5
 800895c:	f200 80ac 	bhi.w	8008ab8 <USBD_GetDescriptor+0x258>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <USBD_GetDescriptor+0x108>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	08008981 	.word	0x08008981
 800896c:	080089b5 	.word	0x080089b5
 8008970:	080089e9 	.word	0x080089e9
 8008974:	08008a1d 	.word	0x08008a1d
 8008978:	08008a51 	.word	0x08008a51
 800897c:	08008a85 	.word	0x08008a85
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a2:	e091      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 faaa 	bl	8008f00 <USBD_CtlError>
        err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
      break;
 80089b2:	e089      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d6:	e077      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa90 	bl	8008f00 <USBD_CtlError>
        err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
      break;
 80089e6:	e06f      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0a:	e05d      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa76 	bl	8008f00 <USBD_CtlError>
        err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1a:	e055      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a3e:	e043      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa5c 	bl	8008f00 <USBD_CtlError>
        err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a4e:	e03b      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a72:	e029      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa42 	bl	8008f00 <USBD_CtlError>
        err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
      break;
 8008a82:	e021      	b.n	8008ac8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7c12      	ldrb	r2, [r2, #16]
 8008a9c:	f107 0108 	add.w	r1, r7, #8
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa6:	e00f      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa28 	bl	8008f00 <USBD_CtlError>
        err++;
 8008ab0:	7afb      	ldrb	r3, [r7, #11]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab6:	e007      	b.n	8008ac8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa20 	bl	8008f00 <USBD_CtlError>
      err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008ac6:	bf00      	nop
    }
    break;
 8008ac8:	e037      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7c1b      	ldrb	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	f107 0208 	add.w	r2, r7, #8
 8008ade:	4610      	mov	r0, r2
 8008ae0:	4798      	blx	r3
 8008ae2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ae4:	e029      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa09 	bl	8008f00 <USBD_CtlError>
      err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
    break;
 8008af4:	e021      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10d      	bne.n	8008b1a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f107 0208 	add.w	r2, r7, #8
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4798      	blx	r3
 8008b0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	2207      	movs	r2, #7
 8008b16:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b18:	e00f      	b.n	8008b3a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f9ef 	bl	8008f00 <USBD_CtlError>
      err++;
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	3301      	adds	r3, #1
 8008b26:	72fb      	strb	r3, [r7, #11]
    break;
 8008b28:	e007      	b.n	8008b3a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f9e7 	bl	8008f00 <USBD_CtlError>
    err++;
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	3301      	adds	r3, #1
 8008b36:	72fb      	strb	r3, [r7, #11]
    break;
 8008b38:	bf00      	nop
  }

  if (err != 0U)
 8008b3a:	7afb      	ldrb	r3, [r7, #11]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11e      	bne.n	8008b7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	88db      	ldrh	r3, [r3, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d016      	beq.n	8008b76 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b48:	893b      	ldrh	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88da      	ldrh	r2, [r3, #6]
 8008b52:	893b      	ldrh	r3, [r7, #8]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bf28      	it	cs
 8008b58:	4613      	movcs	r3, r2
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b5e:	893b      	ldrh	r3, [r7, #8]
 8008b60:	461a      	mov	r2, r3
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa3c 	bl	8008fe2 <USBD_CtlSendData>
 8008b6a:	e009      	b.n	8008b80 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9c6 	bl	8008f00 <USBD_CtlError>
 8008b74:	e004      	b.n	8008b80 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa8d 	bl	8009096 <USBD_CtlSendStatus>
 8008b7c:	e000      	b.n	8008b80 <USBD_GetDescriptor+0x320>
    return;
 8008b7e:	bf00      	nop
    }
  }
}
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop

08008b88 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	889b      	ldrh	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d130      	bne.n	8008bfc <USBD_SetAddress+0x74>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d12c      	bne.n	8008bfc <USBD_SetAddress+0x74>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ba8:	d828      	bhi.n	8008bfc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	885b      	ldrh	r3, [r3, #2]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d104      	bne.n	8008bca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f99c 	bl	8008f00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc8:	e01c      	b.n	8008c04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7bfa      	ldrb	r2, [r7, #15]
 8008bce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fe87 	bl	80098ea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fa5a 	bl	8009096 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf0:	e008      	b.n	8008c04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfa:	e003      	b.n	8008c04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f97e 	bl	8008f00 <USBD_CtlError>
  }
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	4b4b      	ldr	r3, [pc, #300]	; (8008d50 <USBD_SetConfig+0x144>)
 8008c22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c24:	4b4a      	ldr	r3, [pc, #296]	; (8008d50 <USBD_SetConfig+0x144>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d905      	bls.n	8008c38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f966 	bl	8008f00 <USBD_CtlError>
    return USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e087      	b.n	8008d48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d002      	beq.n	8008c48 <USBD_SetConfig+0x3c>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d025      	beq.n	8008c92 <USBD_SetConfig+0x86>
 8008c46:	e071      	b.n	8008d2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c48:	4b41      	ldr	r3, [pc, #260]	; (8008d50 <USBD_SetConfig+0x144>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01c      	beq.n	8008c8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c50:	4b3f      	ldr	r3, [pc, #252]	; (8008d50 <USBD_SetConfig+0x144>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c5a:	4b3d      	ldr	r3, [pc, #244]	; (8008d50 <USBD_SetConfig+0x144>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff f9bd 	bl	8007fe0 <USBD_SetClassConfig>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f944 	bl	8008f00 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c78:	e065      	b.n	8008d46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa0b 	bl	8009096 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2203      	movs	r2, #3
 8008c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c88:	e05d      	b.n	8008d46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa03 	bl	8009096 <USBD_CtlSendStatus>
    break;
 8008c90:	e059      	b.n	8008d46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c92:	4b2f      	ldr	r3, [pc, #188]	; (8008d50 <USBD_SetConfig+0x144>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d112      	bne.n	8008cc0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008ca2:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <USBD_SetConfig+0x144>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cac:	4b28      	ldr	r3, [pc, #160]	; (8008d50 <USBD_SetConfig+0x144>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff f9b0 	bl	8008018 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9ec 	bl	8009096 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cbe:	e042      	b.n	8008d46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008cc0:	4b23      	ldr	r3, [pc, #140]	; (8008d50 <USBD_SetConfig+0x144>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d02a      	beq.n	8008d24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff f99e 	bl	8008018 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008cdc:	4b1c      	ldr	r3, [pc, #112]	; (8008d50 <USBD_SetConfig+0x144>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce6:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <USBD_SetConfig+0x144>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff f977 	bl	8007fe0 <USBD_SetClassConfig>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00f      	beq.n	8008d1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f8fe 	bl	8008f00 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff f983 	bl	8008018 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d1a:	e014      	b.n	8008d46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f9ba 	bl	8009096 <USBD_CtlSendStatus>
    break;
 8008d22:	e010      	b.n	8008d46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f9b6 	bl	8009096 <USBD_CtlSendStatus>
    break;
 8008d2a:	e00c      	b.n	8008d46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8e6 	bl	8008f00 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <USBD_SetConfig+0x144>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff f96c 	bl	8008018 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d40:	2303      	movs	r3, #3
 8008d42:	73fb      	strb	r3, [r7, #15]
    break;
 8008d44:	bf00      	nop
  }

  return ret;
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	200001de 	.word	0x200001de

08008d54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d004      	beq.n	8008d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f8c9 	bl	8008f00 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d6e:	e021      	b.n	8008db4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	db17      	blt.n	8008daa <USBD_GetConfig+0x56>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	dd02      	ble.n	8008d84 <USBD_GetConfig+0x30>
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d00b      	beq.n	8008d9a <USBD_GetConfig+0x46>
 8008d82:	e012      	b.n	8008daa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	2201      	movs	r2, #1
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f925 	bl	8008fe2 <USBD_CtlSendData>
      break;
 8008d98:	e00c      	b.n	8008db4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	2201      	movs	r2, #1
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f91d 	bl	8008fe2 <USBD_CtlSendData>
      break;
 8008da8:	e004      	b.n	8008db4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f8a7 	bl	8008f00 <USBD_CtlError>
      break;
 8008db2:	bf00      	nop
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d81e      	bhi.n	8008e10 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88db      	ldrh	r3, [r3, #6]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d004      	beq.n	8008de4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f88f 	bl	8008f00 <USBD_CtlError>
      break;
 8008de2:	e01a      	b.n	8008e1a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d005      	beq.n	8008e00 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f043 0202 	orr.w	r2, r3, #2
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	330c      	adds	r3, #12
 8008e04:	2202      	movs	r2, #2
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f8ea 	bl	8008fe2 <USBD_CtlSendData>
    break;
 8008e0e:	e004      	b.n	8008e1a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f874 	bl	8008f00 <USBD_CtlError>
    break;
 8008e18:	bf00      	nop
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	885b      	ldrh	r3, [r3, #2]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d106      	bne.n	8008e42 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f92a 	bl	8009096 <USBD_CtlSendStatus>
  }
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d80b      	bhi.n	8008e78 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	885b      	ldrh	r3, [r3, #2]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d10c      	bne.n	8008e82 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f910 	bl	8009096 <USBD_CtlSendStatus>
      }
      break;
 8008e76:	e004      	b.n	8008e82 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f840 	bl	8008f00 <USBD_CtlError>
      break;
 8008e80:	e000      	b.n	8008e84 <USBD_ClrFeature+0x3a>
      break;
 8008e82:	bf00      	nop
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	781a      	ldrb	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff faa8 	bl	800840c <SWAPBYTE>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff fa9b 	bl	800840c <SWAPBYTE>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7ff fa8e 	bl	800840c <SWAPBYTE>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	80da      	strh	r2, [r3, #6]
}
 8008ef8:	bf00      	nop
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f0a:	2180      	movs	r1, #128	; 0x80
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fc81 	bl	8009814 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f12:	2100      	movs	r1, #0
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fc7d 	bl	8009814 <USBD_LL_StallEP>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b086      	sub	sp, #24
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d036      	beq.n	8008fa6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f3c:	6938      	ldr	r0, [r7, #16]
 8008f3e:	f000 f836 	bl	8008fae <USBD_GetLen>
 8008f42:	4603      	mov	r3, r0
 8008f44:	3301      	adds	r3, #1
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	7812      	ldrb	r2, [r2, #0]
 8008f5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	4413      	add	r3, r2
 8008f68:	2203      	movs	r2, #3
 8008f6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f72:	e013      	b.n	8008f9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	3301      	adds	r3, #1
 8008f84:	613b      	str	r3, [r7, #16]
    idx++;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e7      	bne.n	8008f74 <USBD_GetString+0x52>
 8008fa4:	e000      	b.n	8008fa8 <USBD_GetString+0x86>
    return;
 8008fa6:	bf00      	nop
  }
}
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b085      	sub	sp, #20
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fbe:	e005      	b.n	8008fcc <USBD_GetLen+0x1e>
  {
    len++;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1f5      	bne.n	8008fc0 <USBD_GetLen+0x12>
  }

  return len;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	2100      	movs	r1, #0
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fc8d 	bl	8009928 <USBD_LL_Transmit>

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	2100      	movs	r1, #0
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fc7c 	bl	8009928 <USBD_LL_Transmit>

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2203      	movs	r2, #3
 800904a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	2100      	movs	r1, #0
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fc80 	bl	800996a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	2100      	movs	r1, #0
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fc6f 	bl	800996a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2204      	movs	r2, #4
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc3b 	bl	8009928 <USBD_LL_Transmit>

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2205      	movs	r2, #5
 80090c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090cc:	2300      	movs	r3, #0
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fc49 	bl	800996a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80090e8:	2200      	movs	r2, #0
 80090ea:	4912      	ldr	r1, [pc, #72]	; (8009134 <MX_USB_Device_Init+0x50>)
 80090ec:	4812      	ldr	r0, [pc, #72]	; (8009138 <MX_USB_Device_Init+0x54>)
 80090ee:	f7fe ff09 	bl	8007f04 <USBD_Init>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090f8:	f7f7 ff08 	bl	8000f0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090fc:	490f      	ldr	r1, [pc, #60]	; (800913c <MX_USB_Device_Init+0x58>)
 80090fe:	480e      	ldr	r0, [pc, #56]	; (8009138 <MX_USB_Device_Init+0x54>)
 8009100:	f7fe ff30 	bl	8007f64 <USBD_RegisterClass>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800910a:	f7f7 feff 	bl	8000f0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800910e:	490c      	ldr	r1, [pc, #48]	; (8009140 <MX_USB_Device_Init+0x5c>)
 8009110:	4809      	ldr	r0, [pc, #36]	; (8009138 <MX_USB_Device_Init+0x54>)
 8009112:	f7fe fe5b 	bl	8007dcc <USBD_CDC_RegisterInterface>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800911c:	f7f7 fef6 	bl	8000f0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009120:	4805      	ldr	r0, [pc, #20]	; (8009138 <MX_USB_Device_Init+0x54>)
 8009122:	f7fe ff46 	bl	8007fb2 <USBD_Start>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800912c:	f7f7 feee 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009130:	bf00      	nop
 8009132:	bd80      	pop	{r7, pc}
 8009134:	2000013c 	.word	0x2000013c
 8009138:	200006b0 	.word	0x200006b0
 800913c:	20000024 	.word	0x20000024
 8009140:	20000128 	.word	0x20000128

08009144 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009148:	2200      	movs	r2, #0
 800914a:	4905      	ldr	r1, [pc, #20]	; (8009160 <CDC_Init_FS+0x1c>)
 800914c:	4805      	ldr	r0, [pc, #20]	; (8009164 <CDC_Init_FS+0x20>)
 800914e:	f7fe fe52 	bl	8007df6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009152:	4905      	ldr	r1, [pc, #20]	; (8009168 <CDC_Init_FS+0x24>)
 8009154:	4803      	ldr	r0, [pc, #12]	; (8009164 <CDC_Init_FS+0x20>)
 8009156:	f7fe fe67 	bl	8007e28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800915a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000d68 	.word	0x20000d68
 8009164:	200006b0 	.word	0x200006b0
 8009168:	20000980 	.word	0x20000980

0800916c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009170:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009172:	4618      	mov	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
 8009188:	4613      	mov	r3, r2
 800918a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b23      	cmp	r3, #35	; 0x23
 8009190:	d84a      	bhi.n	8009228 <CDC_Control_FS+0xac>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <CDC_Control_FS+0x1c>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	08009229 	.word	0x08009229
 800919c:	08009229 	.word	0x08009229
 80091a0:	08009229 	.word	0x08009229
 80091a4:	08009229 	.word	0x08009229
 80091a8:	08009229 	.word	0x08009229
 80091ac:	08009229 	.word	0x08009229
 80091b0:	08009229 	.word	0x08009229
 80091b4:	08009229 	.word	0x08009229
 80091b8:	08009229 	.word	0x08009229
 80091bc:	08009229 	.word	0x08009229
 80091c0:	08009229 	.word	0x08009229
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009229 	.word	0x08009229
 80091cc:	08009229 	.word	0x08009229
 80091d0:	08009229 	.word	0x08009229
 80091d4:	08009229 	.word	0x08009229
 80091d8:	08009229 	.word	0x08009229
 80091dc:	08009229 	.word	0x08009229
 80091e0:	08009229 	.word	0x08009229
 80091e4:	08009229 	.word	0x08009229
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009229 	.word	0x08009229
 80091f0:	08009229 	.word	0x08009229
 80091f4:	08009229 	.word	0x08009229
 80091f8:	08009229 	.word	0x08009229
 80091fc:	08009229 	.word	0x08009229
 8009200:	08009229 	.word	0x08009229
 8009204:	08009229 	.word	0x08009229
 8009208:	08009229 	.word	0x08009229
 800920c:	08009229 	.word	0x08009229
 8009210:	08009229 	.word	0x08009229
 8009214:	08009229 	.word	0x08009229
 8009218:	08009229 	.word	0x08009229
 800921c:	08009229 	.word	0x08009229
 8009220:	08009229 	.word	0x08009229
 8009224:	08009229 	.word	0x08009229
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009228:	bf00      	nop
  }

  return (USBD_OK);
 800922a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7f6 ffe7 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4805      	ldr	r0, [pc, #20]	; (8009264 <CDC_Receive_FS+0x2c>)
 800924e:	f7fe fdeb 	bl	8007e28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009252:	4804      	ldr	r0, [pc, #16]	; (8009264 <CDC_Receive_FS+0x2c>)
 8009254:	f7fe fe2c 	bl	8007eb0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009258:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200006b0 	.word	0x200006b0

08009268 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009278:	4b0d      	ldr	r3, [pc, #52]	; (80092b0 <CDC_Transmit_FS+0x48>)
 800927a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800927e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800928a:	2301      	movs	r3, #1
 800928c:	e00b      	b.n	80092a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800928e:	887b      	ldrh	r3, [r7, #2]
 8009290:	461a      	mov	r2, r3
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	4806      	ldr	r0, [pc, #24]	; (80092b0 <CDC_Transmit_FS+0x48>)
 8009296:	f7fe fdae 	bl	8007df6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800929a:	4805      	ldr	r0, [pc, #20]	; (80092b0 <CDC_Transmit_FS+0x48>)
 800929c:	f7fe fdd8 	bl	8007e50 <USBD_CDC_TransmitPacket>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200006b0 	.word	0x200006b0

080092b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
	...

080092d8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	6039      	str	r1, [r7, #0]
 80092e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2212      	movs	r2, #18
 80092e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092ea:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	2000015c 	.word	0x2000015c

080092fc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2204      	movs	r2, #4
 800930c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800930e:	4b03      	ldr	r3, [pc, #12]	; (800931c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	20000170 	.word	0x20000170

08009320 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d105      	bne.n	800933e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4907      	ldr	r1, [pc, #28]	; (8009354 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009336:	4808      	ldr	r0, [pc, #32]	; (8009358 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009338:	f7ff fdf3 	bl	8008f22 <USBD_GetString>
 800933c:	e004      	b.n	8009348 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4904      	ldr	r1, [pc, #16]	; (8009354 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009342:	4805      	ldr	r0, [pc, #20]	; (8009358 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009344:	f7ff fded 	bl	8008f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009348:	4b02      	ldr	r3, [pc, #8]	; (8009354 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20001150 	.word	0x20001150
 8009358:	08009b5c 	.word	0x08009b5c

0800935c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	4904      	ldr	r1, [pc, #16]	; (800937c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800936c:	4804      	ldr	r0, [pc, #16]	; (8009380 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800936e:	f7ff fdd8 	bl	8008f22 <USBD_GetString>
  return USBD_StrDesc;
 8009372:	4b02      	ldr	r3, [pc, #8]	; (800937c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20001150 	.word	0x20001150
 8009380:	08009b74 	.word	0x08009b74

08009384 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	221a      	movs	r2, #26
 8009394:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009396:	f000 f843 	bl	8009420 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800939a:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000174 	.word	0x20000174

080093a8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d105      	bne.n	80093c6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4907      	ldr	r1, [pc, #28]	; (80093dc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093be:	4808      	ldr	r0, [pc, #32]	; (80093e0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093c0:	f7ff fdaf 	bl	8008f22 <USBD_GetString>
 80093c4:	e004      	b.n	80093d0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4904      	ldr	r1, [pc, #16]	; (80093dc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093ca:	4805      	ldr	r0, [pc, #20]	; (80093e0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093cc:	f7ff fda9 	bl	8008f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20001150 	.word	0x20001150
 80093e0:	08009b88 	.word	0x08009b88

080093e4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d105      	bne.n	8009402 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	4907      	ldr	r1, [pc, #28]	; (8009418 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093fa:	4808      	ldr	r0, [pc, #32]	; (800941c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093fc:	f7ff fd91 	bl	8008f22 <USBD_GetString>
 8009400:	e004      	b.n	800940c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	4904      	ldr	r1, [pc, #16]	; (8009418 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009406:	4805      	ldr	r0, [pc, #20]	; (800941c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009408:	f7ff fd8b 	bl	8008f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20001150 	.word	0x20001150
 800941c:	08009b94 	.word	0x08009b94

08009420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <Get_SerialNum+0x44>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800942c:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <Get_SerialNum+0x48>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <Get_SerialNum+0x4c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4413      	add	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009446:	2208      	movs	r2, #8
 8009448:	4909      	ldr	r1, [pc, #36]	; (8009470 <Get_SerialNum+0x50>)
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f814 	bl	8009478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009450:	2204      	movs	r2, #4
 8009452:	4908      	ldr	r1, [pc, #32]	; (8009474 <Get_SerialNum+0x54>)
 8009454:	68b8      	ldr	r0, [r7, #8]
 8009456:	f000 f80f 	bl	8009478 <IntToUnicode>
  }
}
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	1fff7590 	.word	0x1fff7590
 8009468:	1fff7594 	.word	0x1fff7594
 800946c:	1fff7598 	.word	0x1fff7598
 8009470:	20000176 	.word	0x20000176
 8009474:	20000186 	.word	0x20000186

08009478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]
 800948e:	e027      	b.n	80094e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	0f1b      	lsrs	r3, r3, #28
 8009494:	2b09      	cmp	r3, #9
 8009496:	d80b      	bhi.n	80094b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	0f1b      	lsrs	r3, r3, #28
 800949c:	b2da      	uxtb	r2, r3
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	4619      	mov	r1, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	440b      	add	r3, r1
 80094a8:	3230      	adds	r2, #48	; 0x30
 80094aa:	b2d2      	uxtb	r2, r2
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	e00a      	b.n	80094c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0f1b      	lsrs	r3, r3, #28
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	4619      	mov	r1, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	440b      	add	r3, r1
 80094c0:	3237      	adds	r2, #55	; 0x37
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	3301      	adds	r3, #1
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4413      	add	r3, r2
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	3301      	adds	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
 80094e0:	7dfa      	ldrb	r2, [r7, #23]
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d3d3      	bcc.n	8009490 <IntToUnicode+0x18>
  }
}
 80094e8:	bf00      	nop
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0d      	ldr	r2, [pc, #52]	; (8009538 <HAL_PCD_MspInit+0x44>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d113      	bne.n	800952e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <HAL_PCD_MspInit+0x48>)
 8009508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950a:	4a0c      	ldr	r2, [pc, #48]	; (800953c <HAL_PCD_MspInit+0x48>)
 800950c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009510:	6593      	str	r3, [r2, #88]	; 0x58
 8009512:	4b0a      	ldr	r3, [pc, #40]	; (800953c <HAL_PCD_MspInit+0x48>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	2014      	movs	r0, #20
 8009524:	f7f8 f92b 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009528:	2014      	movs	r0, #20
 800952a:	f7f8 f942 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	40005c00 	.word	0x40005c00
 800953c:	40021000 	.word	0x40021000

08009540 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f7fe fd76 	bl	8008048 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	440b      	add	r3, r1
 8009584:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	4619      	mov	r1, r3
 800958e:	f7fe fdae 	bl	80080ee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	440b      	add	r3, r1
 80095ba:	333c      	adds	r3, #60	; 0x3c
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7fe fdf7 	bl	80081b4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe fefb 	bl	80083d8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095f2:	2301      	movs	r3, #1
 80095f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d001      	beq.n	8009602 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095fe:	f7f7 fc85 	bl	8000f0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009608:	7bfa      	ldrb	r2, [r7, #15]
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fea8 	bl	8008362 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe fe61 	bl	80082e0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fea3 	bl	8008382 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009644:	4b04      	ldr	r3, [pc, #16]	; (8009658 <HAL_PCD_SuspendCallback+0x30>)
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	4a03      	ldr	r2, [pc, #12]	; (8009658 <HAL_PCD_SuspendCallback+0x30>)
 800964a:	f043 0306 	orr.w	r3, r3, #6
 800964e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	e000ed00 	.word	0xe000ed00

0800965c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800966c:	4b08      	ldr	r3, [pc, #32]	; (8009690 <HAL_PCD_ResumeCallback+0x34>)
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4a07      	ldr	r2, [pc, #28]	; (8009690 <HAL_PCD_ResumeCallback+0x34>)
 8009672:	f023 0306 	bic.w	r3, r3, #6
 8009676:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009678:	f000 f9fa 	bl	8009a70 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fe92 	bl	80083ac <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	e000ed00 	.word	0xe000ed00

08009694 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800969c:	4a2b      	ldr	r2, [pc, #172]	; (800974c <USBD_LL_Init+0xb8>)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a29      	ldr	r2, [pc, #164]	; (800974c <USBD_LL_Init+0xb8>)
 80096a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096ac:	4b27      	ldr	r3, [pc, #156]	; (800974c <USBD_LL_Init+0xb8>)
 80096ae:	4a28      	ldr	r2, [pc, #160]	; (8009750 <USBD_LL_Init+0xbc>)
 80096b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096b2:	4b26      	ldr	r3, [pc, #152]	; (800974c <USBD_LL_Init+0xb8>)
 80096b4:	2208      	movs	r2, #8
 80096b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096b8:	4b24      	ldr	r3, [pc, #144]	; (800974c <USBD_LL_Init+0xb8>)
 80096ba:	2202      	movs	r2, #2
 80096bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096be:	4b23      	ldr	r3, [pc, #140]	; (800974c <USBD_LL_Init+0xb8>)
 80096c0:	2202      	movs	r2, #2
 80096c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096c4:	4b21      	ldr	r3, [pc, #132]	; (800974c <USBD_LL_Init+0xb8>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ca:	4b20      	ldr	r3, [pc, #128]	; (800974c <USBD_LL_Init+0xb8>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096d0:	4b1e      	ldr	r3, [pc, #120]	; (800974c <USBD_LL_Init+0xb8>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096d6:	4b1d      	ldr	r3, [pc, #116]	; (800974c <USBD_LL_Init+0xb8>)
 80096d8:	2200      	movs	r2, #0
 80096da:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096dc:	481b      	ldr	r0, [pc, #108]	; (800974c <USBD_LL_Init+0xb8>)
 80096de:	f7f8 fa37 	bl	8001b50 <HAL_PCD_Init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80096e8:	f7f7 fc10 	bl	8000f0c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096f2:	2318      	movs	r3, #24
 80096f4:	2200      	movs	r2, #0
 80096f6:	2100      	movs	r1, #0
 80096f8:	f7f9 fd25 	bl	8003146 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009702:	2358      	movs	r3, #88	; 0x58
 8009704:	2200      	movs	r2, #0
 8009706:	2180      	movs	r1, #128	; 0x80
 8009708:	f7f9 fd1d 	bl	8003146 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009712:	23c0      	movs	r3, #192	; 0xc0
 8009714:	2200      	movs	r2, #0
 8009716:	2181      	movs	r1, #129	; 0x81
 8009718:	f7f9 fd15 	bl	8003146 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009722:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009726:	2200      	movs	r2, #0
 8009728:	2101      	movs	r1, #1
 800972a:	f7f9 fd0c 	bl	8003146 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009738:	2200      	movs	r2, #0
 800973a:	2182      	movs	r1, #130	; 0x82
 800973c:	f7f9 fd03 	bl	8003146 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20001350 	.word	0x20001350
 8009750:	40005c00 	.word	0x40005c00

08009754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800976a:	4618      	mov	r0, r3
 800976c:	f7f8 fad5 	bl	8001d1a <HAL_PCD_Start>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f980 	bl	8009a7c <USBD_Get_USB_Status>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009780:	7bbb      	ldrb	r3, [r7, #14]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	4608      	mov	r0, r1
 8009794:	4611      	mov	r1, r2
 8009796:	461a      	mov	r2, r3
 8009798:	4603      	mov	r3, r0
 800979a:	70fb      	strb	r3, [r7, #3]
 800979c:	460b      	mov	r3, r1
 800979e:	70bb      	strb	r3, [r7, #2]
 80097a0:	4613      	mov	r3, r2
 80097a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097b2:	78bb      	ldrb	r3, [r7, #2]
 80097b4:	883a      	ldrh	r2, [r7, #0]
 80097b6:	78f9      	ldrb	r1, [r7, #3]
 80097b8:	f7f8 fc44 	bl	8002044 <HAL_PCD_EP_Open>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f95a 	bl	8009a7c <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f8 fc8b 	bl	8002110 <HAL_PCD_EP_Close>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f93b 	bl	8009a7c <USBD_Get_USB_Status>
 8009806:	4603      	mov	r3, r0
 8009808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980a:	7bbb      	ldrb	r3, [r7, #14]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f7f8 fd4c 	bl	80022d0 <HAL_PCD_EP_SetStall>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f91c 	bl	8009a7c <USBD_Get_USB_Status>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009848:	7bbb      	ldrb	r3, [r7, #14]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f7f8 fd8d 	bl	8002390 <HAL_PCD_EP_ClrStall>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	4618      	mov	r0, r3
 800987e:	f000 f8fd 	bl	8009a7c <USBD_Get_USB_Status>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009886:	7bbb      	ldrb	r3, [r7, #14]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0c      	bge.n	80098c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	440b      	add	r3, r1
 80098c0:	3302      	adds	r3, #2
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	e00b      	b.n	80098de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c6:	78fb      	ldrb	r3, [r7, #3]
 80098c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098cc:	68f9      	ldr	r1, [r7, #12]
 80098ce:	4613      	mov	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4413      	add	r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	440b      	add	r3, r1
 80098d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80098dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009904:	78fa      	ldrb	r2, [r7, #3]
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7f8 fb76 	bl	8001ffa <HAL_PCD_SetAddress>
 800990e:	4603      	mov	r3, r0
 8009910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009912:	7bfb      	ldrb	r3, [r7, #15]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 f8b1 	bl	8009a7c <USBD_Get_USB_Status>
 800991a:	4603      	mov	r3, r0
 800991c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	607a      	str	r2, [r7, #4]
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	460b      	mov	r3, r1
 8009936:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009946:	7af9      	ldrb	r1, [r7, #11]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	f7f8 fc7d 	bl	800224a <HAL_PCD_EP_Transmit>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f890 	bl	8009a7c <USBD_Get_USB_Status>
 800995c:	4603      	mov	r3, r0
 800995e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009960:	7dbb      	ldrb	r3, [r7, #22]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
 8009976:	460b      	mov	r3, r1
 8009978:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009988:	7af9      	ldrb	r1, [r7, #11]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	f7f8 fc07 	bl	80021a0 <HAL_PCD_EP_Receive>
 8009992:	4603      	mov	r3, r0
 8009994:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f86f 	bl	8009a7c <USBD_Get_USB_Status>
 800999e:	4603      	mov	r3, r0
 80099a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099be:	78fa      	ldrb	r2, [r7, #3]
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f8 fc29 	bl	800221a <HAL_PCD_EP_GetRxCount>
 80099c8:	4603      	mov	r3, r0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_PCDEx_LPM_Callback+0x18>
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d013      	beq.n	8009a12 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80099ea:	e023      	b.n	8009a34 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d007      	beq.n	8009a04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099f4:	f000 f83c 	bl	8009a70 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099f8:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <HAL_PCDEx_LPM_Callback+0x68>)
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	4a0f      	ldr	r2, [pc, #60]	; (8009a3c <HAL_PCDEx_LPM_Callback+0x68>)
 80099fe:	f023 0306 	bic.w	r3, r3, #6
 8009a02:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe fcce 	bl	80083ac <USBD_LL_Resume>
    break;
 8009a10:	e010      	b.n	8009a34 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fcb2 	bl	8008382 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	4a04      	ldr	r2, [pc, #16]	; (8009a3c <HAL_PCDEx_LPM_Callback+0x68>)
 8009a2c:	f043 0306 	orr.w	r3, r3, #6
 8009a30:	6113      	str	r3, [r2, #16]
    break;
 8009a32:	bf00      	nop
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	e000ed00 	.word	0xe000ed00

08009a40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <USBD_static_malloc+0x18>)
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	200001e0 	.word	0x200001e0

08009a5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]

}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a74:	f7f6 fd16 	bl	80004a4 <SystemClock_Config>
}
 8009a78:	bf00      	nop
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d817      	bhi.n	8009ac0 <USBD_Get_USB_Status+0x44>
 8009a90:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <USBD_Get_USB_Status+0x1c>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009aaf 	.word	0x08009aaf
 8009aa0:	08009ab5 	.word	0x08009ab5
 8009aa4:	08009abb 	.word	0x08009abb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009aac:	e00b      	b.n	8009ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab2:	e008      	b.n	8009ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab8:	e005      	b.n	8009ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aba:	2303      	movs	r3, #3
 8009abc:	73fb      	strb	r3, [r7, #15]
    break;
 8009abe:	e002      	b.n	8009ac6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac4:	bf00      	nop
  }
  return usb_status;
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <__libc_init_array>:
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4e0d      	ldr	r6, [pc, #52]	; (8009b0c <__libc_init_array+0x38>)
 8009ad8:	4c0d      	ldr	r4, [pc, #52]	; (8009b10 <__libc_init_array+0x3c>)
 8009ada:	1ba4      	subs	r4, r4, r6
 8009adc:	10a4      	asrs	r4, r4, #2
 8009ade:	2500      	movs	r5, #0
 8009ae0:	42a5      	cmp	r5, r4
 8009ae2:	d109      	bne.n	8009af8 <__libc_init_array+0x24>
 8009ae4:	4e0b      	ldr	r6, [pc, #44]	; (8009b14 <__libc_init_array+0x40>)
 8009ae6:	4c0c      	ldr	r4, [pc, #48]	; (8009b18 <__libc_init_array+0x44>)
 8009ae8:	f000 f82c 	bl	8009b44 <_init>
 8009aec:	1ba4      	subs	r4, r4, r6
 8009aee:	10a4      	asrs	r4, r4, #2
 8009af0:	2500      	movs	r5, #0
 8009af2:	42a5      	cmp	r5, r4
 8009af4:	d105      	bne.n	8009b02 <__libc_init_array+0x2e>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009afc:	4798      	blx	r3
 8009afe:	3501      	adds	r5, #1
 8009b00:	e7ee      	b.n	8009ae0 <__libc_init_array+0xc>
 8009b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b06:	4798      	blx	r3
 8009b08:	3501      	adds	r5, #1
 8009b0a:	e7f2      	b.n	8009af2 <__libc_init_array+0x1e>
 8009b0c:	08009bb4 	.word	0x08009bb4
 8009b10:	08009bb4 	.word	0x08009bb4
 8009b14:	08009bb4 	.word	0x08009bb4
 8009b18:	08009bb8 	.word	0x08009bb8

08009b1c <memcpy>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	1e43      	subs	r3, r0, #1
 8009b20:	440a      	add	r2, r1
 8009b22:	4291      	cmp	r1, r2
 8009b24:	d100      	bne.n	8009b28 <memcpy+0xc>
 8009b26:	bd10      	pop	{r4, pc}
 8009b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b30:	e7f7      	b.n	8009b22 <memcpy+0x6>

08009b32 <memset>:
 8009b32:	4402      	add	r2, r0
 8009b34:	4603      	mov	r3, r0
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d100      	bne.n	8009b3c <memset+0xa>
 8009b3a:	4770      	bx	lr
 8009b3c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b40:	e7f9      	b.n	8009b36 <memset+0x4>
	...

08009b44 <_init>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	bf00      	nop
 8009b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4a:	bc08      	pop	{r3}
 8009b4c:	469e      	mov	lr, r3
 8009b4e:	4770      	bx	lr

08009b50 <_fini>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	bf00      	nop
 8009b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b56:	bc08      	pop	{r3}
 8009b58:	469e      	mov	lr, r3
 8009b5a:	4770      	bx	lr
