
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009880  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009a58  08009a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab0  08009ab0  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009ab0  08009ab0  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ab0  08009ab0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000184  08009c3c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  08009c3c  00021620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac66  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344b  00000000  00000000  0003ae1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003e268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bbe  00000000  00000000  00060da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c421e  00000000  00000000  00072961  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  00136bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009a40 	.word	0x08009a40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009a40 	.word	0x08009a40

08000218 <CDC_On_Receive>:

volatile uint8_t command_received = 0;
volatile uint8_t current_period = 0;
volatile uint8_t command_received_period = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10e      	bne.n	8000248 <CDC_On_Receive+0x30>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fbf2 	bl	8009a18 <memcpy>

		if (command.delimiter == 0xBAD) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800023a:	f640 32ad 	movw	r2, #2989	; 0xbad
 800023e:	4293      	cmp	r3, r2
 8000240:	d102      	bne.n	8000248 <CDC_On_Receive+0x30>
			command_received = 1;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001b6 	.word	0x200001b6

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f001 f8c0 	bl	80013e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f8f9 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 fd4f 	bl	8000d08 <MX_GPIO_Init>
  MX_TIM4_Init();
 800026a:	f000 fad5 	bl	8000818 <MX_TIM4_Init>
  MX_TIM8_Init();
 800026e:	f000 fb61 	bl	8000934 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000272:	f000 fbcf 	bl	8000a14 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000276:	f000 fc53 	bl	8000b20 <MX_TIM16_Init>
  MX_TIM1_Init();
 800027a:	f000 f955 	bl	8000528 <MX_TIM1_Init>
  MX_TIM2_Init();
 800027e:	f000 fa03 	bl	8000688 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000282:	f000 fa55 	bl	8000730 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000286:	f000 fb1d 	bl	80008c4 <MX_TIM7_Init>
  MX_TIM17_Init();
 800028a:	f000 fcc3 	bl	8000c14 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800028e:	f008 fea7 	bl	8008fe0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000292:	2104      	movs	r1, #4
 8000294:	485c      	ldr	r0, [pc, #368]	; (8000408 <main+0x1b0>)
 8000296:	f004 f9a1 	bl	80045dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800029a:	2104      	movs	r1, #4
 800029c:	485b      	ldr	r0, [pc, #364]	; (800040c <main+0x1b4>)
 800029e:	f004 f99d 	bl	80045dc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002a2:	2104      	movs	r1, #4
 80002a4:	485a      	ldr	r0, [pc, #360]	; (8000410 <main+0x1b8>)
 80002a6:	f004 f999 	bl	80045dc <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002aa:	2100      	movs	r1, #0
 80002ac:	4859      	ldr	r0, [pc, #356]	; (8000414 <main+0x1bc>)
 80002ae:	f003 ffef 	bl	8004290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002b2:	2104      	movs	r1, #4
 80002b4:	4857      	ldr	r0, [pc, #348]	; (8000414 <main+0x1bc>)
 80002b6:	f003 ffeb 	bl	8004290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002ba:	2108      	movs	r1, #8
 80002bc:	4855      	ldr	r0, [pc, #340]	; (8000414 <main+0x1bc>)
 80002be:	f003 ffe7 	bl	8004290 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 80002c2:	4b55      	ldr	r3, [pc, #340]	; (8000418 <main+0x1c0>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 80002c8:	4b53      	ldr	r3, [pc, #332]	; (8000418 <main+0x1c0>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80002ce:	4b52      	ldr	r3, [pc, #328]	; (8000418 <main+0x1c0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d4:	2100      	movs	r1, #0
 80002d6:	4851      	ldr	r0, [pc, #324]	; (800041c <main+0x1c4>)
 80002d8:	f003 ffda 	bl	8004290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002dc:	2104      	movs	r1, #4
 80002de:	484f      	ldr	r0, [pc, #316]	; (800041c <main+0x1c4>)
 80002e0:	f003 ffd6 	bl	8004290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002e4:	2108      	movs	r1, #8
 80002e6:	484d      	ldr	r0, [pc, #308]	; (800041c <main+0x1c4>)
 80002e8:	f003 ffd2 	bl	8004290 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 80002ec:	4b4c      	ldr	r3, [pc, #304]	; (8000420 <main+0x1c8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80002f2:	4b4b      	ldr	r3, [pc, #300]	; (8000420 <main+0x1c8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80002f8:	4b49      	ldr	r3, [pc, #292]	; (8000420 <main+0x1c8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80002fe:	2100      	movs	r1, #0
 8000300:	4848      	ldr	r0, [pc, #288]	; (8000424 <main+0x1cc>)
 8000302:	f003 ffc5 	bl	8004290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000306:	2100      	movs	r1, #0
 8000308:	4847      	ldr	r0, [pc, #284]	; (8000428 <main+0x1d0>)
 800030a:	f003 ffc1 	bl	8004290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800030e:	2100      	movs	r1, #0
 8000310:	4846      	ldr	r0, [pc, #280]	; (800042c <main+0x1d4>)
 8000312:	f003 ffbd 	bl	8004290 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 8000316:	4b46      	ldr	r3, [pc, #280]	; (8000430 <main+0x1d8>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 800031c:	4b45      	ldr	r3, [pc, #276]	; (8000434 <main+0x1dc>)
 800031e:	2200      	movs	r2, #0
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 8000322:	4b45      	ldr	r3, [pc, #276]	; (8000438 <main+0x1e0>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000328:	4844      	ldr	r0, [pc, #272]	; (800043c <main+0x1e4>)
 800032a:	f003 feef 	bl	800410c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 800032e:	4b44      	ldr	r3, [pc, #272]	; (8000440 <main+0x1e8>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b01      	cmp	r3, #1
 8000336:	d1fa      	bne.n	800032e <main+0xd6>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000338:	2120      	movs	r1, #32
 800033a:	4842      	ldr	r0, [pc, #264]	; (8000444 <main+0x1ec>)
 800033c:	f001 fb6c 	bl	8001a18 <HAL_GPIO_TogglePin>
		command_received = 0;
 8000340:	4b3f      	ldr	r3, [pc, #252]	; (8000440 <main+0x1e8>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]

		feedback.motor1 = 5;
 8000346:	4b40      	ldr	r3, [pc, #256]	; (8000448 <main+0x1f0>)
 8000348:	2205      	movs	r2, #5
 800034a:	801a      	strh	r2, [r3, #0]
		feedback.motor2 = 4;
 800034c:	4b3e      	ldr	r3, [pc, #248]	; (8000448 <main+0x1f0>)
 800034e:	2204      	movs	r2, #4
 8000350:	805a      	strh	r2, [r3, #2]
		feedback.motor3 = 3;
 8000352:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <main+0x1f0>)
 8000354:	2203      	movs	r2, #3
 8000356:	809a      	strh	r2, [r3, #4]
		feedback.thrower = 2;
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <main+0x1f0>)
 800035a:	2202      	movs	r2, #2
 800035c:	80da      	strh	r2, [r3, #6]

		int m1duty = command.motor1 * 130;
 800035e:	4b3b      	ldr	r3, [pc, #236]	; (800044c <main+0x1f4>)
 8000360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000364:	461a      	mov	r2, r3
 8000366:	4613      	mov	r3, r2
 8000368:	019b      	lsls	r3, r3, #6
 800036a:	4413      	add	r3, r2
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
		int m2duty = command.motor2 * 130;
 8000370:	4b36      	ldr	r3, [pc, #216]	; (800044c <main+0x1f4>)
 8000372:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000376:	461a      	mov	r2, r3
 8000378:	4613      	mov	r3, r2
 800037a:	019b      	lsls	r3, r3, #6
 800037c:	4413      	add	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
		int m3duty = command.motor3 * 130;
 8000382:	4b32      	ldr	r3, [pc, #200]	; (800044c <main+0x1f4>)
 8000384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000388:	461a      	mov	r2, r3
 800038a:	4613      	mov	r3, r2
 800038c:	019b      	lsls	r3, r3, #6
 800038e:	4413      	add	r3, r2
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
		if (m1duty > 0) {
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	2b00      	cmp	r3, #0
 8000398:	dd06      	ble.n	80003a8 <main+0x150>
			TIM1->CCR3 = m1duty;
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <main+0x1c0>)
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR2 = 0;
 80003a0:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <main+0x1c0>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	639a      	str	r2, [r3, #56]	; 0x38
 80003a6:	e005      	b.n	80003b4 <main+0x15c>
		} else {
			TIM1->CCR2 = m1duty;
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <main+0x1c0>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6393      	str	r3, [r2, #56]	; 0x38
			TIM1->CCR3 = 0;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <main+0x1c0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if (m2duty > 0) {
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	dd06      	ble.n	80003c8 <main+0x170>
			TIM1->CCR1 = m2duty;
 80003ba:	4a17      	ldr	r2, [pc, #92]	; (8000418 <main+0x1c0>)
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR3 = 0;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <main+0x1c8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80003c6:	e005      	b.n	80003d4 <main+0x17c>
		} else {
			TIM3->CCR3 = m2duty;
 80003c8:	4a15      	ldr	r2, [pc, #84]	; (8000420 <main+0x1c8>)
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR1 = 0;
 80003ce:	4b12      	ldr	r3, [pc, #72]	; (8000418 <main+0x1c0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if (m3duty > 0) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	dd06      	ble.n	80003e8 <main+0x190>
			TIM3->CCR1 = m3duty;
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <main+0x1c8>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 0;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <main+0x1c8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	639a      	str	r2, [r3, #56]	; 0x38
 80003e6:	e005      	b.n	80003f4 <main+0x19c>
		} else {
			TIM3->CCR2 = m3duty;
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <main+0x1c8>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR2 = 0;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <main+0x1c8>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	639a      	str	r2, [r3, #56]	; 0x38
		}
		command_received_period = current_period;
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <main+0x1f8>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <main+0x1fc>)
 80003fc:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80003fe:	210a      	movs	r1, #10
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <main+0x1f0>)
 8000402:	f008 feaf 	bl	8009164 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000406:	e792      	b.n	800032e <main+0xd6>
 8000408:	200005a4 	.word	0x200005a4
 800040c:	20000428 	.word	0x20000428
 8000410:	200003dc 	.word	0x200003dc
 8000414:	20000558 	.word	0x20000558
 8000418:	40012c00 	.word	0x40012c00
 800041c:	2000050c 	.word	0x2000050c
 8000420:	40000400 	.word	0x40000400
 8000424:	20000474 	.word	0x20000474
 8000428:	200005f0 	.word	0x200005f0
 800042c:	200004c0 	.word	0x200004c0
 8000430:	40014000 	.word	0x40014000
 8000434:	40014400 	.word	0x40014400
 8000438:	40014800 	.word	0x40014800
 800043c:	2000063c 	.word	0x2000063c
 8000440:	200001b6 	.word	0x200001b6
 8000444:	48000400 	.word	0x48000400
 8000448:	200001ac 	.word	0x200001ac
 800044c:	200001a0 	.word	0x200001a0
 8000450:	200001b7 	.word	0x200001b7
 8000454:	200001b8 	.word	0x200001b8

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b0a4      	sub	sp, #144	; 0x90
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000462:	2238      	movs	r2, #56	; 0x38
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f009 fae1 	bl	8009a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2244      	movs	r2, #68	; 0x44
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f009 fad3 	bl	8009a2e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000488:	2000      	movs	r0, #0
 800048a:	f002 fe47 	bl	800311c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800048e:	2322      	movs	r3, #34	; 0x22
 8000490:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000496:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800049c:	2301      	movs	r3, #1
 800049e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	2302      	movs	r3, #2
 80004a2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a4:	2302      	movs	r3, #2
 80004a6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80004ac:	2314      	movs	r3, #20
 80004ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 fedb 	bl	8003284 <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004d4:	f000 fc98 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	230f      	movs	r3, #15
 80004da:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004dc:	2303      	movs	r3, #3
 80004de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004f0:	2104      	movs	r1, #4
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 f9de 	bl	80038b4 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004fe:	f000 fc83 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000506:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000508:	2300      	movs	r3, #0
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fbb4 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800051a:	f000 fc75 	bl	8000e08 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3790      	adds	r7, #144	; 0x90
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	; 0x60
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2234      	movs	r2, #52	; 0x34
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f009 fa6a 	bl	8009a2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800055a:	4b49      	ldr	r3, [pc, #292]	; (8000680 <MX_TIM1_Init+0x158>)
 800055c:	4a49      	ldr	r2, [pc, #292]	; (8000684 <MX_TIM1_Init+0x15c>)
 800055e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000560:	4b47      	ldr	r3, [pc, #284]	; (8000680 <MX_TIM1_Init+0x158>)
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000566:	4b46      	ldr	r3, [pc, #280]	; (8000680 <MX_TIM1_Init+0x158>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800056c:	4b44      	ldr	r3, [pc, #272]	; (8000680 <MX_TIM1_Init+0x158>)
 800056e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000574:	4b42      	ldr	r3, [pc, #264]	; (8000680 <MX_TIM1_Init+0x158>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800057a:	4b41      	ldr	r3, [pc, #260]	; (8000680 <MX_TIM1_Init+0x158>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <MX_TIM1_Init+0x158>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000586:	483e      	ldr	r0, [pc, #248]	; (8000680 <MX_TIM1_Init+0x158>)
 8000588:	f003 fe2a 	bl	80041e0 <HAL_TIM_PWM_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000592:	f000 fc39 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a6:	4619      	mov	r1, r3
 80005a8:	4835      	ldr	r0, [pc, #212]	; (8000680 <MX_TIM1_Init+0x158>)
 80005aa:	f004 ff07 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005b4:	f000 fc28 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c0:	2300      	movs	r3, #0
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <MX_TIM1_Init+0x158>)
 80005de:	f004 fa09 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80005e8:	f000 fc0e 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f4:	2204      	movs	r2, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	4821      	ldr	r0, [pc, #132]	; (8000680 <MX_TIM1_Init+0x158>)
 80005fa:	f004 f9fb 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000604:	f000 fc00 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800060c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000610:	2208      	movs	r2, #8
 8000612:	4619      	mov	r1, r3
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_TIM1_Init+0x158>)
 8000616:	f004 f9ed 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000620:	f000 fbf2 	bl	8000e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800064a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <MX_TIM1_Init+0x158>)
 8000662:	f004 ff2d 	bl	80054c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800066c:	f000 fbcc 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <MX_TIM1_Init+0x158>)
 8000672:	f000 fd4d 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000676:	bf00      	nop
 8000678:	3760      	adds	r7, #96	; 0x60
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000558 	.word	0x20000558
 8000684:	40012c00 	.word	0x40012c00

08000688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2224      	movs	r2, #36	; 0x24
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f009 f9c9 	bl	8009a2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_TIM2_Init+0xa4>)
 80006a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_TIM2_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_TIM2_Init+0xa4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_TIM2_Init+0xa4>)
 80006bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_TIM2_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_TIM2_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_TIM2_Init+0xa4>)
 80006fa:	f003 fec9 	bl	8004490 <HAL_TIM_Encoder_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000704:	f000 fb80 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_TIM2_Init+0xa4>)
 8000716:	f004 fe51 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000720:	f000 fb72 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3730      	adds	r7, #48	; 0x30
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200005a4 	.word	0x200005a4

08000730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000756:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <MX_TIM3_Init+0xe4>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_TIM3_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800077a:	4825      	ldr	r0, [pc, #148]	; (8000810 <MX_TIM3_Init+0xe0>)
 800077c:	f003 fd30 	bl	80041e0 <HAL_TIM_PWM_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000786:	f000 fb3f 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <MX_TIM3_Init+0xe0>)
 800079a:	f004 fe0f 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007a4:	f000 fb30 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	; 0x60
 80007aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM3_Init+0xe0>)
 80007c0:	f004 f918 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80007ca:	f000 fb1d 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_TIM3_Init+0xe0>)
 80007da:	f004 f90b 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80007e4:	f000 fb10 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2208      	movs	r2, #8
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM3_Init+0xe0>)
 80007f4:	f004 f8fe 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80007fe:	f000 fb03 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000804:	f000 fc84 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000050c 	.word	0x2000050c
 8000814:	40000400 	.word	0x40000400

08000818 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2224      	movs	r2, #36	; 0x24
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 f901 	bl	8009a2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_TIM4_Init+0xa8>)
 800083a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_TIM4_Init+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_TIM4_Init+0xa4>)
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800085c:	2301      	movs	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000874:	2301      	movs	r3, #1
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000888:	f003 fe02 	bl	8004490 <HAL_TIM_Encoder_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000892:	f000 fab9 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM4_Init+0xa4>)
 80008a4:	f004 fd8a 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80008ae:	f000 faab 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000428 	.word	0x20000428
 80008c0:	40000800 	.word	0x40000800

080008c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_TIM7_Init+0x68>)
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <MX_TIM7_Init+0x6c>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2400;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_TIM7_Init+0x68>)
 80008dc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80008e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_TIM7_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_TIM7_Init+0x68>)
 80008ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_TIM7_Init+0x68>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_TIM7_Init+0x68>)
 80008f8:	f003 fbb0 	bl	800405c <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000902:	f000 fa81 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_TIM7_Init+0x68>)
 8000914:	f004 fd52 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800091e:	f000 fa73 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000063c 	.word	0x2000063c
 8000930:	40001400 	.word	0x40001400

08000934 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09a      	sub	sp, #104	; 0x68
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f009 f873 	bl	8009a2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2234      	movs	r2, #52	; 0x34
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f009 f867 	bl	8009a2e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000960:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_TIM8_Init+0xd8>)
 8000962:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <MX_TIM8_Init+0xdc>)
 8000964:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <MX_TIM8_Init+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_TIM8_Init+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <MX_TIM8_Init+0xd8>)
 8000974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000978:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_TIM8_Init+0xd8>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_TIM8_Init+0xd8>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_TIM8_Init+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800098c:	2301      	movs	r3, #1
 800098e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000990:	2300      	movs	r3, #0
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000994:	2301      	movs	r3, #1
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a4:	2301      	movs	r3, #1
 80009a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009b4:	4619      	mov	r1, r3
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_TIM8_Init+0xd8>)
 80009b8:	f003 fd6a 	bl	8004490 <HAL_TIM_Encoder_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80009c2:	f000 fa21 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_TIM8_Init+0xd8>)
 80009da:	f004 fcef 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 80009e4:	f000 fa10 	bl	8000e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM8_Init+0xd8>)
 80009f6:	f004 fd63 	bl	80054c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000a00:	f000 fa02 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3768      	adds	r7, #104	; 0x68
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200003dc 	.word	0x200003dc
 8000a10:	40013400 	.word	0x40013400

08000a14 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b098      	sub	sp, #96	; 0x60
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2234      	movs	r2, #52	; 0x34
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fff4 	bl	8009a2e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a46:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a48:	4a34      	ldr	r2, [pc, #208]	; (8000b1c <MX_TIM15_Init+0x108>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a58:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a72:	4829      	ldr	r0, [pc, #164]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a74:	f003 fbb4 	bl	80041e0 <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f9c3 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4821      	ldr	r0, [pc, #132]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000a92:	f004 fc93 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f9b4 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa0:	2360      	movs	r3, #96	; 0x60
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000ac6:	f003 ff95 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ad0:	f000 f99a 	bl	8000e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000afc:	f004 fce0 	bl	80054c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b06:	f000 f97f 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM15_Init+0x104>)
 8000b0c:	f000 fb00 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3760      	adds	r7, #96	; 0x60
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000474 	.word	0x20000474
 8000b1c:	40014000 	.word	0x40014000

08000b20 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	; 0x50
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2234      	movs	r2, #52	; 0x34
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 ff74 	bl	8009a2e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b48:	4a31      	ldr	r2, [pc, #196]	; (8000c10 <MX_TIM16_Init+0xf0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b72:	4826      	ldr	r0, [pc, #152]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b74:	f003 fa72 	bl	800405c <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b7e:	f000 f943 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b82:	4822      	ldr	r0, [pc, #136]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000b84:	f003 fb2c 	bl	80041e0 <HAL_TIM_PWM_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b8e:	f000 f93b 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b92:	2360      	movs	r3, #96	; 0x60
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000bb8:	f003 ff1c 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000bc2:	f000 f921 	bl	8000e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000bee:	f004 fc67 	bl	80054c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000bf8:	f000 f906 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM16_Init+0xec>)
 8000bfe:	f000 fa87 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	; 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200005f0 	.word	0x200005f0
 8000c10:	40014400 	.word	0x40014400

08000c14 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2234      	movs	r2, #52	; 0x34
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f008 fefa 	bl	8009a2e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c3c:	4a31      	ldr	r2, [pc, #196]	; (8000d04 <MX_TIM17_Init+0xf0>)
 8000c3e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c40:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c52:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c66:	4826      	ldr	r0, [pc, #152]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c68:	f003 f9f8 	bl	800405c <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c72:	f000 f8c9 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c76:	4822      	ldr	r0, [pc, #136]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000c78:	f003 fab2 	bl	80041e0 <HAL_TIM_PWM_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c82:	f000 f8c1 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c86:	2360      	movs	r3, #96	; 0x60
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c92:	2300      	movs	r3, #0
 8000c94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000cac:	f003 fea2 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000cb6:	f000 f8a7 	bl	8000e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4807      	ldr	r0, [pc, #28]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000ce2:	f004 fbed 	bl	80054c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000cec:	f000 f88c 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_TIM17_Init+0xec>)
 8000cf2:	f000 fa0d 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000cf6:	bf00      	nop
 8000cf8:	3750      	adds	r7, #80	; 0x50
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200004c0 	.word	0x200004c0
 8000d04:	40014800 	.word	0x40014800

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_GPIO_Init+0x8c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_GPIO_Init+0x8c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_GPIO_Init+0x8c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_GPIO_Init+0x8c>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <MX_GPIO_Init+0x8c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_GPIO_Init+0x8c>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_GPIO_Init+0x90>)
 8000d54:	f000 fe48 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480b      	ldr	r0, [pc, #44]	; (8000d98 <MX_GPIO_Init+0x90>)
 8000d6c:	f000 fcba 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d70:	2320      	movs	r3, #32
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_GPIO_Init+0x90>)
 8000d88:	f000 fcac 	bl	80016e4 <HAL_GPIO_Init>

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400

08000d9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
	current_period += 1;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000db0:	701a      	strb	r2, [r3, #0]
	if (current_period - command_received_period  > 2) {
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	dd11      	ble.n	8000dea <HAL_TIM_PeriodElapsedCallback+0x4e>
		TIM1->CCR1 = 0;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200001b7 	.word	0x200001b7
 8000dfc:	200001b8 	.word	0x200001b8
 8000e00:	40012c00 	.word	0x40012c00
 8000e04:	40000400 	.word	0x40000400

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e4e:	f002 fa09 	bl	8003264 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_TIM_PWM_MspInit+0x80>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10c      	bne.n	8000e8c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e8a:	e022      	b.n	8000ed2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <HAL_TIM_PWM_MspInit+0x88>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10c      	bne.n	8000eb0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
}
 8000eae:	e010      	b.n	8000ed2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_TIM_PWM_MspInit+0x8c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x84>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40012c00 	.word	0x40012c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40000400 	.word	0x40000400
 8000eec:	40014000 	.word	0x40014000

08000ef0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d129      	bne.n	8000f66 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	4b54      	ldr	r3, [pc, #336]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	4a53      	ldr	r2, [pc, #332]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1e:	4b51      	ldr	r3, [pc, #324]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f42:	2303      	movs	r3, #3
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f52:	2301      	movs	r3, #1
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f000 fbc0 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f64:	e079      	b.n	800105a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a3f      	ldr	r2, [pc, #252]	; (8001068 <HAL_TIM_Encoder_MspInit+0x178>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d128      	bne.n	8000fc2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f70:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	4a3b      	ldr	r2, [pc, #236]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7c:	4b39      	ldr	r3, [pc, #228]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b36      	ldr	r3, [pc, #216]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	4a35      	ldr	r2, [pc, #212]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482c      	ldr	r0, [pc, #176]	; (800106c <HAL_TIM_Encoder_MspInit+0x17c>)
 8000fbc:	f000 fb92 	bl	80016e4 <HAL_GPIO_Init>
}
 8000fc0:	e04b      	b.n	800105a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <HAL_TIM_Encoder_MspInit+0x180>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d146      	bne.n	800105a <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	4a24      	ldr	r2, [pc, #144]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000fd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_TIM_Encoder_MspInit+0x174>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001026:	2302      	movs	r3, #2
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f000 fb56 	bl	80016e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800104a:	230a      	movs	r3, #10
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_TIM_Encoder_MspInit+0x17c>)
 8001056:	f000 fb45 	bl	80016e4 <HAL_GPIO_Init>
}
 800105a:	bf00      	nop
 800105c:	3738      	adds	r7, #56	; 0x38
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	40000800 	.word	0x40000800
 800106c:	48000400 	.word	0x48000400
 8001070:	40013400 	.word	0x40013400

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <HAL_TIM_Base_MspInit+0x8c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d114      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2037      	movs	r0, #55	; 0x37
 80010a4:	f000 fae9 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010a8:	2037      	movs	r0, #55	; 0x37
 80010aa:	f000 fb00 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010ae:	e022      	b.n	80010f6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <HAL_TIM_Base_MspInit+0x94>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10c      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	6613      	str	r3, [r2, #96]	; 0x60
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
}
 80010d2:	e010      	b.n	80010f6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_TIM_Base_MspInit+0x98>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_TIM_Base_MspInit+0x90>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40001400 	.word	0x40001400
 8001104:	40021000 	.word	0x40021000
 8001108:	40014400 	.word	0x40014400
 800110c:	40014800 	.word	0x40014800

08001110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a65      	ldr	r2, [pc, #404]	; (80012c4 <HAL_TIM_MspPostInit+0x1b4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d11e      	bne.n	8001170 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b65      	ldr	r3, [pc, #404]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a64      	ldr	r2, [pc, #400]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b62      	ldr	r3, [pc, #392]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	623b      	str	r3, [r7, #32]
 8001148:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800114a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800115c:	2306      	movs	r3, #6
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f000 fabb 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800116e:	e0a5      	b.n	80012bc <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a55      	ldr	r2, [pc, #340]	; (80012cc <HAL_TIM_MspPostInit+0x1bc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d139      	bne.n	80011ee <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011aa:	2350      	movs	r3, #80	; 0x50
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ba:	2302      	movs	r3, #2
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f000 fa8c 	bl	80016e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011dc:	2302      	movs	r3, #2
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	483a      	ldr	r0, [pc, #232]	; (80012d0 <HAL_TIM_MspPostInit+0x1c0>)
 80011e8:	f000 fa7c 	bl	80016e4 <HAL_GPIO_Init>
}
 80011ec:	e066      	b.n	80012bc <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <HAL_TIM_MspPostInit+0x1c4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d11d      	bne.n	8001234 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001210:	2304      	movs	r3, #4
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001220:	2309      	movs	r3, #9
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f000 fa59 	bl	80016e4 <HAL_GPIO_Init>
}
 8001232:	e043      	b.n	80012bc <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_TIM_MspPostInit+0x1c8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d11c      	bne.n	8001278 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001256:	2310      	movs	r3, #16
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001266:	2301      	movs	r3, #1
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <HAL_TIM_MspPostInit+0x1c0>)
 8001272:	f000 fa37 	bl	80016e4 <HAL_GPIO_Init>
}
 8001276:	e021      	b.n	80012bc <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_TIM_MspPostInit+0x1cc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d11c      	bne.n	80012bc <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_TIM_MspPostInit+0x1b8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80012aa:	2301      	movs	r3, #1
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f000 fa14 	bl	80016e4 <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40000400 	.word	0x40000400
 80012d0:	48000400 	.word	0x48000400
 80012d4:	40014000 	.word	0x40014000
 80012d8:	40014400 	.word	0x40014400
 80012dc:	40014800 	.word	0x40014800

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8a8 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <USB_LP_IRQHandler+0x10>)
 8001342:	f000 fc8a 	bl	8001c5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000132c 	.word	0x2000132c

08001350 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM7_IRQHandler+0x10>)
 8001356:	f003 f9ce 	bl	80046f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000063c 	.word	0x2000063c

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <SystemInit+0x28>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <SystemInit+0x28>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <SystemInit+0x28>)
 800137a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800137e:	609a      	str	r2, [r3, #8]
#endif
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ba:	f7ff ffd3 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f008 fb07 	bl	80099d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7fe ff49 	bl	8000258 <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80013d4:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 80013d8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80013dc:	20001620 	.word	0x20001620

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>

080013e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f939 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f80e 	bl	8001414 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001404:	f7ff fd08 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001408:	79fb      	ldrb	r3, [r7, #7]

}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d022      	beq.n	800146e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_InitTick+0x6c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001434:	fbb1 f3f3 	udiv	r3, r1, r3
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f944 	bl	80016ca <HAL_SYSTICK_Config>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d809      	bhi.n	8001462 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	f000 f910 	bl	800167a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_InitTick+0x70>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e007      	b.n	8001472 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000008 	.word	0x20000008
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x1c>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000688 	.word	0x20000688
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000688 	.word	0x20000688

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff29 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff40 	bl	800150c <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff90 	bl	80015b8 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5f 	bl	8001564 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff33 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa4 	bl	8001620 <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016f2:	e15a      	b.n	80019aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 814c 	beq.w	80019a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d00b      	beq.n	800172c <HAL_GPIO_Init+0x48>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d007      	beq.n	800172c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001720:	2b11      	cmp	r3, #17
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b12      	cmp	r3, #18
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 0201 	and.w	r2, r3, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0xea>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d123      	bne.n	8001816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0203 	and.w	r2, r3, #3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_GPIO_Init+0x2e4>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	4a5a      	ldr	r2, [pc, #360]	; (80019c8 <HAL_GPIO_Init+0x2e4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6613      	str	r3, [r2, #96]	; 0x60
 8001864:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_GPIO_Init+0x2e4>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001870:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_GPIO_Init+0x2e8>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800189a:	d01f      	beq.n	80018dc <HAL_GPIO_Init+0x1f8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_GPIO_Init+0x2ec>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d019      	beq.n	80018d8 <HAL_GPIO_Init+0x1f4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_GPIO_Init+0x2f0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1f0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x2f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1ec>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a49      	ldr	r2, [pc, #292]	; (80019dc <HAL_GPIO_Init+0x2f8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1e8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018c4:	2305      	movs	r3, #5
 80018c6:	e00a      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018c8:	2306      	movs	r3, #6
 80018ca:	e008      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018dc:	2300      	movs	r3, #0
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ee:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x2e8>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fc:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_GPIO_Init+0x300>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001920:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194a:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_GPIO_Init+0x300>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x300>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_GPIO_Init+0x300>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f ae9d 	bne.w	80016f4 <HAL_GPIO_Init+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43d9      	mvns	r1, r3
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	400b      	ands	r3, r1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b08b      	sub	sp, #44	; 0x2c
 8001a50:	af06      	add	r7, sp, #24
 8001a52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0d7      	b.n	8001c0e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f007 fcbc 	bl	80093f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fe18 	bl	80056ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e04c      	b.n	8001b2a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	b298      	uxth	r0, r3
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	3336      	adds	r3, #54	; 0x36
 8001ace:	4602      	mov	r2, r0
 8001ad0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3303      	adds	r3, #3
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	3338      	adds	r3, #56	; 0x38
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	333c      	adds	r3, #60	; 0x3c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3340      	adds	r3, #64	; 0x40
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	3301      	adds	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3ad      	bcc.n	8001a90 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e044      	b.n	8001bc4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3b5      	bcc.n	8001b3a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	687e      	ldr	r6, [r7, #4]
 8001bd6:	466d      	mov	r5, sp
 8001bd8:	f106 0410 	add.w	r4, r6, #16
 8001bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	602b      	str	r3, [r5, #0]
 8001be4:	1d33      	adds	r3, r6, #4
 8001be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f003 fd81 	bl	80056f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f001 fa5e 	bl	80030c8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_Start+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e012      	b.n	8001c52 <HAL_PCD_Start+0x3c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fd27 	bl	800568c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 fd13 	bl	800766e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 fd18 	bl	800769c <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c76:	d102      	bne.n	8001c7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fb5b 	bl	8002334 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 fd0a 	bl	800769c <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c92:	d112      	bne.n	8001cba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f007 fc1a 	bl	80094e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f91e 	bl	8001ef6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f005 fcec 	bl	800769c <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cce:	d10b      	bne.n	8001ce8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f005 fcd5 	bl	800769c <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d10:	b292      	uxth	r2, r2
 8001d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 fcbe 	bl	800769c <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2a:	d133      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0208 	bic.w	r2, r2, #8
 8001d56:	b292      	uxth	r2, r2
 8001d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f007 fdad 	bl	80098d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f007 fbee 	bl	8009558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f005 fc7f 	bl	800769c <USB_ReadInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da8:	d126      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0208 	orr.w	r2, r2, #8
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0204 	orr.w	r2, r2, #4
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f007 fb96 	bl	8009524 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f005 fc4d 	bl	800769c <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d13f      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d12b      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0204 	orr.w	r2, r2, #4
 8001e40:	b292      	uxth	r2, r2
 8001e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0208 	orr.w	r2, r2, #8
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f007 fd26 	bl	80098d0 <HAL_PCDEx_LPM_Callback>
 8001e84:	e002      	b.n	8001e8c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f007 fb4c 	bl	8009524 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f005 fc03 	bl	800769c <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f007 fb05 	bl	80094ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f005 fbe9 	bl	800769c <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed4:	d10b      	bne.n	8001eee <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_PCD_SetAddress+0x1a>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e013      	b.n	8001f38 <HAL_PCD_SetAddress+0x42>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 fb8c 	bl	8007646 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	70fb      	strb	r3, [r7, #3]
 8001f52:	460b      	mov	r3, r1
 8001f54:	803b      	strh	r3, [r7, #0]
 8001f56:	4613      	mov	r3, r2
 8001f58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da0e      	bge.n	8001f84 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	705a      	strb	r2, [r3, #1]
 8001f82:	e00e      	b.n	8001fa2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0207 	and.w	r2, r3, #7
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fae:	883a      	ldrh	r2, [r7, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	78ba      	ldrb	r2, [r7, #2]
 8001fb8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fcc:	78bb      	ldrb	r3, [r7, #2]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d102      	bne.n	8001fd8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_PCD_EP_Open+0xa6>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e00e      	b.n	8002004 <HAL_PCD_EP_Open+0xc4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fb9d 	bl	8005734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002002:	7afb      	ldrb	r3, [r7, #11]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da0e      	bge.n	800203e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	705a      	strb	r2, [r3, #1]
 800203c:	e00e      	b.n	800205c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 0207 	and.w	r2, r3, #7
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	b2da      	uxtb	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_PCD_EP_Close+0x6a>
 8002072:	2302      	movs	r3, #2
 8002074:	e00e      	b.n	8002094 <HAL_PCD_EP_Close+0x88>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68f9      	ldr	r1, [r7, #12]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fec3 	bl	8005e10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	460b      	mov	r3, r1
 80020aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	f003 0207 	and.w	r2, r3, #7
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2200      	movs	r2, #0
 80020da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020dc:	7afb      	ldrb	r3, [r7, #11]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6979      	ldr	r1, [r7, #20]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f004 f876 	bl	80061ea <USB_EPStartXfer>
 80020fe:	e005      	b.n	800210c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6979      	ldr	r1, [r7, #20]
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f86f 	bl	80061ea <USB_EPStartXfer>
  }

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 0207 	and.w	r2, r3, #7
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002138:	681b      	ldr	r3, [r3, #0]
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	460b      	mov	r3, r1
 8002154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2201      	movs	r2, #1
 8002190:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	b2da      	uxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 f81b 	bl	80061ea <USB_EPStartXfer>
 80021b4:	e005      	b.n	80021c2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	4618      	mov	r0, r3
 80021be:	f004 f814 	bl	80061ea <USB_EPStartXfer>
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 0207 	and.w	r2, r3, #7
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e04c      	b.n	8002284 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da0e      	bge.n	8002210 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	705a      	strb	r2, [r3, #1]
 800220e:	e00c      	b.n	800222a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_EP_SetStall+0x7e>
 8002246:	2302      	movs	r3, #2
 8002248:	e01c      	b.n	8002284 <HAL_PCD_EP_SetStall+0xb8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f005 f8f5 	bl	8007448 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f005 fa21 	bl	80076bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d901      	bls.n	80022aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e040      	b.n	800232c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da0e      	bge.n	80022d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	705a      	strb	r2, [r3, #1]
 80022ce:	e00e      	b.n	80022ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_PCD_EP_ClrStall+0x82>
 800230a:	2302      	movs	r3, #2
 800230c:	e00e      	b.n	800232c <HAL_PCD_EP_ClrStall+0xa0>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	f005 f8e4 	bl	80074ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800233c:	e2d1      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002346:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002354:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 8152 	bne.w	8002602 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800235e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d150      	bne.n	800240a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002378:	81fb      	strh	r3, [r7, #14]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002388:	b29b      	uxth	r3, r3
 800238a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3328      	adds	r3, #40	; 0x28
 8002390:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	441a      	add	r2, r3
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023c8:	2100      	movs	r1, #0
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f007 f863 	bl	8009496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8282 	beq.w	80028e2 <PCD_EP_ISR_Handler+0x5ae>
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 827d 	bne.w	80028e2 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b292      	uxth	r2, r2
 80023fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002408:	e26b      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800241a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800241c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002420:	2b00      	cmp	r3, #0
 8002422:	d032      	beq.n	800248a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	4413      	add	r3, r2
 800243e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800245e:	b29b      	uxth	r3, r3
 8002460:	f005 f979 	bl	8007756 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29a      	uxth	r2, r3
 800246c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002470:	4013      	ands	r3, r2
 8002472:	823b      	strh	r3, [r7, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	8a3a      	ldrh	r2, [r7, #16]
 800247a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800247e:	b292      	uxth	r2, r2
 8002480:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f006 ffda 	bl	800943c <HAL_PCD_SetupStageCallback>
 8002488:	e22b      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800248a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800248e:	2b00      	cmp	r3, #0
 8002490:	f280 8227 	bge.w	80028e2 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29a      	uxth	r2, r3
 800249c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024a0:	4013      	ands	r3, r2
 80024a2:	83bb      	strh	r3, [r7, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	8bba      	ldrh	r2, [r7, #28]
 80024aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ae:	b292      	uxth	r2, r2
 80024b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d019      	beq.n	8002516 <PCD_EP_ISR_Handler+0x1e2>
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d015      	beq.n	8002516 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	6959      	ldr	r1, [r3, #20]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f005 f92b 	bl	8007756 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	441a      	add	r2, r3
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800250e:	2100      	movs	r1, #0
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f006 ffa5 	bl	8009460 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d112      	bne.n	8002564 <PCD_EP_ISR_Handler+0x230>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002548:	b29a      	uxth	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	e02f      	b.n	80025c4 <PCD_EP_ISR_Handler+0x290>
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b3e      	cmp	r3, #62	; 0x3e
 800256a:	d813      	bhi.n	8002594 <PCD_EP_ISR_Handler+0x260>
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <PCD_EP_ISR_Handler+0x252>
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	3301      	adds	r3, #1
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	b29b      	uxth	r3, r3
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e017      	b.n	80025c4 <PCD_EP_ISR_Handler+0x290>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	095b      	lsrs	r3, r3, #5
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <PCD_EP_ISR_Handler+0x27a>
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	3b01      	subs	r3, #1
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025be:	b29a      	uxth	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	827b      	strh	r3, [r7, #18]
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025dc:	827b      	strh	r3, [r7, #18]
 80025de:	8a7b      	ldrh	r3, [r7, #18]
 80025e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025e4:	827b      	strh	r3, [r7, #18]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	8a7b      	ldrh	r3, [r7, #18]
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
 8002600:	e16f      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002614:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002618:	2b00      	cmp	r3, #0
 800261a:	f280 80e4 	bge.w	80027e6 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29a      	uxth	r2, r3
 8002630:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002634:	4013      	ands	r3, r2
 8002636:	853b      	strh	r3, [r7, #40]	; 0x28
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264c:	b292      	uxth	r2, r2
 800264e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002650:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	7b1b      	ldrb	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d120      	bne.n	80026b0 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4413      	add	r3, r2
 8002688:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002692:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8083 	beq.w	80027a2 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	6959      	ldr	r1, [r3, #20]
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	88da      	ldrh	r2, [r3, #6]
 80026a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026aa:	f005 f854 	bl	8007756 <USB_ReadPMA>
 80026ae:	e078      	b.n	80027a2 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	78db      	ldrb	r3, [r3, #3]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d108      	bne.n	80026ca <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f91d 	bl	80028fe <HAL_PCD_EP_DB_Receive>
 80026c4:	4603      	mov	r3, r0
 80026c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026c8:	e06b      	b.n	80027a2 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e4:	847b      	strh	r3, [r7, #34]	; 0x22
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	441a      	add	r2, r3
 80026f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002702:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002706:	b29b      	uxth	r3, r3
 8002708:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01f      	beq.n	8002764 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4413      	add	r3, r2
 800273e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800274a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274c:	2b00      	cmp	r3, #0
 800274e:	d028      	beq.n	80027a2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	6959      	ldr	r1, [r3, #20]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	891a      	ldrh	r2, [r3, #8]
 800275c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800275e:	f004 fffa 	bl	8007756 <USB_ReadPMA>
 8002762:	e01e      	b.n	80027a2 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4413      	add	r3, r2
 800277e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002788:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800278a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	6959      	ldr	r1, [r3, #20]
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	895a      	ldrh	r2, [r3, #10]
 800279c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279e:	f004 ffda 	bl	8007756 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027a8:	441a      	add	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027b4:	441a      	add	r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <PCD_EP_ISR_Handler+0x498>
 80027c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d206      	bcs.n	80027da <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f006 fe44 	bl	8009460 <HAL_PCD_DataOutStageCallback>
 80027d8:	e005      	b.n	80027e6 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fd02 	bl	80061ea <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d078      	beq.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80027f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	843b      	strh	r3, [r7, #32]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	8c3b      	ldrh	r3, [r7, #32]
 8002830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002838:	b29b      	uxth	r3, r3
 800283a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d108      	bne.n	8002856 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002848:	2b02      	cmp	r3, #2
 800284a:	d144      	bne.n	80028d6 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800284c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d13f      	bne.n	80028d6 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	8bfb      	ldrh	r3, [r7, #30]
 8002882:	429a      	cmp	r2, r3
 8002884:	d906      	bls.n	8002894 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	8bfb      	ldrh	r3, [r7, #30]
 800288c:	1ad2      	subs	r2, r2, r3
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e002      	b.n	800289a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f006 fdf4 	bl	8009496 <HAL_PCD_DataInStageCallback>
 80028ae:	e018      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	8bfb      	ldrh	r3, [r7, #30]
 80028b6:	441a      	add	r2, r3
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	441a      	add	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fc8b 	bl	80061ea <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80028d4:	e005      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028d8:	461a      	mov	r2, r3
 80028da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f917 	bl	8002b10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f6ff ad25 	blt.w	800233e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3738      	adds	r7, #56	; 0x38
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d07c      	beq.n	8002a10 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	4413      	add	r3, r2
 8002930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	8b7b      	ldrh	r3, [r7, #26]
 8002942:	429a      	cmp	r2, r3
 8002944:	d306      	bcc.n	8002954 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	8b7b      	ldrh	r3, [r7, #26]
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	619a      	str	r2, [r3, #24]
 8002952:	e002      	b.n	800295a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d123      	bne.n	80029aa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	833b      	strh	r3, [r7, #24]
 800297e:	8b3b      	ldrh	r3, [r7, #24]
 8002980:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002984:	833b      	strh	r3, [r7, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	441a      	add	r2, r3
 8002994:	8b3b      	ldrh	r3, [r7, #24]
 8002996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800299e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01f      	beq.n	80029f4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	82fb      	strh	r3, [r7, #22]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	441a      	add	r2, r3
 80029de:	8afb      	ldrh	r3, [r7, #22]
 80029e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029f4:	8b7b      	ldrh	r3, [r7, #26]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8085 	beq.w	8002b06 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	6959      	ldr	r1, [r3, #20]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	891a      	ldrh	r2, [r3, #8]
 8002a08:	8b7b      	ldrh	r3, [r7, #26]
 8002a0a:	f004 fea4 	bl	8007756 <USB_ReadPMA>
 8002a0e:	e07a      	b.n	8002b06 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	8b7b      	ldrh	r3, [r7, #26]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d306      	bcc.n	8002a4e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	619a      	str	r2, [r3, #24]
 8002a4c:	e002      	b.n	8002a54 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d123      	bne.n	8002aa4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	83fb      	strh	r3, [r7, #30]
 8002a78:	8bfb      	ldrh	r3, [r7, #30]
 8002a7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a7e:	83fb      	strh	r3, [r7, #30]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	8bfb      	ldrh	r3, [r7, #30]
 8002a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11f      	bne.n	8002aee <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac8:	83bb      	strh	r3, [r7, #28]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	441a      	add	r2, r3
 8002ad8:	8bbb      	ldrh	r3, [r7, #28]
 8002ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aee:	8b7b      	ldrh	r3, [r7, #26]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6959      	ldr	r1, [r3, #20]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	895a      	ldrh	r2, [r3, #10]
 8002b00:	8b7b      	ldrh	r3, [r7, #26]
 8002b02:	f004 fe28 	bl	8007756 <USB_ReadPMA>
    }
  }

  return count;
 8002b06:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b092      	sub	sp, #72	; 0x48
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8130 	beq.w	8002d8a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d906      	bls.n	8002b68 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b60:	1ad2      	subs	r2, r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	619a      	str	r2, [r3, #24]
 8002b66:	e002      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d12c      	bne.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f006 fc8a 	bl	8009496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 822d 	beq.w	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	827b      	strh	r3, [r7, #18]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	441a      	add	r2, r3
 8002bb8:	8a7b      	ldrh	r3, [r7, #18]
 8002bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	8013      	strh	r3, [r2, #0]
 8002bce:	e20b      	b.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01f      	beq.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	441a      	add	r2, r3
 8002c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 81e1 	bne.w	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c2c:	441a      	add	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	69da      	ldr	r2, [r3, #28]
 8002c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c38:	441a      	add	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d309      	bcc.n	8002c5e <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	1ad2      	subs	r2, r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	621a      	str	r2, [r3, #32]
 8002c5c:	e014      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c72:	e009      	b.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d155      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x22c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00da      	lsls	r2, r3, #3
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d112      	bne.n	8002ce4 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	801a      	strh	r2, [r3, #0]
 8002ce2:	e047      	b.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ce8:	d811      	bhi.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e032      	b.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x214>
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	029b      	lsls	r3, r3, #10
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e01b      	b.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d117      	bne.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	4413      	add	r3, r2
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	00da      	lsls	r2, r3, #3
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	4413      	add	r3, r2
 8002d66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6959      	ldr	r1, [r3, #20]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	891a      	ldrh	r2, [r3, #8]
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f004 fca6 	bl	80076d4 <USB_WritePMA>
 8002d88:	e12e      	b.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d306      	bcc.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc0:	1ad2      	subs	r2, r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	619a      	str	r2, [r3, #24]
 8002dc6:	e002      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d12c      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f006 fb5a 	bl	8009496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 80fd 	bne.w	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8013      	strh	r3, [r2, #0]
 8002e2e:	e0db      	b.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d11f      	bne.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e54:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 80b1 	bne.w	8002fe8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e8c:	441a      	add	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e98:	441a      	add	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d309      	bcc.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	621a      	str	r2, [r3, #32]
 8002ebc:	e014      	b.n	8002ee8 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed2:	e009      	b.n	8002ee8 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d155      	bne.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x492>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0a:	4413      	add	r3, r2
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	00da      	lsls	r2, r3, #3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	4413      	add	r3, r2
 8002f18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d112      	bne.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x43a>
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f46:	801a      	strh	r2, [r3, #0]
 8002f48:	e044      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f4e:	d811      	bhi.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x464>
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x456>
 8002f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f62:	3301      	adds	r3, #1
 8002f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e02f      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x47a>
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	3b01      	subs	r3, #1
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	e018      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d114      	bne.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb8:	4413      	add	r3, r2
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	00da      	lsls	r2, r3, #3
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6959      	ldr	r1, [r3, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	895a      	ldrh	r2, [r3, #10]
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f004 fb76 	bl	80076d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003002:	823b      	strh	r3, [r7, #16]
 8003004:	8a3b      	ldrh	r3, [r7, #16]
 8003006:	f083 0310 	eor.w	r3, r3, #16
 800300a:	823b      	strh	r3, [r7, #16]
 800300c:	8a3b      	ldrh	r3, [r7, #16]
 800300e:	f083 0320 	eor.w	r3, r3, #32
 8003012:	823b      	strh	r3, [r7, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	8a3b      	ldrh	r3, [r7, #16]
 8003024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003034:	b29b      	uxth	r3, r3
 8003036:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3748      	adds	r7, #72	; 0x48
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	817b      	strh	r3, [r7, #10]
 8003050:	4613      	mov	r3, r2
 8003052:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003060:	897b      	ldrh	r3, [r7, #10]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e009      	b.n	800308c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003078:	897a      	ldrh	r2, [r7, #10]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800308c:	893b      	ldrh	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	b29a      	uxth	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	80da      	strh	r2, [r3, #6]
 80030a0:	e00b      	b.n	80030ba <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2201      	movs	r2, #1
 80030a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003100:	b29b      	uxth	r3, r3
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d141      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800312a:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d131      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	4a46      	ldr	r2, [pc, #280]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003150:	4a41      	ldr	r2, [pc, #260]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2232      	movs	r2, #50	; 0x32
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800316e:	e002      	b.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3b01      	subs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d102      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d158      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e057      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ac:	e04d      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b4:	d141      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d131      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ca:	4a23      	ldr	r2, [pc, #140]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2232      	movs	r2, #50	; 0x32
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	3301      	adds	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fa:	e002      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d102      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f2      	bne.n	80031fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d112      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e011      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003238:	e007      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003248:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40007000 	.word	0x40007000
 800325c:	20000000 	.word	0x20000000
 8003260:	431bde83 	.word	0x431bde83

08003264 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800326e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003272:	6093      	str	r3, [r2, #8]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e308      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d075      	beq.n	800338e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a2:	4ba3      	ldr	r3, [pc, #652]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ac:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3e>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d002      	beq.n	80032c8 <HAL_RCC_OscConfig+0x44>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b99      	ldr	r3, [pc, #612]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e2e3      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x74>
 80032ea:	4b91      	ldr	r3, [pc, #580]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b8b      	ldr	r3, [pc, #556]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a8a      	ldr	r2, [pc, #552]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b88      	ldr	r3, [pc, #544]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a87      	ldr	r2, [pc, #540]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 800331c:	4b84      	ldr	r3, [pc, #528]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a83      	ldr	r2, [pc, #524]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b81      	ldr	r3, [pc, #516]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe f8b6 	bl	80014ac <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe f8b2 	bl	80014ac <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e2a8      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003356:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe f8a2 	bl	80014ac <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe f89e 	bl	80014ac <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e294      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337e:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a4:	4b62      	ldr	r3, [pc, #392]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x136>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_OscConfig+0x13c>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11f      	bne.n	8003400 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x154>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e267      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b55      	ldr	r3, [pc, #340]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	4952      	ldr	r1, [pc, #328]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033ec:	4b51      	ldr	r3, [pc, #324]	; (8003534 <HAL_RCC_OscConfig+0x2b0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe f80f 	bl	8001414 <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d043      	beq.n	8003484 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e253      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a48      	ldr	r2, [pc, #288]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe f84a 	bl	80014ac <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7fe f846 	bl	80014ac <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e23c      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	4939      	ldr	r1, [pc, #228]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
 800344e:	e01a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003450:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a36      	ldr	r2, [pc, #216]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe f826 	bl	80014ac <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe f822 	bl	80014ac <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e218      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x1e0>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03c      	beq.n	800350c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fd ffff 	bl	80014ac <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fd fffb 	bl	80014ac <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1f1      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ef      	beq.n	80034b2 <HAL_RCC_OscConfig+0x22e>
 80034d2:	e01b      	b.n	800350c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fd ffe2 	bl	80014ac <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fd ffde 	bl	80014ac <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1d4      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ef      	bne.n	80034ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80ab 	beq.w	8003670 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x2b4>
 800352a:	2301      	movs	r3, #1
 800352c:	e005      	b.n	800353a <HAL_RCC_OscConfig+0x2b6>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	20000004 	.word	0x20000004
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4baf      	ldr	r3, [pc, #700]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4aae      	ldr	r2, [pc, #696]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
 800354a:	4bac      	ldr	r3, [pc, #688]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355a:	4ba9      	ldr	r3, [pc, #676]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003566:	4ba6      	ldr	r3, [pc, #664]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4aa5      	ldr	r2, [pc, #660]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fd ff9b 	bl	80014ac <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fd ff97 	bl	80014ac <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e18d      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b9c      	ldr	r3, [pc, #624]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d108      	bne.n	80035b2 <HAL_RCC_OscConfig+0x32e>
 80035a0:	4b96      	ldr	r3, [pc, #600]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	4a95      	ldr	r2, [pc, #596]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b0:	e024      	b.n	80035fc <HAL_RCC_OscConfig+0x378>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d110      	bne.n	80035dc <HAL_RCC_OscConfig+0x358>
 80035ba:	4b90      	ldr	r3, [pc, #576]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	4a8e      	ldr	r2, [pc, #568]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ca:	4b8c      	ldr	r3, [pc, #560]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	4a8a      	ldr	r2, [pc, #552]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035da:	e00f      	b.n	80035fc <HAL_RCC_OscConfig+0x378>
 80035dc:	4b87      	ldr	r3, [pc, #540]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	4a86      	ldr	r2, [pc, #536]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ec:	4b83      	ldr	r3, [pc, #524]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	4a82      	ldr	r2, [pc, #520]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd ff52 	bl	80014ac <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fd ff4e 	bl	80014ac <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e142      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ed      	beq.n	800360c <HAL_RCC_OscConfig+0x388>
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fd ff3b 	bl	80014ac <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fd ff37 	bl	80014ac <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e12b      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ed      	bne.n	800363a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	4a64      	ldr	r2, [pc, #400]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01c      	beq.n	80036be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003684:	4b5d      	ldr	r3, [pc, #372]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368a:	4a5c      	ldr	r2, [pc, #368]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fd ff0a 	bl	80014ac <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369c:	f7fd ff06 	bl	80014ac <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0fc      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ae:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ef      	beq.n	800369c <HAL_RCC_OscConfig+0x418>
 80036bc:	e01b      	b.n	80036f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036be:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c4:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fd feed 	bl	80014ac <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d6:	f7fd fee9 	bl	80014ac <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0df      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e8:	4b44      	ldr	r3, [pc, #272]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ef      	bne.n	80036d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80d3 	beq.w	80038a6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003700:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b0c      	cmp	r3, #12
 800370a:	f000 808d 	beq.w	8003828 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d15a      	bne.n	80037cc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fec3 	bl	80014ac <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fd febf 	bl	80014ac <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0b5      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373c:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <HAL_RCC_OscConfig+0x580>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6a11      	ldr	r1, [r2, #32]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003758:	3a01      	subs	r2, #1
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003762:	0212      	lsls	r2, r2, #8
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0552      	lsls	r2, r2, #21
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003776:	0852      	lsrs	r2, r2, #1
 8003778:	3a01      	subs	r2, #1
 800377a:	0652      	lsls	r2, r2, #25
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003782:	06d2      	lsls	r2, r2, #27
 8003784:	430a      	orrs	r2, r1
 8003786:	491d      	ldr	r1, [pc, #116]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003788:	4313      	orrs	r3, r2
 800378a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a17      	ldr	r2, [pc, #92]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fe82 	bl	80014ac <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd fe7e 	bl	80014ac <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e074      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x528>
 80037ca:	e06c      	b.n	80038a6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd fe5a 	bl	80014ac <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fa:	e00e      	b.n	800381a <HAL_RCC_OscConfig+0x596>
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fe50 	bl	80014ac <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e046      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381a:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_RCC_OscConfig+0x62c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x584>
 8003826:	e03e      	b.n	80038a6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e039      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <HAL_RCC_OscConfig+0x62c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	429a      	cmp	r2, r3
 8003846:	d12c      	bne.n	80038a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	3b01      	subs	r3, #1
 8003854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d123      	bne.n	80038a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d11b      	bne.n	80038a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d113      	bne.n	80038a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	3b01      	subs	r3, #1
 800389c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e11e      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b91      	ldr	r3, [pc, #580]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d910      	bls.n	80038fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b8e      	ldr	r3, [pc, #568]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 020f 	bic.w	r2, r3, #15
 80038e2:	498c      	ldr	r1, [pc, #560]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e106      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d073      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d129      	bne.n	8003964 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003910:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0f4      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003920:	f000 f966 	bl	8003bf0 <RCC_GetSysClockFreqFromPLLSource>
 8003924:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4a7c      	ldr	r2, [pc, #496]	; (8003b1c <HAL_RCC_ClockConfig+0x268>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d93f      	bls.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392e:	4b7a      	ldr	r3, [pc, #488]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d033      	beq.n	80039ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d12f      	bne.n	80039ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800394e:	4b72      	ldr	r3, [pc, #456]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003956:	4a70      	ldr	r2, [pc, #448]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e024      	b.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d109      	bne.n	800398c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0c6      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800397c:	4b66      	ldr	r3, [pc, #408]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0be      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800398c:	f000 f8ce 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003990:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4a61      	ldr	r2, [pc, #388]	; (8003b1c <HAL_RCC_ClockConfig+0x268>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d909      	bls.n	80039ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399a:	4b5f      	ldr	r3, [pc, #380]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a2:	4a5d      	ldr	r2, [pc, #372]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4957      	ldr	r1, [pc, #348]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c0:	f7fd fd74 	bl	80014ac <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fd70 	bl	80014ac <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e095      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a28:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4936      	ldr	r1, [pc, #216]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b80      	cmp	r3, #128	; 0x80
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a4a:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4a32      	ldr	r2, [pc, #200]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a56:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d21d      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 020f 	bic.w	r2, r3, #15
 8003a6c:	4929      	ldr	r1, [pc, #164]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a74:	f7fd fd1a 	bl	80014ac <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fd fd16 	bl	80014ac <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e03b      	b.n	8003b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1ed      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4917      	ldr	r1, [pc, #92]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490f      	ldr	r1, [pc, #60]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ade:	f000 f825 	bl	8003b2c <HAL_RCC_GetSysClockFreq>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_RCC_ClockConfig+0x26c>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	fa21 f303 	lsr.w	r3, r1, r3
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x270>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCC_ClockConfig+0x274>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fc86 	bl	8001414 <HAL_InitTick>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40022000 	.word	0x40022000
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	04c4b400 	.word	0x04c4b400
 8003b20:	08009aa0 	.word	0x08009aa0
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e047      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e03e      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d136      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b80:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8a:	68d2      	ldr	r2, [r2, #12]
 8003b8c:	0a12      	lsrs	r2, r2, #8
 8003b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	0a12      	lsrs	r2, r2, #8
 8003ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
      break;
 8003bb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0e5b      	lsrs	r3, r3, #25
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e001      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd4:	693b      	ldr	r3, [r7, #16]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	007a1200 	.word	0x007a1200

08003bf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d10c      	bne.n	8003c2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c14:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c1e:	68d2      	ldr	r2, [r2, #12]
 8003c20:	0a12      	lsrs	r2, r2, #8
 8003c22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	617b      	str	r3, [r7, #20]
    break;
 8003c2c:	e00c      	b.n	8003c48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	0a12      	lsrs	r2, r2, #8
 8003c3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]
    break;
 8003c46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0e5b      	lsrs	r3, r3, #25
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	3301      	adds	r3, #1
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c62:	687b      	ldr	r3, [r7, #4]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40021000 	.word	0x40021000
 8003c74:	007a1200 	.word	0x007a1200
 8003c78:	00f42400 	.word	0x00f42400

08003c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8098 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b43      	ldr	r3, [pc, #268]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b40      	ldr	r3, [pc, #256]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	4a3f      	ldr	r2, [pc, #252]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb6:	4b3d      	ldr	r3, [pc, #244]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a39      	ldr	r2, [pc, #228]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd2:	f7fd fbeb 	bl	80014ac <HAL_GetTick>
 8003cd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd8:	e009      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fd fbe7 	bl	80014ac <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d902      	bls.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	74fb      	strb	r3, [r7, #19]
        break;
 8003cec:	e005      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cee:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ef      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d159      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d00:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01e      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d019      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fba7 	bl	80014ac <HAL_GetTick>
 8003d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d60:	e00b      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd fba3 	bl	80014ac <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d902      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	74fb      	strb	r3, [r7, #19]
            break;
 8003d78:	e006      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ec      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da4:	e008      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	74bb      	strb	r3, [r7, #18]
 8003daa:	e005      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db8:	7c7b      	ldrb	r3, [r7, #17]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbe:	4ba6      	ldr	r3, [pc, #664]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	4aa5      	ldr	r2, [pc, #660]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd6:	4ba0      	ldr	r3, [pc, #640]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f023 0203 	bic.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	499c      	ldr	r1, [pc, #624]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df8:	4b97      	ldr	r3, [pc, #604]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 020c 	bic.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4994      	ldr	r1, [pc, #592]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1a:	4b8f      	ldr	r3, [pc, #572]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	498b      	ldr	r1, [pc, #556]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e3c:	4b86      	ldr	r3, [pc, #536]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	4983      	ldr	r1, [pc, #524]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5e:	4b7e      	ldr	r3, [pc, #504]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	497a      	ldr	r1, [pc, #488]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e80:	4b75      	ldr	r3, [pc, #468]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	4972      	ldr	r1, [pc, #456]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4969      	ldr	r1, [pc, #420]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec4:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4961      	ldr	r1, [pc, #388]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee6:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	4958      	ldr	r1, [pc, #352]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f08:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	4950      	ldr	r1, [pc, #320]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b4b      	ldr	r3, [pc, #300]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a4a      	ldr	r2, [pc, #296]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f40:	4b45      	ldr	r3, [pc, #276]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4942      	ldr	r1, [pc, #264]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f78:	4b37      	ldr	r3, [pc, #220]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4934      	ldr	r1, [pc, #208]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f98:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb0:	4b29      	ldr	r3, [pc, #164]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbe:	4926      	ldr	r1, [pc, #152]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fce:	d105      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	4918      	ldr	r1, [pc, #96]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	490a      	ldr	r1, [pc, #40]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d105      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800404c:	7cbb      	ldrb	r3, [r7, #18]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e049      	b.n	8004102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fff6 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 fde2 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d001      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04a      	b.n	80041ba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x6c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d013      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x6c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <HAL_TIM_Base_Start_IT+0xc0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x6c>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x6c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d115      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d015      	beq.n	80041b6 <HAL_TIM_Base_Start_IT+0xaa>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d011      	beq.n	80041b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e008      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40013400 	.word	0x40013400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	00010007 	.word	0x00010007

080041e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e049      	b.n	8004286 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fe2a 	bl	8000e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f000 fd20 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_TIM_PWM_Start+0x24>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e03c      	b.n	800432e <HAL_TIM_PWM_Start+0x9e>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d109      	bne.n	80042ce <HAL_TIM_PWM_Start+0x3e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	e02f      	b.n	800432e <HAL_TIM_PWM_Start+0x9e>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x58>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIM_PWM_Start+0x9e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start+0x72>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIM_PWM_Start+0x9e>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b10      	cmp	r3, #16
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x8c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIM_PWM_Start+0x9e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e097      	b.n	8004466 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0xb6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004344:	e023      	b.n	800438e <HAL_TIM_PWM_Start+0xfe>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0xc6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	e01b      	b.n	800438e <HAL_TIM_PWM_Start+0xfe>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xd6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004364:	e013      	b.n	800438e <HAL_TIM_PWM_Start+0xfe>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0xe6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004374:	e00b      	b.n	800438e <HAL_TIM_PWM_Start+0xfe>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b10      	cmp	r3, #16
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0xf6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004384:	e003      	b.n	800438e <HAL_TIM_PWM_Start+0xfe>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 ffea 	bl	8005370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a33      	ldr	r2, [pc, #204]	; (8004470 <HAL_TIM_PWM_Start+0x1e0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_TIM_PWM_Start+0x13e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a32      	ldr	r2, [pc, #200]	; (8004474 <HAL_TIM_PWM_Start+0x1e4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_TIM_PWM_Start+0x13e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a30      	ldr	r2, [pc, #192]	; (8004478 <HAL_TIM_PWM_Start+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_TIM_PWM_Start+0x13e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2f      	ldr	r2, [pc, #188]	; (800447c <HAL_TIM_PWM_Start+0x1ec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIM_PWM_Start+0x13e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2d      	ldr	r2, [pc, #180]	; (8004480 <HAL_TIM_PWM_Start+0x1f0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x142>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_TIM_PWM_Start+0x144>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <HAL_TIM_PWM_Start+0x1e0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d018      	beq.n	8004424 <HAL_TIM_PWM_Start+0x194>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d013      	beq.n	8004424 <HAL_TIM_PWM_Start+0x194>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_TIM_PWM_Start+0x1f4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_TIM_PWM_Start+0x194>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_TIM_PWM_Start+0x1f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_TIM_PWM_Start+0x194>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <HAL_TIM_PWM_Start+0x1e4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIM_PWM_Start+0x194>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a16      	ldr	r2, [pc, #88]	; (8004478 <HAL_TIM_PWM_Start+0x1e8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d115      	bne.n	8004450 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	4b18      	ldr	r3, [pc, #96]	; (800448c <HAL_TIM_PWM_Start+0x1fc>)
 800442c:	4013      	ands	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d015      	beq.n	8004462 <HAL_TIM_PWM_Start+0x1d2>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d011      	beq.n	8004462 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	e008      	b.n	8004462 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e000      	b.n	8004464 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004462:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40013400 	.word	0x40013400
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	00010007 	.word	0x00010007

08004490 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e097      	b.n	80045d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fd19 	bl	8000ef0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80044d4:	f023 0307 	bic.w	r3, r3, #7
 80044d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f000 fbbd 	bl	8004c64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	4313      	orrs	r3, r2
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004530:	f023 030c 	bic.w	r3, r3, #12
 8004534:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	4313      	orrs	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	011a      	lsls	r2, r3, #4
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	4313      	orrs	r3, r2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	4313      	orrs	r3, r2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004604:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d102      	bne.n	8004618 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004612:	7b7b      	ldrb	r3, [r7, #13]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e068      	b.n	80046ee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800462c:	e031      	b.n	8004692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d110      	bne.n	8004656 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d102      	bne.n	8004640 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800463a:	7b3b      	ldrb	r3, [r7, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e054      	b.n	80046ee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004654:	e01d      	b.n	8004692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d108      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800465c:	7bbb      	ldrb	r3, [r7, #14]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004662:	7b7b      	ldrb	r3, [r7, #13]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004668:	7b3b      	ldrb	r3, [r7, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e03d      	b.n	80046ee <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_TIM_Encoder_Start+0xc2>
 8004698:	2b04      	cmp	r3, #4
 800469a:	d008      	beq.n	80046ae <HAL_TIM_Encoder_Start+0xd2>
 800469c:	e00f      	b.n	80046be <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fe62 	bl	8005370 <TIM_CCxChannelCmd>
      break;
 80046ac:	e016      	b.n	80046dc <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	2104      	movs	r1, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fe5a 	bl	8005370 <TIM_CCxChannelCmd>
      break;
 80046bc:	e00e      	b.n	80046dc <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fe52 	bl	8005370 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2201      	movs	r2, #1
 80046d2:	2104      	movs	r1, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fe4b 	bl	8005370 <TIM_CCxChannelCmd>
      break;
 80046da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d122      	bne.n	8004752 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d11b      	bne.n	8004752 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f06f 0202 	mvn.w	r2, #2
 8004722:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fa75 	bl	8004c28 <HAL_TIM_IC_CaptureCallback>
 800473e:	e005      	b.n	800474c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fa67 	bl	8004c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa78 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d122      	bne.n	80047a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d11b      	bne.n	80047a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f06f 0204 	mvn.w	r2, #4
 8004776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa4b 	bl	8004c28 <HAL_TIM_IC_CaptureCallback>
 8004792:	e005      	b.n	80047a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa3d 	bl	8004c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa4e 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d122      	bne.n	80047fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11b      	bne.n	80047fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0208 	mvn.w	r2, #8
 80047ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2204      	movs	r2, #4
 80047d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa21 	bl	8004c28 <HAL_TIM_IC_CaptureCallback>
 80047e6:	e005      	b.n	80047f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa13 	bl	8004c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa24 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d122      	bne.n	800484e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b10      	cmp	r3, #16
 8004814:	d11b      	bne.n	800484e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f06f 0210 	mvn.w	r2, #16
 800481e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2208      	movs	r2, #8
 8004824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f9f7 	bl	8004c28 <HAL_TIM_IC_CaptureCallback>
 800483a:	e005      	b.n	8004848 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9e9 	bl	8004c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9fa 	bl	8004c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10e      	bne.n	800487a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d107      	bne.n	800487a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f06f 0201 	mvn.w	r2, #1
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fc fa91 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 feb7 	bl	8005614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 feaa 	bl	8005628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9a8 	bl	8004c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b20      	cmp	r3, #32
 800490c:	d10e      	bne.n	800492c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b20      	cmp	r3, #32
 800491a:	d107      	bne.n	800492c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0220 	mvn.w	r2, #32
 8004924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fe6a 	bl	8005600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493a:	d10f      	bne.n	800495c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fe70 	bl	800563c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800496a:	d10f      	bne.n	800498c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fe62 	bl	8005650 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499a:	d10f      	bne.n	80049bc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fe54 	bl	8005664 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ca:	d10f      	bne.n	80049ec <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049da:	d107      	bne.n	80049ec <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fe46 	bl	8005678 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0fd      	b.n	8004c0a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b14      	cmp	r3, #20
 8004a1a:	f200 80f0 	bhi.w	8004bfe <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	08004bff 	.word	0x08004bff
 8004a2c:	08004bff 	.word	0x08004bff
 8004a30:	08004bff 	.word	0x08004bff
 8004a34:	08004ab9 	.word	0x08004ab9
 8004a38:	08004bff 	.word	0x08004bff
 8004a3c:	08004bff 	.word	0x08004bff
 8004a40:	08004bff 	.word	0x08004bff
 8004a44:	08004afb 	.word	0x08004afb
 8004a48:	08004bff 	.word	0x08004bff
 8004a4c:	08004bff 	.word	0x08004bff
 8004a50:	08004bff 	.word	0x08004bff
 8004a54:	08004b3b 	.word	0x08004b3b
 8004a58:	08004bff 	.word	0x08004bff
 8004a5c:	08004bff 	.word	0x08004bff
 8004a60:	08004bff 	.word	0x08004bff
 8004a64:	08004b7d 	.word	0x08004b7d
 8004a68:	08004bff 	.word	0x08004bff
 8004a6c:	08004bff 	.word	0x08004bff
 8004a70:	08004bff 	.word	0x08004bff
 8004a74:	08004bbd 	.word	0x08004bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f980 	bl	8004d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0208 	orr.w	r2, r2, #8
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0204 	bic.w	r2, r2, #4
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	619a      	str	r2, [r3, #24]
      break;
 8004ab6:	e0a3      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f9f0 	bl	8004ea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6999      	ldr	r1, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	619a      	str	r2, [r3, #24]
      break;
 8004af8:	e082      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fa59 	bl	8004fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0208 	orr.w	r2, r2, #8
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0204 	bic.w	r2, r2, #4
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	61da      	str	r2, [r3, #28]
      break;
 8004b38:	e062      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fac1 	bl	80050c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69d9      	ldr	r1, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	021a      	lsls	r2, r3, #8
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	61da      	str	r2, [r3, #28]
      break;
 8004b7a:	e041      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fb2a 	bl	80051dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bba:	e021      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb6e 	bl	80052a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	021a      	lsls	r2, r3, #8
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bfc:	e000      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004bfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a3c      	ldr	r2, [pc, #240]	; (8004d68 <TIM_Base_SetConfig+0x104>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a39      	ldr	r2, [pc, #228]	; (8004d6c <TIM_Base_SetConfig+0x108>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a38      	ldr	r2, [pc, #224]	; (8004d70 <TIM_Base_SetConfig+0x10c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a37      	ldr	r2, [pc, #220]	; (8004d74 <TIM_Base_SetConfig+0x110>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <TIM_Base_SetConfig+0x104>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01b      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d017      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <TIM_Base_SetConfig+0x108>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <TIM_Base_SetConfig+0x10c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00f      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a28      	ldr	r2, [pc, #160]	; (8004d74 <TIM_Base_SetConfig+0x110>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <TIM_Base_SetConfig+0x114>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d007      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <TIM_Base_SetConfig+0x118>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a25      	ldr	r2, [pc, #148]	; (8004d80 <TIM_Base_SetConfig+0x11c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <TIM_Base_SetConfig+0x104>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0xe8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <TIM_Base_SetConfig+0x110>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0xe8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <TIM_Base_SetConfig+0x114>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0xe8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <TIM_Base_SetConfig+0x118>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0xe8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <TIM_Base_SetConfig+0x11c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d103      	bne.n	8004d54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	615a      	str	r2, [r3, #20]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40013400 	.word	0x40013400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800

08004d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 0302 	bic.w	r3, r3, #2
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <TIM_OC1_SetConfig+0x10c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_OC1_SetConfig+0x80>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <TIM_OC1_SetConfig+0x110>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_OC1_SetConfig+0x80>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <TIM_OC1_SetConfig+0x114>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_OC1_SetConfig+0x80>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a29      	ldr	r2, [pc, #164]	; (8004e9c <TIM_OC1_SetConfig+0x118>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC1_SetConfig+0x80>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a28      	ldr	r2, [pc, #160]	; (8004ea0 <TIM_OC1_SetConfig+0x11c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0308 	bic.w	r3, r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <TIM_OC1_SetConfig+0x10c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_OC1_SetConfig+0xc2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <TIM_OC1_SetConfig+0x110>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_OC1_SetConfig+0xc2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <TIM_OC1_SetConfig+0x114>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_OC1_SetConfig+0xc2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <TIM_OC1_SetConfig+0x118>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC1_SetConfig+0xc2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <TIM_OC1_SetConfig+0x11c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40013400 	.word	0x40013400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800

08004ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0210 	bic.w	r2, r3, #16
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0320 	bic.w	r3, r3, #32
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <TIM_OC2_SetConfig+0x100>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_OC2_SetConfig+0x6c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <TIM_OC2_SetConfig+0x104>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10d      	bne.n	8004f2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <TIM_OC2_SetConfig+0x100>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC2_SetConfig+0xb0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <TIM_OC2_SetConfig+0x104>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC2_SetConfig+0xb0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <TIM_OC2_SetConfig+0x108>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC2_SetConfig+0xb0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <TIM_OC2_SetConfig+0x10c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC2_SetConfig+0xb0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <TIM_OC2_SetConfig+0x110>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d113      	bne.n	8004f7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40013400 	.word	0x40013400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800

08004fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <TIM_OC3_SetConfig+0xfc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC3_SetConfig+0x6a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <TIM_OC3_SetConfig+0x100>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10d      	bne.n	800503e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <TIM_OC3_SetConfig+0xfc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_OC3_SetConfig+0xae>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <TIM_OC3_SetConfig+0x100>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_OC3_SetConfig+0xae>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <TIM_OC3_SetConfig+0x104>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_OC3_SetConfig+0xae>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <TIM_OC3_SetConfig+0x108>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC3_SetConfig+0xae>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <TIM_OC3_SetConfig+0x10c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d113      	bne.n	800508e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800506c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800

080050c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <TIM_OC4_SetConfig+0x100>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC4_SetConfig+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a27      	ldr	r2, [pc, #156]	; (80051cc <TIM_OC4_SetConfig+0x104>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10d      	bne.n	8005150 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <TIM_OC4_SetConfig+0x100>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00f      	beq.n	8005178 <TIM_OC4_SetConfig+0xb0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <TIM_OC4_SetConfig+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_OC4_SetConfig+0xb0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <TIM_OC4_SetConfig+0x108>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_OC4_SetConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <TIM_OC4_SetConfig+0x10c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_OC4_SetConfig+0xb0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <TIM_OC4_SetConfig+0x110>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d113      	bne.n	80051a0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005186:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800

080051dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005220:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a17      	ldr	r2, [pc, #92]	; (8005290 <TIM_OC5_SetConfig+0xb4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_OC5_SetConfig+0x7a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a16      	ldr	r2, [pc, #88]	; (8005294 <TIM_OC5_SetConfig+0xb8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_OC5_SetConfig+0x7a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a15      	ldr	r2, [pc, #84]	; (8005298 <TIM_OC5_SetConfig+0xbc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_OC5_SetConfig+0x7a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a14      	ldr	r2, [pc, #80]	; (800529c <TIM_OC5_SetConfig+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC5_SetConfig+0x7a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <TIM_OC5_SetConfig+0xc4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d109      	bne.n	800526a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800

080052a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	051b      	lsls	r3, r3, #20
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a18      	ldr	r2, [pc, #96]	; (800535c <TIM_OC6_SetConfig+0xb8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00f      	beq.n	8005320 <TIM_OC6_SetConfig+0x7c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a17      	ldr	r2, [pc, #92]	; (8005360 <TIM_OC6_SetConfig+0xbc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_OC6_SetConfig+0x7c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a16      	ldr	r2, [pc, #88]	; (8005364 <TIM_OC6_SetConfig+0xc0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_OC6_SetConfig+0x7c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a15      	ldr	r2, [pc, #84]	; (8005368 <TIM_OC6_SetConfig+0xc4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_OC6_SetConfig+0x7c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a14      	ldr	r2, [pc, #80]	; (800536c <TIM_OC6_SetConfig+0xc8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d109      	bne.n	8005334 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40013400 	.word	0x40013400
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800

08005370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2201      	movs	r2, #1
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	43db      	mvns	r3, r3
 8005392:	401a      	ands	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e065      	b.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800540e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d013      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40014000 	.word	0x40014000

080054c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e087      	b.n	80055ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a27      	ldr	r2, [pc, #156]	; (80055f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a25      	ldr	r2, [pc, #148]	; (80055fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d106      	bne.n	8005578 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d126      	bne.n	80055da <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	051b      	lsls	r3, r3, #20
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a0e      	ldr	r2, [pc, #56]	; (80055f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d106      	bne.n	80055da <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40013400 	.word	0x40013400

08005600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800569c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80056a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80056c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	4013      	ands	r3, r2
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056f0:	b084      	sub	sp, #16
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	f107 0014 	add.w	r0, r7, #20
 80056fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	b004      	add	sp, #16
 8005730:	4770      	bx	lr
	...

08005734 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005734:	b480      	push	{r7}
 8005736:	b09b      	sub	sp, #108	; 0x6c
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	78db      	ldrb	r3, [r3, #3]
 8005762:	2b03      	cmp	r3, #3
 8005764:	d81f      	bhi.n	80057a6 <USB_ActivateEndpoint+0x72>
 8005766:	a201      	add	r2, pc, #4	; (adr r2, 800576c <USB_ActivateEndpoint+0x38>)
 8005768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576c:	0800577d 	.word	0x0800577d
 8005770:	08005799 	.word	0x08005799
 8005774:	080057af 	.word	0x080057af
 8005778:	0800578b 	.word	0x0800578b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800577c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005784:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005788:	e012      	b.n	80057b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800578a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800578e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005792:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005796:	e00b      	b.n	80057b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005798:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800579c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80057a4:	e004      	b.n	80057b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80057ac:	e000      	b.n	80057b0 <USB_ActivateEndpoint+0x7c>
      break;
 80057ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	b21a      	sxth	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	b21b      	sxth	r3, r3
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	7b1b      	ldrb	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f040 8149 	bne.w	8005ab8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8084 	beq.w	8005938 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	00da      	lsls	r2, r3, #3
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	88db      	ldrh	r3, [r3, #6]
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	81fb      	strh	r3, [r7, #14]
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <USB_ActivateEndpoint+0x180>
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	81bb      	strh	r3, [r7, #12]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	441a      	add	r2, r3
 800589e:	89bb      	ldrh	r3, [r7, #12]
 80058a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	78db      	ldrb	r3, [r3, #3]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d020      	beq.n	80058fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d2:	813b      	strh	r3, [r7, #8]
 80058d4:	893b      	ldrh	r3, [r7, #8]
 80058d6:	f083 0320 	eor.w	r3, r3, #32
 80058da:	813b      	strh	r3, [r7, #8]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	441a      	add	r2, r3
 80058e6:	893b      	ldrh	r3, [r7, #8]
 80058e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	8013      	strh	r3, [r2, #0]
 80058fc:	e27f      	b.n	8005dfe <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005914:	817b      	strh	r3, [r7, #10]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	897b      	ldrh	r3, [r7, #10]
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]
 8005936:	e262      	b.n	8005dfe <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005942:	b29b      	uxth	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	4413      	add	r3, r2
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	00da      	lsls	r2, r3, #3
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	4413      	add	r3, r2
 8005956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	88db      	ldrh	r3, [r3, #6]
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	b29b      	uxth	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	4413      	add	r3, r2
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	00da      	lsls	r2, r3, #3
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	4413      	add	r3, r2
 800598a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d112      	bne.n	80059be <USB_ActivateEndpoint+0x28a>
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e02f      	b.n	8005a1e <USB_ActivateEndpoint+0x2ea>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b3e      	cmp	r3, #62	; 0x3e
 80059c4:	d813      	bhi.n	80059ee <USB_ActivateEndpoint+0x2ba>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	663b      	str	r3, [r7, #96]	; 0x60
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <USB_ActivateEndpoint+0x2ac>
 80059da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059dc:	3301      	adds	r3, #1
 80059de:	663b      	str	r3, [r7, #96]	; 0x60
 80059e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e017      	b.n	8005a1e <USB_ActivateEndpoint+0x2ea>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	663b      	str	r3, [r7, #96]	; 0x60
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <USB_ActivateEndpoint+0x2d4>
 8005a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a04:	3b01      	subs	r3, #1
 8005a06:	663b      	str	r3, [r7, #96]	; 0x60
 8005a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	029b      	lsls	r3, r3, #10
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	83fb      	strh	r3, [r7, #30]
 8005a2c:	8bfb      	ldrh	r3, [r7, #30]
 8005a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01b      	beq.n	8005a6e <USB_ActivateEndpoint+0x33a>
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	83bb      	strh	r3, [r7, #28]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	8bbb      	ldrh	r3, [r7, #28]
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	837b      	strh	r3, [r7, #26]
 8005a86:	8b7b      	ldrh	r3, [r7, #26]
 8005a88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a8c:	837b      	strh	r3, [r7, #26]
 8005a8e:	8b7b      	ldrh	r3, [r7, #26]
 8005a90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a94:	837b      	strh	r3, [r7, #26]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
 8005ab6:	e1a2      	b.n	8005dfe <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	441a      	add	r2, r3
 8005adc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b04:	4413      	add	r3, r2
 8005b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	00da      	lsls	r2, r3, #3
 8005b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b16:	657b      	str	r3, [r7, #84]	; 0x54
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	891b      	ldrh	r3, [r3, #8]
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b38:	4413      	add	r3, r2
 8005b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	00da      	lsls	r2, r3, #3
 8005b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b44:	4413      	add	r3, r2
 8005b46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	895b      	ldrh	r3, [r3, #10]
 8005b50:	085b      	lsrs	r3, r3, #1
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 8091 	bne.w	8005c88 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01b      	beq.n	8005bb6 <USB_ActivateEndpoint+0x482>
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b94:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	441a      	add	r2, r3
 8005ba0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01b      	beq.n	8005c06 <USB_ActivateEndpoint+0x4d2>
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	441a      	add	r2, r3
 8005bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
 8005c86:	e0ba      	b.n	8005dfe <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01d      	beq.n	8005ce0 <USB_ActivateEndpoint+0x5ac>
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01d      	beq.n	8005d38 <USB_ActivateEndpoint+0x604>
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	78db      	ldrb	r3, [r3, #3]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d024      	beq.n	8005d8a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d5e:	f083 0320 	eor.w	r3, r3, #32
 8005d62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	8013      	strh	r3, [r2, #0]
 8005d88:	e01d      	b.n	8005dc6 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	376c      	adds	r7, #108	; 0x6c
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop

08005e10 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b08d      	sub	sp, #52	; 0x34
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 808e 	bne.w	8005f40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d044      	beq.n	8005eb6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	81bb      	strh	r3, [r7, #12]
 8005e3a:	89bb      	ldrh	r3, [r7, #12]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <USB_DeactivateEndpoint+0x6c>
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	817b      	strh	r3, [r7, #10]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	897b      	ldrh	r3, [r7, #10]
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e92:	813b      	strh	r3, [r7, #8]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
 8005eb4:	e192      	b.n	80061dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	827b      	strh	r3, [r7, #18]
 8005ec4:	8a7b      	ldrh	r3, [r7, #18]
 8005ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01b      	beq.n	8005f06 <USB_DeactivateEndpoint+0xf6>
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	823b      	strh	r3, [r7, #16]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	8a3b      	ldrh	r3, [r7, #16]
 8005ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	81fb      	strh	r3, [r7, #14]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	89fb      	ldrh	r3, [r7, #14]
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
 8005f3e:	e14d      	b.n	80061dc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 80a5 	bne.w	8006094 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	843b      	strh	r3, [r7, #32]
 8005f58:	8c3b      	ldrh	r3, [r7, #32]
 8005f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01b      	beq.n	8005f9a <USB_DeactivateEndpoint+0x18a>
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	83fb      	strh	r3, [r7, #30]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	8bfb      	ldrh	r3, [r7, #30]
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	83bb      	strh	r3, [r7, #28]
 8005fa8:	8bbb      	ldrh	r3, [r7, #28]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d01b      	beq.n	8005fea <USB_DeactivateEndpoint+0x1da>
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc8:	837b      	strh	r3, [r7, #26]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	441a      	add	r2, r3
 8005fd4:	8b7b      	ldrh	r3, [r7, #26]
 8005fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006000:	833b      	strh	r3, [r7, #24]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	8b3b      	ldrh	r3, [r7, #24]
 800600e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800601e:	b29b      	uxth	r3, r3
 8006020:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	82fb      	strh	r3, [r7, #22]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	8afb      	ldrh	r3, [r7, #22]
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006070:	82bb      	strh	r3, [r7, #20]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8abb      	ldrh	r3, [r7, #20]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
 8006092:	e0a3      	b.n	80061dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80060a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01b      	beq.n	80060e4 <USB_DeactivateEndpoint+0x2d4>
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	441a      	add	r2, r3
 80060ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01b      	beq.n	8006134 <USB_DeactivateEndpoint+0x324>
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	853b      	strh	r3, [r7, #40]	; 0x28
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006130:	b29b      	uxth	r3, r3
 8006132:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	441a      	add	r2, r3
 8006156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006168:	b29b      	uxth	r3, r3
 800616a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006182:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d8:	b29b      	uxth	r3, r3
 80061da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3734      	adds	r7, #52	; 0x34
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b0c4      	sub	sp, #272	; 0x110
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	1d3b      	adds	r3, r7, #4
 80061f2:	6018      	str	r0, [r3, #0]
 80061f4:	463b      	mov	r3, r7
 80061f6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	f040 8566 	bne.w	8006cd0 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006204:	463b      	mov	r3, r7
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	463b      	mov	r3, r7
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	429a      	cmp	r2, r3
 8006212:	d905      	bls.n	8006220 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800621e:	e004      	b.n	800622a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006220:	463b      	mov	r3, r7
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800622a:	463b      	mov	r3, r7
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	7b1b      	ldrb	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d12c      	bne.n	800628e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6959      	ldr	r1, [r3, #20]
 800623a:	463b      	mov	r3, r7
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	88da      	ldrh	r2, [r3, #6]
 8006240:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006244:	b29b      	uxth	r3, r3
 8006246:	1d38      	adds	r0, r7, #4
 8006248:	6800      	ldr	r0, [r0, #0]
 800624a:	f001 fa43 	bl	80076d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	00da      	lsls	r2, r3, #3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006276:	f107 0310 	add.w	r3, r7, #16
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006280:	b29a      	uxth	r2, r3
 8006282:	f107 0310 	add.w	r3, r7, #16
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	f000 bcec 	b.w	8006c66 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	78db      	ldrb	r3, [r3, #3]
 8006294:	2b02      	cmp	r3, #2
 8006296:	f040 8356 	bne.w	8006946 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	f240 82fa 	bls.w	80068a0 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80062ac:	1d3b      	adds	r3, r7, #4
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	463b      	mov	r3, r7
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 815e 	beq.w	80065e4 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d164      	bne.n	8006402 <USB_EPStartXfer+0x218>
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006346:	b29b      	uxth	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	4413      	add	r3, r2
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00da      	lsls	r2, r3, #3
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	4413      	add	r3, r2
 800635c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
 8006362:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006366:	2b00      	cmp	r3, #0
 8006368:	d112      	bne.n	8006390 <USB_EPStartXfer+0x1a6>
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006374:	b29a      	uxth	r2, r3
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006388:	b29a      	uxth	r2, r3
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	e054      	b.n	800643a <USB_EPStartXfer+0x250>
 8006390:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006394:	2b3e      	cmp	r3, #62	; 0x3e
 8006396:	d817      	bhi.n	80063c8 <USB_EPStartXfer+0x1de>
 8006398:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <USB_EPStartXfer+0x1ce>
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b2:	3301      	adds	r3, #1
 80063b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063bc:	b29b      	uxth	r3, r3
 80063be:	029b      	lsls	r3, r3, #10
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e038      	b.n	800643a <USB_EPStartXfer+0x250>
 80063c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d104      	bne.n	80063e8 <USB_EPStartXfer+0x1fe>
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e2:	3b01      	subs	r3, #1
 80063e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	029b      	lsls	r3, r3, #10
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e01b      	b.n	800643a <USB_EPStartXfer+0x250>
 8006402:	463b      	mov	r3, r7
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d116      	bne.n	800643a <USB_EPStartXfer+0x250>
 800640c:	1d3b      	adds	r3, r7, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641a:	4413      	add	r3, r2
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	00da      	lsls	r2, r3, #3
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	4413      	add	r3, r2
 800642a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800642e:	633b      	str	r3, [r7, #48]	; 0x30
 8006430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006434:	b29a      	uxth	r2, r3
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800643a:	463b      	mov	r3, r7
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	895b      	ldrh	r3, [r3, #10]
 8006440:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6959      	ldr	r1, [r3, #20]
 800644a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800644e:	b29b      	uxth	r3, r3
 8006450:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006454:	1d38      	adds	r0, r7, #4
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	f001 f93c 	bl	80076d4 <USB_WritePMA>
            ep->xfer_buff += len;
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006466:	441a      	add	r2, r3
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a1a      	ldr	r2, [r3, #32]
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d90e      	bls.n	800649c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800647e:	463b      	mov	r3, r7
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	621a      	str	r2, [r3, #32]
 800649a:	e008      	b.n	80064ae <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80064a6:	463b      	mov	r3, r7
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d164      	bne.n	8006582 <USB_EPStartXfer+0x398>
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	463b      	mov	r3, r7
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	00da      	lsls	r2, r3, #3
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d112      	bne.n	8006510 <USB_EPStartXfer+0x326>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e057      	b.n	80065c0 <USB_EPStartXfer+0x3d6>
 8006510:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006514:	2b3e      	cmp	r3, #62	; 0x3e
 8006516:	d817      	bhi.n	8006548 <USB_EPStartXfer+0x35e>
 8006518:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006522:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <USB_EPStartXfer+0x34e>
 800652e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006532:	3301      	adds	r3, #1
 8006534:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006538:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800653c:	b29b      	uxth	r3, r3
 800653e:	029b      	lsls	r3, r3, #10
 8006540:	b29a      	uxth	r2, r3
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e03b      	b.n	80065c0 <USB_EPStartXfer+0x3d6>
 8006548:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006552:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <USB_EPStartXfer+0x37e>
 800655e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006562:	3b01      	subs	r3, #1
 8006564:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006568:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e01e      	b.n	80065c0 <USB_EPStartXfer+0x3d6>
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d119      	bne.n	80065c0 <USB_EPStartXfer+0x3d6>
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
 8006592:	1d3b      	adds	r3, r7, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	4413      	add	r3, r2
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
 80065a4:	463b      	mov	r3, r7
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	00da      	lsls	r2, r3, #3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	4413      	add	r3, r2
 80065b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065b4:	623b      	str	r3, [r7, #32]
 80065b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	891b      	ldrh	r3, [r3, #8]
 80065c6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6959      	ldr	r1, [r3, #20]
 80065d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80065da:	1d38      	adds	r0, r7, #4
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f001 f879 	bl	80076d4 <USB_WritePMA>
 80065e2:	e340      	b.n	8006c66 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d164      	bne.n	80066b8 <USB_EPStartXfer+0x4ce>
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f4:	1d3b      	adds	r3, r7, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	4413      	add	r3, r2
 8006604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006606:	463b      	mov	r3, r7
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	00da      	lsls	r2, r3, #3
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	4413      	add	r3, r2
 8006612:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006616:	64bb      	str	r3, [r7, #72]	; 0x48
 8006618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800661c:	2b00      	cmp	r3, #0
 800661e:	d112      	bne.n	8006646 <USB_EPStartXfer+0x45c>
 8006620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800662a:	b29a      	uxth	r2, r3
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663e:	b29a      	uxth	r2, r3
 8006640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	e057      	b.n	80066f6 <USB_EPStartXfer+0x50c>
 8006646:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664a:	2b3e      	cmp	r3, #62	; 0x3e
 800664c:	d817      	bhi.n	800667e <USB_EPStartXfer+0x494>
 800664e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006658:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <USB_EPStartXfer+0x484>
 8006664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006668:	3301      	adds	r3, #1
 800666a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006672:	b29b      	uxth	r3, r3
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	b29a      	uxth	r2, r3
 8006678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	e03b      	b.n	80066f6 <USB_EPStartXfer+0x50c>
 800667e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <USB_EPStartXfer+0x4b4>
 8006694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006698:	3b01      	subs	r3, #1
 800669a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800669e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	029b      	lsls	r3, r3, #10
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e01e      	b.n	80066f6 <USB_EPStartXfer+0x50c>
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d119      	bne.n	80066f6 <USB_EPStartXfer+0x50c>
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	657b      	str	r3, [r7, #84]	; 0x54
 80066c8:	1d3b      	adds	r3, r7, #4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d6:	4413      	add	r3, r2
 80066d8:	657b      	str	r3, [r7, #84]	; 0x54
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	00da      	lsls	r2, r3, #3
 80066e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066ea:	653b      	str	r3, [r7, #80]	; 0x50
 80066ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	891b      	ldrh	r3, [r3, #8]
 80066fc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6959      	ldr	r1, [r3, #20]
 8006706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670a:	b29b      	uxth	r3, r3
 800670c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006710:	1d38      	adds	r0, r7, #4
 8006712:	6800      	ldr	r0, [r0, #0]
 8006714:	f000 ffde 	bl	80076d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006718:	463b      	mov	r3, r7
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695a      	ldr	r2, [r3, #20]
 800671e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006722:	441a      	add	r2, r3
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800672a:	463b      	mov	r3, r7
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6a1a      	ldr	r2, [r3, #32]
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d90e      	bls.n	8006758 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	463b      	mov	r3, r7
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	621a      	str	r2, [r3, #32]
 8006756:	e008      	b.n	800676a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006762:	463b      	mov	r3, r7
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2200      	movs	r2, #0
 8006768:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	647b      	str	r3, [r7, #68]	; 0x44
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d164      	bne.n	8006844 <USB_EPStartXfer+0x65a>
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	4413      	add	r3, r2
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006792:	463b      	mov	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	00da      	lsls	r2, r3, #3
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	4413      	add	r3, r2
 800679e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d112      	bne.n	80067d2 <USB_EPStartXfer+0x5e8>
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	e054      	b.n	800687c <USB_EPStartXfer+0x692>
 80067d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067d6:	2b3e      	cmp	r3, #62	; 0x3e
 80067d8:	d817      	bhi.n	800680a <USB_EPStartXfer+0x620>
 80067da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <USB_EPStartXfer+0x610>
 80067f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067fe:	b29b      	uxth	r3, r3
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	b29a      	uxth	r2, r3
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e038      	b.n	800687c <USB_EPStartXfer+0x692>
 800680a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006814:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <USB_EPStartXfer+0x640>
 8006820:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006824:	3b01      	subs	r3, #1
 8006826:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800682a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e01b      	b.n	800687c <USB_EPStartXfer+0x692>
 8006844:	463b      	mov	r3, r7
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d116      	bne.n	800687c <USB_EPStartXfer+0x692>
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006856:	b29b      	uxth	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685c:	4413      	add	r3, r2
 800685e:	647b      	str	r3, [r7, #68]	; 0x44
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	00da      	lsls	r2, r3, #3
 8006868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686a:	4413      	add	r3, r2
 800686c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
 8006872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006876:	b29a      	uxth	r2, r3
 8006878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800687a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	895b      	ldrh	r3, [r3, #10]
 8006882:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006886:	463b      	mov	r3, r7
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6959      	ldr	r1, [r3, #20]
 800688c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006890:	b29b      	uxth	r3, r3
 8006892:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006896:	1d38      	adds	r0, r7, #4
 8006898:	6800      	ldr	r0, [r0, #0]
 800689a:	f000 ff1b 	bl	80076d4 <USB_WritePMA>
 800689e:	e1e2      	b.n	8006c66 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	463b      	mov	r3, r7
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	663b      	str	r3, [r7, #96]	; 0x60
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006902:	4413      	add	r3, r2
 8006904:	663b      	str	r3, [r7, #96]	; 0x60
 8006906:	463b      	mov	r3, r7
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	00da      	lsls	r2, r3, #3
 800690e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006910:	4413      	add	r3, r2
 8006912:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691c:	b29a      	uxth	r2, r3
 800691e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006920:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006922:	463b      	mov	r3, r7
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	891b      	ldrh	r3, [r3, #8]
 8006928:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6959      	ldr	r1, [r3, #20]
 8006932:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006936:	b29b      	uxth	r3, r3
 8006938:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800693c:	1d38      	adds	r0, r7, #4
 800693e:	6800      	ldr	r0, [r0, #0]
 8006940:	f000 fec8 	bl	80076d4 <USB_WritePMA>
 8006944:	e18f      	b.n	8006c66 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	463b      	mov	r3, r7
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 808f 	beq.w	8006a80 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	67bb      	str	r3, [r7, #120]	; 0x78
 8006968:	463b      	mov	r3, r7
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d164      	bne.n	8006a3c <USB_EPStartXfer+0x852>
 8006972:	1d3b      	adds	r3, r7, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	673b      	str	r3, [r7, #112]	; 0x70
 8006978:	1d3b      	adds	r3, r7, #4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006980:	b29b      	uxth	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006986:	4413      	add	r3, r2
 8006988:	673b      	str	r3, [r7, #112]	; 0x70
 800698a:	463b      	mov	r3, r7
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	00da      	lsls	r2, r3, #3
 8006992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006994:	4413      	add	r3, r2
 8006996:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800699a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800699c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d112      	bne.n	80069ca <USB_EPStartXfer+0x7e0>
 80069a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e054      	b.n	8006a74 <USB_EPStartXfer+0x88a>
 80069ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ce:	2b3e      	cmp	r3, #62	; 0x3e
 80069d0:	d817      	bhi.n	8006a02 <USB_EPStartXfer+0x818>
 80069d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <USB_EPStartXfer+0x808>
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	3301      	adds	r3, #1
 80069ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	e038      	b.n	8006a74 <USB_EPStartXfer+0x88a>
 8006a02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <USB_EPStartXfer+0x838>
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e01b      	b.n	8006a74 <USB_EPStartXfer+0x88a>
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d116      	bne.n	8006a74 <USB_EPStartXfer+0x88a>
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a54:	4413      	add	r3, r2
 8006a56:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	00da      	lsls	r2, r3, #3
 8006a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a68:	677b      	str	r3, [r7, #116]	; 0x74
 8006a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a74:	463b      	mov	r3, r7
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	895b      	ldrh	r3, [r3, #10]
 8006a7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006a7e:	e097      	b.n	8006bb0 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d168      	bne.n	8006b5c <USB_EPStartXfer+0x972>
 8006a8a:	1d3b      	adds	r3, r7, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	00da      	lsls	r2, r3, #3
 8006ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d112      	bne.n	8006aea <USB_EPStartXfer+0x900>
 8006ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ad2:	801a      	strh	r2, [r3, #0]
 8006ad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	e05d      	b.n	8006ba6 <USB_EPStartXfer+0x9bc>
 8006aea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aee:	2b3e      	cmp	r3, #62	; 0x3e
 8006af0:	d817      	bhi.n	8006b22 <USB_EPStartXfer+0x938>
 8006af2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006af6:	085b      	lsrs	r3, r3, #1
 8006af8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006afc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <USB_EPStartXfer+0x928>
 8006b08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	029b      	lsls	r3, r3, #10
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b1e:	801a      	strh	r2, [r3, #0]
 8006b20:	e041      	b.n	8006ba6 <USB_EPStartXfer+0x9bc>
 8006b22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <USB_EPStartXfer+0x958>
 8006b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	029b      	lsls	r3, r3, #10
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e024      	b.n	8006ba6 <USB_EPStartXfer+0x9bc>
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d11f      	bne.n	8006ba6 <USB_EPStartXfer+0x9bc>
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b7e:	4413      	add	r3, r2
 8006b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	00da      	lsls	r2, r3, #3
 8006b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	891b      	ldrh	r3, [r3, #8]
 8006bac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6959      	ldr	r1, [r3, #20]
 8006bb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006bc0:	1d38      	adds	r0, r7, #4
 8006bc2:	6800      	ldr	r0, [r0, #0]
 8006bc4:	f000 fd86 	bl	80076d4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006bc8:	463b      	mov	r3, r7
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d122      	bne.n	8006c18 <USB_EPStartXfer+0xa2e>
 8006bd2:	1d3b      	adds	r3, r7, #4
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006bf0:	1d3b      	adds	r3, r7, #4
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	463b      	mov	r3, r7
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
 8006c16:	e026      	b.n	8006c66 <USB_EPStartXfer+0xa7c>
 8006c18:	463b      	mov	r3, r7
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d121      	bne.n	8006c66 <USB_EPStartXfer+0xa7c>
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	463b      	mov	r3, r7
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006c40:	1d3b      	adds	r3, r7, #4
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f107 020e 	add.w	r2, r7, #14
 8006c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	f107 030e 	add.w	r3, r7, #14
 8006c8a:	f107 020e 	add.w	r2, r7, #14
 8006c8e:	8812      	ldrh	r2, [r2, #0]
 8006c90:	f082 0210 	eor.w	r2, r2, #16
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	f107 030e 	add.w	r3, r7, #14
 8006c9a:	f107 020e 	add.w	r2, r7, #14
 8006c9e:	8812      	ldrh	r2, [r2, #0]
 8006ca0:	f082 0220 	eor.w	r2, r2, #32
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	463b      	mov	r3, r7
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	f107 030e 	add.w	r3, r7, #14
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
 8006cce:	e3b5      	b.n	800743c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	7b1b      	ldrb	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 8090 	bne.w	8006dfc <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d90e      	bls.n	8006d0a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	619a      	str	r2, [r3, #24]
 8006d08:	e008      	b.n	8006d1c <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d24:	1d3b      	adds	r3, r7, #4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d34:	4413      	add	r3, r2
 8006d36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	00da      	lsls	r2, r3, #3
 8006d42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <USB_EPStartXfer+0xb9c>
 8006d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e32c      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
 8006d86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d8c:	d818      	bhi.n	8006dc0 <USB_EPStartXfer+0xbd6>
 8006d8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <USB_EPStartXfer+0xbc4>
 8006da4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006da8:	3301      	adds	r3, #1
 8006daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e30f      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
 8006dc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <USB_EPStartXfer+0xbf6>
 8006dd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006de0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	029b      	lsls	r3, r3, #10
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	e2f1      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	78db      	ldrb	r3, [r3, #3]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	f040 818f 	bne.w	8007126 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d175      	bne.n	8006efe <USB_EPStartXfer+0xd14>
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e1a:	1d3b      	adds	r3, r7, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e30:	463b      	mov	r3, r7
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	00da      	lsls	r2, r3, #3
 8006e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e46:	463b      	mov	r3, r7
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d116      	bne.n	8006e7e <USB_EPStartXfer+0xc94>
 8006e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e065      	b.n	8006f4a <USB_EPStartXfer+0xd60>
 8006e7e:	463b      	mov	r3, r7
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b3e      	cmp	r3, #62	; 0x3e
 8006e86:	d81a      	bhi.n	8006ebe <USB_EPStartXfer+0xcd4>
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e94:	463b      	mov	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <USB_EPStartXfer+0xcc2>
 8006ea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	029b      	lsls	r3, r3, #10
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e045      	b.n	8006f4a <USB_EPStartXfer+0xd60>
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eca:	463b      	mov	r3, r7
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <USB_EPStartXfer+0xcf8>
 8006ed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006edc:	3b01      	subs	r3, #1
 8006ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ee2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	029b      	lsls	r3, r3, #10
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e025      	b.n	8006f4a <USB_EPStartXfer+0xd60>
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d120      	bne.n	8006f4a <USB_EPStartXfer+0xd60>
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f10:	1d3b      	adds	r3, r7, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f20:	4413      	add	r3, r2
 8006f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f26:	463b      	mov	r3, r7
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	00da      	lsls	r2, r3, #3
 8006f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	1d3b      	adds	r3, r7, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f52:	463b      	mov	r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d175      	bne.n	8007048 <USB_EPStartXfer+0xe5e>
 8006f5c:	1d3b      	adds	r3, r7, #4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f74:	4413      	add	r3, r2
 8006f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	00da      	lsls	r2, r3, #3
 8006f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f86:	4413      	add	r3, r2
 8006f88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f90:	463b      	mov	r3, r7
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d116      	bne.n	8006fc8 <USB_EPStartXfer+0xdde>
 8006f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	e061      	b.n	800708c <USB_EPStartXfer+0xea2>
 8006fc8:	463b      	mov	r3, r7
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b3e      	cmp	r3, #62	; 0x3e
 8006fd0:	d81a      	bhi.n	8007008 <USB_EPStartXfer+0xe1e>
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fde:	463b      	mov	r3, r7
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <USB_EPStartXfer+0xe0c>
 8006fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	029b      	lsls	r3, r3, #10
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	e041      	b.n	800708c <USB_EPStartXfer+0xea2>
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007014:	463b      	mov	r3, r7
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <USB_EPStartXfer+0xe42>
 8007022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007026:	3b01      	subs	r3, #1
 8007028:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e021      	b.n	800708c <USB_EPStartXfer+0xea2>
 8007048:	463b      	mov	r3, r7
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d11c      	bne.n	800708c <USB_EPStartXfer+0xea2>
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007062:	4413      	add	r3, r2
 8007064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	00da      	lsls	r2, r3, #3
 8007070:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007074:	4413      	add	r3, r2
 8007076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800707a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800707e:	463b      	mov	r3, r7
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	b29a      	uxth	r2, r3
 8007086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800708a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800708c:	463b      	mov	r3, r7
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 81a4 	beq.w	80073e0 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007098:	1d3b      	adds	r3, r7, #4
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	463b      	mov	r3, r7
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <USB_EPStartXfer+0xeda>
 80070b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8187 	bne.w	80073e0 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 8180 	bne.w	80073e0 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070e0:	1d3b      	adds	r3, r7, #4
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	441a      	add	r2, r3
 800710c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007120:	b29b      	uxth	r3, r3
 8007122:	8013      	strh	r3, [r2, #0]
 8007124:	e15c      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007126:	463b      	mov	r3, r7
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	78db      	ldrb	r3, [r3, #3]
 800712c:	2b01      	cmp	r3, #1
 800712e:	f040 8155 	bne.w	80073dc <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	429a      	cmp	r2, r3
 8007140:	d90e      	bls.n	8007160 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007142:	463b      	mov	r3, r7
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	463b      	mov	r3, r7
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	619a      	str	r2, [r3, #24]
 800715e:	e008      	b.n	8007172 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007160:	463b      	mov	r3, r7
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800716a:	463b      	mov	r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007172:	463b      	mov	r3, r7
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d16f      	bne.n	800725c <USB_EPStartXfer+0x1072>
 800717c:	1d3b      	adds	r3, r7, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007194:	4413      	add	r3, r2
 8007196:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800719a:	463b      	mov	r3, r7
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	00da      	lsls	r2, r3, #3
 80071a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d116      	bne.n	80071e6 <USB_EPStartXfer+0xffc>
 80071b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	e05f      	b.n	80072a6 <USB_EPStartXfer+0x10bc>
 80071e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071ea:	2b3e      	cmp	r3, #62	; 0x3e
 80071ec:	d818      	bhi.n	8007220 <USB_EPStartXfer+0x1036>
 80071ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <USB_EPStartXfer+0x1024>
 8007204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007208:	3301      	adds	r3, #1
 800720a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800720e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007212:	b29b      	uxth	r3, r3
 8007214:	029b      	lsls	r3, r3, #10
 8007216:	b29a      	uxth	r2, r3
 8007218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	e042      	b.n	80072a6 <USB_EPStartXfer+0x10bc>
 8007220:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007224:	095b      	lsrs	r3, r3, #5
 8007226:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800722a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <USB_EPStartXfer+0x1056>
 8007236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723a:	3b01      	subs	r3, #1
 800723c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007244:	b29b      	uxth	r3, r3
 8007246:	029b      	lsls	r3, r3, #10
 8007248:	b29b      	uxth	r3, r3
 800724a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e024      	b.n	80072a6 <USB_EPStartXfer+0x10bc>
 800725c:	463b      	mov	r3, r7
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d11f      	bne.n	80072a6 <USB_EPStartXfer+0x10bc>
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800727e:	4413      	add	r3, r2
 8007280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007284:	463b      	mov	r3, r7
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	00da      	lsls	r2, r3, #3
 800728c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007290:	4413      	add	r3, r2
 8007292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800729a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800729e:	b29a      	uxth	r2, r3
 80072a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ae:	463b      	mov	r3, r7
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	785b      	ldrb	r3, [r3, #1]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d16f      	bne.n	8007398 <USB_EPStartXfer+0x11ae>
 80072b8:	1d3b      	adds	r3, r7, #4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c0:	1d3b      	adds	r3, r7, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072d0:	4413      	add	r3, r2
 80072d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	00da      	lsls	r2, r3, #3
 80072de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072e2:	4413      	add	r3, r2
 80072e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d116      	bne.n	8007322 <USB_EPStartXfer+0x1138>
 80072f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007318:	b29a      	uxth	r2, r3
 800731a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	e05e      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
 8007322:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007326:	2b3e      	cmp	r3, #62	; 0x3e
 8007328:	d818      	bhi.n	800735c <USB_EPStartXfer+0x1172>
 800732a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <USB_EPStartXfer+0x1160>
 8007340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007344:	3301      	adds	r3, #1
 8007346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800734a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734e:	b29b      	uxth	r3, r3
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	b29a      	uxth	r2, r3
 8007354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	e041      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
 800735c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007366:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800736a:	f003 031f 	and.w	r3, r3, #31
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <USB_EPStartXfer+0x1192>
 8007372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007376:	3b01      	subs	r3, #1
 8007378:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800737c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007380:	b29b      	uxth	r3, r3
 8007382:	029b      	lsls	r3, r3, #10
 8007384:	b29b      	uxth	r3, r3
 8007386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738e:	b29a      	uxth	r2, r3
 8007390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	e023      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
 8007398:	463b      	mov	r3, r7
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	785b      	ldrb	r3, [r3, #1]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d11e      	bne.n	80073e0 <USB_EPStartXfer+0x11f6>
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b2:	4413      	add	r3, r2
 80073b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	00da      	lsls	r2, r3, #3
 80073c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	e001      	b.n	80073e0 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e02e      	b.n	800743e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073e0:	1d3b      	adds	r3, r7, #4
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	463b      	mov	r3, r7
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007402:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007406:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800740a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800740e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007412:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	441a      	add	r2, r3
 8007424:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800742c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007438:	b29b      	uxth	r3, r3
 800743a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d020      	beq.n	800749c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007470:	81bb      	strh	r3, [r7, #12]
 8007472:	89bb      	ldrh	r3, [r7, #12]
 8007474:	f083 0310 	eor.w	r3, r3, #16
 8007478:	81bb      	strh	r3, [r7, #12]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	441a      	add	r2, r3
 8007484:	89bb      	ldrh	r3, [r7, #12]
 8007486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800748e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007496:	b29b      	uxth	r3, r3
 8007498:	8013      	strh	r3, [r2, #0]
 800749a:	e01f      	b.n	80074dc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	81fb      	strh	r3, [r7, #14]
 80074b4:	89fb      	ldrh	r3, [r7, #14]
 80074b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074ba:	81fb      	strh	r3, [r7, #14]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	89fb      	ldrh	r3, [r7, #14]
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b087      	sub	sp, #28
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	7b1b      	ldrb	r3, [r3, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f040 809d 	bne.w	8007638 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04c      	beq.n	80075a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	823b      	strh	r3, [r7, #16]
 8007514:	8a3b      	ldrh	r3, [r7, #16]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01b      	beq.n	8007556 <USB_EPClearStall+0x6c>
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007534:	81fb      	strh	r3, [r7, #14]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	441a      	add	r2, r3
 8007540:	89fb      	ldrh	r3, [r7, #14]
 8007542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800754a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007552:	b29b      	uxth	r3, r3
 8007554:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d06c      	beq.n	8007638 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	81bb      	strh	r3, [r7, #12]
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f083 0320 	eor.w	r3, r3, #32
 800757c:	81bb      	strh	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	89bb      	ldrh	r3, [r7, #12]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	e04b      	b.n	8007638 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	82fb      	strh	r3, [r7, #22]
 80075ae:	8afb      	ldrh	r3, [r7, #22]
 80075b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01b      	beq.n	80075f0 <USB_EPClearStall+0x106>
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	82bb      	strh	r3, [r7, #20]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	441a      	add	r2, r3
 80075da:	8abb      	ldrh	r3, [r7, #20]
 80075dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	827b      	strh	r3, [r7, #18]
 8007608:	8a7b      	ldrh	r3, [r7, #18]
 800760a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800760e:	827b      	strh	r3, [r7, #18]
 8007610:	8a7b      	ldrh	r3, [r7, #18]
 8007612:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007616:	827b      	strh	r3, [r7, #18]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	441a      	add	r2, r3
 8007622:	8a7b      	ldrh	r3, [r7, #18]
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d103      	bne.n	8007660 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2280      	movs	r2, #128	; 0x80
 800765c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80076ae:	68fb      	ldr	r3, [r7, #12]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b08d      	sub	sp, #52	; 0x34
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4611      	mov	r1, r2
 80076e0:	461a      	mov	r2, r3
 80076e2:	460b      	mov	r3, r1
 80076e4:	80fb      	strh	r3, [r7, #6]
 80076e6:	4613      	mov	r3, r2
 80076e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076ea:	88bb      	ldrh	r3, [r7, #4]
 80076ec:	3301      	adds	r3, #1
 80076ee:	085b      	lsrs	r3, r3, #1
 80076f0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770a:	e01b      	b.n	8007744 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	3301      	adds	r3, #1
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	b29a      	uxth	r2, r3
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	3302      	adds	r3, #2
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	3301      	adds	r3, #1
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	3b01      	subs	r3, #1
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e0      	bne.n	800770c <USB_WritePMA+0x38>
  }
}
 800774a:	bf00      	nop
 800774c:	3734      	adds	r7, #52	; 0x34
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007756:	b480      	push	{r7}
 8007758:	b08b      	sub	sp, #44	; 0x2c
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	4611      	mov	r1, r2
 8007762:	461a      	mov	r2, r3
 8007764:	460b      	mov	r3, r1
 8007766:	80fb      	strh	r3, [r7, #6]
 8007768:	4613      	mov	r3, r2
 800776a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800776c:	88bb      	ldrh	r3, [r7, #4]
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800777c:	88fa      	ldrh	r2, [r7, #6]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007786:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
 800778c:	e018      	b.n	80077c0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	3302      	adds	r3, #2
 800779a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	3301      	adds	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	3b01      	subs	r3, #1
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e3      	bne.n	800778e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	701a      	strb	r2, [r3, #0]
  }
}
 80077e2:	bf00      	nop
 80077e4:	372c      	adds	r7, #44	; 0x2c
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077fa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077fe:	f002 f89d 	bl	800993c <USBD_static_malloc>
 8007802:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007812:	2302      	movs	r3, #2
 8007814:	e066      	b.n	80078e4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7c1b      	ldrb	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d119      	bne.n	800785a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782a:	2202      	movs	r2, #2
 800782c:	2181      	movs	r1, #129	; 0x81
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 ff29 	bl	8009686 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800783a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783e:	2202      	movs	r2, #2
 8007840:	2101      	movs	r1, #1
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 ff1f 	bl	8009686 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2210      	movs	r2, #16
 8007854:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007858:	e016      	b.n	8007888 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	2202      	movs	r2, #2
 800785e:	2181      	movs	r1, #129	; 0x81
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 ff10 	bl	8009686 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800786c:	2340      	movs	r3, #64	; 0x40
 800786e:	2202      	movs	r2, #2
 8007870:	2101      	movs	r1, #1
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 ff07 	bl	8009686 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2210      	movs	r2, #16
 8007884:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007888:	2308      	movs	r3, #8
 800788a:	2203      	movs	r2, #3
 800788c:	2182      	movs	r1, #130	; 0x82
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 fef9 	bl	8009686 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7c1b      	ldrb	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078c8:	2101      	movs	r1, #1
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 ffcb 	bl	8009866 <USBD_LL_PrepareReceive>
 80078d0:	e007      	b.n	80078e2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	2101      	movs	r1, #1
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 ffc2 	bl	8009866 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078f8:	2181      	movs	r1, #129	; 0x81
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fee9 	bl	80096d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007906:	2101      	movs	r1, #1
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fee2 	bl	80096d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007916:	2182      	movs	r1, #130	; 0x82
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 feda 	bl	80096d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007948:	4618      	mov	r0, r3
 800794a:	f002 f805 	bl	8009958 <USBD_static_free>
    pdev->pClassData = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007970:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007986:	2b00      	cmp	r3, #0
 8007988:	d03a      	beq.n	8007a00 <USBD_CDC_Setup+0xa0>
 800798a:	2b20      	cmp	r3, #32
 800798c:	f040 8097 	bne.w	8007abe <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d029      	beq.n	80079ec <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b25b      	sxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da11      	bge.n	80079c6 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80079ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	88d2      	ldrh	r2, [r2, #6]
 80079b4:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079b6:	6939      	ldr	r1, [r7, #16]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	88db      	ldrh	r3, [r3, #6]
 80079bc:	461a      	mov	r2, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fa8d 	bl	8008ede <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80079c4:	e082      	b.n	8007acc <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	785a      	ldrb	r2, [r3, #1]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	88db      	ldrh	r3, [r3, #6]
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079dc:	6939      	ldr	r1, [r7, #16]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 faa6 	bl	8008f36 <USBD_CtlPrepareRx>
      break;
 80079ea:	e06f      	b.n	8007acc <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	7850      	ldrb	r0, [r2, #1]
 80079f8:	2200      	movs	r2, #0
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	4798      	blx	r3
      break;
 80079fe:	e065      	b.n	8007acc <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	2b0b      	cmp	r3, #11
 8007a06:	d84f      	bhi.n	8007aa8 <USBD_CDC_Setup+0x148>
 8007a08:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <USBD_CDC_Setup+0xb0>)
 8007a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007a41 	.word	0x08007a41
 8007a14:	08007ab7 	.word	0x08007ab7
 8007a18:	08007aa9 	.word	0x08007aa9
 8007a1c:	08007aa9 	.word	0x08007aa9
 8007a20:	08007aa9 	.word	0x08007aa9
 8007a24:	08007aa9 	.word	0x08007aa9
 8007a28:	08007aa9 	.word	0x08007aa9
 8007a2c:	08007aa9 	.word	0x08007aa9
 8007a30:	08007aa9 	.word	0x08007aa9
 8007a34:	08007aa9 	.word	0x08007aa9
 8007a38:	08007a69 	.word	0x08007a69
 8007a3c:	08007a91 	.word	0x08007a91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d107      	bne.n	8007a5a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a4a:	f107 030c 	add.w	r3, r7, #12
 8007a4e:	2202      	movs	r2, #2
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fa43 	bl	8008ede <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a58:	e030      	b.n	8007abc <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f9cd 	bl	8008dfc <USBD_CtlError>
            ret = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	75fb      	strb	r3, [r7, #23]
          break;
 8007a66:	e029      	b.n	8007abc <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d107      	bne.n	8007a82 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a72:	f107 030f 	add.w	r3, r7, #15
 8007a76:	2201      	movs	r2, #1
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 fa2f 	bl	8008ede <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a80:	e01c      	b.n	8007abc <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f9b9 	bl	8008dfc <USBD_CtlError>
            ret = USBD_FAIL;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a8e:	e015      	b.n	8007abc <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d00f      	beq.n	8007aba <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f9ad 	bl	8008dfc <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007aa6:	e008      	b.n	8007aba <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 f9a6 	bl	8008dfc <USBD_CtlError>
          ret = USBD_FAIL;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	75fb      	strb	r3, [r7, #23]
          break;
 8007ab4:	e002      	b.n	8007abc <USBD_CDC_Setup+0x15c>
          break;
 8007ab6:	bf00      	nop
 8007ab8:	e008      	b.n	8007acc <USBD_CDC_Setup+0x16c>
          break;
 8007aba:	bf00      	nop
      }
      break;
 8007abc:	e006      	b.n	8007acc <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f99b 	bl	8008dfc <USBD_CtlError>
      ret = USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aca:	bf00      	nop
  }

  return (uint8_t)ret;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop

08007ad8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e04f      	b.n	8007b9a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3318      	adds	r3, #24
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d029      	beq.n	8007b6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	3318      	adds	r3, #24
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	78f9      	ldrb	r1, [r7, #3]
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	4403      	add	r3, r0
 8007b38:	3338      	adds	r3, #56	; 0x38
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b40:	fb03 f301 	mul.w	r3, r3, r1
 8007b44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d110      	bne.n	8007b6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3318      	adds	r3, #24
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b5e:	78f9      	ldrb	r1, [r7, #3]
 8007b60:	2300      	movs	r3, #0
 8007b62:	2200      	movs	r2, #0
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 fe5d 	bl	8009824 <USBD_LL_Transmit>
 8007b6a:	e015      	b.n	8007b98 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e015      	b.n	8007bf0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 fe6d 	bl	80098a8 <USBD_LL_GetRxDataSize>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bea:	4611      	mov	r1, r2
 8007bec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c06:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d015      	beq.n	8007c3e <USBD_CDC_EP0_RxReady+0x46>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c18:	2bff      	cmp	r3, #255	; 0xff
 8007c1a:	d010      	beq.n	8007c3e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c2a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c32:	b292      	uxth	r2, r2
 8007c34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	22ff      	movs	r2, #255	; 0xff
 8007c3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2243      	movs	r2, #67	; 0x43
 8007c54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c56:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	20000094 	.word	0x20000094

08007c68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2243      	movs	r2, #67	; 0x43
 8007c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c76:	4b03      	ldr	r3, [pc, #12]	; (8007c84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	20000050 	.word	0x20000050

08007c88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2243      	movs	r2, #67	; 0x43
 8007c94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c96:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	200000d8 	.word	0x200000d8

08007ca8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	220a      	movs	r2, #10
 8007cb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cb6:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	2000000c 	.word	0x2000000c

08007cc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e004      	b.n	8007ce6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b087      	sub	sp, #28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d34:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d5a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e01a      	b.n	8007da4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d114      	bne.n	8007da2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d96:	2181      	movs	r1, #129	; 0x81
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 fd43 	bl	8009824 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e016      	b.n	8007df8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7c1b      	ldrb	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ddc:	2101      	movs	r1, #1
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fd41 	bl	8009866 <USBD_LL_PrepareReceive>
 8007de4:	e007      	b.n	8007df6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	2101      	movs	r1, #1
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fd38 	bl	8009866 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e01f      	b.n	8007e58 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	79fa      	ldrb	r2, [r7, #7]
 8007e4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f001 fb9f 	bl	8009590 <USBD_LL_Init>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e016      	b.n	8007ea6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	f107 020e 	add.w	r2, r7, #14
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4798      	blx	r3
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fbca 	bl	8009650 <USBD_LL_Start>
 8007ebc:	4603      	mov	r3, r0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
  }

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 ff16 	bl	8008d88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d00e      	beq.n	8007f9e <USBD_LL_SetupStage+0x5a>
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d302      	bcc.n	8007f8a <USBD_LL_SetupStage+0x46>
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d014      	beq.n	8007fb2 <USBD_LL_SetupStage+0x6e>
 8007f88:	e01d      	b.n	8007fc6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9d6 	bl	8008344 <USBD_StdDevReq>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9c:	e020      	b.n	8007fe0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa3a 	bl	8008420 <USBD_StdItfReq>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	e016      	b.n	8007fe0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa76 	bl	80084ac <USBD_StdEPReq>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc4:	e00c      	b.n	8007fe0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 fb9b 	bl	8009710 <USBD_LL_StallEP>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fde:	bf00      	nop
  }

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d137      	bne.n	800806e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008004:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800800c:	2b03      	cmp	r3, #3
 800800e:	d14a      	bne.n	80080a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	429a      	cmp	r2, r3
 800801a:	d913      	bls.n	8008044 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	1ad2      	subs	r2, r2, r3
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4293      	cmp	r3, r2
 8008034:	bf28      	it	cs
 8008036:	4613      	movcs	r3, r2
 8008038:	461a      	mov	r2, r3
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 ff97 	bl	8008f70 <USBD_CtlContinueRx>
 8008042:	e030      	b.n	80080a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008056:	2b03      	cmp	r3, #3
 8008058:	d105      	bne.n	8008066 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 ff93 	bl	8008f92 <USBD_CtlSendStatus>
 800806c:	e01b      	b.n	80080a6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d013      	beq.n	80080a2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008080:	2b03      	cmp	r3, #3
 8008082:	d10e      	bne.n	80080a2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	7afa      	ldrb	r2, [r7, #11]
 800808e:	4611      	mov	r1, r2
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	4798      	blx	r3
 8008094:	4603      	mov	r3, r0
 8008096:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	e002      	b.n	80080a8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e000      	b.n	80080a8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	460b      	mov	r3, r1
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080be:	7afb      	ldrb	r3, [r7, #11]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d16a      	bne.n	800819a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3314      	adds	r3, #20
 80080c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d155      	bne.n	8008180 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d914      	bls.n	800810a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	1ad2      	subs	r2, r2, r3
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 ff0c 	bl	8008f14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080fc:	2300      	movs	r3, #0
 80080fe:	2200      	movs	r2, #0
 8008100:	2100      	movs	r1, #0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f001 fbaf 	bl	8009866 <USBD_LL_PrepareReceive>
 8008108:	e03a      	b.n	8008180 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	429a      	cmp	r2, r3
 8008114:	d11c      	bne.n	8008150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800811e:	429a      	cmp	r2, r3
 8008120:	d316      	bcc.n	8008150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800812c:	429a      	cmp	r2, r3
 800812e:	d20f      	bcs.n	8008150 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008130:	2200      	movs	r2, #0
 8008132:	2100      	movs	r1, #0
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 feed 	bl	8008f14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008142:	2300      	movs	r3, #0
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f001 fb8c 	bl	8009866 <USBD_LL_PrepareReceive>
 800814e:	e017      	b.n	8008180 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008162:	2b03      	cmp	r3, #3
 8008164:	d105      	bne.n	8008172 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008172:	2180      	movs	r1, #128	; 0x80
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f001 facb 	bl	8009710 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 ff1c 	bl	8008fb8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008186:	2b01      	cmp	r3, #1
 8008188:	d123      	bne.n	80081d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fe9b 	bl	8007ec6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008198:	e01b      	b.n	80081d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d013      	beq.n	80081ce <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d10e      	bne.n	80081ce <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	7afa      	ldrb	r2, [r7, #11]
 80081ba:	4611      	mov	r1, r2
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	4798      	blx	r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	e002      	b.n	80081d4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e000      	b.n	80081d4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6852      	ldr	r2, [r2, #4]
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	4611      	mov	r1, r2
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008220:	2340      	movs	r3, #64	; 0x40
 8008222:	2200      	movs	r2, #0
 8008224:	2100      	movs	r1, #0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fa2d 	bl	8009686 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2240      	movs	r2, #64	; 0x40
 8008238:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	2200      	movs	r2, #0
 8008240:	2180      	movs	r1, #128	; 0x80
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fa1f 	bl	8009686 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2240      	movs	r2, #64	; 0x40
 8008252:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2204      	movs	r2, #4
 8008296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d105      	bne.n	80082c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d10b      	bne.n	80082fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d005      	beq.n	80082fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	3301      	adds	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008326:	8a3b      	ldrh	r3, [r7, #16]
 8008328:	021b      	lsls	r3, r3, #8
 800832a:	b21a      	sxth	r2, r3
 800832c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008330:	4313      	orrs	r3, r2
 8008332:	b21b      	sxth	r3, r3
 8008334:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008336:	89fb      	ldrh	r3, [r7, #14]
}
 8008338:	4618      	mov	r0, r3
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800835a:	2b20      	cmp	r3, #32
 800835c:	d004      	beq.n	8008368 <USBD_StdDevReq+0x24>
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d002      	beq.n	8008368 <USBD_StdDevReq+0x24>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <USBD_StdDevReq+0x38>
 8008366:	e050      	b.n	800840a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	4798      	blx	r3
 8008376:	4603      	mov	r3, r0
 8008378:	73fb      	strb	r3, [r7, #15]
    break;
 800837a:	e04b      	b.n	8008414 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	785b      	ldrb	r3, [r3, #1]
 8008380:	2b09      	cmp	r3, #9
 8008382:	d83c      	bhi.n	80083fe <USBD_StdDevReq+0xba>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBD_StdDevReq+0x48>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083e1 	.word	0x080083e1
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080083ff 	.word	0x080083ff
 8008398:	080083eb 	.word	0x080083eb
 800839c:	080083ff 	.word	0x080083ff
 80083a0:	080083bf 	.word	0x080083bf
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083ff 	.word	0x080083ff
 80083ac:	080083d7 	.word	0x080083d7
 80083b0:	080083c9 	.word	0x080083c9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9d0 	bl	800875c <USBD_GetDescriptor>
      break;
 80083bc:	e024      	b.n	8008408 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fb5f 	bl	8008a84 <USBD_SetAddress>
      break;
 80083c6:	e01f      	b.n	8008408 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fb9c 	bl	8008b08 <USBD_SetConfig>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
      break;
 80083d4:	e018      	b.n	8008408 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc39 	bl	8008c50 <USBD_GetConfig>
      break;
 80083de:	e013      	b.n	8008408 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fc68 	bl	8008cb8 <USBD_GetStatus>
      break;
 80083e8:	e00e      	b.n	8008408 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc96 	bl	8008d1e <USBD_SetFeature>
      break;
 80083f2:	e009      	b.n	8008408 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fca5 	bl	8008d46 <USBD_ClrFeature>
      break;
 80083fc:	e004      	b.n	8008408 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fcfb 	bl	8008dfc <USBD_CtlError>
      break;
 8008406:	bf00      	nop
    }
    break;
 8008408:	e004      	b.n	8008414 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fcf5 	bl	8008dfc <USBD_CtlError>
    break;
 8008412:	bf00      	nop
  }

  return ret;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008436:	2b20      	cmp	r3, #32
 8008438:	d003      	beq.n	8008442 <USBD_StdItfReq+0x22>
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d001      	beq.n	8008442 <USBD_StdItfReq+0x22>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d12a      	bne.n	8008498 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	3b01      	subs	r3, #1
 800844a:	2b02      	cmp	r3, #2
 800844c:	d81d      	bhi.n	800848a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	889b      	ldrh	r3, [r3, #4]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	d813      	bhi.n	8008480 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d110      	bne.n	8008494 <USBD_StdItfReq+0x74>
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10d      	bne.n	8008494 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fd8a 	bl	8008f92 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800847e:	e009      	b.n	8008494 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fcba 	bl	8008dfc <USBD_CtlError>
      break;
 8008488:	e004      	b.n	8008494 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fcb5 	bl	8008dfc <USBD_CtlError>
      break;
 8008492:	e000      	b.n	8008496 <USBD_StdItfReq+0x76>
      break;
 8008494:	bf00      	nop
    }
    break;
 8008496:	e004      	b.n	80084a2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fcae 	bl	8008dfc <USBD_CtlError>
    break;
 80084a0:	bf00      	nop
  }

  return ret;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	889b      	ldrh	r3, [r3, #4]
 80084be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	d004      	beq.n	80084d6 <USBD_StdEPReq+0x2a>
 80084cc:	2b40      	cmp	r3, #64	; 0x40
 80084ce:	d002      	beq.n	80084d6 <USBD_StdEPReq+0x2a>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <USBD_StdEPReq+0x3e>
 80084d4:	e137      	b.n	8008746 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
    break;
 80084e8:	e132      	b.n	8008750 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d03e      	beq.n	8008570 <USBD_StdEPReq+0xc4>
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d002      	beq.n	80084fc <USBD_StdEPReq+0x50>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d079      	beq.n	80085ee <USBD_StdEPReq+0x142>
 80084fa:	e11e      	b.n	800873a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008502:	2b02      	cmp	r3, #2
 8008504:	d002      	beq.n	800850c <USBD_StdEPReq+0x60>
 8008506:	2b03      	cmp	r3, #3
 8008508:	d015      	beq.n	8008536 <USBD_StdEPReq+0x8a>
 800850a:	e02b      	b.n	8008564 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00c      	beq.n	800852c <USBD_StdEPReq+0x80>
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b80      	cmp	r3, #128	; 0x80
 8008516:	d009      	beq.n	800852c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 f8f7 	bl	8009710 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f8f3 	bl	8009710 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800852a:	e020      	b.n	800856e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fc64 	bl	8008dfc <USBD_CtlError>
        break;
 8008534:	e01b      	b.n	800856e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10e      	bne.n	800855c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <USBD_StdEPReq+0xb0>
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b80      	cmp	r3, #128	; 0x80
 8008548:	d008      	beq.n	800855c <USBD_StdEPReq+0xb0>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 f8da 	bl	8009710 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fd18 	bl	8008f92 <USBD_CtlSendStatus>

        break;
 8008562:	e004      	b.n	800856e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fc48 	bl	8008dfc <USBD_CtlError>
        break;
 800856c:	bf00      	nop
      }
      break;
 800856e:	e0e9      	b.n	8008744 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008576:	2b02      	cmp	r3, #2
 8008578:	d002      	beq.n	8008580 <USBD_StdEPReq+0xd4>
 800857a:	2b03      	cmp	r3, #3
 800857c:	d015      	beq.n	80085aa <USBD_StdEPReq+0xfe>
 800857e:	e02f      	b.n	80085e0 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <USBD_StdEPReq+0xf4>
 8008586:	7bbb      	ldrb	r3, [r7, #14]
 8008588:	2b80      	cmp	r3, #128	; 0x80
 800858a:	d009      	beq.n	80085a0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f8bd 	bl	8009710 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008596:	2180      	movs	r1, #128	; 0x80
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f8b9 	bl	8009710 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800859e:	e025      	b.n	80085ec <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fc2a 	bl	8008dfc <USBD_CtlError>
        break;
 80085a8:	e020      	b.n	80085ec <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11b      	bne.n	80085ea <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d004      	beq.n	80085c6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f8c4 	bl	800974e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fce3 	bl	8008f92 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085de:	e004      	b.n	80085ea <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fc0a 	bl	8008dfc <USBD_CtlError>
        break;
 80085e8:	e000      	b.n	80085ec <USBD_StdEPReq+0x140>
        break;
 80085ea:	bf00      	nop
      }
      break;
 80085ec:	e0aa      	b.n	8008744 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d002      	beq.n	80085fe <USBD_StdEPReq+0x152>
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d032      	beq.n	8008662 <USBD_StdEPReq+0x1b6>
 80085fc:	e097      	b.n	800872e <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <USBD_StdEPReq+0x168>
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b80      	cmp	r3, #128	; 0x80
 8008608:	d004      	beq.n	8008614 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fbf5 	bl	8008dfc <USBD_CtlError>
          break;
 8008612:	e091      	b.n	8008738 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008618:	2b00      	cmp	r3, #0
 800861a:	da0b      	bge.n	8008634 <USBD_StdEPReq+0x188>
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	3310      	adds	r3, #16
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	3304      	adds	r3, #4
 8008632:	e00b      	b.n	800864c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	3304      	adds	r3, #4
 800864c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2202      	movs	r2, #2
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fc3f 	bl	8008ede <USBD_CtlSendData>
        break;
 8008660:	e06a      	b.n	8008738 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	da11      	bge.n	800868e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	f003 020f 	and.w	r2, r3, #15
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	3324      	adds	r3, #36	; 0x24
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d117      	bne.n	80086b4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fbb8 	bl	8008dfc <USBD_CtlError>
            break;
 800868c:	e054      	b.n	8008738 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	f003 020f 	and.w	r2, r3, #15
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fba5 	bl	8008dfc <USBD_CtlError>
            break;
 80086b2:	e041      	b.n	8008738 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	da0b      	bge.n	80086d4 <USBD_StdEPReq+0x228>
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	3310      	adds	r3, #16
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	4413      	add	r3, r2
 80086d0:	3304      	adds	r3, #4
 80086d2:	e00b      	b.n	80086ec <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	3304      	adds	r3, #4
 80086ec:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <USBD_StdEPReq+0x24e>
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b80      	cmp	r3, #128	; 0x80
 80086f8:	d103      	bne.n	8008702 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e00e      	b.n	8008720 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 f840 	bl	800978c <USBD_LL_IsStallEP>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2201      	movs	r2, #1
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	e002      	b.n	8008720 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2202      	movs	r2, #2
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fbd9 	bl	8008ede <USBD_CtlSendData>
          break;
 800872c:	e004      	b.n	8008738 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fb63 	bl	8008dfc <USBD_CtlError>
        break;
 8008736:	bf00      	nop
      }
      break;
 8008738:	e004      	b.n	8008744 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fb5d 	bl	8008dfc <USBD_CtlError>
      break;
 8008742:	bf00      	nop
    }
    break;
 8008744:	e004      	b.n	8008750 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fb57 	bl	8008dfc <USBD_CtlError>
    break;
 800874e:	bf00      	nop
  }

  return ret;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	2b0e      	cmp	r3, #14
 800877e:	f200 8152 	bhi.w	8008a26 <USBD_GetDescriptor+0x2ca>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <USBD_GetDescriptor+0x2c>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087f9 	.word	0x080087f9
 800878c:	08008811 	.word	0x08008811
 8008790:	08008851 	.word	0x08008851
 8008794:	08008a27 	.word	0x08008a27
 8008798:	08008a27 	.word	0x08008a27
 800879c:	080089c7 	.word	0x080089c7
 80087a0:	080089f3 	.word	0x080089f3
 80087a4:	08008a27 	.word	0x08008a27
 80087a8:	08008a27 	.word	0x08008a27
 80087ac:	08008a27 	.word	0x08008a27
 80087b0:	08008a27 	.word	0x08008a27
 80087b4:	08008a27 	.word	0x08008a27
 80087b8:	08008a27 	.word	0x08008a27
 80087bc:	08008a27 	.word	0x08008a27
 80087c0:	080087c5 	.word	0x080087c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	7c12      	ldrb	r2, [r2, #16]
 80087dc:	f107 0108 	add.w	r1, r7, #8
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
 80087e4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80087e6:	e126      	b.n	8008a36 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fb06 	bl	8008dfc <USBD_CtlError>
      err++;
 80087f0:	7afb      	ldrb	r3, [r7, #11]
 80087f2:	3301      	adds	r3, #1
 80087f4:	72fb      	strb	r3, [r7, #11]
    break;
 80087f6:	e11e      	b.n	8008a36 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
    break;
 800880e:	e112      	b.n	8008a36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7c1b      	ldrb	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10d      	bne.n	8008834 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	f107 0208 	add.w	r2, r7, #8
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
 8008828:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	2202      	movs	r2, #2
 8008830:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008832:	e100      	b.n	8008a36 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	f107 0208 	add.w	r2, r7, #8
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	2202      	movs	r2, #2
 800884c:	701a      	strb	r2, [r3, #0]
    break;
 800884e:	e0f2      	b.n	8008a36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	885b      	ldrh	r3, [r3, #2]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b05      	cmp	r3, #5
 8008858:	f200 80ac 	bhi.w	80089b4 <USBD_GetDescriptor+0x258>
 800885c:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <USBD_GetDescriptor+0x108>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	0800887d 	.word	0x0800887d
 8008868:	080088b1 	.word	0x080088b1
 800886c:	080088e5 	.word	0x080088e5
 8008870:	08008919 	.word	0x08008919
 8008874:	0800894d 	.word	0x0800894d
 8008878:	08008981 	.word	0x08008981
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800889e:	e091      	b.n	80089c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 faaa 	bl	8008dfc <USBD_CtlError>
        err++;
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	3301      	adds	r3, #1
 80088ac:	72fb      	strb	r3, [r7, #11]
      break;
 80088ae:	e089      	b.n	80089c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7c12      	ldrb	r2, [r2, #16]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088d2:	e077      	b.n	80089c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa90 	bl	8008dfc <USBD_CtlError>
        err++;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	3301      	adds	r3, #1
 80088e0:	72fb      	strb	r3, [r7, #11]
      break;
 80088e2:	e06f      	b.n	80089c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008906:	e05d      	b.n	80089c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa76 	bl	8008dfc <USBD_CtlError>
        err++;
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	3301      	adds	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
      break;
 8008916:	e055      	b.n	80089c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800893a:	e043      	b.n	80089c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa5c 	bl	8008dfc <USBD_CtlError>
        err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
      break;
 800894a:	e03b      	b.n	80089c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800896e:	e029      	b.n	80089c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa42 	bl	8008dfc <USBD_CtlError>
        err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
      break;
 800897e:	e021      	b.n	80089c4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a2:	e00f      	b.n	80089c4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa28 	bl	8008dfc <USBD_CtlError>
        err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
      break;
 80089b2:	e007      	b.n	80089c4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa20 	bl	8008dfc <USBD_CtlError>
      err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80089c2:	bf00      	nop
    }
    break;
 80089c4:	e037      	b.n	8008a36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7c1b      	ldrb	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d109      	bne.n	80089e2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f107 0208 	add.w	r2, r7, #8
 80089da:	4610      	mov	r0, r2
 80089dc:	4798      	blx	r3
 80089de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80089e0:	e029      	b.n	8008a36 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fa09 	bl	8008dfc <USBD_CtlError>
      err++;
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	3301      	adds	r3, #1
 80089ee:	72fb      	strb	r3, [r7, #11]
    break;
 80089f0:	e021      	b.n	8008a36 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7c1b      	ldrb	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10d      	bne.n	8008a16 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f107 0208 	add.w	r2, r7, #8
 8008a06:	4610      	mov	r0, r2
 8008a08:	4798      	blx	r3
 8008a0a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	2207      	movs	r2, #7
 8008a12:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a14:	e00f      	b.n	8008a36 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f9ef 	bl	8008dfc <USBD_CtlError>
      err++;
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	3301      	adds	r3, #1
 8008a22:	72fb      	strb	r3, [r7, #11]
    break;
 8008a24:	e007      	b.n	8008a36 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f9e7 	bl	8008dfc <USBD_CtlError>
    err++;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	3301      	adds	r3, #1
 8008a32:	72fb      	strb	r3, [r7, #11]
    break;
 8008a34:	bf00      	nop
  }

  if (err != 0U)
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11e      	bne.n	8008a7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	88db      	ldrh	r3, [r3, #6]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d016      	beq.n	8008a72 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008a44:	893b      	ldrh	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88da      	ldrh	r2, [r3, #6]
 8008a4e:	893b      	ldrh	r3, [r7, #8]
 8008a50:	4293      	cmp	r3, r2
 8008a52:	bf28      	it	cs
 8008a54:	4613      	movcs	r3, r2
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a5a:	893b      	ldrh	r3, [r7, #8]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fa3c 	bl	8008ede <USBD_CtlSendData>
 8008a66:	e009      	b.n	8008a7c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9c6 	bl	8008dfc <USBD_CtlError>
 8008a70:	e004      	b.n	8008a7c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa8d 	bl	8008f92 <USBD_CtlSendStatus>
 8008a78:	e000      	b.n	8008a7c <USBD_GetDescriptor+0x320>
    return;
 8008a7a:	bf00      	nop
    }
  }
}
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop

08008a84 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	889b      	ldrh	r3, [r3, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d130      	bne.n	8008af8 <USBD_SetAddress+0x74>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	88db      	ldrh	r3, [r3, #6]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d12c      	bne.n	8008af8 <USBD_SetAddress+0x74>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa4:	d828      	bhi.n	8008af8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d104      	bne.n	8008ac6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f99c 	bl	8008dfc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac4:	e01c      	b.n	8008b00 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fe87 	bl	80097e6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa5a 	bl	8008f92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aec:	e008      	b.n	8008b00 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af6:	e003      	b.n	8008b00 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f97e 	bl	8008dfc <USBD_CtlError>
  }
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	885b      	ldrh	r3, [r3, #2]
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	4b4b      	ldr	r3, [pc, #300]	; (8008c4c <USBD_SetConfig+0x144>)
 8008b1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b20:	4b4a      	ldr	r3, [pc, #296]	; (8008c4c <USBD_SetConfig+0x144>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d905      	bls.n	8008b34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f966 	bl	8008dfc <USBD_CtlError>
    return USBD_FAIL;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e087      	b.n	8008c44 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d002      	beq.n	8008b44 <USBD_SetConfig+0x3c>
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d025      	beq.n	8008b8e <USBD_SetConfig+0x86>
 8008b42:	e071      	b.n	8008c28 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008b44:	4b41      	ldr	r3, [pc, #260]	; (8008c4c <USBD_SetConfig+0x144>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01c      	beq.n	8008b86 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008b4c:	4b3f      	ldr	r3, [pc, #252]	; (8008c4c <USBD_SetConfig+0x144>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b56:	4b3d      	ldr	r3, [pc, #244]	; (8008c4c <USBD_SetConfig+0x144>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff f9bd 	bl	8007edc <USBD_SetClassConfig>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f944 	bl	8008dfc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008b74:	e065      	b.n	8008c42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa0b 	bl	8008f92 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2203      	movs	r2, #3
 8008b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008b84:	e05d      	b.n	8008c42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa03 	bl	8008f92 <USBD_CtlSendStatus>
    break;
 8008b8c:	e059      	b.n	8008c42 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008b8e:	4b2f      	ldr	r3, [pc, #188]	; (8008c4c <USBD_SetConfig+0x144>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d112      	bne.n	8008bbc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008b9e:	4b2b      	ldr	r3, [pc, #172]	; (8008c4c <USBD_SetConfig+0x144>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ba8:	4b28      	ldr	r3, [pc, #160]	; (8008c4c <USBD_SetConfig+0x144>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff f9b0 	bl	8007f14 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f9ec 	bl	8008f92 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008bba:	e042      	b.n	8008c42 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008bbc:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <USBD_SetConfig+0x144>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d02a      	beq.n	8008c20 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff f99e 	bl	8007f14 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008bd8:	4b1c      	ldr	r3, [pc, #112]	; (8008c4c <USBD_SetConfig+0x144>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be2:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <USBD_SetConfig+0x144>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff f977 	bl	8007edc <USBD_SetClassConfig>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00f      	beq.n	8008c18 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8fe 	bl	8008dfc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff f983 	bl	8007f14 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2202      	movs	r2, #2
 8008c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c16:	e014      	b.n	8008c42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f9ba 	bl	8008f92 <USBD_CtlSendStatus>
    break;
 8008c1e:	e010      	b.n	8008c42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f9b6 	bl	8008f92 <USBD_CtlSendStatus>
    break;
 8008c26:	e00c      	b.n	8008c42 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f8e6 	bl	8008dfc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c30:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <USBD_SetConfig+0x144>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff f96c 	bl	8007f14 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c40:	bf00      	nop
  }

  return ret;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200001b9 	.word	0x200001b9

08008c50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	88db      	ldrh	r3, [r3, #6]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d004      	beq.n	8008c6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8c9 	bl	8008dfc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008c6a:	e021      	b.n	8008cb0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	db17      	blt.n	8008ca6 <USBD_GetConfig+0x56>
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	dd02      	ble.n	8008c80 <USBD_GetConfig+0x30>
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d00b      	beq.n	8008c96 <USBD_GetConfig+0x46>
 8008c7e:	e012      	b.n	8008ca6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f925 	bl	8008ede <USBD_CtlSendData>
      break;
 8008c94:	e00c      	b.n	8008cb0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f91d 	bl	8008ede <USBD_CtlSendData>
      break;
 8008ca4:	e004      	b.n	8008cb0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8a7 	bl	8008dfc <USBD_CtlError>
      break;
 8008cae:	bf00      	nop
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d81e      	bhi.n	8008d0c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	88db      	ldrh	r3, [r3, #6]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d004      	beq.n	8008ce0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f88f 	bl	8008dfc <USBD_CtlError>
      break;
 8008cde:	e01a      	b.n	8008d16 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f043 0202 	orr.w	r2, r3, #2
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	2202      	movs	r2, #2
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f8ea 	bl	8008ede <USBD_CtlSendData>
    break;
 8008d0a:	e004      	b.n	8008d16 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f874 	bl	8008dfc <USBD_CtlError>
    break;
 8008d14:	bf00      	nop
  }
}
 8008d16:	bf00      	nop
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	885b      	ldrh	r3, [r3, #2]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d106      	bne.n	8008d3e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f92a 	bl	8008f92 <USBD_CtlSendStatus>
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d56:	3b01      	subs	r3, #1
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d80b      	bhi.n	8008d74 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	885b      	ldrh	r3, [r3, #2]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d10c      	bne.n	8008d7e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f910 	bl	8008f92 <USBD_CtlSendStatus>
      }
      break;
 8008d72:	e004      	b.n	8008d7e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f840 	bl	8008dfc <USBD_CtlError>
      break;
 8008d7c:	e000      	b.n	8008d80 <USBD_ClrFeature+0x3a>
      break;
 8008d7e:	bf00      	nop
  }
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7ff faa8 	bl	8008308 <SWAPBYTE>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fa9b 	bl	8008308 <SWAPBYTE>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fa8e 	bl	8008308 <SWAPBYTE>
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	80da      	strh	r2, [r3, #6]
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e06:	2180      	movs	r1, #128	; 0x80
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fc81 	bl	8009710 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fc7d 	bl	8009710 <USBD_LL_StallEP>
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b086      	sub	sp, #24
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d036      	beq.n	8008ea2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e38:	6938      	ldr	r0, [r7, #16]
 8008e3a:	f000 f836 	bl	8008eaa <USBD_GetLen>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	3301      	adds	r3, #1
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4413      	add	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	7812      	ldrb	r2, [r2, #0]
 8008e56:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	4413      	add	r3, r2
 8008e64:	2203      	movs	r2, #3
 8008e66:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e6e:	e013      	b.n	8008e98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	4413      	add	r3, r2
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	7812      	ldrb	r2, [r2, #0]
 8008e7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	613b      	str	r3, [r7, #16]
    idx++;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	3301      	adds	r3, #1
 8008e86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	3301      	adds	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e7      	bne.n	8008e70 <USBD_GetString+0x52>
 8008ea0:	e000      	b.n	8008ea4 <USBD_GetString+0x86>
    return;
 8008ea2:	bf00      	nop
  }
}
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008eba:	e005      	b.n	8008ec8 <USBD_GetLen+0x1e>
  {
    len++;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1f5      	bne.n	8008ebc <USBD_GetLen+0x12>
  }

  return len;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2202      	movs	r2, #2
 8008eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	2100      	movs	r1, #0
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 fc8d 	bl	8009824 <USBD_LL_Transmit>

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	2100      	movs	r1, #0
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 fc7c 	bl	8009824 <USBD_LL_Transmit>

  return USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2203      	movs	r2, #3
 8008f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	2100      	movs	r1, #0
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 fc80 	bl	8009866 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	2100      	movs	r1, #0
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fc6f 	bl	8009866 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2204      	movs	r2, #4
 8008f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc3b 	bl	8009824 <USBD_LL_Transmit>

  return USBD_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2205      	movs	r2, #5
 8008fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fc49 	bl	8009866 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4912      	ldr	r1, [pc, #72]	; (8009030 <MX_USB_Device_Init+0x50>)
 8008fe8:	4812      	ldr	r0, [pc, #72]	; (8009034 <MX_USB_Device_Init+0x54>)
 8008fea:	f7fe ff09 	bl	8007e00 <USBD_Init>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008ff4:	f7f7 ff08 	bl	8000e08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008ff8:	490f      	ldr	r1, [pc, #60]	; (8009038 <MX_USB_Device_Init+0x58>)
 8008ffa:	480e      	ldr	r0, [pc, #56]	; (8009034 <MX_USB_Device_Init+0x54>)
 8008ffc:	f7fe ff30 	bl	8007e60 <USBD_RegisterClass>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009006:	f7f7 feff 	bl	8000e08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800900a:	490c      	ldr	r1, [pc, #48]	; (800903c <MX_USB_Device_Init+0x5c>)
 800900c:	4809      	ldr	r0, [pc, #36]	; (8009034 <MX_USB_Device_Init+0x54>)
 800900e:	f7fe fe5b 	bl	8007cc8 <USBD_CDC_RegisterInterface>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009018:	f7f7 fef6 	bl	8000e08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800901c:	4805      	ldr	r0, [pc, #20]	; (8009034 <MX_USB_Device_Init+0x54>)
 800901e:	f7fe ff46 	bl	8007eae <USBD_Start>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009028:	f7f7 feee 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800902c:	bf00      	nop
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000130 	.word	0x20000130
 8009034:	2000068c 	.word	0x2000068c
 8009038:	20000018 	.word	0x20000018
 800903c:	2000011c 	.word	0x2000011c

08009040 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009044:	2200      	movs	r2, #0
 8009046:	4905      	ldr	r1, [pc, #20]	; (800905c <CDC_Init_FS+0x1c>)
 8009048:	4805      	ldr	r0, [pc, #20]	; (8009060 <CDC_Init_FS+0x20>)
 800904a:	f7fe fe52 	bl	8007cf2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800904e:	4905      	ldr	r1, [pc, #20]	; (8009064 <CDC_Init_FS+0x24>)
 8009050:	4803      	ldr	r0, [pc, #12]	; (8009060 <CDC_Init_FS+0x20>)
 8009052:	f7fe fe67 	bl	8007d24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009056:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009058:	4618      	mov	r0, r3
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000d44 	.word	0x20000d44
 8009060:	2000068c 	.word	0x2000068c
 8009064:	2000095c 	.word	0x2000095c

08009068 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800906c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800906e:	4618      	mov	r0, r3
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
 8009084:	4613      	mov	r3, r2
 8009086:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b23      	cmp	r3, #35	; 0x23
 800908c:	d84a      	bhi.n	8009124 <CDC_Control_FS+0xac>
 800908e:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <CDC_Control_FS+0x1c>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	08009125 	.word	0x08009125
 8009098:	08009125 	.word	0x08009125
 800909c:	08009125 	.word	0x08009125
 80090a0:	08009125 	.word	0x08009125
 80090a4:	08009125 	.word	0x08009125
 80090a8:	08009125 	.word	0x08009125
 80090ac:	08009125 	.word	0x08009125
 80090b0:	08009125 	.word	0x08009125
 80090b4:	08009125 	.word	0x08009125
 80090b8:	08009125 	.word	0x08009125
 80090bc:	08009125 	.word	0x08009125
 80090c0:	08009125 	.word	0x08009125
 80090c4:	08009125 	.word	0x08009125
 80090c8:	08009125 	.word	0x08009125
 80090cc:	08009125 	.word	0x08009125
 80090d0:	08009125 	.word	0x08009125
 80090d4:	08009125 	.word	0x08009125
 80090d8:	08009125 	.word	0x08009125
 80090dc:	08009125 	.word	0x08009125
 80090e0:	08009125 	.word	0x08009125
 80090e4:	08009125 	.word	0x08009125
 80090e8:	08009125 	.word	0x08009125
 80090ec:	08009125 	.word	0x08009125
 80090f0:	08009125 	.word	0x08009125
 80090f4:	08009125 	.word	0x08009125
 80090f8:	08009125 	.word	0x08009125
 80090fc:	08009125 	.word	0x08009125
 8009100:	08009125 	.word	0x08009125
 8009104:	08009125 	.word	0x08009125
 8009108:	08009125 	.word	0x08009125
 800910c:	08009125 	.word	0x08009125
 8009110:	08009125 	.word	0x08009125
 8009114:	08009125 	.word	0x08009125
 8009118:	08009125 	.word	0x08009125
 800911c:	08009125 	.word	0x08009125
 8009120:	08009125 	.word	0x08009125
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009124:	bf00      	nop
  }

  return (USBD_OK);
 8009126:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7f7 f869 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <CDC_Receive_FS+0x2c>)
 800914a:	f7fe fdeb 	bl	8007d24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800914e:	4804      	ldr	r0, [pc, #16]	; (8009160 <CDC_Receive_FS+0x2c>)
 8009150:	f7fe fe2c 	bl	8007dac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009154:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	2000068c 	.word	0x2000068c

08009164 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009174:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <CDC_Transmit_FS+0x48>)
 8009176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800917a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009186:	2301      	movs	r3, #1
 8009188:	e00b      	b.n	80091a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800918a:	887b      	ldrh	r3, [r7, #2]
 800918c:	461a      	mov	r2, r3
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4806      	ldr	r0, [pc, #24]	; (80091ac <CDC_Transmit_FS+0x48>)
 8009192:	f7fe fdae 	bl	8007cf2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009196:	4805      	ldr	r0, [pc, #20]	; (80091ac <CDC_Transmit_FS+0x48>)
 8009198:	f7fe fdd8 	bl	8007d4c <USBD_CDC_TransmitPacket>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2000068c 	.word	0x2000068c

080091b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2212      	movs	r2, #18
 80091e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000150 	.word	0x20000150

080091f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2204      	movs	r2, #4
 8009208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	20000164 	.word	0x20000164

0800921c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	4907      	ldr	r1, [pc, #28]	; (8009250 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009232:	4808      	ldr	r0, [pc, #32]	; (8009254 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009234:	f7ff fdf3 	bl	8008e1e <USBD_GetString>
 8009238:	e004      	b.n	8009244 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4904      	ldr	r1, [pc, #16]	; (8009250 <USBD_CDC_ProductStrDescriptor+0x34>)
 800923e:	4805      	ldr	r0, [pc, #20]	; (8009254 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009240:	f7ff fded 	bl	8008e1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	2000112c 	.word	0x2000112c
 8009254:	08009a58 	.word	0x08009a58

08009258 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	4904      	ldr	r1, [pc, #16]	; (8009278 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009268:	4804      	ldr	r0, [pc, #16]	; (800927c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800926a:	f7ff fdd8 	bl	8008e1e <USBD_GetString>
  return USBD_StrDesc;
 800926e:	4b02      	ldr	r3, [pc, #8]	; (8009278 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	2000112c 	.word	0x2000112c
 800927c:	08009a70 	.word	0x08009a70

08009280 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	6039      	str	r1, [r7, #0]
 800928a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	221a      	movs	r2, #26
 8009290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009292:	f000 f843 	bl	800931c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009296:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000168 	.word	0x20000168

080092a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d105      	bne.n	80092c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4907      	ldr	r1, [pc, #28]	; (80092d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092ba:	4808      	ldr	r0, [pc, #32]	; (80092dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092bc:	f7ff fdaf 	bl	8008e1e <USBD_GetString>
 80092c0:	e004      	b.n	80092cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4904      	ldr	r1, [pc, #16]	; (80092d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092c6:	4805      	ldr	r0, [pc, #20]	; (80092dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092c8:	f7ff fda9 	bl	8008e1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80092cc:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	2000112c 	.word	0x2000112c
 80092dc:	08009a84 	.word	0x08009a84

080092e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4907      	ldr	r1, [pc, #28]	; (8009314 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80092f6:	4808      	ldr	r0, [pc, #32]	; (8009318 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80092f8:	f7ff fd91 	bl	8008e1e <USBD_GetString>
 80092fc:	e004      	b.n	8009308 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4904      	ldr	r1, [pc, #16]	; (8009314 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009302:	4805      	ldr	r0, [pc, #20]	; (8009318 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009304:	f7ff fd8b 	bl	8008e1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009308:	4b02      	ldr	r3, [pc, #8]	; (8009314 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000112c 	.word	0x2000112c
 8009318:	08009a90 	.word	0x08009a90

0800931c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009322:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <Get_SerialNum+0x44>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009328:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <Get_SerialNum+0x48>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800932e:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <Get_SerialNum+0x4c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4413      	add	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d009      	beq.n	8009356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009342:	2208      	movs	r2, #8
 8009344:	4909      	ldr	r1, [pc, #36]	; (800936c <Get_SerialNum+0x50>)
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f814 	bl	8009374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800934c:	2204      	movs	r2, #4
 800934e:	4908      	ldr	r1, [pc, #32]	; (8009370 <Get_SerialNum+0x54>)
 8009350:	68b8      	ldr	r0, [r7, #8]
 8009352:	f000 f80f 	bl	8009374 <IntToUnicode>
  }
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	1fff7590 	.word	0x1fff7590
 8009364:	1fff7594 	.word	0x1fff7594
 8009368:	1fff7598 	.word	0x1fff7598
 800936c:	2000016a 	.word	0x2000016a
 8009370:	2000017a 	.word	0x2000017a

08009374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
 800938a:	e027      	b.n	80093dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	0f1b      	lsrs	r3, r3, #28
 8009390:	2b09      	cmp	r3, #9
 8009392:	d80b      	bhi.n	80093ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	0f1b      	lsrs	r3, r3, #28
 8009398:	b2da      	uxtb	r2, r3
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4619      	mov	r1, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	440b      	add	r3, r1
 80093a4:	3230      	adds	r2, #48	; 0x30
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	e00a      	b.n	80093c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	0f1b      	lsrs	r3, r3, #28
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	4619      	mov	r1, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	440b      	add	r3, r1
 80093bc:	3237      	adds	r2, #55	; 0x37
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	3301      	adds	r3, #1
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4413      	add	r3, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	3301      	adds	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	7dfa      	ldrb	r2, [r7, #23]
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d3d3      	bcc.n	800938c <IntToUnicode+0x18>
  }
}
 80093e4:	bf00      	nop
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a0d      	ldr	r2, [pc, #52]	; (8009434 <HAL_PCD_MspInit+0x44>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d113      	bne.n	800942a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009402:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <HAL_PCD_MspInit+0x48>)
 8009404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009406:	4a0c      	ldr	r2, [pc, #48]	; (8009438 <HAL_PCD_MspInit+0x48>)
 8009408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800940c:	6593      	str	r3, [r2, #88]	; 0x58
 800940e:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <HAL_PCD_MspInit+0x48>)
 8009410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800941a:	2200      	movs	r2, #0
 800941c:	2100      	movs	r1, #0
 800941e:	2014      	movs	r0, #20
 8009420:	f7f8 f92b 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009424:	2014      	movs	r0, #20
 8009426:	f7f8 f942 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40005c00 	.word	0x40005c00
 8009438:	40021000 	.word	0x40021000

0800943c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7fe fd76 	bl	8007f44 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	440b      	add	r3, r1
 8009480:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	4619      	mov	r1, r3
 800948a:	f7fe fdae 	bl	8007fea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	440b      	add	r3, r1
 80094b6:	333c      	adds	r3, #60	; 0x3c
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	78fb      	ldrb	r3, [r7, #3]
 80094bc:	4619      	mov	r1, r3
 80094be:	f7fe fdf7 	bl	80080b0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fefb 	bl	80082d4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094ee:	2301      	movs	r3, #1
 80094f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d001      	beq.n	80094fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094fa:	f7f7 fc85 	bl	8000e08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009504:	7bfa      	ldrb	r2, [r7, #15]
 8009506:	4611      	mov	r1, r2
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe fea8 	bl	800825e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe fe61 	bl	80081dc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fea3 	bl	800827e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d005      	beq.n	800954c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009540:	4b04      	ldr	r3, [pc, #16]	; (8009554 <HAL_PCD_SuspendCallback+0x30>)
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	4a03      	ldr	r2, [pc, #12]	; (8009554 <HAL_PCD_SuspendCallback+0x30>)
 8009546:	f043 0306 	orr.w	r3, r3, #6
 800954a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	e000ed00 	.word	0xe000ed00

08009558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d007      	beq.n	8009578 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009568:	4b08      	ldr	r3, [pc, #32]	; (800958c <HAL_PCD_ResumeCallback+0x34>)
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	4a07      	ldr	r2, [pc, #28]	; (800958c <HAL_PCD_ResumeCallback+0x34>)
 800956e:	f023 0306 	bic.w	r3, r3, #6
 8009572:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009574:	f000 f9fa 	bl	800996c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fe92 	bl	80082a8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	e000ed00 	.word	0xe000ed00

08009590 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009598:	4a2b      	ldr	r2, [pc, #172]	; (8009648 <USBD_LL_Init+0xb8>)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a29      	ldr	r2, [pc, #164]	; (8009648 <USBD_LL_Init+0xb8>)
 80095a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80095a8:	4b27      	ldr	r3, [pc, #156]	; (8009648 <USBD_LL_Init+0xb8>)
 80095aa:	4a28      	ldr	r2, [pc, #160]	; (800964c <USBD_LL_Init+0xbc>)
 80095ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095ae:	4b26      	ldr	r3, [pc, #152]	; (8009648 <USBD_LL_Init+0xb8>)
 80095b0:	2208      	movs	r2, #8
 80095b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095b4:	4b24      	ldr	r3, [pc, #144]	; (8009648 <USBD_LL_Init+0xb8>)
 80095b6:	2202      	movs	r2, #2
 80095b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095ba:	4b23      	ldr	r3, [pc, #140]	; (8009648 <USBD_LL_Init+0xb8>)
 80095bc:	2202      	movs	r2, #2
 80095be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80095c0:	4b21      	ldr	r3, [pc, #132]	; (8009648 <USBD_LL_Init+0xb8>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095c6:	4b20      	ldr	r3, [pc, #128]	; (8009648 <USBD_LL_Init+0xb8>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095cc:	4b1e      	ldr	r3, [pc, #120]	; (8009648 <USBD_LL_Init+0xb8>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095d2:	4b1d      	ldr	r3, [pc, #116]	; (8009648 <USBD_LL_Init+0xb8>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095d8:	481b      	ldr	r0, [pc, #108]	; (8009648 <USBD_LL_Init+0xb8>)
 80095da:	f7f8 fa37 	bl	8001a4c <HAL_PCD_Init>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80095e4:	f7f7 fc10 	bl	8000e08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ee:	2318      	movs	r3, #24
 80095f0:	2200      	movs	r2, #0
 80095f2:	2100      	movs	r1, #0
 80095f4:	f7f9 fd25 	bl	8003042 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095fe:	2358      	movs	r3, #88	; 0x58
 8009600:	2200      	movs	r2, #0
 8009602:	2180      	movs	r1, #128	; 0x80
 8009604:	f7f9 fd1d 	bl	8003042 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800960e:	23c0      	movs	r3, #192	; 0xc0
 8009610:	2200      	movs	r2, #0
 8009612:	2181      	movs	r1, #129	; 0x81
 8009614:	f7f9 fd15 	bl	8003042 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800961e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009622:	2200      	movs	r2, #0
 8009624:	2101      	movs	r1, #1
 8009626:	f7f9 fd0c 	bl	8003042 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009634:	2200      	movs	r2, #0
 8009636:	2182      	movs	r1, #130	; 0x82
 8009638:	f7f9 fd03 	bl	8003042 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	2000132c 	.word	0x2000132c
 800964c:	40005c00 	.word	0x40005c00

08009650 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009666:	4618      	mov	r0, r3
 8009668:	f7f8 fad5 	bl	8001c16 <HAL_PCD_Start>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f980 	bl	8009978 <USBD_Get_USB_Status>
 8009678:	4603      	mov	r3, r0
 800967a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800967c:	7bbb      	ldrb	r3, [r7, #14]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	4608      	mov	r0, r1
 8009690:	4611      	mov	r1, r2
 8009692:	461a      	mov	r2, r3
 8009694:	4603      	mov	r3, r0
 8009696:	70fb      	strb	r3, [r7, #3]
 8009698:	460b      	mov	r3, r1
 800969a:	70bb      	strb	r3, [r7, #2]
 800969c:	4613      	mov	r3, r2
 800969e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ae:	78bb      	ldrb	r3, [r7, #2]
 80096b0:	883a      	ldrh	r2, [r7, #0]
 80096b2:	78f9      	ldrb	r1, [r7, #3]
 80096b4:	f7f8 fc44 	bl	8001f40 <HAL_PCD_EP_Open>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f95a 	bl	8009978 <USBD_Get_USB_Status>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7f8 fc8b 	bl	800200c <HAL_PCD_EP_Close>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f93b 	bl	8009978 <USBD_Get_USB_Status>
 8009702:	4603      	mov	r3, r0
 8009704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009706:	7bbb      	ldrb	r3, [r7, #14]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7f8 fd4c 	bl	80021cc <HAL_PCD_EP_SetStall>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f91c 	bl	8009978 <USBD_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009744:	7bbb      	ldrb	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7f8 fd8d 	bl	800228c <HAL_PCD_EP_ClrStall>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f8fd 	bl	8009978 <USBD_Get_USB_Status>
 800977e:	4603      	mov	r3, r0
 8009780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009782:	7bbb      	ldrb	r3, [r7, #14]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800979e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	da0c      	bge.n	80097c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	440b      	add	r3, r1
 80097bc:	3302      	adds	r3, #2
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	e00b      	b.n	80097da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097c8:	68f9      	ldr	r1, [r7, #12]
 80097ca:	4613      	mov	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	00db      	lsls	r3, r3, #3
 80097d2:	440b      	add	r3, r1
 80097d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80097d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7f8 fb76 	bl	8001ef6 <HAL_PCD_SetAddress>
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980e:	7bfb      	ldrb	r3, [r7, #15]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f8b1 	bl	8009978 <USBD_Get_USB_Status>
 8009816:	4603      	mov	r3, r0
 8009818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981a:	7bbb      	ldrb	r3, [r7, #14]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	460b      	mov	r3, r1
 8009832:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009842:	7af9      	ldrb	r1, [r7, #11]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	f7f8 fc7d 	bl	8002146 <HAL_PCD_EP_Transmit>
 800984c:	4603      	mov	r3, r0
 800984e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f890 	bl	8009978 <USBD_Get_USB_Status>
 8009858:	4603      	mov	r3, r0
 800985a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800985c:	7dbb      	ldrb	r3, [r7, #22]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b086      	sub	sp, #24
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	460b      	mov	r3, r1
 8009874:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009884:	7af9      	ldrb	r1, [r7, #11]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	f7f8 fc07 	bl	800209c <HAL_PCD_EP_Receive>
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 f86f 	bl	8009978 <USBD_Get_USB_Status>
 800989a:	4603      	mov	r3, r0
 800989c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800989e:	7dbb      	ldrb	r3, [r7, #22]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098ba:	78fa      	ldrb	r2, [r7, #3]
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f8 fc29 	bl	8002116 <HAL_PCD_EP_GetRxCount>
 80098c4:	4603      	mov	r3, r0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <HAL_PCDEx_LPM_Callback+0x18>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d013      	beq.n	800990e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80098e6:	e023      	b.n	8009930 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d007      	beq.n	8009900 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80098f0:	f000 f83c 	bl	800996c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098f4:	4b10      	ldr	r3, [pc, #64]	; (8009938 <HAL_PCDEx_LPM_Callback+0x68>)
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	4a0f      	ldr	r2, [pc, #60]	; (8009938 <HAL_PCDEx_LPM_Callback+0x68>)
 80098fa:	f023 0306 	bic.w	r3, r3, #6
 80098fe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fcce 	bl	80082a8 <USBD_LL_Resume>
    break;
 800990c:	e010      	b.n	8009930 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe fcb2 	bl	800827e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <HAL_PCDEx_LPM_Callback+0x68>)
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	4a04      	ldr	r2, [pc, #16]	; (8009938 <HAL_PCDEx_LPM_Callback+0x68>)
 8009928:	f043 0306 	orr.w	r3, r3, #6
 800992c:	6113      	str	r3, [r2, #16]
    break;
 800992e:	bf00      	nop
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	e000ed00 	.word	0xe000ed00

0800993c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009944:	4b03      	ldr	r3, [pc, #12]	; (8009954 <USBD_static_malloc+0x18>)
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	200001bc 	.word	0x200001bc

08009958 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009970:	f7f6 fd72 	bl	8000458 <SystemClock_Config>
}
 8009974:	bf00      	nop
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	2b03      	cmp	r3, #3
 800998a:	d817      	bhi.n	80099bc <USBD_Get_USB_Status+0x44>
 800998c:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <USBD_Get_USB_Status+0x1c>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099a5 	.word	0x080099a5
 8009998:	080099ab 	.word	0x080099ab
 800999c:	080099b1 	.word	0x080099b1
 80099a0:	080099b7 	.word	0x080099b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
    break;
 80099a8:	e00b      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099aa:	2303      	movs	r3, #3
 80099ac:	73fb      	strb	r3, [r7, #15]
    break;
 80099ae:	e008      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099b0:	2301      	movs	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
    break;
 80099b4:	e005      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099b6:	2303      	movs	r3, #3
 80099b8:	73fb      	strb	r3, [r7, #15]
    break;
 80099ba:	e002      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	73fb      	strb	r3, [r7, #15]
    break;
 80099c0:	bf00      	nop
  }
  return usb_status;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <__libc_init_array>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	4e0d      	ldr	r6, [pc, #52]	; (8009a08 <__libc_init_array+0x38>)
 80099d4:	4c0d      	ldr	r4, [pc, #52]	; (8009a0c <__libc_init_array+0x3c>)
 80099d6:	1ba4      	subs	r4, r4, r6
 80099d8:	10a4      	asrs	r4, r4, #2
 80099da:	2500      	movs	r5, #0
 80099dc:	42a5      	cmp	r5, r4
 80099de:	d109      	bne.n	80099f4 <__libc_init_array+0x24>
 80099e0:	4e0b      	ldr	r6, [pc, #44]	; (8009a10 <__libc_init_array+0x40>)
 80099e2:	4c0c      	ldr	r4, [pc, #48]	; (8009a14 <__libc_init_array+0x44>)
 80099e4:	f000 f82c 	bl	8009a40 <_init>
 80099e8:	1ba4      	subs	r4, r4, r6
 80099ea:	10a4      	asrs	r4, r4, #2
 80099ec:	2500      	movs	r5, #0
 80099ee:	42a5      	cmp	r5, r4
 80099f0:	d105      	bne.n	80099fe <__libc_init_array+0x2e>
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099f8:	4798      	blx	r3
 80099fa:	3501      	adds	r5, #1
 80099fc:	e7ee      	b.n	80099dc <__libc_init_array+0xc>
 80099fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a02:	4798      	blx	r3
 8009a04:	3501      	adds	r5, #1
 8009a06:	e7f2      	b.n	80099ee <__libc_init_array+0x1e>
 8009a08:	08009ab0 	.word	0x08009ab0
 8009a0c:	08009ab0 	.word	0x08009ab0
 8009a10:	08009ab0 	.word	0x08009ab0
 8009a14:	08009ab4 	.word	0x08009ab4

08009a18 <memcpy>:
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	1e43      	subs	r3, r0, #1
 8009a1c:	440a      	add	r2, r1
 8009a1e:	4291      	cmp	r1, r2
 8009a20:	d100      	bne.n	8009a24 <memcpy+0xc>
 8009a22:	bd10      	pop	{r4, pc}
 8009a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a2c:	e7f7      	b.n	8009a1e <memcpy+0x6>

08009a2e <memset>:
 8009a2e:	4402      	add	r2, r0
 8009a30:	4603      	mov	r3, r0
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d100      	bne.n	8009a38 <memset+0xa>
 8009a36:	4770      	bx	lr
 8009a38:	f803 1b01 	strb.w	r1, [r3], #1
 8009a3c:	e7f9      	b.n	8009a32 <memset+0x4>
	...

08009a40 <_init>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr

08009a4c <_fini>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr
