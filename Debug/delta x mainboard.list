
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009938  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b10  08009b10  00019b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b68  08009b68  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009b68  08009b68  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b68  08009b68  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b68  08009b68  00019b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000184  08009cf4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  08009cf4  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aceb  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344b  00000000  00000000  0003ae9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003f680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bc5  00000000  00000000  00060e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c42e0  00000000  00000000  000729f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136cd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  00136d4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009af8 	.word	0x08009af8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009af8 	.word	0x08009af8

08000218 <CDC_On_Receive>:
volatile uint8_t motor1_target_rpm = 0;
volatile uint8_t motor2_target_rpm = 0;
volatile uint8_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fc4e 	bl	8009ad0 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001c8 	.word	0x200001c8

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f001 f91d 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f8fa 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 fd4e 	bl	8000d04 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000268:	f000 fad6 	bl	8000818 <MX_TIM4_Init>
  MX_TIM8_Init();
 800026c:	f000 fb60 	bl	8000930 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000270:	f000 fbce 	bl	8000a10 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000274:	f000 fc52 	bl	8000b1c <MX_TIM16_Init>
  MX_TIM1_Init();
 8000278:	f000 f956 	bl	8000528 <MX_TIM1_Init>
  MX_TIM2_Init();
 800027c:	f000 fa04 	bl	8000688 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000280:	f000 fa56 	bl	8000730 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000284:	f000 fb1e 	bl	80008c4 <MX_TIM7_Init>
  MX_TIM17_Init();
 8000288:	f000 fcc2 	bl	8000c10 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800028c:	f008 ff04 	bl	8009098 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000290:	2104      	movs	r1, #4
 8000292:	485d      	ldr	r0, [pc, #372]	; (8000408 <main+0x1b0>)
 8000294:	f004 f9fe 	bl	8004694 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000298:	2104      	movs	r1, #4
 800029a:	485c      	ldr	r0, [pc, #368]	; (800040c <main+0x1b4>)
 800029c:	f004 f9fa 	bl	8004694 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002a0:	2104      	movs	r1, #4
 80002a2:	485b      	ldr	r0, [pc, #364]	; (8000410 <main+0x1b8>)
 80002a4:	f004 f9f6 	bl	8004694 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002a8:	2100      	movs	r1, #0
 80002aa:	485a      	ldr	r0, [pc, #360]	; (8000414 <main+0x1bc>)
 80002ac:	f004 f84c 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002b0:	2104      	movs	r1, #4
 80002b2:	4858      	ldr	r0, [pc, #352]	; (8000414 <main+0x1bc>)
 80002b4:	f004 f848 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002b8:	2108      	movs	r1, #8
 80002ba:	4856      	ldr	r0, [pc, #344]	; (8000414 <main+0x1bc>)
 80002bc:	f004 f844 	bl	8004348 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 80002c0:	4b55      	ldr	r3, [pc, #340]	; (8000418 <main+0x1c0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 80002c6:	4b54      	ldr	r3, [pc, #336]	; (8000418 <main+0x1c0>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80002cc:	4b52      	ldr	r3, [pc, #328]	; (8000418 <main+0x1c0>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d2:	2100      	movs	r1, #0
 80002d4:	4851      	ldr	r0, [pc, #324]	; (800041c <main+0x1c4>)
 80002d6:	f004 f837 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002da:	2104      	movs	r1, #4
 80002dc:	484f      	ldr	r0, [pc, #316]	; (800041c <main+0x1c4>)
 80002de:	f004 f833 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002e2:	2108      	movs	r1, #8
 80002e4:	484d      	ldr	r0, [pc, #308]	; (800041c <main+0x1c4>)
 80002e6:	f004 f82f 	bl	8004348 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 80002ea:	4b4d      	ldr	r3, [pc, #308]	; (8000420 <main+0x1c8>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80002f0:	4b4b      	ldr	r3, [pc, #300]	; (8000420 <main+0x1c8>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80002f6:	4b4a      	ldr	r3, [pc, #296]	; (8000420 <main+0x1c8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80002fc:	2100      	movs	r1, #0
 80002fe:	4849      	ldr	r0, [pc, #292]	; (8000424 <main+0x1cc>)
 8000300:	f004 f822 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000304:	2100      	movs	r1, #0
 8000306:	4848      	ldr	r0, [pc, #288]	; (8000428 <main+0x1d0>)
 8000308:	f004 f81e 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800030c:	2100      	movs	r1, #0
 800030e:	4847      	ldr	r0, [pc, #284]	; (800042c <main+0x1d4>)
 8000310:	f004 f81a 	bl	8004348 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 8000314:	4b46      	ldr	r3, [pc, #280]	; (8000430 <main+0x1d8>)
 8000316:	2200      	movs	r2, #0
 8000318:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 800031a:	4b46      	ldr	r3, [pc, #280]	; (8000434 <main+0x1dc>)
 800031c:	2200      	movs	r2, #0
 800031e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 8000320:	4b45      	ldr	r3, [pc, #276]	; (8000438 <main+0x1e0>)
 8000322:	2200      	movs	r2, #0
 8000324:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000326:	4845      	ldr	r0, [pc, #276]	; (800043c <main+0x1e4>)
 8000328:	f003 ff4c 	bl	80041c4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 800032c:	4b44      	ldr	r3, [pc, #272]	; (8000440 <main+0x1e8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	2b01      	cmp	r3, #1
 8000334:	d1fa      	bne.n	800032c <main+0xd4>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000336:	2120      	movs	r1, #32
 8000338:	4842      	ldr	r0, [pc, #264]	; (8000444 <main+0x1ec>)
 800033a:	f001 fbc9 	bl	8001ad0 <HAL_GPIO_TogglePin>
		command_received = 0;
 800033e:	4b40      	ldr	r3, [pc, #256]	; (8000440 <main+0x1e8>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]

		feedback.thrower = 666;
 8000344:	4b40      	ldr	r3, [pc, #256]	; (8000448 <main+0x1f0>)
 8000346:	f240 229a 	movw	r2, #666	; 0x29a
 800034a:	60da      	str	r2, [r3, #12]

		if (command.motor1 >= 0) {
 800034c:	4b3f      	ldr	r3, [pc, #252]	; (800044c <main+0x1f4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db0c      	blt.n	800036e <main+0x116>
			TIM1->CCR3 = command.motor1 * 130;
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <main+0x1f4>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4613      	mov	r3, r2
 800035a:	019b      	lsls	r3, r3, #6
 800035c:	4413      	add	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	461a      	mov	r2, r3
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <main+0x1c0>)
 8000364:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR2 = 0;
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <main+0x1c0>)
 8000368:	2200      	movs	r2, #0
 800036a:	639a      	str	r2, [r3, #56]	; 0x38
 800036c:	e00a      	b.n	8000384 <main+0x12c>
		} else {
			TIM1->CCR2 = command.motor1 * 130 * -1;
 800036e:	4b37      	ldr	r3, [pc, #220]	; (800044c <main+0x1f4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f06f 0281 	mvn.w	r2, #129	; 0x81
 8000376:	fb02 f203 	mul.w	r2, r2, r3
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <main+0x1c0>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0x1c0>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if (command.motor2 >= 0) {
 8000384:	4b31      	ldr	r3, [pc, #196]	; (800044c <main+0x1f4>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	2b00      	cmp	r3, #0
 800038a:	db0c      	blt.n	80003a6 <main+0x14e>
			TIM1->CCR1 = command.motor2 * 130;
 800038c:	4b2f      	ldr	r3, [pc, #188]	; (800044c <main+0x1f4>)
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	4613      	mov	r3, r2
 8000392:	019b      	lsls	r3, r3, #6
 8000394:	4413      	add	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	461a      	mov	r2, r3
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <main+0x1c0>)
 800039c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR3 = 0;
 800039e:	4b20      	ldr	r3, [pc, #128]	; (8000420 <main+0x1c8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80003a4:	e00a      	b.n	80003bc <main+0x164>
		} else {
			TIM3->CCR3 = command.motor2 * 130 * -1;
 80003a6:	4b29      	ldr	r3, [pc, #164]	; (800044c <main+0x1f4>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	f06f 0281 	mvn.w	r2, #129	; 0x81
 80003ae:	fb02 f203 	mul.w	r2, r2, r3
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <main+0x1c8>)
 80003b4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <main+0x1c0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if (command.motor3 >= 0) {
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <main+0x1f4>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	db0c      	blt.n	80003de <main+0x186>
			TIM3->CCR1 = command.motor3 * 130;
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <main+0x1f4>)
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	4613      	mov	r3, r2
 80003ca:	019b      	lsls	r3, r3, #6
 80003cc:	4413      	add	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <main+0x1c8>)
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <main+0x1c8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	639a      	str	r2, [r3, #56]	; 0x38
 80003dc:	e00a      	b.n	80003f4 <main+0x19c>
		} else {
			TIM3->CCR2 = command.motor3 * 130 * -1;
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <main+0x1f4>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f06f 0281 	mvn.w	r2, #129	; 0x81
 80003e6:	fb02 f203 	mul.w	r2, r2, r3
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <main+0x1c8>)
 80003ec:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR2 = 0;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <main+0x1c8>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	639a      	str	r2, [r3, #56]	; 0x38
		}
		command_received_period = current_period;
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <main+0x1f8>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <main+0x1fc>)
 80003fc:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80003fe:	2114      	movs	r1, #20
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <main+0x1f0>)
 8000402:	f008 ff0b 	bl	800921c <CDC_Transmit_FS>
	if (command_received == 1) {
 8000406:	e791      	b.n	800032c <main+0xd4>
 8000408:	200005bc 	.word	0x200005bc
 800040c:	20000440 	.word	0x20000440
 8000410:	200003f4 	.word	0x200003f4
 8000414:	20000570 	.word	0x20000570
 8000418:	40012c00 	.word	0x40012c00
 800041c:	20000524 	.word	0x20000524
 8000420:	40000400 	.word	0x40000400
 8000424:	2000048c 	.word	0x2000048c
 8000428:	20000608 	.word	0x20000608
 800042c:	200004d8 	.word	0x200004d8
 8000430:	40014000 	.word	0x40014000
 8000434:	40014400 	.word	0x40014400
 8000438:	40014800 	.word	0x40014800
 800043c:	20000654 	.word	0x20000654
 8000440:	200001c8 	.word	0x200001c8
 8000444:	48000400 	.word	0x48000400
 8000448:	200001b4 	.word	0x200001b4
 800044c:	200001a0 	.word	0x200001a0
 8000450:	200001c9 	.word	0x200001c9
 8000454:	200001ca 	.word	0x200001ca

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b0a4      	sub	sp, #144	; 0x90
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000462:	2238      	movs	r2, #56	; 0x38
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f009 fb3d 	bl	8009ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
 800047a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2244      	movs	r2, #68	; 0x44
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f009 fb2f 	bl	8009ae6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000488:	2000      	movs	r0, #0
 800048a:	f002 fea3 	bl	80031d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800048e:	2322      	movs	r3, #34	; 0x22
 8000490:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000496:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800049c:	2301      	movs	r3, #1
 800049e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	2302      	movs	r3, #2
 80004a2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a4:	2302      	movs	r3, #2
 80004a6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80004ac:	2314      	movs	r3, #20
 80004ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004b8:	2302      	movs	r3, #2
 80004ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 ff37 	bl	800333c <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004d4:	f000 fcf4 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	230f      	movs	r3, #15
 80004da:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004dc:	2303      	movs	r3, #3
 80004de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004f0:	2104      	movs	r1, #4
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fa3a 	bl	800396c <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004fe:	f000 fcdf 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000506:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000508:	2300      	movs	r3, #0
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fc10 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800051a:	f000 fcd1 	bl	8000ec0 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3790      	adds	r7, #144	; 0x90
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	; 0x60
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800053a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2234      	movs	r2, #52	; 0x34
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f009 fac6 	bl	8009ae6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800055a:	4b49      	ldr	r3, [pc, #292]	; (8000680 <MX_TIM1_Init+0x158>)
 800055c:	4a49      	ldr	r2, [pc, #292]	; (8000684 <MX_TIM1_Init+0x15c>)
 800055e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000560:	4b47      	ldr	r3, [pc, #284]	; (8000680 <MX_TIM1_Init+0x158>)
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000566:	4b46      	ldr	r3, [pc, #280]	; (8000680 <MX_TIM1_Init+0x158>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800056c:	4b44      	ldr	r3, [pc, #272]	; (8000680 <MX_TIM1_Init+0x158>)
 800056e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000574:	4b42      	ldr	r3, [pc, #264]	; (8000680 <MX_TIM1_Init+0x158>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800057a:	4b41      	ldr	r3, [pc, #260]	; (8000680 <MX_TIM1_Init+0x158>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <MX_TIM1_Init+0x158>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000586:	483e      	ldr	r0, [pc, #248]	; (8000680 <MX_TIM1_Init+0x158>)
 8000588:	f003 fe86 	bl	8004298 <HAL_TIM_PWM_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000592:	f000 fc95 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a6:	4619      	mov	r1, r3
 80005a8:	4835      	ldr	r0, [pc, #212]	; (8000680 <MX_TIM1_Init+0x158>)
 80005aa:	f004 ff63 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005b4:	f000 fc84 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c0:	2300      	movs	r3, #0
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d0:	2300      	movs	r3, #0
 80005d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <MX_TIM1_Init+0x158>)
 80005de:	f004 fa65 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80005e8:	f000 fc6a 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f4:	2204      	movs	r2, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	4821      	ldr	r0, [pc, #132]	; (8000680 <MX_TIM1_Init+0x158>)
 80005fa:	f004 fa57 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000604:	f000 fc5c 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800060c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000610:	2208      	movs	r2, #8
 8000612:	4619      	mov	r1, r3
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_TIM1_Init+0x158>)
 8000616:	f004 fa49 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000620:	f000 fc4e 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800064a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <MX_TIM1_Init+0x158>)
 8000662:	f004 ff89 	bl	8005578 <HAL_TIMEx_ConfigBreakDeadTime>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800066c:	f000 fc28 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <MX_TIM1_Init+0x158>)
 8000672:	f000 fda9 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000676:	bf00      	nop
 8000678:	3760      	adds	r7, #96	; 0x60
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000570 	.word	0x20000570
 8000684:	40012c00 	.word	0x40012c00

08000688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2224      	movs	r2, #36	; 0x24
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f009 fa25 	bl	8009ae6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_TIM2_Init+0xa4>)
 80006a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_TIM2_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_TIM2_Init+0xa4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_TIM2_Init+0xa4>)
 80006bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_TIM2_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_TIM2_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e6:	2301      	movs	r3, #1
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_TIM2_Init+0xa4>)
 80006fa:	f003 ff25 	bl	8004548 <HAL_TIM_Encoder_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000704:	f000 fbdc 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_TIM2_Init+0xa4>)
 8000716:	f004 fead 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000720:	f000 fbce 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3730      	adds	r7, #48	; 0x30
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200005bc 	.word	0x200005bc

08000730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000756:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <MX_TIM3_Init+0xe4>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_TIM3_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800077a:	4825      	ldr	r0, [pc, #148]	; (8000810 <MX_TIM3_Init+0xe0>)
 800077c:	f003 fd8c 	bl	8004298 <HAL_TIM_PWM_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000786:	f000 fb9b 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <MX_TIM3_Init+0xe0>)
 800079a:	f004 fe6b 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007a4:	f000 fb8c 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	; 0x60
 80007aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM3_Init+0xe0>)
 80007c0:	f004 f974 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80007ca:	f000 fb79 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_TIM3_Init+0xe0>)
 80007da:	f004 f967 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80007e4:	f000 fb6c 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2208      	movs	r2, #8
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM3_Init+0xe0>)
 80007f4:	f004 f95a 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80007fe:	f000 fb5f 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM3_Init+0xe0>)
 8000804:	f000 fce0 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000524 	.word	0x20000524
 8000814:	40000400 	.word	0x40000400

08000818 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2224      	movs	r2, #36	; 0x24
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 f95d 	bl	8009ae6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_TIM4_Init+0xa8>)
 800083a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_TIM4_Init+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_TIM4_Init+0xa4>)
 800084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800085c:	2303      	movs	r3, #3
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000874:	2301      	movs	r3, #1
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM4_Init+0xa4>)
 8000888:	f003 fe5e 	bl	8004548 <HAL_TIM_Encoder_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000892:	f000 fb15 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM4_Init+0xa4>)
 80008a4:	f004 fde6 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80008ae:	f000 fb07 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	; 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000440 	.word	0x20000440
 80008c0:	40000800 	.word	0x40000800

080008c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_TIM7_Init+0x64>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_TIM7_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_TIM7_Init+0x64>)
 80008dc:	2228      	movs	r2, #40	; 0x28
 80008de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_TIM7_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_TIM7_Init+0x64>)
 80008e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_TIM7_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_TIM7_Init+0x64>)
 80008f6:	f003 fc0d 	bl	8004114 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000900:	f000 fade 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_TIM7_Init+0x64>)
 8000912:	f004 fdaf 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 fad0 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000654 	.word	0x20000654
 800092c:	40001400 	.word	0x40001400

08000930 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09a      	sub	sp, #104	; 0x68
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000936:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800093a:	2224      	movs	r2, #36	; 0x24
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f009 f8d1 	bl	8009ae6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2234      	movs	r2, #52	; 0x34
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f009 f8c5 	bl	8009ae6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_TIM8_Init+0xd8>)
 800095e:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <MX_TIM8_Init+0xdc>)
 8000960:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_TIM8_Init+0xd8>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_TIM8_Init+0xd8>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_TIM8_Init+0xd8>)
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_TIM8_Init+0xd8>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_TIM8_Init+0xd8>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_TIM8_Init+0xd8>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000988:	2303      	movs	r3, #3
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009b0:	4619      	mov	r1, r3
 80009b2:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_TIM8_Init+0xd8>)
 80009b4:	f003 fdc8 	bl	8004548 <HAL_TIM_Encoder_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80009be:	f000 fa7f 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_TIM8_Init+0xd8>)
 80009d6:	f004 fd4d 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 80009e0:	f000 fa6e 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_TIM8_Init+0xd8>)
 80009f2:	f004 fdc1 	bl	8005578 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 80009fc:	f000 fa60 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3768      	adds	r7, #104	; 0x68
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200003f4 	.word	0x200003f4
 8000a0c:	40013400 	.word	0x40013400

08000a10 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b098      	sub	sp, #96	; 0x60
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2234      	movs	r2, #52	; 0x34
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f009 f852 	bl	8009ae6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a44:	4a34      	ldr	r2, [pc, #208]	; (8000b18 <MX_TIM15_Init+0x108>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a6e:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a70:	f003 fc12 	bl	8004298 <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 fa21 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4821      	ldr	r0, [pc, #132]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000a8e:	f004 fcf1 	bl	8005474 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 fa12 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000ac2:	f003 fff3 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000acc:	f000 f9f8 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000af8:	f004 fd3e 	bl	8005578 <HAL_TIMEx_ConfigBreakDeadTime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b02:	f000 f9dd 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_TIM15_Init+0x104>)
 8000b08:	f000 fb5e 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000b0c:	bf00      	nop
 8000b0e:	3760      	adds	r7, #96	; 0x60
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000048c 	.word	0x2000048c
 8000b18:	40014000 	.word	0x40014000

08000b1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2234      	movs	r2, #52	; 0x34
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 ffd2 	bl	8009ae6 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b44:	4a31      	ldr	r2, [pc, #196]	; (8000c0c <MX_TIM16_Init+0xf0>)
 8000b46:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b6e:	4826      	ldr	r0, [pc, #152]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b70:	f003 fad0 	bl	8004114 <HAL_TIM_Base_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b7a:	f000 f9a1 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b7e:	4822      	ldr	r0, [pc, #136]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000b80:	f003 fb8a 	bl	8004298 <HAL_TIM_PWM_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b8a:	f000 f999 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	; 0x60
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000bb4:	f003 ff7a 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000bbe:	f000 f97f 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000bea:	f004 fcc5 	bl	8005578 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000bf4:	f000 f964 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM16_Init+0xec>)
 8000bfa:	f000 fae5 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000bfe:	bf00      	nop
 8000c00:	3750      	adds	r7, #80	; 0x50
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000608 	.word	0x20000608
 8000c0c:	40014400 	.word	0x40014400

08000c10 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	; 0x50
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2234      	movs	r2, #52	; 0x34
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 ff58 	bl	8009ae6 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c38:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <MX_TIM17_Init+0xf0>)
 8000c3a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c62:	4826      	ldr	r0, [pc, #152]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c64:	f003 fa56 	bl	8004114 <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c6e:	f000 f927 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c72:	4822      	ldr	r0, [pc, #136]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000c74:	f003 fb10 	bl	8004298 <HAL_TIM_PWM_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c7e:	f000 f91f 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	; 0x60
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4815      	ldr	r0, [pc, #84]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000ca8:	f003 ff00 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000cb2:	f000 f905 	bl	8000ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000cde:	f004 fc4b 	bl	8005578 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ce8:	f000 f8ea 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000cec:	4803      	ldr	r0, [pc, #12]	; (8000cfc <MX_TIM17_Init+0xec>)
 8000cee:	f000 fa6b 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	; 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200004d8 	.word	0x200004d8
 8000d00:	40014800 	.word	0x40014800

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_GPIO_Init+0x8c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_GPIO_Init+0x90>)
 8000d50:	f000 fea6 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d54:	2308      	movs	r3, #8
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <MX_GPIO_Init+0x90>)
 8000d68:	f000 fd18 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_GPIO_Init+0x90>)
 8000d84:	f000 fd0a 	bl	800179c <HAL_GPIO_Init>

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000400 	.word	0x48000400

08000d98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000da8:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000dae:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000db4:	8bfb      	ldrh	r3, [r7, #30]
 8000db6:	4a39      	ldr	r2, [pc, #228]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000db8:	8812      	ldrh	r2, [r2, #0]
 8000dba:	b292      	uxth	r2, r2
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000dc0:	8bbb      	ldrh	r3, [r7, #28]
 8000dc2:	4a37      	ldr	r2, [pc, #220]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000dc4:	8812      	ldrh	r2, [r2, #0]
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000dcc:	8b7b      	ldrh	r3, [r7, #26]
 8000dce:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000dda:	8bfb      	ldrh	r3, [r7, #30]
 8000ddc:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000dde:	4a30      	ldr	r2, [pc, #192]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000de0:	8bbb      	ldrh	r3, [r7, #28]
 8000de2:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000de6:	8b7b      	ldrh	r3, [r7, #26]
 8000de8:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000df0:	fb02 f303 	mul.w	r3, r2, r3
 8000df4:	4a2c      	ldr	r2, [pc, #176]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000df6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfa:	1252      	asrs	r2, r2, #9
 8000dfc:	17db      	asrs	r3, r3, #31
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e02:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	4a26      	ldr	r2, [pc, #152]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e10:	fb82 1203 	smull	r1, r2, r2, r3
 8000e14:	1252      	asrs	r2, r2, #9
 8000e16:	17db      	asrs	r3, r3, #31
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	4a24      	ldr	r2, [pc, #144]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e1c:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2e:	1252      	asrs	r2, r2, #9
 8000e30:	17db      	asrs	r3, r3, #31
 8000e32:	1a9b      	subs	r3, r3, r2
 8000e34:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e36:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e3a:	f240 229a 	movw	r2, #666	; 0x29a
 8000e3e:	60da      	str	r2, [r3, #12]

	// pwm pid


	// timeout
	current_period += 1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e4c:	701a      	strb	r2, [r3, #0]
	if (current_period - command_received_period  > 60) {
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e60:	dd11      	ble.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0xee>
		TIM1->CCR1 = 0;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40000800 	.word	0x40000800
 8000e98:	40013400 	.word	0x40013400
 8000e9c:	200001cc 	.word	0x200001cc
 8000ea0:	200001ce 	.word	0x200001ce
 8000ea4:	200001d0 	.word	0x200001d0
 8000ea8:	6bca1af3 	.word	0x6bca1af3
 8000eac:	200001b4 	.word	0x200001b4
 8000eb0:	200001c9 	.word	0x200001c9
 8000eb4:	200001ca 	.word	0x200001ca
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_MspInit+0x44>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_MspInit+0x44>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_MspInit+0x44>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x44>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x44>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f06:	f002 fa09 	bl	800331c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <HAL_TIM_PWM_MspInit+0x80>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10c      	bne.n	8000f44 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f34:	6613      	str	r3, [r2, #96]	; 0x60
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f42:	e022      	b.n	8000f8a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_TIM_PWM_MspInit+0x88>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10c      	bne.n	8000f68 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
}
 8000f66:	e010      	b.n	8000f8a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10b      	bne.n	8000f8a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_TIM_PWM_MspInit+0x84>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
}
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40012c00 	.word	0x40012c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40014000 	.word	0x40014000

08000fa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d129      	bne.n	800101e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b51      	ldr	r3, [pc, #324]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a4d      	ldr	r2, [pc, #308]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100a:	2301      	movs	r3, #1
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f000 fbc0 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800101c:	e079      	b.n	8001112 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <HAL_TIM_Encoder_MspInit+0x178>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d128      	bne.n	800107a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001028:	4b3c      	ldr	r3, [pc, #240]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	4a3b      	ldr	r2, [pc, #236]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6593      	str	r3, [r2, #88]	; 0x58
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	4a35      	ldr	r2, [pc, #212]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001058:	23c0      	movs	r3, #192	; 0xc0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001068:	2302      	movs	r3, #2
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	482c      	ldr	r0, [pc, #176]	; (8001124 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001074:	f000 fb92 	bl	800179c <HAL_GPIO_Init>
}
 8001078:	e04b      	b.n	8001112 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <HAL_TIM_Encoder_MspInit+0x180>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d146      	bne.n	8001112 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8001086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001088:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 800108a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800108e:	6613      	str	r3, [r2, #96]	; 0x60
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	4a1e      	ldr	r2, [pc, #120]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a18      	ldr	r2, [pc, #96]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_TIM_Encoder_MspInit+0x174>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80010de:	2302      	movs	r3, #2
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 fb56 	bl	800179c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001102:	230a      	movs	r3, #10
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_TIM_Encoder_MspInit+0x17c>)
 800110e:	f000 fb45 	bl	800179c <HAL_GPIO_Init>
}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	; 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40000800 	.word	0x40000800
 8001124:	48000400 	.word	0x48000400
 8001128:	40013400 	.word	0x40013400

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_TIM_Base_MspInit+0x8c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d114      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001144:	f043 0320 	orr.w	r3, r3, #32
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2037      	movs	r0, #55	; 0x37
 800115c:	f000 fae9 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001160:	2037      	movs	r0, #55	; 0x37
 8001162:	f000 fb00 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001166:	e022      	b.n	80011ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_TIM_Base_MspInit+0x94>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10c      	bne.n	800118c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	6613      	str	r3, [r2, #96]	; 0x60
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
}
 800118a:	e010      	b.n	80011ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_TIM_Base_MspInit+0x98>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6613      	str	r3, [r2, #96]	; 0x60
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_TIM_Base_MspInit+0x90>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40001400 	.word	0x40001400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40014400 	.word	0x40014400
 80011c4:	40014800 	.word	0x40014800

080011c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a65      	ldr	r2, [pc, #404]	; (800137c <HAL_TIM_MspPostInit+0x1b4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d11e      	bne.n	8001228 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a64      	ldr	r2, [pc, #400]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001202:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001214:	2306      	movs	r3, #6
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f000 fabb 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001226:	e0a5      	b.n	8001374 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_TIM_MspPostInit+0x1bc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d139      	bne.n	80012a6 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b53      	ldr	r3, [pc, #332]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b50      	ldr	r3, [pc, #320]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001262:	2350      	movs	r3, #80	; 0x50
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001272:	2302      	movs	r3, #2
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f000 fa8c 	bl	800179c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001294:	2302      	movs	r3, #2
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	483a      	ldr	r0, [pc, #232]	; (8001388 <HAL_TIM_MspPostInit+0x1c0>)
 80012a0:	f000 fa7c 	bl	800179c <HAL_GPIO_Init>
}
 80012a4:	e066      	b.n	8001374 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a38      	ldr	r2, [pc, #224]	; (800138c <HAL_TIM_MspPostInit+0x1c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d11d      	bne.n	80012ec <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c8:	2304      	movs	r3, #4
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012d8:	2309      	movs	r3, #9
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f000 fa59 	bl	800179c <HAL_GPIO_Init>
}
 80012ea:	e043      	b.n	8001374 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a27      	ldr	r2, [pc, #156]	; (8001390 <HAL_TIM_MspPostInit+0x1c8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d11c      	bne.n	8001330 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800131e:	2301      	movs	r3, #1
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4817      	ldr	r0, [pc, #92]	; (8001388 <HAL_TIM_MspPostInit+0x1c0>)
 800132a:	f000 fa37 	bl	800179c <HAL_GPIO_Init>
}
 800132e:	e021      	b.n	8001374 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_TIM_MspPostInit+0x1cc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d11c      	bne.n	8001374 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_TIM_MspPostInit+0x1b8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001362:	2301      	movs	r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f000 fa14 	bl	800179c <HAL_GPIO_Init>
}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40012c00 	.word	0x40012c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40000400 	.word	0x40000400
 8001388:	48000400 	.word	0x48000400
 800138c:	40014000 	.word	0x40014000
 8001390:	40014400 	.word	0x40014400
 8001394:	40014800 	.word	0x40014800

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f8a8 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <USB_LP_IRQHandler+0x10>)
 80013fa:	f000 fc8a 	bl	8001d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20001344 	.word	0x20001344

08001408 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM7_IRQHandler+0x10>)
 800140e:	f003 f9ce 	bl	80047ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000654 	.word	0x20000654

0800141c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <SystemInit+0x28>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <SystemInit+0x28>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SystemInit+0x28>)
 8001432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001436:	609a      	str	r2, [r3, #8]
#endif
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490e      	ldr	r1, [pc, #56]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0b      	ldr	r4, [pc, #44]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001472:	f7ff ffd3 	bl	800141c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f008 fb07 	bl	8009a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7fe feed 	bl	8000258 <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   r0, =_estack
 8001480:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800148c:	08009b70 	.word	0x08009b70
  ldr r2, =_sbss
 8001490:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001494:	20001638 	.word	0x20001638

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f939 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f80e 	bl	80014cc <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fd08 	bl	8000ed0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_InitTick+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d022      	beq.n	8001526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_InitTick+0x6c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_InitTick+0x68>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f944 	bl	8001782 <HAL_SYSTICK_Config>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d809      	bhi.n	800151a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	f000 f910 	bl	8001732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_InitTick+0x70>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e007      	b.n	800152a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e004      	b.n	800152a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000008 	.word	0x20000008
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_IncTick+0x1c>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200006a0 	.word	0x200006a0
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200006a0 	.word	0x200006a0

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff29 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff40 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff90 	bl	8001670 <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5f 	bl	800161c <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff33 	bl	80015e0 <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa4 	bl	80016d8 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017aa:	e15a      	b.n	8001a62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 814c 	beq.w	8001a5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d00b      	beq.n	80017e4 <HAL_GPIO_Init+0x48>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d8:	2b11      	cmp	r3, #17
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0xea>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b12      	cmp	r3, #18
 8001884:	d123      	bne.n	80018ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a6 	beq.w	8001a5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6613      	str	r3, [r2, #96]	; 0x60
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001928:	4a56      	ldr	r2, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001952:	d01f      	beq.n	8001994 <HAL_GPIO_Init+0x1f8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x2ec>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d019      	beq.n	8001990 <HAL_GPIO_Init+0x1f4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1f0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_GPIO_Init+0x2f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_GPIO_Init+0x2f8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a48      	ldr	r2, [pc, #288]	; (8001a98 <HAL_GPIO_Init+0x2fc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e4>
 800197c:	2305      	movs	r3, #5
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001980:	2306      	movs	r3, #6
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae9d 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43d9      	mvns	r1, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	b08b      	sub	sp, #44	; 0x2c
 8001b08:	af06      	add	r7, sp, #24
 8001b0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0d7      	b.n	8001cc6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f007 fcbc 	bl	80094a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2203      	movs	r2, #3
 8001b34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fe18 	bl	8005772 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e04c      	b.n	8001be2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	3301      	adds	r3, #1
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	b298      	uxth	r0, r3
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3336      	adds	r3, #54	; 0x36
 8001b86:	4602      	mov	r2, r0
 8001b88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3338      	adds	r3, #56	; 0x38
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333c      	adds	r3, #60	; 0x3c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3340      	adds	r3, #64	; 0x40
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3301      	adds	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3ad      	bcc.n	8001b48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e044      	b.n	8001c7c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3b5      	bcc.n	8001bf2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	687e      	ldr	r6, [r7, #4]
 8001c8e:	466d      	mov	r5, sp
 8001c90:	f106 0410 	add.w	r4, r6, #16
 8001c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	1d33      	adds	r3, r6, #4
 8001c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca0:	6838      	ldr	r0, [r7, #0]
 8001ca2:	f003 fd81 	bl	80057a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f001 fa5e 	bl	8003180 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_Start+0x16>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e012      	b.n	8001d0a <HAL_PCD_Start+0x3c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fd27 	bl	8005744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fd13 	bl	8007726 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f005 fd18 	bl	8007754 <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d2e:	d102      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb5b 	bl	80023ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 fd0a 	bl	8007754 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d112      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f007 fc1a 	bl	800959e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f91e 	bl	8001fae <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f005 fcec 	bl	8007754 <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d86:	d10b      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 fcd5 	bl	8007754 <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db4:	d10b      	bne.n	8001dce <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f005 fcbe 	bl	8007754 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de2:	d133      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0204 	bic.w	r2, r2, #4
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0208 	bic.w	r2, r2, #8
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f007 fdad 	bl	8009988 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f007 fbee 	bl	8009610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f005 fc7f 	bl	8007754 <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e60:	d126      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0208 	orr.w	r2, r2, #8
 8001e74:	b292      	uxth	r2, r2
 8001e76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0204 	orr.w	r2, r2, #4
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f007 fb96 	bl	80095dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 fc4d 	bl	8007754 <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d13f      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d12b      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0204 	orr.w	r2, r2, #4
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0208 	orr.w	r2, r2, #8
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f34:	2101      	movs	r1, #1
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f007 fd26 	bl	8009988 <HAL_PCDEx_LPM_Callback>
 8001f3c:	e002      	b.n	8001f44 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f007 fb4c 	bl	80095dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f005 fc03 	bl	8007754 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f58:	d10e      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f007 fb05 	bl	8009582 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f005 fbe9 	bl	8007754 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_PCD_SetAddress+0x1a>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e013      	b.n	8001ff0 <HAL_PCD_SetAddress+0x42>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 fb8c 	bl	80076fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	70fb      	strb	r3, [r7, #3]
 800200a:	460b      	mov	r3, r1
 800200c:	803b      	strh	r3, [r7, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da0e      	bge.n	800203c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	705a      	strb	r2, [r3, #1]
 800203a:	e00e      	b.n	800205a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 0207 	and.w	r2, r3, #7
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	b2da      	uxtb	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002066:	883a      	ldrh	r2, [r7, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	78ba      	ldrb	r2, [r7, #2]
 8002070:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002084:	78bb      	ldrb	r3, [r7, #2]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d102      	bne.n	8002090 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_PCD_EP_Open+0xa6>
 800209a:	2302      	movs	r3, #2
 800209c:	e00e      	b.n	80020bc <HAL_PCD_EP_Open+0xc4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68f9      	ldr	r1, [r7, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fb9d 	bl	80057ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020ba:	7afb      	ldrb	r3, [r7, #11]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da0e      	bge.n	80020f6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	705a      	strb	r2, [r3, #1]
 80020f4:	e00e      	b.n	8002114 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 0207 	and.w	r2, r3, #7
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_PCD_EP_Close+0x6a>
 800212a:	2302      	movs	r3, #2
 800212c:	e00e      	b.n	800214c <HAL_PCD_EP_Close+0x88>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fec3 	bl	8005ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	460b      	mov	r3, r1
 8002162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	b2da      	uxtb	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6979      	ldr	r1, [r7, #20]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f876 	bl	80062a2 <USB_EPStartXfer>
 80021b6:	e005      	b.n	80021c4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6979      	ldr	r1, [r7, #20]
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 f86f 	bl	80062a2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0207 	and.w	r2, r3, #7
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80021f0:	681b      	ldr	r3, [r3, #0]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	460b      	mov	r3, r1
 800220c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2201      	movs	r2, #1
 8002248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	b2da      	uxtb	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002256:	7afb      	ldrb	r3, [r7, #11]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	4618      	mov	r0, r3
 8002268:	f004 f81b 	bl	80062a2 <USB_EPStartXfer>
 800226c:	e005      	b.n	800227a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6979      	ldr	r1, [r7, #20]
 8002274:	4618      	mov	r0, r3
 8002276:	f004 f814 	bl	80062a2 <USB_EPStartXfer>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 0207 	and.w	r2, r3, #7
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d901      	bls.n	80022a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e04c      	b.n	800233c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0e      	bge.n	80022c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	705a      	strb	r2, [r3, #1]
 80022c6:	e00c      	b.n	80022e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_PCD_EP_SetStall+0x7e>
 80022fe:	2302      	movs	r3, #2
 8002300:	e01c      	b.n	800233c <HAL_PCD_EP_SetStall+0xb8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	4618      	mov	r0, r3
 8002312:	f005 f8f5 	bl	8007500 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	2b00      	cmp	r3, #0
 800231e:	d108      	bne.n	8002332 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f005 fa21 	bl	8007774 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d901      	bls.n	8002362 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e040      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da0e      	bge.n	8002388 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	705a      	strb	r2, [r3, #1]
 8002386:	e00e      	b.n	80023a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f003 0207 	and.w	r2, r3, #7
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_PCD_EP_ClrStall+0x82>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e00e      	b.n	80023e4 <HAL_PCD_EP_ClrStall+0xa0>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 f8e4 	bl	80075a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023f4:	e2d1      	b.n	800299a <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800240c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 8152 	bne.w	80026ba <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d150      	bne.n	80024c2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	81fb      	strh	r3, [r7, #14]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002440:	b29b      	uxth	r3, r3
 8002442:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3328      	adds	r3, #40	; 0x28
 8002448:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4413      	add	r3, r2
 8002464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	441a      	add	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002480:	2100      	movs	r1, #0
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f007 f863 	bl	800954e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8282 	beq.w	800299a <PCD_EP_ISR_Handler+0x5ae>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 827d 	bne.w	800299a <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b292      	uxth	r2, r2
 80024b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024c0:	e26b      	b.n	800299a <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d032      	beq.n	8002542 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002516:	b29b      	uxth	r3, r3
 8002518:	f005 f979 	bl	800780e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29a      	uxth	r2, r3
 8002524:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002528:	4013      	ands	r3, r2
 800252a:	823b      	strh	r3, [r7, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	8a3a      	ldrh	r2, [r7, #16]
 8002532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002536:	b292      	uxth	r2, r2
 8002538:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f006 ffda 	bl	80094f4 <HAL_PCD_SetupStageCallback>
 8002540:	e22b      	b.n	800299a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002542:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002546:	2b00      	cmp	r3, #0
 8002548:	f280 8227 	bge.w	800299a <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002558:	4013      	ands	r3, r2
 800255a:	83bb      	strh	r3, [r7, #28]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	8bba      	ldrh	r2, [r7, #28]
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <PCD_EP_ISR_Handler+0x1e2>
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f005 f92b 	bl	800780e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	441a      	add	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025c6:	2100      	movs	r1, #0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f006 ffa5 	bl	8009518 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025dc:	b29b      	uxth	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d112      	bne.n	800261c <PCD_EP_ISR_Handler+0x230>
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002600:	b29a      	uxth	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002614:	b29a      	uxth	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	e02f      	b.n	800267c <PCD_EP_ISR_Handler+0x290>
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b3e      	cmp	r3, #62	; 0x3e
 8002622:	d813      	bhi.n	800264c <PCD_EP_ISR_Handler+0x260>
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <PCD_EP_ISR_Handler+0x252>
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	3301      	adds	r3, #1
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	b29b      	uxth	r3, r3
 8002642:	029b      	lsls	r3, r3, #10
 8002644:	b29a      	uxth	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	e017      	b.n	800267c <PCD_EP_ISR_Handler+0x290>
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <PCD_EP_ISR_Handler+0x27a>
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	3b01      	subs	r3, #1
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	b29b      	uxth	r3, r3
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	b29b      	uxth	r3, r3
 800266e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002676:	b29a      	uxth	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268c:	827b      	strh	r3, [r7, #18]
 800268e:	8a7b      	ldrh	r3, [r7, #18]
 8002690:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002694:	827b      	strh	r3, [r7, #18]
 8002696:	8a7b      	ldrh	r3, [r7, #18]
 8002698:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800269c:	827b      	strh	r3, [r7, #18]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	8a7b      	ldrh	r3, [r7, #18]
 80026a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8013      	strh	r3, [r2, #0]
 80026b8:	e16f      	b.n	800299a <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f280 80e4 	bge.w	800289e <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ec:	4013      	ands	r3, r2
 80026ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002700:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002704:	b292      	uxth	r2, r2
 8002706:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002708:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	7b1b      	ldrb	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d120      	bne.n	8002768 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800274c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8083 	beq.w	800285a <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	6959      	ldr	r1, [r3, #20]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	88da      	ldrh	r2, [r3, #6]
 8002760:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002762:	f005 f854 	bl	800780e <USB_ReadPMA>
 8002766:	e078      	b.n	800285a <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	78db      	ldrb	r3, [r3, #3]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d108      	bne.n	8002782 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002770:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002772:	461a      	mov	r2, r3
 8002774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f91d 	bl	80029b6 <HAL_PCD_EP_DB_Receive>
 800277c:	4603      	mov	r3, r0
 800277e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002780:	e06b      	b.n	800285a <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	847b      	strh	r3, [r7, #34]	; 0x22
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01f      	beq.n	800281c <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002802:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002804:	2b00      	cmp	r3, #0
 8002806:	d028      	beq.n	800285a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	6959      	ldr	r1, [r3, #20]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	891a      	ldrh	r2, [r3, #8]
 8002814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002816:	f004 fffa 	bl	800780e <USB_ReadPMA>
 800281a:	e01e      	b.n	800285a <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	4413      	add	r3, r2
 8002836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002840:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002842:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	6959      	ldr	r1, [r3, #20]
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	895a      	ldrh	r2, [r3, #10]
 8002854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002856:	f004 ffda 	bl	800780e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002860:	441a      	add	r2, r3
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800286c:	441a      	add	r2, r3
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <PCD_EP_ISR_Handler+0x498>
 800287a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d206      	bcs.n	8002892 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f006 fe44 	bl	8009518 <HAL_PCD_DataOutStageCallback>
 8002890:	e005      	b.n	800289e <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002898:	4618      	mov	r0, r3
 800289a:	f003 fd02 	bl	80062a2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800289e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d078      	beq.n	800299a <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80028a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	843b      	strh	r3, [r7, #32]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	441a      	add	r2, r3
 80028e6:	8c3b      	ldrh	r3, [r7, #32]
 80028e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d108      	bne.n	800290e <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002900:	2b02      	cmp	r3, #2
 8002902:	d144      	bne.n	800298e <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d13f      	bne.n	800298e <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4413      	add	r3, r2
 8002928:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002932:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	699a      	ldr	r2, [r3, #24]
 8002938:	8bfb      	ldrh	r3, [r7, #30]
 800293a:	429a      	cmp	r2, r3
 800293c:	d906      	bls.n	800294c <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	8bfb      	ldrh	r3, [r7, #30]
 8002944:	1ad2      	subs	r2, r2, r3
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	619a      	str	r2, [r3, #24]
 800294a:	e002      	b.n	8002952 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f006 fdf4 	bl	800954e <HAL_PCD_DataInStageCallback>
 8002966:	e018      	b.n	800299a <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	8bfb      	ldrh	r3, [r7, #30]
 800296e:	441a      	add	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	8bfb      	ldrh	r3, [r7, #30]
 800297a:	441a      	add	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002986:	4618      	mov	r0, r3
 8002988:	f003 fc8b 	bl	80062a2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800298c:	e005      	b.n	800299a <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800298e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002990:	461a      	mov	r2, r3
 8002992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f917 	bl	8002bc8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f6ff ad25 	blt.w	80023f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3738      	adds	r7, #56	; 0x38
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d07c      	beq.n	8002ac8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	8b7b      	ldrh	r3, [r7, #26]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d306      	bcc.n	8002a0c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	8b7b      	ldrh	r3, [r7, #26]
 8002a04:	1ad2      	subs	r2, r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	619a      	str	r2, [r3, #24]
 8002a0a:	e002      	b.n	8002a12 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d123      	bne.n	8002a62 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	833b      	strh	r3, [r7, #24]
 8002a36:	8b3b      	ldrh	r3, [r7, #24]
 8002a38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a3c:	833b      	strh	r3, [r7, #24]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	441a      	add	r2, r3
 8002a4c:	8b3b      	ldrh	r3, [r7, #24]
 8002a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01f      	beq.n	8002aac <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	82fb      	strh	r3, [r7, #22]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	441a      	add	r2, r3
 8002a96:	8afb      	ldrh	r3, [r7, #22]
 8002a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aac:	8b7b      	ldrh	r3, [r7, #26]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8085 	beq.w	8002bbe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6959      	ldr	r1, [r3, #20]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	891a      	ldrh	r2, [r3, #8]
 8002ac0:	8b7b      	ldrh	r3, [r7, #26]
 8002ac2:	f004 fea4 	bl	800780e <USB_ReadPMA>
 8002ac6:	e07a      	b.n	8002bbe <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	8b7b      	ldrh	r3, [r7, #26]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d306      	bcc.n	8002b06 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	8b7b      	ldrh	r3, [r7, #26]
 8002afe:	1ad2      	subs	r2, r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	619a      	str	r2, [r3, #24]
 8002b04:	e002      	b.n	8002b0c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d123      	bne.n	8002b5c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	83fb      	strh	r3, [r7, #30]
 8002b30:	8bfb      	ldrh	r3, [r7, #30]
 8002b32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b36:	83fb      	strh	r3, [r7, #30]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	8bfb      	ldrh	r3, [r7, #30]
 8002b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11f      	bne.n	8002ba6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b80:	83bb      	strh	r3, [r7, #28]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	8bbb      	ldrh	r3, [r7, #28]
 8002b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ba6:	8b7b      	ldrh	r3, [r7, #26]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6959      	ldr	r1, [r3, #20]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	895a      	ldrh	r2, [r3, #10]
 8002bb8:	8b7b      	ldrh	r3, [r7, #26]
 8002bba:	f004 fe28 	bl	800780e <USB_ReadPMA>
    }
  }

  return count;
 8002bbe:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b092      	sub	sp, #72	; 0x48
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8130 	beq.w	8002e42 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c06:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d906      	bls.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e002      	b.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d12c      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f006 fc8a 	bl	800954e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 822d 	beq.w	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c60:	827b      	strh	r3, [r7, #18]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	441a      	add	r2, r3
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8013      	strh	r3, [r2, #0]
 8002c86:	e20b      	b.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01f      	beq.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	f040 81e1 	bne.w	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce4:	441a      	add	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf0:	441a      	add	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	6a1a      	ldr	r2, [r3, #32]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d309      	bcc.n	8002d16 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	621a      	str	r2, [r3, #32]
 8002d14:	e014      	b.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d2a:	e009      	b.n	8002d40 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d155      	bne.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e047      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x264>
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002da0:	d811      	bhi.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	3301      	adds	r3, #1
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	029b      	lsls	r3, r3, #10
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	e032      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x264>
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x214>
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	029b      	lsls	r3, r3, #10
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	801a      	strh	r2, [r3, #0]
 8002df2:	e01b      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x264>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d117      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x264>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	4413      	add	r3, r2
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	00da      	lsls	r2, r3, #3
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	6959      	ldr	r1, [r3, #20]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	891a      	ldrh	r2, [r3, #8]
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f004 fca6 	bl	800778c <USB_WritePMA>
 8002e40:	e12e      	b.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e66:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d306      	bcc.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	619a      	str	r2, [r3, #24]
 8002e7e:	e002      	b.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d12c      	bne.n	8002ee8 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4619      	mov	r1, r3
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f006 fb5a 	bl	800954e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 80fd 	bne.w	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8013      	strh	r3, [r2, #0]
 8002ee6:	e0db      	b.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	f040 80b1 	bne.w	80030a0 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f44:	441a      	add	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f50:	441a      	add	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d309      	bcc.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	1ad2      	subs	r2, r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	621a      	str	r2, [r3, #32]
 8002f74:	e014      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002f7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f8a:	e009      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d155      	bne.n	800305a <HAL_PCD_EP_DB_Transmit+0x492>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	4413      	add	r3, r2
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	00da      	lsls	r2, r3, #3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	4413      	add	r3, r2
 8002fd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d112      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	e044      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	2b3e      	cmp	r3, #62	; 0x3e
 8003006:	d811      	bhi.n	800302c <HAL_PCD_EP_DB_Transmit+0x464>
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_PCD_EP_DB_Transmit+0x456>
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	3301      	adds	r3, #1
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	b29b      	uxth	r3, r3
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	b29a      	uxth	r2, r3
 8003026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	e02f      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x47a>
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	3b01      	subs	r3, #1
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003044:	b29b      	uxth	r3, r3
 8003046:	029b      	lsls	r3, r3, #10
 8003048:	b29b      	uxth	r3, r3
 800304a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800304e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003052:	b29a      	uxth	r2, r3
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	801a      	strh	r2, [r3, #0]
 8003058:	e018      	b.n	800308c <HAL_PCD_EP_DB_Transmit+0x4c4>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d114      	bne.n	800308c <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800306a:	b29b      	uxth	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	4413      	add	r3, r2
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	00da      	lsls	r2, r3, #3
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	4413      	add	r3, r2
 800307e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	b29a      	uxth	r2, r3
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6959      	ldr	r1, [r3, #20]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	895a      	ldrh	r2, [r3, #10]
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	b29b      	uxth	r3, r3
 800309c:	f004 fb76 	bl	800778c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ba:	823b      	strh	r3, [r7, #16]
 80030bc:	8a3b      	ldrh	r3, [r7, #16]
 80030be:	f083 0310 	eor.w	r3, r3, #16
 80030c2:	823b      	strh	r3, [r7, #16]
 80030c4:	8a3b      	ldrh	r3, [r7, #16]
 80030c6:	f083 0320 	eor.w	r3, r3, #32
 80030ca:	823b      	strh	r3, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	8a3b      	ldrh	r3, [r7, #16]
 80030dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3748      	adds	r7, #72	; 0x48
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	817b      	strh	r3, [r7, #10]
 8003108:	4613      	mov	r3, r2
 800310a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e009      	b.n	8003144 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003130:	897a      	ldrh	r2, [r7, #10]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003144:	893b      	ldrh	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d107      	bne.n	800315a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	b29a      	uxth	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	80da      	strh	r2, [r3, #6]
 8003158:	e00b      	b.n	8003172 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2201      	movs	r2, #1
 800315e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	b29a      	uxth	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b29a      	uxth	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d141      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d131      	bne.n	8003254 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	4a46      	ldr	r2, [pc, #280]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003208:	4a41      	ldr	r2, [pc, #260]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2232      	movs	r2, #50	; 0x32
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	0c9b      	lsrs	r3, r3, #18
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003226:	e002      	b.n	800322e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d102      	bne.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f2      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003242:	4b33      	ldr	r3, [pc, #204]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d158      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e057      	b.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003264:	e04d      	b.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326c:	d141      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327a:	d131      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003282:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003294:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2232      	movs	r2, #50	; 0x32
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	0c9b      	lsrs	r3, r3, #18
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b2:	e002      	b.n	80032ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d102      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d112      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e011      	b.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032f0:	e007      	b.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fa:	4a05      	ldr	r2, [pc, #20]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003300:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40007000 	.word	0x40007000
 8003314:	20000000 	.word	0x20000000
 8003318:	431bde83 	.word	0x431bde83

0800331c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332a:	6093      	str	r3, [r2, #8]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40007000 	.word	0x40007000

0800333c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e308      	b.n	8003960 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d075      	beq.n	8003446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335a:	4ba3      	ldr	r3, [pc, #652]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003364:	4ba0      	ldr	r3, [pc, #640]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d102      	bne.n	800337a <HAL_RCC_OscConfig+0x3e>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d002      	beq.n	8003380 <HAL_RCC_OscConfig+0x44>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d10b      	bne.n	8003398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	4b99      	ldr	r3, [pc, #612]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d05b      	beq.n	8003444 <HAL_RCC_OscConfig+0x108>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d157      	bne.n	8003444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e2e3      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d106      	bne.n	80033b0 <HAL_RCC_OscConfig+0x74>
 80033a2:	4b91      	ldr	r3, [pc, #580]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a90      	ldr	r2, [pc, #576]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xb0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x98>
 80033ba:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a8a      	ldr	r2, [pc, #552]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a87      	ldr	r2, [pc, #540]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xb0>
 80033d4:	4b84      	ldr	r3, [pc, #528]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a83      	ldr	r2, [pc, #524]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b81      	ldr	r3, [pc, #516]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a80      	ldr	r2, [pc, #512]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f8b6 	bl	8001564 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe f8b2 	bl	8001564 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e2a8      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xc0>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f8a2 	bl	8001564 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe f89e 	bl	8001564 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e294      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003436:	4b6c      	ldr	r3, [pc, #432]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0xe8>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d075      	beq.n	800353e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003452:	4b65      	ldr	r3, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800345c:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d102      	bne.n	8003472 <HAL_RCC_OscConfig+0x136>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d002      	beq.n	8003478 <HAL_RCC_OscConfig+0x13c>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11f      	bne.n	80034b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003478:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_OscConfig+0x154>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e267      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	4952      	ldr	r1, [pc, #328]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034a4:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x2b0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe f80f 	bl	80014cc <HAL_InitTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d043      	beq.n	800353c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e253      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d023      	beq.n	8003508 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a48      	ldr	r2, [pc, #288]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe f84a 	bl	8001564 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fe f846 	bl	8001564 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e23c      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	4939      	ldr	r1, [pc, #228]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
 8003506:	e01a      	b.n	800353e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003508:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a36      	ldr	r2, [pc, #216]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800350e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f826 	bl	8001564 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fe f822 	bl	8001564 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e218      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x1e0>
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800353c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d03c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01c      	beq.n	800358c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003558:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fd ffff 	bl	8001564 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356a:	f7fd fffb 	bl	8001564 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1f1      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0ef      	beq.n	800356a <HAL_RCC_OscConfig+0x22e>
 800358a:	e01b      	b.n	80035c4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fd ffe2 	bl	8001564 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a4:	f7fd ffde 	bl	8001564 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1d4      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ef      	bne.n	80035a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80ab 	beq.w	8003728 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2b4>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e005      	b.n	80035f2 <HAL_RCC_OscConfig+0x2b6>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	20000004 	.word	0x20000004
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4baf      	ldr	r3, [pc, #700]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	4aae      	ldr	r2, [pc, #696]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	6593      	str	r3, [r2, #88]	; 0x58
 8003602:	4bac      	ldr	r3, [pc, #688]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	4ba9      	ldr	r3, [pc, #676]	; (80038b8 <HAL_RCC_OscConfig+0x57c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800361e:	4ba6      	ldr	r3, [pc, #664]	; (80038b8 <HAL_RCC_OscConfig+0x57c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4aa5      	ldr	r2, [pc, #660]	; (80038b8 <HAL_RCC_OscConfig+0x57c>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fd ff9b 	bl	8001564 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fd ff97 	bl	8001564 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e18d      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003644:	4b9c      	ldr	r3, [pc, #624]	; (80038b8 <HAL_RCC_OscConfig+0x57c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d108      	bne.n	800366a <HAL_RCC_OscConfig+0x32e>
 8003658:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	4a95      	ldr	r2, [pc, #596]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003668:	e024      	b.n	80036b4 <HAL_RCC_OscConfig+0x378>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d110      	bne.n	8003694 <HAL_RCC_OscConfig+0x358>
 8003672:	4b90      	ldr	r3, [pc, #576]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a8e      	ldr	r2, [pc, #568]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003682:	4b8c      	ldr	r3, [pc, #560]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a8a      	ldr	r2, [pc, #552]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_OscConfig+0x378>
 8003694:	4b87      	ldr	r3, [pc, #540]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	4a86      	ldr	r2, [pc, #536]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a4:	4b83      	ldr	r3, [pc, #524]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	4a82      	ldr	r2, [pc, #520]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d016      	beq.n	80036ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fd ff52 	bl	8001564 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fd ff4e 	bl	8001564 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e142      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ed      	beq.n	80036c4 <HAL_RCC_OscConfig+0x388>
 80036e8:	e015      	b.n	8003716 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd ff3b 	bl	8001564 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fd ff37 	bl	8001564 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e12b      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003708:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ed      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003716:	7ffb      	ldrb	r3, [r7, #31]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	4a64      	ldr	r2, [pc, #400]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03c      	beq.n	80037ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01c      	beq.n	8003776 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800373c:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800373e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003742:	4a5c      	ldr	r2, [pc, #368]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd ff0a 	bl	8001564 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003754:	f7fd ff06 	bl	8001564 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0fc      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003766:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <HAL_RCC_OscConfig+0x418>
 8003774:	e01b      	b.n	80037ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003776:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377c:	4a4d      	ldr	r2, [pc, #308]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd feed 	bl	8001564 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378e:	f7fd fee9 	bl	8001564 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0df      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a0:	4b44      	ldr	r3, [pc, #272]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80037a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ef      	bne.n	800378e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80d3 	beq.w	800395e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	f000 808d 	beq.w	80038e0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d15a      	bne.n	8003884 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80037d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd fec3 	bl	8001564 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd febf 	bl	8001564 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0b5      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003800:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_OscConfig+0x580>)
 8003806:	4013      	ands	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6a11      	ldr	r1, [r2, #32]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003810:	3a01      	subs	r2, #1
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800381a:	0212      	lsls	r2, r2, #8
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003822:	0852      	lsrs	r2, r2, #1
 8003824:	3a01      	subs	r2, #1
 8003826:	0552      	lsls	r2, r2, #21
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382e:	0852      	lsrs	r2, r2, #1
 8003830:	3a01      	subs	r2, #1
 8003832:	0652      	lsls	r2, r2, #25
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800383a:	06d2      	lsls	r2, r2, #27
 800383c:	430a      	orrs	r2, r1
 800383e:	491d      	ldr	r1, [pc, #116]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003840:	4313      	orrs	r3, r2
 8003842:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fe82 	bl	8001564 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fd fe7e 	bl	8001564 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e074      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x528>
 8003882:	e06c      	b.n	800395e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <HAL_RCC_OscConfig+0x578>)
 80038a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fe5a 	bl	8001564 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b2:	e00e      	b.n	80038d2 <HAL_RCC_OscConfig+0x596>
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
 80038bc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fe50 	bl	8001564 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e046      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_OscConfig+0x62c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x584>
 80038de:	e03e      	b.n	800395e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e039      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_RCC_OscConfig+0x62c>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d12c      	bne.n	800395a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d123      	bne.n	800395a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d11b      	bne.n	800395a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d113      	bne.n	800395a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d109      	bne.n	800395a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e11e      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d910      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b8e      	ldr	r3, [pc, #568]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 020f 	bic.w	r2, r3, #15
 800399a:	498c      	ldr	r1, [pc, #560]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e106      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d073      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d129      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c8:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0f4      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039d8:	f000 f966 	bl	8003ca8 <RCC_GetSysClockFreqFromPLLSource>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4a7c      	ldr	r2, [pc, #496]	; (8003bd4 <HAL_RCC_ClockConfig+0x268>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d93f      	bls.n	8003a66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039e6:	4b7a      	ldr	r3, [pc, #488]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d033      	beq.n	8003a66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12f      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0e:	4a70      	ldr	r2, [pc, #448]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e024      	b.n	8003a66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a24:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0c6      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a34:	4b66      	ldr	r3, [pc, #408]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0be      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a44:	f000 f8ce 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4a61      	ldr	r2, [pc, #388]	; (8003bd4 <HAL_RCC_ClockConfig+0x268>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d909      	bls.n	8003a66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a52:	4b5f      	ldr	r3, [pc, #380]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5a:	4a5d      	ldr	r2, [pc, #372]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b5a      	ldr	r3, [pc, #360]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4957      	ldr	r1, [pc, #348]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd fd74 	bl	8001564 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd fd70 	bl	8001564 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e095      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b4e      	ldr	r3, [pc, #312]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d023      	beq.n	8003afc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae0:	4a3b      	ldr	r2, [pc, #236]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4936      	ldr	r1, [pc, #216]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b80      	cmp	r3, #128	; 0x80
 8003b00:	d105      	bne.n	8003b0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4a32      	ldr	r2, [pc, #200]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0e:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d21d      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 020f 	bic.w	r2, r3, #15
 8003b24:	4929      	ldr	r1, [pc, #164]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b2c:	f7fd fd1a 	bl	8001564 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fd fd16 	bl	8001564 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e03b      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1ed      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4917      	ldr	r1, [pc, #92]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490f      	ldr	r1, [pc, #60]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b96:	f000 f825 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <HAL_RCC_ClockConfig+0x26c>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	fa21 f303 	lsr.w	r3, r1, r3
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x270>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x274>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fc86 	bl	80014cc <HAL_InitTick>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	04c4b400 	.word	0x04c4b400
 8003bd8:	08009b58 	.word	0x08009b58
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	20000004 	.word	0x20000004

08003be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e047      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c08:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e03e      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d136      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	091b      	lsrs	r3, r3, #4
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d10c      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c38:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c42:	68d2      	ldr	r2, [r2, #12]
 8003c44:	0a12      	lsrs	r2, r2, #8
 8003c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	617b      	str	r3, [r7, #20]
      break;
 8003c50:	e00c      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5c:	68d2      	ldr	r2, [r2, #12]
 8003c5e:	0a12      	lsrs	r2, r2, #8
 8003c60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c64:	fb02 f303 	mul.w	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
      break;
 8003c6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0e5b      	lsrs	r3, r3, #25
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	3301      	adds	r3, #1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e001      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c8c:	693b      	ldr	r3, [r7, #16]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d10c      	bne.n	8003ce6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cd6:	68d2      	ldr	r2, [r2, #12]
 8003cd8:	0a12      	lsrs	r2, r2, #8
 8003cda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
    break;
 8003ce4:	e00c      	b.n	8003d00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf0:	68d2      	ldr	r2, [r2, #12]
 8003cf2:	0a12      	lsrs	r2, r2, #8
 8003cf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
    break;
 8003cfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0e5b      	lsrs	r3, r3, #25
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d1a:	687b      	ldr	r3, [r7, #4]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	007a1200 	.word	0x007a1200
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d40:	2300      	movs	r3, #0
 8003d42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8098 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b40      	ldr	r3, [pc, #256]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	4a3f      	ldr	r2, [pc, #252]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a39      	ldr	r2, [pc, #228]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8a:	f7fd fbeb 	bl	8001564 <HAL_GetTick>
 8003d8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d90:	e009      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fd fbe7 	bl	8001564 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	74fb      	strb	r3, [r7, #19]
        break;
 8003da4:	e005      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ef      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d159      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003db8:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01e      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dd4:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd fba7 	bl	8001564 <HAL_GetTick>
 8003e16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e18:	e00b      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd fba3 	bl	8001564 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d902      	bls.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e30:	e006      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ec      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4903      	ldr	r1, [pc, #12]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e5c:	e008      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	74bb      	strb	r3, [r7, #18]
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e70:	7c7b      	ldrb	r3, [r7, #17]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4ba6      	ldr	r3, [pc, #664]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	4aa5      	ldr	r2, [pc, #660]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8e:	4ba0      	ldr	r3, [pc, #640]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f023 0203 	bic.w	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	499c      	ldr	r1, [pc, #624]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eb0:	4b97      	ldr	r3, [pc, #604]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f023 020c 	bic.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4994      	ldr	r1, [pc, #592]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed2:	4b8f      	ldr	r3, [pc, #572]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	498b      	ldr	r1, [pc, #556]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef4:	4b86      	ldr	r3, [pc, #536]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	4983      	ldr	r1, [pc, #524]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f16:	4b7e      	ldr	r3, [pc, #504]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	497a      	ldr	r1, [pc, #488]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f38:	4b75      	ldr	r3, [pc, #468]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	4972      	ldr	r1, [pc, #456]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	4969      	ldr	r1, [pc, #420]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7c:	4b64      	ldr	r3, [pc, #400]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4961      	ldr	r1, [pc, #388]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9e:	4b5c      	ldr	r3, [pc, #368]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	4958      	ldr	r1, [pc, #352]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	4950      	ldr	r1, [pc, #320]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe0:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a4a      	ldr	r2, [pc, #296]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff8:	4b45      	ldr	r3, [pc, #276]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4942      	ldr	r1, [pc, #264]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004030:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4934      	ldr	r1, [pc, #208]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004068:	4b29      	ldr	r3, [pc, #164]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4926      	ldr	r1, [pc, #152]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	4918      	ldr	r1, [pc, #96]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a12      	ldr	r2, [pc, #72]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	490a      	ldr	r1, [pc, #40]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f6:	d105      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004102:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004104:	7cbb      	ldrb	r3, [r7, #18]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e049      	b.n	80041ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fff6 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 fde2 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d001      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e04a      	b.n	8004272 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_TIM_Base_Start_IT+0xbc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d013      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_TIM_Base_Start_IT+0xc0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_TIM_Base_Start_IT+0xc4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_TIM_Base_Start_IT+0xc8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a19      	ldr	r2, [pc, #100]	; (8004290 <HAL_TIM_Base_Start_IT+0xcc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d115      	bne.n	800425c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_TIM_Base_Start_IT+0xd0>)
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b06      	cmp	r3, #6
 8004240:	d015      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xaa>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d011      	beq.n	800426e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	e008      	b.n	800426e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e000      	b.n	8004270 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	00010007 	.word	0x00010007

08004298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e049      	b.n	800433e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fe2a 	bl	8000f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 fd20 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x24>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e03c      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d109      	bne.n	8004386 <HAL_TIM_PWM_Start+0x3e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e02f      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e022      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d109      	bne.n	80043ba <HAL_TIM_PWM_Start+0x72>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e015      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d109      	bne.n	80043d4 <HAL_TIM_PWM_Start+0x8c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e008      	b.n	80043e6 <HAL_TIM_PWM_Start+0x9e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	bf14      	ite	ne
 80043e0:	2301      	movne	r3, #1
 80043e2:	2300      	moveq	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e097      	b.n	800451e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Start+0xb6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fc:	e023      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Start+0xc6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800440c:	e01b      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xd6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800441c:	e013      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xe6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800442c:	e00b      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b10      	cmp	r3, #16
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0xf6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800443c:	e003      	b.n	8004446 <HAL_TIM_PWM_Start+0xfe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2201      	movs	r2, #1
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 ffea 	bl	8005428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_TIM_PWM_Start+0x1e0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <HAL_TIM_PWM_Start+0x1e4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_TIM_PWM_Start+0x1e8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <HAL_TIM_PWM_Start+0x1ec>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_TIM_PWM_Start+0x13e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <HAL_TIM_PWM_Start+0x1f0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_Start+0x142>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_TIM_PWM_Start+0x144>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800449e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a20      	ldr	r2, [pc, #128]	; (8004528 <HAL_TIM_PWM_Start+0x1e0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d013      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <HAL_TIM_PWM_Start+0x1f4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <HAL_TIM_PWM_Start+0x1f8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_TIM_PWM_Start+0x1e4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_PWM_Start+0x194>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_TIM_PWM_Start+0x1e8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d115      	bne.n	8004508 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_TIM_PWM_Start+0x1fc>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d015      	beq.n	800451a <HAL_TIM_PWM_Start+0x1d2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d011      	beq.n	800451a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	e008      	b.n	800451a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e000      	b.n	800451c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40013400 	.word	0x40013400
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	00010007 	.word	0x00010007

08004548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e097      	b.n	800468c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fc fd19 	bl	8000fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800458c:	f023 0307 	bic.w	r3, r3, #7
 8004590:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 fbbd 	bl	8004d1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	4313      	orrs	r3, r2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045e8:	f023 030c 	bic.w	r3, r3, #12
 80045ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	4313      	orrs	r3, r2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	031b      	lsls	r3, r3, #12
 8004618:	4313      	orrs	r3, r2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	4313      	orrs	r3, r2
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d110      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ca:	7b7b      	ldrb	r3, [r7, #13]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e068      	b.n	80047a6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e4:	e031      	b.n	800474a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d110      	bne.n	800470e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046f2:	7b3b      	ldrb	r3, [r7, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e054      	b.n	80047a6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800470c:	e01d      	b.n	800474a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d108      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004714:	7bbb      	ldrb	r3, [r7, #14]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d105      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800471a:	7b7b      	ldrb	r3, [r7, #13]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d102      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004720:	7b3b      	ldrb	r3, [r7, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e03d      	b.n	80047a6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_TIM_Encoder_Start+0xc2>
 8004750:	2b04      	cmp	r3, #4
 8004752:	d008      	beq.n	8004766 <HAL_TIM_Encoder_Start+0xd2>
 8004754:	e00f      	b.n	8004776 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2201      	movs	r2, #1
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fe62 	bl	8005428 <TIM_CCxChannelCmd>
      break;
 8004764:	e016      	b.n	8004794 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	2104      	movs	r1, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fe5a 	bl	8005428 <TIM_CCxChannelCmd>
      break;
 8004774:	e00e      	b.n	8004794 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe52 	bl	8005428 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2201      	movs	r2, #1
 800478a:	2104      	movs	r1, #4
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fe4b 	bl	8005428 <TIM_CCxChannelCmd>
      break;
 8004792:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d122      	bne.n	800480a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d11b      	bne.n	800480a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0202 	mvn.w	r2, #2
 80047da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa75 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 80047f6:	e005      	b.n	8004804 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa67 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa78 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d122      	bne.n	800485e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d11b      	bne.n	800485e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f06f 0204 	mvn.w	r2, #4
 800482e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fa4b 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 800484a:	e005      	b.n	8004858 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fa3d 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa4e 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d122      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b08      	cmp	r3, #8
 8004878:	d11b      	bne.n	80048b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0208 	mvn.w	r2, #8
 8004882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2204      	movs	r2, #4
 8004888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa21 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 800489e:	e005      	b.n	80048ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa13 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa24 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d122      	bne.n	8004906 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d11b      	bne.n	8004906 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0210 	mvn.w	r2, #16
 80048d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2208      	movs	r2, #8
 80048dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9f7 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 80048f2:	e005      	b.n	8004900 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9e9 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9fa 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10e      	bne.n	8004932 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0201 	mvn.w	r2, #1
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fc fa33 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d10e      	bne.n	800495e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d107      	bne.n	800495e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 feb7 	bl	80056cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 feaa 	bl	80056e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9a8 	bl	8004d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0220 	mvn.w	r2, #32
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fe6a 	bl	80056b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f2:	d10f      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fe70 	bl	80056f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a22:	d10f      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fe62 	bl	8005708 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a52:	d10f      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fe54 	bl	800571c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a82:	d10f      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fe46 	bl	8005730 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0fd      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b14      	cmp	r3, #20
 8004ad2:	f200 80f0 	bhi.w	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004cb7 	.word	0x08004cb7
 8004ae4:	08004cb7 	.word	0x08004cb7
 8004ae8:	08004cb7 	.word	0x08004cb7
 8004aec:	08004b71 	.word	0x08004b71
 8004af0:	08004cb7 	.word	0x08004cb7
 8004af4:	08004cb7 	.word	0x08004cb7
 8004af8:	08004cb7 	.word	0x08004cb7
 8004afc:	08004bb3 	.word	0x08004bb3
 8004b00:	08004cb7 	.word	0x08004cb7
 8004b04:	08004cb7 	.word	0x08004cb7
 8004b08:	08004cb7 	.word	0x08004cb7
 8004b0c:	08004bf3 	.word	0x08004bf3
 8004b10:	08004cb7 	.word	0x08004cb7
 8004b14:	08004cb7 	.word	0x08004cb7
 8004b18:	08004cb7 	.word	0x08004cb7
 8004b1c:	08004c35 	.word	0x08004c35
 8004b20:	08004cb7 	.word	0x08004cb7
 8004b24:	08004cb7 	.word	0x08004cb7
 8004b28:	08004cb7 	.word	0x08004cb7
 8004b2c:	08004c75 	.word	0x08004c75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f980 	bl	8004e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0208 	orr.w	r2, r2, #8
 8004b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6999      	ldr	r1, [r3, #24]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	619a      	str	r2, [r3, #24]
      break;
 8004b6e:	e0a3      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f9f0 	bl	8004f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	619a      	str	r2, [r3, #24]
      break;
 8004bb0:	e082      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fa59 	bl	8005070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0208 	orr.w	r2, r2, #8
 8004bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69d9      	ldr	r1, [r3, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	61da      	str	r2, [r3, #28]
      break;
 8004bf0:	e062      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fac1 	bl	8005180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	021a      	lsls	r2, r3, #8
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	61da      	str	r2, [r3, #28]
      break;
 8004c32:	e041      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb2a 	bl	8005294 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0208 	orr.w	r2, r2, #8
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c72:	e021      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb6e 	bl	800535c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	021a      	lsls	r2, r3, #8
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004cb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop

08004ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3c      	ldr	r2, [pc, #240]	; (8004e20 <TIM_Base_SetConfig+0x104>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a39      	ldr	r2, [pc, #228]	; (8004e24 <TIM_Base_SetConfig+0x108>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a38      	ldr	r2, [pc, #224]	; (8004e28 <TIM_Base_SetConfig+0x10c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a37      	ldr	r2, [pc, #220]	; (8004e2c <TIM_Base_SetConfig+0x110>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <TIM_Base_SetConfig+0x104>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <TIM_Base_SetConfig+0x108>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a29      	ldr	r2, [pc, #164]	; (8004e28 <TIM_Base_SetConfig+0x10c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a28      	ldr	r2, [pc, #160]	; (8004e2c <TIM_Base_SetConfig+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a27      	ldr	r2, [pc, #156]	; (8004e30 <TIM_Base_SetConfig+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <TIM_Base_SetConfig+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <TIM_Base_SetConfig+0x11c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <TIM_Base_SetConfig+0x104>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0xe8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <TIM_Base_SetConfig+0x110>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0xe8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a10      	ldr	r2, [pc, #64]	; (8004e30 <TIM_Base_SetConfig+0x114>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0xe8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <TIM_Base_SetConfig+0x118>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xe8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <TIM_Base_SetConfig+0x11c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800

08004e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0302 	bic.w	r3, r3, #2
 8004e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <TIM_OC1_SetConfig+0x10c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_OC1_SetConfig+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <TIM_OC1_SetConfig+0x110>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_OC1_SetConfig+0x80>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <TIM_OC1_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_OC1_SetConfig+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <TIM_OC1_SetConfig+0x118>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC1_SetConfig+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <TIM_OC1_SetConfig+0x11c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10c      	bne.n	8004ed6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0308 	bic.w	r3, r3, #8
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <TIM_OC1_SetConfig+0x10c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00f      	beq.n	8004efe <TIM_OC1_SetConfig+0xc2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <TIM_OC1_SetConfig+0x110>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <TIM_OC1_SetConfig+0xc2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <TIM_OC1_SetConfig+0x114>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d007      	beq.n	8004efe <TIM_OC1_SetConfig+0xc2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <TIM_OC1_SetConfig+0x118>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_OC1_SetConfig+0xc2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <TIM_OC1_SetConfig+0x11c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d111      	bne.n	8004f22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800

08004f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0320 	bic.w	r3, r3, #32
 8004faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a28      	ldr	r2, [pc, #160]	; (800505c <TIM_OC2_SetConfig+0x100>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_OC2_SetConfig+0x6c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a27      	ldr	r2, [pc, #156]	; (8005060 <TIM_OC2_SetConfig+0x104>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d10d      	bne.n	8004fe4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	; (800505c <TIM_OC2_SetConfig+0x100>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00f      	beq.n	800500c <TIM_OC2_SetConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <TIM_OC2_SetConfig+0x104>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_OC2_SetConfig+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <TIM_OC2_SetConfig+0x108>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_OC2_SetConfig+0xb0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1a      	ldr	r2, [pc, #104]	; (8005068 <TIM_OC2_SetConfig+0x10c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_OC2_SetConfig+0xb0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a19      	ldr	r2, [pc, #100]	; (800506c <TIM_OC2_SetConfig+0x110>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d113      	bne.n	8005034 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40013400 	.word	0x40013400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a27      	ldr	r2, [pc, #156]	; (800516c <TIM_OC3_SetConfig+0xfc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC3_SetConfig+0x6a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <TIM_OC3_SetConfig+0x100>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <TIM_OC3_SetConfig+0xfc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00f      	beq.n	800511e <TIM_OC3_SetConfig+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <TIM_OC3_SetConfig+0x100>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_OC3_SetConfig+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1a      	ldr	r2, [pc, #104]	; (8005174 <TIM_OC3_SetConfig+0x104>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_OC3_SetConfig+0xae>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <TIM_OC3_SetConfig+0x108>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_OC3_SetConfig+0xae>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <TIM_OC3_SetConfig+0x10c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d113      	bne.n	8005146 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	621a      	str	r2, [r3, #32]
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40013400 	.word	0x40013400
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800

08005180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a28      	ldr	r2, [pc, #160]	; (8005280 <TIM_OC4_SetConfig+0x100>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC4_SetConfig+0x6c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a27      	ldr	r2, [pc, #156]	; (8005284 <TIM_OC4_SetConfig+0x104>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10d      	bne.n	8005208 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005206:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <TIM_OC4_SetConfig+0x100>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00f      	beq.n	8005230 <TIM_OC4_SetConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <TIM_OC4_SetConfig+0x104>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_OC4_SetConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <TIM_OC4_SetConfig+0x108>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_OC4_SetConfig+0xb0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1a      	ldr	r2, [pc, #104]	; (800528c <TIM_OC4_SetConfig+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC4_SetConfig+0xb0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a19      	ldr	r2, [pc, #100]	; (8005290 <TIM_OC4_SetConfig+0x110>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d113      	bne.n	8005258 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005236:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800523e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40013400 	.word	0x40013400
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800

08005294 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <TIM_OC5_SetConfig+0xb4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_OC5_SetConfig+0x7a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a16      	ldr	r2, [pc, #88]	; (800534c <TIM_OC5_SetConfig+0xb8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_OC5_SetConfig+0x7a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <TIM_OC5_SetConfig+0xbc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_OC5_SetConfig+0x7a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a14      	ldr	r2, [pc, #80]	; (8005354 <TIM_OC5_SetConfig+0xc0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC5_SetConfig+0x7a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a13      	ldr	r2, [pc, #76]	; (8005358 <TIM_OC5_SetConfig+0xc4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d109      	bne.n	8005322 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	621a      	str	r2, [r3, #32]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40013400 	.word	0x40013400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	051b      	lsls	r3, r3, #20
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <TIM_OC6_SetConfig+0xb8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00f      	beq.n	80053d8 <TIM_OC6_SetConfig+0x7c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <TIM_OC6_SetConfig+0xbc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_OC6_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <TIM_OC6_SetConfig+0xc0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_OC6_SetConfig+0x7c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a15      	ldr	r2, [pc, #84]	; (8005420 <TIM_OC6_SetConfig+0xc4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC6_SetConfig+0x7c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a14      	ldr	r2, [pc, #80]	; (8005424 <TIM_OC6_SetConfig+0xc8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d109      	bne.n	80053ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	029b      	lsls	r3, r3, #10
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800

08005428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	2201      	movs	r2, #1
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1a      	ldr	r2, [r3, #32]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	43db      	mvns	r3, r3
 800544a:	401a      	ands	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e065      	b.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d013      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a12      	ldr	r2, [pc, #72]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10c      	bne.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40014000 	.word	0x40014000

08005578 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005590:	2302      	movs	r3, #2
 8005592:	e087      	b.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d106      	bne.n	8005630 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d126      	bne.n	8005692 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	051b      	lsls	r3, r3, #20
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d106      	bne.n	8005692 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40013400 	.word	0x40013400

080056b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005754:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005758:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800577a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800577e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	b29b      	uxth	r3, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	4013      	ands	r3, r2
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057a8:	b084      	sub	sp, #16
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	f107 0014 	add.w	r0, r7, #20
 80057b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	b004      	add	sp, #16
 80057e8:	4770      	bx	lr
	...

080057ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b09b      	sub	sp, #108	; 0x6c
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	78db      	ldrb	r3, [r3, #3]
 800581a:	2b03      	cmp	r3, #3
 800581c:	d81f      	bhi.n	800585e <USB_ActivateEndpoint+0x72>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <USB_ActivateEndpoint+0x38>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005835 	.word	0x08005835
 8005828:	08005851 	.word	0x08005851
 800582c:	08005867 	.word	0x08005867
 8005830:	08005843 	.word	0x08005843
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005834:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800583c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005840:	e012      	b.n	8005868 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005842:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005846:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800584a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800584e:	e00b      	b.n	8005868 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005850:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005858:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800585c:	e004      	b.n	8005868 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005864:	e000      	b.n	8005868 <USB_ActivateEndpoint+0x7c>
      break;
 8005866:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	b21b      	sxth	r3, r3
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	b21a      	sxth	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	441a      	add	r2, r3
 80058bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	7b1b      	ldrb	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 8149 	bne.w	8005b70 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8084 	beq.w	80059f0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	00da      	lsls	r2, r3, #3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	88db      	ldrh	r3, [r3, #6]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	81fb      	strh	r3, [r7, #14]
 800592a:	89fb      	ldrh	r3, [r7, #14]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01b      	beq.n	800596c <USB_ActivateEndpoint+0x180>
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	81bb      	strh	r3, [r7, #12]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	89bb      	ldrh	r3, [r7, #12]
 8005958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005968:	b29b      	uxth	r3, r3
 800596a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	78db      	ldrb	r3, [r3, #3]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d020      	beq.n	80059b6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598a:	813b      	strh	r3, [r7, #8]
 800598c:	893b      	ldrh	r3, [r7, #8]
 800598e:	f083 0320 	eor.w	r3, r3, #32
 8005992:	813b      	strh	r3, [r7, #8]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	893b      	ldrh	r3, [r7, #8]
 80059a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]
 80059b4:	e27f      	b.n	8005eb6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059cc:	817b      	strh	r3, [r7, #10]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	897b      	ldrh	r3, [r7, #10]
 80059da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	8013      	strh	r3, [r2, #0]
 80059ee:	e262      	b.n	8005eb6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	4413      	add	r3, r2
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	00da      	lsls	r2, r3, #3
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	88db      	ldrh	r3, [r3, #6]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	4413      	add	r3, r2
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	00da      	lsls	r2, r3, #3
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d112      	bne.n	8005a76 <USB_ActivateEndpoint+0x28a>
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e02f      	b.n	8005ad6 <USB_ActivateEndpoint+0x2ea>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7c:	d813      	bhi.n	8005aa6 <USB_ActivateEndpoint+0x2ba>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	663b      	str	r3, [r7, #96]	; 0x60
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <USB_ActivateEndpoint+0x2ac>
 8005a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a94:	3301      	adds	r3, #1
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e017      	b.n	8005ad6 <USB_ActivateEndpoint+0x2ea>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	663b      	str	r3, [r7, #96]	; 0x60
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <USB_ActivateEndpoint+0x2d4>
 8005aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005abc:	3b01      	subs	r3, #1
 8005abe:	663b      	str	r3, [r7, #96]	; 0x60
 8005ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	029b      	lsls	r3, r3, #10
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	83fb      	strh	r3, [r7, #30]
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
 8005ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01b      	beq.n	8005b26 <USB_ActivateEndpoint+0x33a>
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b04:	83bb      	strh	r3, [r7, #28]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	8bbb      	ldrh	r3, [r7, #28]
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	837b      	strh	r3, [r7, #26]
 8005b3e:	8b7b      	ldrh	r3, [r7, #26]
 8005b40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b44:	837b      	strh	r3, [r7, #26]
 8005b46:	8b7b      	ldrh	r3, [r7, #26]
 8005b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b4c:	837b      	strh	r3, [r7, #26]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	8b7b      	ldrh	r3, [r7, #26]
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]
 8005b6e:	e1a2      	b.n	8005eb6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bbc:	4413      	add	r3, r2
 8005bbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	00da      	lsls	r2, r3, #3
 8005bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bce:	657b      	str	r3, [r7, #84]	; 0x54
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	891b      	ldrh	r3, [r3, #8]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	653b      	str	r3, [r7, #80]	; 0x50
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf0:	4413      	add	r3, r2
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00da      	lsls	r2, r3, #3
 8005bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	895b      	ldrh	r3, [r3, #10]
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f040 8091 	bne.w	8005d40 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01b      	beq.n	8005c6e <USB_ActivateEndpoint+0x482>
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01b      	beq.n	8005cbe <USB_ActivateEndpoint+0x4d2>
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005cde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ce0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ce4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	8013      	strh	r3, [r2, #0]
 8005d3e:	e0ba      	b.n	8005eb6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01d      	beq.n	8005d98 <USB_ActivateEndpoint+0x5ac>
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005da8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01d      	beq.n	8005df0 <USB_ActivateEndpoint+0x604>
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	78db      	ldrb	r3, [r3, #3]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d024      	beq.n	8005e42 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e16:	f083 0320 	eor.w	r3, r3, #32
 8005e1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8013      	strh	r3, [r2, #0]
 8005e40:	e01d      	b.n	8005e7e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005eb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	376c      	adds	r7, #108	; 0x6c
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop

08005ec8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b08d      	sub	sp, #52	; 0x34
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	7b1b      	ldrb	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 808e 	bne.w	8005ff8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d044      	beq.n	8005f6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	81bb      	strh	r3, [r7, #12]
 8005ef2:	89bb      	ldrh	r3, [r7, #12]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <USB_DeactivateEndpoint+0x6c>
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	817b      	strh	r3, [r7, #10]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	897b      	ldrh	r3, [r7, #10]
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4a:	813b      	strh	r3, [r7, #8]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	893b      	ldrh	r3, [r7, #8]
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
 8005f6c:	e192      	b.n	8006294 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	827b      	strh	r3, [r7, #18]
 8005f7c:	8a7b      	ldrh	r3, [r7, #18]
 8005f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01b      	beq.n	8005fbe <USB_DeactivateEndpoint+0xf6>
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	823b      	strh	r3, [r7, #16]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	8a3b      	ldrh	r3, [r7, #16]
 8005faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	81fb      	strh	r3, [r7, #14]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	89fb      	ldrh	r3, [r7, #14]
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
 8005ff6:	e14d      	b.n	8006294 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 80a5 	bne.w	800614c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	843b      	strh	r3, [r7, #32]
 8006010:	8c3b      	ldrh	r3, [r7, #32]
 8006012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01b      	beq.n	8006052 <USB_DeactivateEndpoint+0x18a>
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	83fb      	strh	r3, [r7, #30]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	441a      	add	r2, r3
 800603c:	8bfb      	ldrh	r3, [r7, #30]
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	83bb      	strh	r3, [r7, #28]
 8006060:	8bbb      	ldrh	r3, [r7, #28]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01b      	beq.n	80060a2 <USB_DeactivateEndpoint+0x1da>
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006080:	837b      	strh	r3, [r7, #26]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	8b7b      	ldrh	r3, [r7, #26]
 800608e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800609e:	b29b      	uxth	r3, r3
 80060a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b8:	833b      	strh	r3, [r7, #24]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8b3b      	ldrh	r3, [r7, #24]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	82fb      	strh	r3, [r7, #22]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8afb      	ldrh	r3, [r7, #22]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006128:	82bb      	strh	r3, [r7, #20]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	8abb      	ldrh	r3, [r7, #20]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	e0a3      	b.n	8006294 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800615a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800615c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <USB_DeactivateEndpoint+0x2d4>
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006198:	b29b      	uxth	r3, r3
 800619a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <USB_DeactivateEndpoint+0x324>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	441a      	add	r2, r3
 80061d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	b29b      	uxth	r3, r3
 8006222:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	847b      	strh	r3, [r7, #34]	; 0x22
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3734      	adds	r7, #52	; 0x34
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b0c4      	sub	sp, #272	; 0x110
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	6018      	str	r0, [r3, #0]
 80062ac:	463b      	mov	r3, r7
 80062ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062b0:	463b      	mov	r3, r7
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	f040 8566 	bne.w	8006d88 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	463b      	mov	r3, r7
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d905      	bls.n	80062d8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80062cc:	463b      	mov	r3, r7
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062d6:	e004      	b.n	80062e2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80062d8:	463b      	mov	r3, r7
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	7b1b      	ldrb	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d12c      	bne.n	8006346 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6959      	ldr	r1, [r3, #20]
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	88da      	ldrh	r2, [r3, #6]
 80062f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	1d38      	adds	r0, r7, #4
 8006300:	6800      	ldr	r0, [r0, #0]
 8006302:	f001 fa43 	bl	800778c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	00da      	lsls	r2, r3, #3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4413      	add	r3, r2
 800632a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800632e:	f107 0310 	add.w	r3, r7, #16
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006338:	b29a      	uxth	r2, r3
 800633a:	f107 0310 	add.w	r3, r7, #16
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	f000 bcec 	b.w	8006d1e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	78db      	ldrb	r3, [r3, #3]
 800634c:	2b02      	cmp	r3, #2
 800634e:	f040 8356 	bne.w	80069fe <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6a1a      	ldr	r2, [r3, #32]
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	429a      	cmp	r2, r3
 8006360:	f240 82fa 	bls.w	8006958 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063b2:	463b      	mov	r3, r7
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063bc:	1ad2      	subs	r2, r2, r3
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	463b      	mov	r3, r7
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 815e 	beq.w	800669c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
 80063e6:	463b      	mov	r3, r7
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d164      	bne.n	80064ba <USB_EPStartXfer+0x218>
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f6:	1d3b      	adds	r3, r7, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	4413      	add	r3, r2
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00da      	lsls	r2, r3, #3
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	4413      	add	r3, r2
 8006414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
 800641a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800641e:	2b00      	cmp	r3, #0
 8006420:	d112      	bne.n	8006448 <USB_EPStartXfer+0x1a6>
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800642c:	b29a      	uxth	r2, r3
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006440:	b29a      	uxth	r2, r3
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e054      	b.n	80064f2 <USB_EPStartXfer+0x250>
 8006448:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800644c:	2b3e      	cmp	r3, #62	; 0x3e
 800644e:	d817      	bhi.n	8006480 <USB_EPStartXfer+0x1de>
 8006450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800645a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <USB_EPStartXfer+0x1ce>
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	3301      	adds	r3, #1
 800646c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	b29b      	uxth	r3, r3
 8006476:	029b      	lsls	r3, r3, #10
 8006478:	b29a      	uxth	r2, r3
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e038      	b.n	80064f2 <USB_EPStartXfer+0x250>
 8006480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800648a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <USB_EPStartXfer+0x1fe>
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649a:	3b01      	subs	r3, #1
 800649c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	029b      	lsls	r3, r3, #10
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e01b      	b.n	80064f2 <USB_EPStartXfer+0x250>
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d116      	bne.n	80064f2 <USB_EPStartXfer+0x250>
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	4413      	add	r3, r2
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	00da      	lsls	r2, r3, #3
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	4413      	add	r3, r2
 80064e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
 80064e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	895b      	ldrh	r3, [r3, #10]
 80064f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6959      	ldr	r1, [r3, #20]
 8006502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006506:	b29b      	uxth	r3, r3
 8006508:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800650c:	1d38      	adds	r0, r7, #4
 800650e:	6800      	ldr	r0, [r0, #0]
 8006510:	f001 f93c 	bl	800778c <USB_WritePMA>
            ep->xfer_buff += len;
 8006514:	463b      	mov	r3, r7
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800651e:	441a      	add	r2, r3
 8006520:	463b      	mov	r3, r7
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006526:	463b      	mov	r3, r7
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	429a      	cmp	r2, r3
 8006534:	d90e      	bls.n	8006554 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006540:	463b      	mov	r3, r7
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	463b      	mov	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	621a      	str	r2, [r3, #32]
 8006552:	e008      	b.n	8006566 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006566:	463b      	mov	r3, r7
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d164      	bne.n	800663a <USB_EPStartXfer+0x398>
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	1d3b      	adds	r3, r7, #4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	463b      	mov	r3, r7
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	00da      	lsls	r2, r3, #3
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d112      	bne.n	80065c8 <USB_EPStartXfer+0x326>
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e057      	b.n	8006678 <USB_EPStartXfer+0x3d6>
 80065c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065cc:	2b3e      	cmp	r3, #62	; 0x3e
 80065ce:	d817      	bhi.n	8006600 <USB_EPStartXfer+0x35e>
 80065d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <USB_EPStartXfer+0x34e>
 80065e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ea:	3301      	adds	r3, #1
 80065ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e03b      	b.n	8006678 <USB_EPStartXfer+0x3d6>
 8006600:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800660a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <USB_EPStartXfer+0x37e>
 8006616:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800661a:	3b01      	subs	r3, #1
 800661c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006620:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006624:	b29b      	uxth	r3, r3
 8006626:	029b      	lsls	r3, r3, #10
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006632:	b29a      	uxth	r2, r3
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	e01e      	b.n	8006678 <USB_EPStartXfer+0x3d6>
 800663a:	463b      	mov	r3, r7
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d119      	bne.n	8006678 <USB_EPStartXfer+0x3d6>
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	4413      	add	r3, r2
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	00da      	lsls	r2, r3, #3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	4413      	add	r3, r2
 8006668:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800666c:	623b      	str	r3, [r7, #32]
 800666e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006672:	b29a      	uxth	r2, r3
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	891b      	ldrh	r3, [r3, #8]
 800667e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6959      	ldr	r1, [r3, #20]
 8006688:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800668c:	b29b      	uxth	r3, r3
 800668e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006692:	1d38      	adds	r0, r7, #4
 8006694:	6800      	ldr	r0, [r0, #0]
 8006696:	f001 f879 	bl	800778c <USB_WritePMA>
 800669a:	e340      	b.n	8006d1e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	785b      	ldrb	r3, [r3, #1]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d164      	bne.n	8006770 <USB_EPStartXfer+0x4ce>
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ac:	1d3b      	adds	r3, r7, #4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	4413      	add	r3, r2
 80066bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066be:	463b      	mov	r3, r7
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00da      	lsls	r2, r3, #3
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d112      	bne.n	80066fe <USB_EPStartXfer+0x45c>
 80066d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	e057      	b.n	80067ae <USB_EPStartXfer+0x50c>
 80066fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006702:	2b3e      	cmp	r3, #62	; 0x3e
 8006704:	d817      	bhi.n	8006736 <USB_EPStartXfer+0x494>
 8006706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <USB_EPStartXfer+0x484>
 800671c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006720:	3301      	adds	r3, #1
 8006722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672a:	b29b      	uxth	r3, r3
 800672c:	029b      	lsls	r3, r3, #10
 800672e:	b29a      	uxth	r2, r3
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e03b      	b.n	80067ae <USB_EPStartXfer+0x50c>
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006740:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <USB_EPStartXfer+0x4b4>
 800674c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006750:	3b01      	subs	r3, #1
 8006752:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006768:	b29a      	uxth	r2, r3
 800676a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e01e      	b.n	80067ae <USB_EPStartXfer+0x50c>
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d119      	bne.n	80067ae <USB_EPStartXfer+0x50c>
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	657b      	str	r3, [r7, #84]	; 0x54
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678e:	4413      	add	r3, r2
 8006790:	657b      	str	r3, [r7, #84]	; 0x54
 8006792:	463b      	mov	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	00da      	lsls	r2, r3, #3
 800679a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679c:	4413      	add	r3, r2
 800679e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067a2:	653b      	str	r3, [r7, #80]	; 0x50
 80067a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	891b      	ldrh	r3, [r3, #8]
 80067b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067b8:	463b      	mov	r3, r7
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6959      	ldr	r1, [r3, #20]
 80067be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067c8:	1d38      	adds	r0, r7, #4
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	f000 ffde 	bl	800778c <USB_WritePMA>
            ep->xfer_buff += len;
 80067d0:	463b      	mov	r3, r7
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067da:	441a      	add	r2, r3
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067e2:	463b      	mov	r3, r7
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d90e      	bls.n	8006810 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80067fc:	463b      	mov	r3, r7
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6a1a      	ldr	r2, [r3, #32]
 8006802:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	463b      	mov	r3, r7
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	621a      	str	r2, [r3, #32]
 800680e:	e008      	b.n	8006822 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006810:	463b      	mov	r3, r7
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	647b      	str	r3, [r7, #68]	; 0x44
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d164      	bne.n	80068fc <USB_EPStartXfer+0x65a>
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006838:	1d3b      	adds	r3, r7, #4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006840:	b29b      	uxth	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	4413      	add	r3, r2
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	00da      	lsls	r2, r3, #3
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	4413      	add	r3, r2
 8006856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
 800685c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006860:	2b00      	cmp	r3, #0
 8006862:	d112      	bne.n	800688a <USB_EPStartXfer+0x5e8>
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800686e:	b29a      	uxth	r2, r3
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006882:	b29a      	uxth	r2, r3
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e054      	b.n	8006934 <USB_EPStartXfer+0x692>
 800688a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800688e:	2b3e      	cmp	r3, #62	; 0x3e
 8006890:	d817      	bhi.n	80068c2 <USB_EPStartXfer+0x620>
 8006892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800689c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <USB_EPStartXfer+0x610>
 80068a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ac:	3301      	adds	r3, #1
 80068ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e038      	b.n	8006934 <USB_EPStartXfer+0x692>
 80068c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <USB_EPStartXfer+0x640>
 80068d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068dc:	3b01      	subs	r3, #1
 80068de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e01b      	b.n	8006934 <USB_EPStartXfer+0x692>
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d116      	bne.n	8006934 <USB_EPStartXfer+0x692>
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	4413      	add	r3, r2
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	00da      	lsls	r2, r3, #3
 8006920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006922:	4413      	add	r3, r2
 8006924:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006928:	643b      	str	r3, [r7, #64]	; 0x40
 800692a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800692e:	b29a      	uxth	r2, r3
 8006930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006934:	463b      	mov	r3, r7
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	895b      	ldrh	r3, [r3, #10]
 800693a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6959      	ldr	r1, [r3, #20]
 8006944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006948:	b29b      	uxth	r3, r3
 800694a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800694e:	1d38      	adds	r0, r7, #4
 8006950:	6800      	ldr	r0, [r0, #0]
 8006952:	f000 ff1b 	bl	800778c <USB_WritePMA>
 8006956:	e1e2      	b.n	8006d1e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006980:	1d3b      	adds	r3, r7, #4
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	463b      	mov	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	663b      	str	r3, [r7, #96]	; 0x60
 80069ac:	1d3b      	adds	r3, r7, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ba:	4413      	add	r3, r2
 80069bc:	663b      	str	r3, [r7, #96]	; 0x60
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	00da      	lsls	r2, r3, #3
 80069c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069c8:	4413      	add	r3, r2
 80069ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069da:	463b      	mov	r3, r7
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	891b      	ldrh	r3, [r3, #8]
 80069e0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069e4:	463b      	mov	r3, r7
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6959      	ldr	r1, [r3, #20]
 80069ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069f4:	1d38      	adds	r0, r7, #4
 80069f6:	6800      	ldr	r0, [r0, #0]
 80069f8:	f000 fec8 	bl	800778c <USB_WritePMA>
 80069fc:	e18f      	b.n	8006d1e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069fe:	1d3b      	adds	r3, r7, #4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	463b      	mov	r3, r7
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 808f 	beq.w	8006b38 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a20:	463b      	mov	r3, r7
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d164      	bne.n	8006af4 <USB_EPStartXfer+0x852>
 8006a2a:	1d3b      	adds	r3, r7, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a30:	1d3b      	adds	r3, r7, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a3e:	4413      	add	r3, r2
 8006a40:	673b      	str	r3, [r7, #112]	; 0x70
 8006a42:	463b      	mov	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	00da      	lsls	r2, r3, #3
 8006a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d112      	bne.n	8006a82 <USB_EPStartXfer+0x7e0>
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e054      	b.n	8006b2c <USB_EPStartXfer+0x88a>
 8006a82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a86:	2b3e      	cmp	r3, #62	; 0x3e
 8006a88:	d817      	bhi.n	8006aba <USB_EPStartXfer+0x818>
 8006a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <USB_EPStartXfer+0x808>
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	029b      	lsls	r3, r3, #10
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e038      	b.n	8006b2c <USB_EPStartXfer+0x88a>
 8006aba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <USB_EPStartXfer+0x838>
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	029b      	lsls	r3, r3, #10
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	e01b      	b.n	8006b2c <USB_EPStartXfer+0x88a>
 8006af4:	463b      	mov	r3, r7
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d116      	bne.n	8006b2c <USB_EPStartXfer+0x88a>
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0c:	4413      	add	r3, r2
 8006b0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	00da      	lsls	r2, r3, #3
 8006b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b20:	677b      	str	r3, [r7, #116]	; 0x74
 8006b22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	895b      	ldrh	r3, [r3, #10]
 8006b32:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b36:	e097      	b.n	8006c68 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d168      	bne.n	8006c14 <USB_EPStartXfer+0x972>
 8006b42:	1d3b      	adds	r3, r7, #4
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b60:	463b      	mov	r3, r7
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	00da      	lsls	r2, r3, #3
 8006b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d112      	bne.n	8006ba2 <USB_EPStartXfer+0x900>
 8006b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b8a:	801a      	strh	r2, [r3, #0]
 8006b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e05d      	b.n	8006c5e <USB_EPStartXfer+0x9bc>
 8006ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba8:	d817      	bhi.n	8006bda <USB_EPStartXfer+0x938>
 8006baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <USB_EPStartXfer+0x928>
 8006bc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e041      	b.n	8006c5e <USB_EPStartXfer+0x9bc>
 8006bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USB_EPStartXfer+0x958>
 8006bf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	029b      	lsls	r3, r3, #10
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e024      	b.n	8006c5e <USB_EPStartXfer+0x9bc>
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d11f      	bne.n	8006c5e <USB_EPStartXfer+0x9bc>
 8006c1e:	1d3b      	adds	r3, r7, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c26:	1d3b      	adds	r3, r7, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c36:	4413      	add	r3, r2
 8006c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	00da      	lsls	r2, r3, #3
 8006c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c48:	4413      	add	r3, r2
 8006c4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c5e:	463b      	mov	r3, r7
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	891b      	ldrh	r3, [r3, #8]
 8006c64:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c68:	463b      	mov	r3, r7
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6959      	ldr	r1, [r3, #20]
 8006c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c78:	1d38      	adds	r0, r7, #4
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	f000 fd86 	bl	800778c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d122      	bne.n	8006cd0 <USB_EPStartXfer+0xa2e>
 8006c8a:	1d3b      	adds	r3, r7, #4
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	463b      	mov	r3, r7
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006ca8:	1d3b      	adds	r3, r7, #4
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	463b      	mov	r3, r7
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
 8006cce:	e026      	b.n	8006d1e <USB_EPStartXfer+0xa7c>
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d121      	bne.n	8006d1e <USB_EPStartXfer+0xa7c>
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	463b      	mov	r3, r7
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006cf8:	1d3b      	adds	r3, r7, #4
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d1e:	1d3b      	adds	r3, r7, #4
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	463b      	mov	r3, r7
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f107 020e 	add.w	r2, r7, #14
 8006d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3c:	8013      	strh	r3, [r2, #0]
 8006d3e:	f107 030e 	add.w	r3, r7, #14
 8006d42:	f107 020e 	add.w	r2, r7, #14
 8006d46:	8812      	ldrh	r2, [r2, #0]
 8006d48:	f082 0210 	eor.w	r2, r2, #16
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	f107 030e 	add.w	r3, r7, #14
 8006d52:	f107 020e 	add.w	r2, r7, #14
 8006d56:	8812      	ldrh	r2, [r2, #0]
 8006d58:	f082 0220 	eor.w	r2, r2, #32
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	441a      	add	r2, r3
 8006d6c:	f107 030e 	add.w	r3, r7, #14
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	8013      	strh	r3, [r2, #0]
 8006d86:	e3b5      	b.n	80074f4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d88:	463b      	mov	r3, r7
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	7b1b      	ldrb	r3, [r3, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f040 8090 	bne.w	8006eb4 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006d94:	463b      	mov	r3, r7
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d90e      	bls.n	8006dc2 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006da4:	463b      	mov	r3, r7
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	463b      	mov	r3, r7
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	619a      	str	r2, [r3, #24]
 8006dc0:	e008      	b.n	8006dd4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006dcc:	463b      	mov	r3, r7
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dd4:	1d3b      	adds	r3, r7, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ddc:	1d3b      	adds	r3, r7, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dec:	4413      	add	r3, r2
 8006dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006df2:	463b      	mov	r3, r7
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	00da      	lsls	r2, r3, #3
 8006dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dfe:	4413      	add	r3, r2
 8006e00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d116      	bne.n	8006e3e <USB_EPStartXfer+0xb9c>
 8006e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e32c      	b.n	8007498 <USB_EPStartXfer+0x11f6>
 8006e3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e42:	2b3e      	cmp	r3, #62	; 0x3e
 8006e44:	d818      	bhi.n	8006e78 <USB_EPStartXfer+0xbd6>
 8006e46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <USB_EPStartXfer+0xbc4>
 8006e5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e60:	3301      	adds	r3, #1
 8006e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	e30f      	b.n	8007498 <USB_EPStartXfer+0x11f6>
 8006e78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d104      	bne.n	8006e98 <USB_EPStartXfer+0xbf6>
 8006e8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e92:	3b01      	subs	r3, #1
 8006e94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e2f1      	b.n	8007498 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	78db      	ldrb	r3, [r3, #3]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	f040 818f 	bne.w	80071de <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d175      	bne.n	8006fb6 <USB_EPStartXfer+0xd14>
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee8:	463b      	mov	r3, r7
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	00da      	lsls	r2, r3, #3
 8006ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d116      	bne.n	8006f36 <USB_EPStartXfer+0xc94>
 8006f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e065      	b.n	8007002 <USB_EPStartXfer+0xd60>
 8006f36:	463b      	mov	r3, r7
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3e:	d81a      	bhi.n	8006f76 <USB_EPStartXfer+0xcd4>
 8006f40:	463b      	mov	r3, r7
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <USB_EPStartXfer+0xcc2>
 8006f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	e045      	b.n	8007002 <USB_EPStartXfer+0xd60>
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f82:	463b      	mov	r3, r7
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 031f 	and.w	r3, r3, #31
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <USB_EPStartXfer+0xcf8>
 8006f90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f94:	3b01      	subs	r3, #1
 8006f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e025      	b.n	8007002 <USB_EPStartXfer+0xd60>
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	785b      	ldrb	r3, [r3, #1]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d120      	bne.n	8007002 <USB_EPStartXfer+0xd60>
 8006fc0:	1d3b      	adds	r3, r7, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fde:	463b      	mov	r3, r7
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	00da      	lsls	r2, r3, #3
 8006fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fea:	4413      	add	r3, r2
 8006fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	1d3b      	adds	r3, r7, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800700a:	463b      	mov	r3, r7
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d175      	bne.n	8007100 <USB_EPStartXfer+0xe5e>
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800701c:	1d3b      	adds	r3, r7, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007024:	b29b      	uxth	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800702c:	4413      	add	r3, r2
 800702e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	00da      	lsls	r2, r3, #3
 800703a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800703e:	4413      	add	r3, r2
 8007040:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007048:	463b      	mov	r3, r7
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d116      	bne.n	8007080 <USB_EPStartXfer+0xdde>
 8007052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	e061      	b.n	8007144 <USB_EPStartXfer+0xea2>
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b3e      	cmp	r3, #62	; 0x3e
 8007088:	d81a      	bhi.n	80070c0 <USB_EPStartXfer+0xe1e>
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007096:	463b      	mov	r3, r7
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <USB_EPStartXfer+0xe0c>
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e041      	b.n	8007144 <USB_EPStartXfer+0xea2>
 80070c0:	463b      	mov	r3, r7
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d104      	bne.n	80070e4 <USB_EPStartXfer+0xe42>
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	3b01      	subs	r3, #1
 80070e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	029b      	lsls	r3, r3, #10
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	e021      	b.n	8007144 <USB_EPStartXfer+0xea2>
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d11c      	bne.n	8007144 <USB_EPStartXfer+0xea2>
 800710a:	1d3b      	adds	r3, r7, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007112:	b29b      	uxth	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800711a:	4413      	add	r3, r2
 800711c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007120:	463b      	mov	r3, r7
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00da      	lsls	r2, r3, #3
 8007128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800712c:	4413      	add	r3, r2
 800712e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007142:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 81a4 	beq.w	8007498 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007164:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <USB_EPStartXfer+0xeda>
 8007170:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10d      	bne.n	8007198 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800717c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 8187 	bne.w	8007498 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800718a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 8180 	bne.w	8007498 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007198:	1d3b      	adds	r3, r7, #4
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	463b      	mov	r3, r7
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	441a      	add	r2, r3
 80071c4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80071c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071d8:	b29b      	uxth	r3, r3
 80071da:	8013      	strh	r3, [r2, #0]
 80071dc:	e15c      	b.n	8007498 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071de:	463b      	mov	r3, r7
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	78db      	ldrb	r3, [r3, #3]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	f040 8155 	bne.w	8007494 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	463b      	mov	r3, r7
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d90e      	bls.n	8007218 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80071fa:	463b      	mov	r3, r7
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007204:	463b      	mov	r3, r7
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	463b      	mov	r3, r7
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	619a      	str	r2, [r3, #24]
 8007216:	e008      	b.n	800722a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007218:	463b      	mov	r3, r7
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2200      	movs	r2, #0
 8007228:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d16f      	bne.n	8007314 <USB_EPStartXfer+0x1072>
 8007234:	1d3b      	adds	r3, r7, #4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800723c:	1d3b      	adds	r3, r7, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007244:	b29b      	uxth	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800724c:	4413      	add	r3, r2
 800724e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007252:	463b      	mov	r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	00da      	lsls	r2, r3, #3
 800725a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800725e:	4413      	add	r3, r2
 8007260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007268:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800726c:	2b00      	cmp	r3, #0
 800726e:	d116      	bne.n	800729e <USB_EPStartXfer+0xffc>
 8007270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e05f      	b.n	800735e <USB_EPStartXfer+0x10bc>
 800729e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072a2:	2b3e      	cmp	r3, #62	; 0x3e
 80072a4:	d818      	bhi.n	80072d8 <USB_EPStartXfer+0x1036>
 80072a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <USB_EPStartXfer+0x1024>
 80072bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c0:	3301      	adds	r3, #1
 80072c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	029b      	lsls	r3, r3, #10
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	e042      	b.n	800735e <USB_EPStartXfer+0x10bc>
 80072d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <USB_EPStartXfer+0x1056>
 80072ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f2:	3b01      	subs	r3, #1
 80072f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e024      	b.n	800735e <USB_EPStartXfer+0x10bc>
 8007314:	463b      	mov	r3, r7
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d11f      	bne.n	800735e <USB_EPStartXfer+0x10bc>
 800731e:	1d3b      	adds	r3, r7, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007326:	1d3b      	adds	r3, r7, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007336:	4413      	add	r3, r2
 8007338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800733c:	463b      	mov	r3, r7
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00da      	lsls	r2, r3, #3
 8007344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007348:	4413      	add	r3, r2
 800734a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800734e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d16f      	bne.n	8007450 <USB_EPStartXfer+0x11ae>
 8007370:	1d3b      	adds	r3, r7, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007380:	b29b      	uxth	r3, r3
 8007382:	461a      	mov	r2, r3
 8007384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007388:	4413      	add	r3, r2
 800738a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800738e:	463b      	mov	r3, r7
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00da      	lsls	r2, r3, #3
 8007396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800739a:	4413      	add	r3, r2
 800739c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d116      	bne.n	80073da <USB_EPStartXfer+0x1138>
 80073ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	e05e      	b.n	8007498 <USB_EPStartXfer+0x11f6>
 80073da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073de:	2b3e      	cmp	r3, #62	; 0x3e
 80073e0:	d818      	bhi.n	8007414 <USB_EPStartXfer+0x1172>
 80073e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d004      	beq.n	8007402 <USB_EPStartXfer+0x1160>
 80073f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073fc:	3301      	adds	r3, #1
 80073fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007406:	b29b      	uxth	r3, r3
 8007408:	029b      	lsls	r3, r3, #10
 800740a:	b29a      	uxth	r2, r3
 800740c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	e041      	b.n	8007498 <USB_EPStartXfer+0x11f6>
 8007414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800741e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <USB_EPStartXfer+0x1192>
 800742a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742e:	3b01      	subs	r3, #1
 8007430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007438:	b29b      	uxth	r3, r3
 800743a:	029b      	lsls	r3, r3, #10
 800743c:	b29b      	uxth	r3, r3
 800743e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e023      	b.n	8007498 <USB_EPStartXfer+0x11f6>
 8007450:	463b      	mov	r3, r7
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11e      	bne.n	8007498 <USB_EPStartXfer+0x11f6>
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007462:	b29b      	uxth	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800746a:	4413      	add	r3, r2
 800746c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007470:	463b      	mov	r3, r7
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	00da      	lsls	r2, r3, #3
 8007478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800747c:	4413      	add	r3, r2
 800747e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007486:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800748a:	b29a      	uxth	r2, r3
 800748c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e001      	b.n	8007498 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e02e      	b.n	80074f6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007498:	1d3b      	adds	r3, r7, #4
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	463b      	mov	r3, r7
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	441a      	add	r2, r3
 80074dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d020      	beq.n	8007554 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007528:	81bb      	strh	r3, [r7, #12]
 800752a:	89bb      	ldrh	r3, [r7, #12]
 800752c:	f083 0310 	eor.w	r3, r3, #16
 8007530:	81bb      	strh	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	441a      	add	r2, r3
 800753c:	89bb      	ldrh	r3, [r7, #12]
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]
 8007552:	e01f      	b.n	8007594 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	81fb      	strh	r3, [r7, #14]
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007572:	81fb      	strh	r3, [r7, #14]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	89fb      	ldrh	r3, [r7, #14]
 8007580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007590:	b29b      	uxth	r3, r3
 8007592:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b087      	sub	sp, #28
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	7b1b      	ldrb	r3, [r3, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f040 809d 	bne.w	80076f0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d04c      	beq.n	8007658 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	823b      	strh	r3, [r7, #16]
 80075cc:	8a3b      	ldrh	r3, [r7, #16]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <USB_EPClearStall+0x6c>
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ec:	81fb      	strh	r3, [r7, #14]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	441a      	add	r2, r3
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800760a:	b29b      	uxth	r3, r3
 800760c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	78db      	ldrb	r3, [r3, #3]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d06c      	beq.n	80076f0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762c:	81bb      	strh	r3, [r7, #12]
 800762e:	89bb      	ldrh	r3, [r7, #12]
 8007630:	f083 0320 	eor.w	r3, r3, #32
 8007634:	81bb      	strh	r3, [r7, #12]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	89bb      	ldrh	r3, [r7, #12]
 8007642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007652:	b29b      	uxth	r3, r3
 8007654:	8013      	strh	r3, [r2, #0]
 8007656:	e04b      	b.n	80076f0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	82fb      	strh	r3, [r7, #22]
 8007666:	8afb      	ldrh	r3, [r7, #22]
 8007668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01b      	beq.n	80076a8 <USB_EPClearStall+0x106>
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	82bb      	strh	r3, [r7, #20]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	441a      	add	r2, r3
 8007692:	8abb      	ldrh	r3, [r7, #20]
 8007694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	827b      	strh	r3, [r7, #18]
 80076c0:	8a7b      	ldrh	r3, [r7, #18]
 80076c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076c6:	827b      	strh	r3, [r7, #18]
 80076c8:	8a7b      	ldrh	r3, [r7, #18]
 80076ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076ce:	827b      	strh	r3, [r7, #18]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	8a7b      	ldrh	r3, [r7, #18]
 80076dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2280      	movs	r2, #128	; 0x80
 8007714:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007734:	b29b      	uxth	r3, r3
 8007736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007762:	b29b      	uxth	r3, r3
 8007764:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800778c:	b480      	push	{r7}
 800778e:	b08d      	sub	sp, #52	; 0x34
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	4611      	mov	r1, r2
 8007798:	461a      	mov	r2, r3
 800779a:	460b      	mov	r3, r1
 800779c:	80fb      	strh	r3, [r7, #6]
 800779e:	4613      	mov	r3, r2
 80077a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077a2:	88bb      	ldrh	r3, [r7, #4]
 80077a4:	3301      	adds	r3, #1
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077c2:	e01b      	b.n	80077fc <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	3301      	adds	r3, #1
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	3302      	adds	r3, #2
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	3301      	adds	r3, #1
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	3b01      	subs	r3, #1
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e0      	bne.n	80077c4 <USB_WritePMA+0x38>
  }
}
 8007802:	bf00      	nop
 8007804:	3734      	adds	r7, #52	; 0x34
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800780e:	b480      	push	{r7}
 8007810:	b08b      	sub	sp, #44	; 0x2c
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	4611      	mov	r1, r2
 800781a:	461a      	mov	r2, r3
 800781c:	460b      	mov	r3, r1
 800781e:	80fb      	strh	r3, [r7, #6]
 8007820:	4613      	mov	r3, r2
 8007822:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007824:	88bb      	ldrh	r3, [r7, #4]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800783e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
 8007844:	e018      	b.n	8007878 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	3302      	adds	r3, #2
 8007852:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	b2da      	uxtb	r2, r3
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	b2da      	uxtb	r2, r3
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	3301      	adds	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	3b01      	subs	r3, #1
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e3      	bne.n	8007846 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800787e:	88bb      	ldrh	r3, [r7, #4]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d007      	beq.n	800789a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	701a      	strb	r2, [r3, #0]
  }
}
 800789a:	bf00      	nop
 800789c:	372c      	adds	r7, #44	; 0x2c
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078b2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078b6:	f002 f89d 	bl	80099f4 <USBD_static_malloc>
 80078ba:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078ca:	2302      	movs	r3, #2
 80078cc:	e066      	b.n	800799c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7c1b      	ldrb	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d119      	bne.n	8007912 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e2:	2202      	movs	r2, #2
 80078e4:	2181      	movs	r1, #129	; 0x81
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 ff29 	bl	800973e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f6:	2202      	movs	r2, #2
 80078f8:	2101      	movs	r1, #1
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 ff1f 	bl	800973e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2210      	movs	r2, #16
 800790c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007910:	e016      	b.n	8007940 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	2202      	movs	r2, #2
 8007916:	2181      	movs	r1, #129	; 0x81
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 ff10 	bl	800973e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007924:	2340      	movs	r3, #64	; 0x40
 8007926:	2202      	movs	r2, #2
 8007928:	2101      	movs	r1, #1
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 ff07 	bl	800973e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2210      	movs	r2, #16
 800793c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007940:	2308      	movs	r3, #8
 8007942:	2203      	movs	r2, #3
 8007944:	2182      	movs	r1, #130	; 0x82
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 fef9 	bl	800973e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7c1b      	ldrb	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d109      	bne.n	800798a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800797c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007980:	2101      	movs	r1, #1
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 ffcb 	bl	800991e <USBD_LL_PrepareReceive>
 8007988:	e007      	b.n	800799a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007990:	2340      	movs	r3, #64	; 0x40
 8007992:	2101      	movs	r1, #1
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 ffc2 	bl	800991e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079b0:	2181      	movs	r1, #129	; 0x81
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fee9 	bl	800978a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079be:	2101      	movs	r1, #1
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fee2 	bl	800978a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079ce:	2182      	movs	r1, #130	; 0x82
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 feda 	bl	800978a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00e      	beq.n	8007a0e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a00:	4618      	mov	r0, r3
 8007a02:	f002 f805 	bl	8009a10 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d03a      	beq.n	8007ab8 <USBD_CDC_Setup+0xa0>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	f040 8097 	bne.w	8007b76 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	88db      	ldrh	r3, [r3, #6]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d029      	beq.n	8007aa4 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da11      	bge.n	8007a7e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	88d2      	ldrh	r2, [r2, #6]
 8007a6c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a6e:	6939      	ldr	r1, [r7, #16]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	88db      	ldrh	r3, [r3, #6]
 8007a74:	461a      	mov	r2, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fa8d 	bl	8008f96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007a7c:	e082      	b.n	8007b84 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	785a      	ldrb	r2, [r3, #1]
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a94:	6939      	ldr	r1, [r7, #16]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 faa6 	bl	8008fee <USBD_CtlPrepareRx>
      break;
 8007aa2:	e06f      	b.n	8007b84 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	7850      	ldrb	r0, [r2, #1]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	4798      	blx	r3
      break;
 8007ab6:	e065      	b.n	8007b84 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b0b      	cmp	r3, #11
 8007abe:	d84f      	bhi.n	8007b60 <USBD_CDC_Setup+0x148>
 8007ac0:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USBD_CDC_Setup+0xb0>)
 8007ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac6:	bf00      	nop
 8007ac8:	08007af9 	.word	0x08007af9
 8007acc:	08007b6f 	.word	0x08007b6f
 8007ad0:	08007b61 	.word	0x08007b61
 8007ad4:	08007b61 	.word	0x08007b61
 8007ad8:	08007b61 	.word	0x08007b61
 8007adc:	08007b61 	.word	0x08007b61
 8007ae0:	08007b61 	.word	0x08007b61
 8007ae4:	08007b61 	.word	0x08007b61
 8007ae8:	08007b61 	.word	0x08007b61
 8007aec:	08007b61 	.word	0x08007b61
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007b49 	.word	0x08007b49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d107      	bne.n	8007b12 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	2202      	movs	r2, #2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fa43 	bl	8008f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b10:	e030      	b.n	8007b74 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f9cd 	bl	8008eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b1e:	e029      	b.n	8007b74 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d107      	bne.n	8007b3a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b2a:	f107 030f 	add.w	r3, r7, #15
 8007b2e:	2201      	movs	r2, #1
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 fa2f 	bl	8008f96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b38:	e01c      	b.n	8007b74 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f9b9 	bl	8008eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	75fb      	strb	r3, [r7, #23]
          break;
 8007b46:	e015      	b.n	8007b74 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d00f      	beq.n	8007b72 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f9ad 	bl	8008eb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b5e:	e008      	b.n	8007b72 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 f9a6 	bl	8008eb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6c:	e002      	b.n	8007b74 <USBD_CDC_Setup+0x15c>
          break;
 8007b6e:	bf00      	nop
 8007b70:	e008      	b.n	8007b84 <USBD_CDC_Setup+0x16c>
          break;
 8007b72:	bf00      	nop
      }
      break;
 8007b74:	e006      	b.n	8007b84 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 f99b 	bl	8008eb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	75fb      	strb	r3, [r7, #23]
      break;
 8007b82:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop

08007b90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ba2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e04f      	b.n	8007c52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3318      	adds	r3, #24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d029      	beq.n	8007c24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3318      	adds	r3, #24
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	78f9      	ldrb	r1, [r7, #3]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	460b      	mov	r3, r1
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	4403      	add	r3, r0
 8007bf0:	3338      	adds	r3, #56	; 0x38
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bf8:	fb03 f301 	mul.w	r3, r3, r1
 8007bfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d110      	bne.n	8007c24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	3318      	adds	r3, #24
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c16:	78f9      	ldrb	r1, [r7, #3]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fe5d 	bl	80098dc <USBD_LL_Transmit>
 8007c22:	e015      	b.n	8007c50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e015      	b.n	8007ca8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fe6d 	bl	8009960 <USBD_LL_GetRxDataSize>
 8007c86:	4602      	mov	r2, r0
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cbe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d015      	beq.n	8007cf6 <USBD_CDC_EP0_RxReady+0x46>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cd0:	2bff      	cmp	r3, #255	; 0xff
 8007cd2:	d010      	beq.n	8007cf6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007ce2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cea:	b292      	uxth	r2, r2
 8007cec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22ff      	movs	r2, #255	; 0xff
 8007cf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2243      	movs	r2, #67	; 0x43
 8007d0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d0e:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	20000094 	.word	0x20000094

08007d20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2243      	movs	r2, #67	; 0x43
 8007d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d2e:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20000050 	.word	0x20000050

08007d40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2243      	movs	r2, #67	; 0x43
 8007d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d4e:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	200000d8 	.word	0x200000d8

08007d60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	2000000c 	.word	0x2000000c

08007d80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e004      	b.n	8007d9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b087      	sub	sp, #28
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dbc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e12:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e01a      	b.n	8007e5c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d114      	bne.n	8007e5a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e4e:	2181      	movs	r1, #129	; 0x81
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fd43 	bl	80098dc <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e016      	b.n	8007eb0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7c1b      	ldrb	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e94:	2101      	movs	r1, #1
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fd41 	bl	800991e <USBD_LL_PrepareReceive>
 8007e9c:	e007      	b.n	8007eae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 fd38 	bl	800991e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e01f      	b.n	8007f10 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f001 fb9f 	bl	8009648 <USBD_LL_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e016      	b.n	8007f5e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	f107 020e 	add.w	r2, r7, #14
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	4602      	mov	r2, r0
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fbca 	bl	8009708 <USBD_LL_Start>
 8007f74:	4603      	mov	r3, r0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
  }

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 ff16 	bl	8008e40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	2b01      	cmp	r3, #1
 8008036:	d00e      	beq.n	8008056 <USBD_LL_SetupStage+0x5a>
 8008038:	2b01      	cmp	r3, #1
 800803a:	d302      	bcc.n	8008042 <USBD_LL_SetupStage+0x46>
 800803c:	2b02      	cmp	r3, #2
 800803e:	d014      	beq.n	800806a <USBD_LL_SetupStage+0x6e>
 8008040:	e01d      	b.n	800807e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9d6 	bl	80083fc <USBD_StdDevReq>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
      break;
 8008054:	e020      	b.n	8008098 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa3a 	bl	80084d8 <USBD_StdItfReq>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
      break;
 8008068:	e016      	b.n	8008098 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa76 	bl	8008564 <USBD_StdEPReq>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
      break;
 800807c:	e00c      	b.n	8008098 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008084:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008088:	b2db      	uxtb	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 fb9b 	bl	80097c8 <USBD_LL_StallEP>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	460b      	mov	r3, r1
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080b0:	7afb      	ldrb	r3, [r7, #11]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d137      	bne.n	8008126 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d14a      	bne.n	800815e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d913      	bls.n	80080fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	1ad2      	subs	r2, r2, r3
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	4293      	cmp	r3, r2
 80080ec:	bf28      	it	cs
 80080ee:	4613      	movcs	r3, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 ff97 	bl	8009028 <USBD_CtlContinueRx>
 80080fa:	e030      	b.n	800815e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800810e:	2b03      	cmp	r3, #3
 8008110:	d105      	bne.n	800811e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 ff93 	bl	800904a <USBD_CtlSendStatus>
 8008124:	e01b      	b.n	800815e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008138:	2b03      	cmp	r3, #3
 800813a:	d10e      	bne.n	800815a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	7afa      	ldrb	r2, [r7, #11]
 8008146:	4611      	mov	r1, r2
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	4798      	blx	r3
 800814c:	4603      	mov	r3, r0
 800814e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	e002      	b.n	8008160 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800815a:	2303      	movs	r3, #3
 800815c:	e000      	b.n	8008160 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	460b      	mov	r3, r1
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d16a      	bne.n	8008252 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3314      	adds	r3, #20
 8008180:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008188:	2b02      	cmp	r3, #2
 800818a:	d155      	bne.n	8008238 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d914      	bls.n	80081c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	1ad2      	subs	r2, r2, r3
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	461a      	mov	r2, r3
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 ff0c 	bl	8008fcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b4:	2300      	movs	r3, #0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f001 fbaf 	bl	800991e <USBD_LL_PrepareReceive>
 80081c0:	e03a      	b.n	8008238 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d11c      	bne.n	8008208 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d316      	bcc.n	8008208 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d20f      	bcs.n	8008208 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 feed 	bl	8008fcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	2100      	movs	r1, #0
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f001 fb8c 	bl	800991e <USBD_LL_PrepareReceive>
 8008206:	e017      	b.n	8008238 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800821a:	2b03      	cmp	r3, #3
 800821c:	d105      	bne.n	800822a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800822a:	2180      	movs	r1, #128	; 0x80
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f001 facb 	bl	80097c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 ff1c 	bl	8009070 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d123      	bne.n	800828a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff fe9b 	bl	8007f7e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008250:	e01b      	b.n	800828a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d013      	beq.n	8008286 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008264:	2b03      	cmp	r3, #3
 8008266:	d10e      	bne.n	8008286 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	7afa      	ldrb	r2, [r7, #11]
 8008272:	4611      	mov	r1, r2
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	4798      	blx	r3
 8008278:	4603      	mov	r3, r0
 800827a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	e002      	b.n	800828c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008286:	2303      	movs	r3, #3
 8008288:	e000      	b.n	800828c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6852      	ldr	r2, [r2, #4]
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	4611      	mov	r1, r2
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082d8:	2340      	movs	r3, #64	; 0x40
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fa2d 	bl	800973e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2240      	movs	r2, #64	; 0x40
 80082f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	2200      	movs	r2, #0
 80082f8:	2180      	movs	r1, #128	; 0x80
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 fa1f 	bl	800973e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2240      	movs	r2, #64	; 0x40
 800830a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836e:	2b04      	cmp	r3, #4
 8008370:	d105      	bne.n	800837e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839a:	2b03      	cmp	r3, #3
 800839c:	d10b      	bne.n	80083b6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3301      	adds	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083de:	8a3b      	ldrh	r3, [r7, #16]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	b21a      	sxth	r2, r3
 80083e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083ee:	89fb      	ldrh	r3, [r7, #14]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008412:	2b20      	cmp	r3, #32
 8008414:	d004      	beq.n	8008420 <USBD_StdDevReq+0x24>
 8008416:	2b40      	cmp	r3, #64	; 0x40
 8008418:	d002      	beq.n	8008420 <USBD_StdDevReq+0x24>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <USBD_StdDevReq+0x38>
 800841e:	e050      	b.n	80084c2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]
    break;
 8008432:	e04b      	b.n	80084cc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	2b09      	cmp	r3, #9
 800843a:	d83c      	bhi.n	80084b6 <USBD_StdDevReq+0xba>
 800843c:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <USBD_StdDevReq+0x48>)
 800843e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008442:	bf00      	nop
 8008444:	08008499 	.word	0x08008499
 8008448:	080084ad 	.word	0x080084ad
 800844c:	080084b7 	.word	0x080084b7
 8008450:	080084a3 	.word	0x080084a3
 8008454:	080084b7 	.word	0x080084b7
 8008458:	08008477 	.word	0x08008477
 800845c:	0800846d 	.word	0x0800846d
 8008460:	080084b7 	.word	0x080084b7
 8008464:	0800848f 	.word	0x0800848f
 8008468:	08008481 	.word	0x08008481
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9d0 	bl	8008814 <USBD_GetDescriptor>
      break;
 8008474:	e024      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fb5f 	bl	8008b3c <USBD_SetAddress>
      break;
 800847e:	e01f      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fb9c 	bl	8008bc0 <USBD_SetConfig>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
      break;
 800848c:	e018      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc39 	bl	8008d08 <USBD_GetConfig>
      break;
 8008496:	e013      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fc68 	bl	8008d70 <USBD_GetStatus>
      break;
 80084a0:	e00e      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fc96 	bl	8008dd6 <USBD_SetFeature>
      break;
 80084aa:	e009      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fca5 	bl	8008dfe <USBD_ClrFeature>
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fcfb 	bl	8008eb4 <USBD_CtlError>
      break;
 80084be:	bf00      	nop
    }
    break;
 80084c0:	e004      	b.n	80084cc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fcf5 	bl	8008eb4 <USBD_CtlError>
    break;
 80084ca:	bf00      	nop
  }

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d003      	beq.n	80084fa <USBD_StdItfReq+0x22>
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d001      	beq.n	80084fa <USBD_StdItfReq+0x22>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d12a      	bne.n	8008550 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008500:	3b01      	subs	r3, #1
 8008502:	2b02      	cmp	r3, #2
 8008504:	d81d      	bhi.n	8008542 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b01      	cmp	r3, #1
 800850e:	d813      	bhi.n	8008538 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88db      	ldrh	r3, [r3, #6]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d110      	bne.n	800854c <USBD_StdItfReq+0x74>
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10d      	bne.n	800854c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fd8a 	bl	800904a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008536:	e009      	b.n	800854c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fcba 	bl	8008eb4 <USBD_CtlError>
      break;
 8008540:	e004      	b.n	800854c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fcb5 	bl	8008eb4 <USBD_CtlError>
      break;
 800854a:	e000      	b.n	800854e <USBD_StdItfReq+0x76>
      break;
 800854c:	bf00      	nop
    }
    break;
 800854e:	e004      	b.n	800855a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fcae 	bl	8008eb4 <USBD_CtlError>
    break;
 8008558:	bf00      	nop
  }

  return ret;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	889b      	ldrh	r3, [r3, #4]
 8008576:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008580:	2b20      	cmp	r3, #32
 8008582:	d004      	beq.n	800858e <USBD_StdEPReq+0x2a>
 8008584:	2b40      	cmp	r3, #64	; 0x40
 8008586:	d002      	beq.n	800858e <USBD_StdEPReq+0x2a>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <USBD_StdEPReq+0x3e>
 800858c:	e137      	b.n	80087fe <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
    break;
 80085a0:	e132      	b.n	8008808 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d03e      	beq.n	8008628 <USBD_StdEPReq+0xc4>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d002      	beq.n	80085b4 <USBD_StdEPReq+0x50>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d079      	beq.n	80086a6 <USBD_StdEPReq+0x142>
 80085b2:	e11e      	b.n	80087f2 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d002      	beq.n	80085c4 <USBD_StdEPReq+0x60>
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d015      	beq.n	80085ee <USBD_StdEPReq+0x8a>
 80085c2:	e02b      	b.n	800861c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <USBD_StdEPReq+0x80>
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b80      	cmp	r3, #128	; 0x80
 80085ce:	d009      	beq.n	80085e4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 f8f7 	bl	80097c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085da:	2180      	movs	r1, #128	; 0x80
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f8f3 	bl	80097c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085e2:	e020      	b.n	8008626 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fc64 	bl	8008eb4 <USBD_CtlError>
        break;
 80085ec:	e01b      	b.n	8008626 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10e      	bne.n	8008614 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_StdEPReq+0xb0>
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d008      	beq.n	8008614 <USBD_StdEPReq+0xb0>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d104      	bne.n	8008614 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 f8da 	bl	80097c8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fd18 	bl	800904a <USBD_CtlSendStatus>

        break;
 800861a:	e004      	b.n	8008626 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fc48 	bl	8008eb4 <USBD_CtlError>
        break;
 8008624:	bf00      	nop
      }
      break;
 8008626:	e0e9      	b.n	80087fc <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862e:	2b02      	cmp	r3, #2
 8008630:	d002      	beq.n	8008638 <USBD_StdEPReq+0xd4>
 8008632:	2b03      	cmp	r3, #3
 8008634:	d015      	beq.n	8008662 <USBD_StdEPReq+0xfe>
 8008636:	e02f      	b.n	8008698 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <USBD_StdEPReq+0xf4>
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b80      	cmp	r3, #128	; 0x80
 8008642:	d009      	beq.n	8008658 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f8bd 	bl	80097c8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800864e:	2180      	movs	r1, #128	; 0x80
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f8b9 	bl	80097c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008656:	e025      	b.n	80086a4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fc2a 	bl	8008eb4 <USBD_CtlError>
        break;
 8008660:	e020      	b.n	80086a4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d11b      	bne.n	80086a2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f8c4 	bl	8009806 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fce3 	bl	800904a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008696:	e004      	b.n	80086a2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fc0a 	bl	8008eb4 <USBD_CtlError>
        break;
 80086a0:	e000      	b.n	80086a4 <USBD_StdEPReq+0x140>
        break;
 80086a2:	bf00      	nop
      }
      break;
 80086a4:	e0aa      	b.n	80087fc <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d002      	beq.n	80086b6 <USBD_StdEPReq+0x152>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d032      	beq.n	800871a <USBD_StdEPReq+0x1b6>
 80086b4:	e097      	b.n	80087e6 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <USBD_StdEPReq+0x168>
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b80      	cmp	r3, #128	; 0x80
 80086c0:	d004      	beq.n	80086cc <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fbf5 	bl	8008eb4 <USBD_CtlError>
          break;
 80086ca:	e091      	b.n	80087f0 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da0b      	bge.n	80086ec <USBD_StdEPReq+0x188>
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	3310      	adds	r3, #16
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	3304      	adds	r3, #4
 80086ea:	e00b      	b.n	8008704 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	4413      	add	r3, r2
 8008702:	3304      	adds	r3, #4
 8008704:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2202      	movs	r2, #2
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc3f 	bl	8008f96 <USBD_CtlSendData>
        break;
 8008718:	e06a      	b.n	80087f0 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800871a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	da11      	bge.n	8008746 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	f003 020f 	and.w	r2, r3, #15
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	3324      	adds	r3, #36	; 0x24
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d117      	bne.n	800876c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fbb8 	bl	8008eb4 <USBD_CtlError>
            break;
 8008744:	e054      	b.n	80087f0 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	f003 020f 	and.w	r2, r3, #15
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	440b      	add	r3, r1
 8008758:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d104      	bne.n	800876c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fba5 	bl	8008eb4 <USBD_CtlError>
            break;
 800876a:	e041      	b.n	80087f0 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da0b      	bge.n	800878c <USBD_StdEPReq+0x228>
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	3310      	adds	r3, #16
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	3304      	adds	r3, #4
 800878a:	e00b      	b.n	80087a4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	3304      	adds	r3, #4
 80087a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <USBD_StdEPReq+0x24e>
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d103      	bne.n	80087ba <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	e00e      	b.n	80087d8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f840 	bl	8009844 <USBD_LL_IsStallEP>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2201      	movs	r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e002      	b.n	80087d8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2202      	movs	r2, #2
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fbd9 	bl	8008f96 <USBD_CtlSendData>
          break;
 80087e4:	e004      	b.n	80087f0 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fb63 	bl	8008eb4 <USBD_CtlError>
        break;
 80087ee:	bf00      	nop
      }
      break;
 80087f0:	e004      	b.n	80087fc <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fb5d 	bl	8008eb4 <USBD_CtlError>
      break;
 80087fa:	bf00      	nop
    }
    break;
 80087fc:	e004      	b.n	8008808 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb57 	bl	8008eb4 <USBD_CtlError>
    break;
 8008806:	bf00      	nop
  }

  return ret;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	0a1b      	lsrs	r3, r3, #8
 8008830:	b29b      	uxth	r3, r3
 8008832:	3b01      	subs	r3, #1
 8008834:	2b0e      	cmp	r3, #14
 8008836:	f200 8152 	bhi.w	8008ade <USBD_GetDescriptor+0x2ca>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <USBD_GetDescriptor+0x2c>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	080088b1 	.word	0x080088b1
 8008844:	080088c9 	.word	0x080088c9
 8008848:	08008909 	.word	0x08008909
 800884c:	08008adf 	.word	0x08008adf
 8008850:	08008adf 	.word	0x08008adf
 8008854:	08008a7f 	.word	0x08008a7f
 8008858:	08008aab 	.word	0x08008aab
 800885c:	08008adf 	.word	0x08008adf
 8008860:	08008adf 	.word	0x08008adf
 8008864:	08008adf 	.word	0x08008adf
 8008868:	08008adf 	.word	0x08008adf
 800886c:	08008adf 	.word	0x08008adf
 8008870:	08008adf 	.word	0x08008adf
 8008874:	08008adf 	.word	0x08008adf
 8008878:	0800887d 	.word	0x0800887d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	7c12      	ldrb	r2, [r2, #16]
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	4610      	mov	r0, r2
 800889a:	4798      	blx	r3
 800889c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800889e:	e126      	b.n	8008aee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fb06 	bl	8008eb4 <USBD_CtlError>
      err++;
 80088a8:	7afb      	ldrb	r3, [r7, #11]
 80088aa:	3301      	adds	r3, #1
 80088ac:	72fb      	strb	r3, [r7, #11]
    break;
 80088ae:	e11e      	b.n	8008aee <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	f107 0108 	add.w	r1, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
    break;
 80088c6:	e112      	b.n	8008aee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7c1b      	ldrb	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10d      	bne.n	80088ec <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	f107 0208 	add.w	r2, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	2202      	movs	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80088ea:	e100      	b.n	8008aee <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
    break;
 8008906:	e0f2      	b.n	8008aee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	885b      	ldrh	r3, [r3, #2]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b05      	cmp	r3, #5
 8008910:	f200 80ac 	bhi.w	8008a6c <USBD_GetDescriptor+0x258>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBD_GetDescriptor+0x108>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008935 	.word	0x08008935
 8008920:	08008969 	.word	0x08008969
 8008924:	0800899d 	.word	0x0800899d
 8008928:	080089d1 	.word	0x080089d1
 800892c:	08008a05 	.word	0x08008a05
 8008930:	08008a39 	.word	0x08008a39
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008956:	e091      	b.n	8008a7c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 faaa 	bl	8008eb4 <USBD_CtlError>
        err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
      break;
 8008966:	e089      	b.n	8008a7c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800898a:	e077      	b.n	8008a7c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa90 	bl	8008eb4 <USBD_CtlError>
        err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
      break;
 800899a:	e06f      	b.n	8008a7c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089be:	e05d      	b.n	8008a7c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa76 	bl	8008eb4 <USBD_CtlError>
        err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
      break;
 80089ce:	e055      	b.n	8008a7c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f2:	e043      	b.n	8008a7c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa5c 	bl	8008eb4 <USBD_CtlError>
        err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
      break;
 8008a02:	e03b      	b.n	8008a7c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a26:	e029      	b.n	8008a7c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa42 	bl	8008eb4 <USBD_CtlError>
        err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
      break;
 8008a36:	e021      	b.n	8008a7c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7c12      	ldrb	r2, [r2, #16]
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
 8008a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a5a:	e00f      	b.n	8008a7c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa28 	bl	8008eb4 <USBD_CtlError>
        err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6a:	e007      	b.n	8008a7c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa20 	bl	8008eb4 <USBD_CtlError>
      err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a7a:	bf00      	nop
    }
    break;
 8008a7c:	e037      	b.n	8008aee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7c1b      	ldrb	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	f107 0208 	add.w	r2, r7, #8
 8008a92:	4610      	mov	r0, r2
 8008a94:	4798      	blx	r3
 8008a96:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a98:	e029      	b.n	8008aee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa09 	bl	8008eb4 <USBD_CtlError>
      err++;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	72fb      	strb	r3, [r7, #11]
    break;
 8008aa8:	e021      	b.n	8008aee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7c1b      	ldrb	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10d      	bne.n	8008ace <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	f107 0208 	add.w	r2, r7, #8
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4798      	blx	r3
 8008ac2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	2207      	movs	r2, #7
 8008aca:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008acc:	e00f      	b.n	8008aee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f9ef 	bl	8008eb4 <USBD_CtlError>
      err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
    break;
 8008adc:	e007      	b.n	8008aee <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f9e7 	bl	8008eb4 <USBD_CtlError>
    err++;
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	72fb      	strb	r3, [r7, #11]
    break;
 8008aec:	bf00      	nop
  }

  if (err != 0U)
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d11e      	bne.n	8008b32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	88db      	ldrh	r3, [r3, #6]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d016      	beq.n	8008b2a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008afc:	893b      	ldrh	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00e      	beq.n	8008b20 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	88da      	ldrh	r2, [r3, #6]
 8008b06:	893b      	ldrh	r3, [r7, #8]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bf28      	it	cs
 8008b0c:	4613      	movcs	r3, r2
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b12:	893b      	ldrh	r3, [r7, #8]
 8008b14:	461a      	mov	r2, r3
 8008b16:	68f9      	ldr	r1, [r7, #12]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa3c 	bl	8008f96 <USBD_CtlSendData>
 8008b1e:	e009      	b.n	8008b34 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9c6 	bl	8008eb4 <USBD_CtlError>
 8008b28:	e004      	b.n	8008b34 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa8d 	bl	800904a <USBD_CtlSendStatus>
 8008b30:	e000      	b.n	8008b34 <USBD_GetDescriptor+0x320>
    return;
 8008b32:	bf00      	nop
    }
  }
}
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	889b      	ldrh	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d130      	bne.n	8008bb0 <USBD_SetAddress+0x74>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d12c      	bne.n	8008bb0 <USBD_SetAddress+0x74>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b5c:	d828      	bhi.n	8008bb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	885b      	ldrh	r3, [r3, #2]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d104      	bne.n	8008b7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f99c 	bl	8008eb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	e01c      	b.n	8008bb8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7bfa      	ldrb	r2, [r7, #15]
 8008b82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fe87 	bl	800989e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa5a 	bl	800904a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba4:	e008      	b.n	8008bb8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bae:	e003      	b.n	8008bb8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f97e 	bl	8008eb4 <USBD_CtlError>
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	4b4b      	ldr	r3, [pc, #300]	; (8008d04 <USBD_SetConfig+0x144>)
 8008bd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bd8:	4b4a      	ldr	r3, [pc, #296]	; (8008d04 <USBD_SetConfig+0x144>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d905      	bls.n	8008bec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f966 	bl	8008eb4 <USBD_CtlError>
    return USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e087      	b.n	8008cfc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d002      	beq.n	8008bfc <USBD_SetConfig+0x3c>
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d025      	beq.n	8008c46 <USBD_SetConfig+0x86>
 8008bfa:	e071      	b.n	8008ce0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008bfc:	4b41      	ldr	r3, [pc, #260]	; (8008d04 <USBD_SetConfig+0x144>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01c      	beq.n	8008c3e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c04:	4b3f      	ldr	r3, [pc, #252]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c0e:	4b3d      	ldr	r3, [pc, #244]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff f9bd 	bl	8007f94 <USBD_SetClassConfig>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f944 	bl	8008eb4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c2c:	e065      	b.n	8008cfa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa0b 	bl	800904a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2203      	movs	r2, #3
 8008c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c3c:	e05d      	b.n	8008cfa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa03 	bl	800904a <USBD_CtlSendStatus>
    break;
 8008c44:	e059      	b.n	8008cfa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c46:	4b2f      	ldr	r3, [pc, #188]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d112      	bne.n	8008c74 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c56:	4b2b      	ldr	r3, [pc, #172]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff f9b0 	bl	8007fcc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9ec 	bl	800904a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c72:	e042      	b.n	8008cfa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c74:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d02a      	beq.n	8008cd8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff f99e 	bl	8007fcc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c90:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c9a:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <USBD_SetConfig+0x144>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7ff f977 	bl	8007f94 <USBD_SetClassConfig>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00f      	beq.n	8008cd0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8fe 	bl	8008eb4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff f983 	bl	8007fcc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cce:	e014      	b.n	8008cfa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f9ba 	bl	800904a <USBD_CtlSendStatus>
    break;
 8008cd6:	e010      	b.n	8008cfa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f9b6 	bl	800904a <USBD_CtlSendStatus>
    break;
 8008cde:	e00c      	b.n	8008cfa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8e6 	bl	8008eb4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <USBD_SetConfig+0x144>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f96c 	bl	8007fcc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf8:	bf00      	nop
  }

  return ret;
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	200001d2 	.word	0x200001d2

08008d08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	88db      	ldrh	r3, [r3, #6]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d004      	beq.n	8008d24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8c9 	bl	8008eb4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d22:	e021      	b.n	8008d68 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	db17      	blt.n	8008d5e <USBD_GetConfig+0x56>
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	dd02      	ble.n	8008d38 <USBD_GetConfig+0x30>
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d00b      	beq.n	8008d4e <USBD_GetConfig+0x46>
 8008d36:	e012      	b.n	8008d5e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3308      	adds	r3, #8
 8008d42:	2201      	movs	r2, #1
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f925 	bl	8008f96 <USBD_CtlSendData>
      break;
 8008d4c:	e00c      	b.n	8008d68 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	2201      	movs	r2, #1
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f91d 	bl	8008f96 <USBD_CtlSendData>
      break;
 8008d5c:	e004      	b.n	8008d68 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f8a7 	bl	8008eb4 <USBD_CtlError>
      break;
 8008d66:	bf00      	nop
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d80:	3b01      	subs	r3, #1
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d81e      	bhi.n	8008dc4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	88db      	ldrh	r3, [r3, #6]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d004      	beq.n	8008d98 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f88f 	bl	8008eb4 <USBD_CtlError>
      break;
 8008d96:	e01a      	b.n	8008dce <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f043 0202 	orr.w	r2, r3, #2
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	330c      	adds	r3, #12
 8008db8:	2202      	movs	r2, #2
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8ea 	bl	8008f96 <USBD_CtlSendData>
    break;
 8008dc2:	e004      	b.n	8008dce <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f874 	bl	8008eb4 <USBD_CtlError>
    break;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	885b      	ldrh	r3, [r3, #2]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d106      	bne.n	8008df6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f92a 	bl	800904a <USBD_CtlSendStatus>
  }
}
 8008df6:	bf00      	nop
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d80b      	bhi.n	8008e2c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	885b      	ldrh	r3, [r3, #2]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d10c      	bne.n	8008e36 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f910 	bl	800904a <USBD_CtlSendStatus>
      }
      break;
 8008e2a:	e004      	b.n	8008e36 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f840 	bl	8008eb4 <USBD_CtlError>
      break;
 8008e34:	e000      	b.n	8008e38 <USBD_ClrFeature+0x3a>
      break;
 8008e36:	bf00      	nop
  }
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3301      	adds	r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff faa8 	bl	80083c0 <SWAPBYTE>
 8008e70:	4603      	mov	r3, r0
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fa9b 	bl	80083c0 <SWAPBYTE>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7ff fa8e 	bl	80083c0 <SWAPBYTE>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	80da      	strh	r2, [r3, #6]
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ebe:	2180      	movs	r1, #128	; 0x80
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fc81 	bl	80097c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc7d 	bl	80097c8 <USBD_LL_StallEP>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d036      	beq.n	8008f5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ef0:	6938      	ldr	r0, [r7, #16]
 8008ef2:	f000 f836 	bl	8008f62 <USBD_GetLen>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	3301      	adds	r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	7812      	ldrb	r2, [r2, #0]
 8008f0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	3301      	adds	r3, #1
 8008f14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	3301      	adds	r3, #1
 8008f24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f26:	e013      	b.n	8008f50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3301      	adds	r3, #1
 8008f38:	613b      	str	r3, [r7, #16]
    idx++;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	4413      	add	r3, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e7      	bne.n	8008f28 <USBD_GetString+0x52>
 8008f58:	e000      	b.n	8008f5c <USBD_GetString+0x86>
    return;
 8008f5a:	bf00      	nop
  }
}
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f72:	e005      	b.n	8008f80 <USBD_GetLen+0x1e>
  {
    len++;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	3301      	adds	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f5      	bne.n	8008f74 <USBD_GetLen+0x12>
  }

  return len;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	60b9      	str	r1, [r7, #8]
 8008fa0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	2100      	movs	r1, #0
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 fc8d 	bl	80098dc <USBD_LL_Transmit>

  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fc7c 	bl	80098dc <USBD_LL_Transmit>

  return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fc80 	bl	800991e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	2100      	movs	r1, #0
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fc6f 	bl	800991e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2204      	movs	r2, #4
 8009056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800905a:	2300      	movs	r3, #0
 800905c:	2200      	movs	r2, #0
 800905e:	2100      	movs	r1, #0
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fc3b 	bl	80098dc <USBD_LL_Transmit>

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2205      	movs	r2, #5
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009080:	2300      	movs	r3, #0
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fc49 	bl	800991e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800909c:	2200      	movs	r2, #0
 800909e:	4912      	ldr	r1, [pc, #72]	; (80090e8 <MX_USB_Device_Init+0x50>)
 80090a0:	4812      	ldr	r0, [pc, #72]	; (80090ec <MX_USB_Device_Init+0x54>)
 80090a2:	f7fe ff09 	bl	8007eb8 <USBD_Init>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090ac:	f7f7 ff08 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090b0:	490f      	ldr	r1, [pc, #60]	; (80090f0 <MX_USB_Device_Init+0x58>)
 80090b2:	480e      	ldr	r0, [pc, #56]	; (80090ec <MX_USB_Device_Init+0x54>)
 80090b4:	f7fe ff30 	bl	8007f18 <USBD_RegisterClass>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090be:	f7f7 feff 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090c2:	490c      	ldr	r1, [pc, #48]	; (80090f4 <MX_USB_Device_Init+0x5c>)
 80090c4:	4809      	ldr	r0, [pc, #36]	; (80090ec <MX_USB_Device_Init+0x54>)
 80090c6:	f7fe fe5b 	bl	8007d80 <USBD_CDC_RegisterInterface>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090d0:	f7f7 fef6 	bl	8000ec0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090d4:	4805      	ldr	r0, [pc, #20]	; (80090ec <MX_USB_Device_Init+0x54>)
 80090d6:	f7fe ff46 	bl	8007f66 <USBD_Start>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090e0:	f7f7 feee 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090e4:	bf00      	nop
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000130 	.word	0x20000130
 80090ec:	200006a4 	.word	0x200006a4
 80090f0:	20000018 	.word	0x20000018
 80090f4:	2000011c 	.word	0x2000011c

080090f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090fc:	2200      	movs	r2, #0
 80090fe:	4905      	ldr	r1, [pc, #20]	; (8009114 <CDC_Init_FS+0x1c>)
 8009100:	4805      	ldr	r0, [pc, #20]	; (8009118 <CDC_Init_FS+0x20>)
 8009102:	f7fe fe52 	bl	8007daa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009106:	4905      	ldr	r1, [pc, #20]	; (800911c <CDC_Init_FS+0x24>)
 8009108:	4803      	ldr	r0, [pc, #12]	; (8009118 <CDC_Init_FS+0x20>)
 800910a:	f7fe fe67 	bl	8007ddc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800910e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009110:	4618      	mov	r0, r3
 8009112:	bd80      	pop	{r7, pc}
 8009114:	20000d5c 	.word	0x20000d5c
 8009118:	200006a4 	.word	0x200006a4
 800911c:	20000974 	.word	0x20000974

08009120 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009124:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009126:	4618      	mov	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
 800913c:	4613      	mov	r3, r2
 800913e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b23      	cmp	r3, #35	; 0x23
 8009144:	d84a      	bhi.n	80091dc <CDC_Control_FS+0xac>
 8009146:	a201      	add	r2, pc, #4	; (adr r2, 800914c <CDC_Control_FS+0x1c>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	080091dd 	.word	0x080091dd
 8009150:	080091dd 	.word	0x080091dd
 8009154:	080091dd 	.word	0x080091dd
 8009158:	080091dd 	.word	0x080091dd
 800915c:	080091dd 	.word	0x080091dd
 8009160:	080091dd 	.word	0x080091dd
 8009164:	080091dd 	.word	0x080091dd
 8009168:	080091dd 	.word	0x080091dd
 800916c:	080091dd 	.word	0x080091dd
 8009170:	080091dd 	.word	0x080091dd
 8009174:	080091dd 	.word	0x080091dd
 8009178:	080091dd 	.word	0x080091dd
 800917c:	080091dd 	.word	0x080091dd
 8009180:	080091dd 	.word	0x080091dd
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091dd 	.word	0x080091dd
 800918c:	080091dd 	.word	0x080091dd
 8009190:	080091dd 	.word	0x080091dd
 8009194:	080091dd 	.word	0x080091dd
 8009198:	080091dd 	.word	0x080091dd
 800919c:	080091dd 	.word	0x080091dd
 80091a0:	080091dd 	.word	0x080091dd
 80091a4:	080091dd 	.word	0x080091dd
 80091a8:	080091dd 	.word	0x080091dd
 80091ac:	080091dd 	.word	0x080091dd
 80091b0:	080091dd 	.word	0x080091dd
 80091b4:	080091dd 	.word	0x080091dd
 80091b8:	080091dd 	.word	0x080091dd
 80091bc:	080091dd 	.word	0x080091dd
 80091c0:	080091dd 	.word	0x080091dd
 80091c4:	080091dd 	.word	0x080091dd
 80091c8:	080091dd 	.word	0x080091dd
 80091cc:	080091dd 	.word	0x080091dd
 80091d0:	080091dd 	.word	0x080091dd
 80091d4:	080091dd 	.word	0x080091dd
 80091d8:	080091dd 	.word	0x080091dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091dc:	bf00      	nop
  }

  return (USBD_OK);
 80091de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7f7 f80d 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4805      	ldr	r0, [pc, #20]	; (8009218 <CDC_Receive_FS+0x2c>)
 8009202:	f7fe fdeb 	bl	8007ddc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009206:	4804      	ldr	r0, [pc, #16]	; (8009218 <CDC_Receive_FS+0x2c>)
 8009208:	f7fe fe2c 	bl	8007e64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800920c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200006a4 	.word	0x200006a4

0800921c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <CDC_Transmit_FS+0x48>)
 800922e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009232:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800923e:	2301      	movs	r3, #1
 8009240:	e00b      	b.n	800925a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009242:	887b      	ldrh	r3, [r7, #2]
 8009244:	461a      	mov	r2, r3
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	4806      	ldr	r0, [pc, #24]	; (8009264 <CDC_Transmit_FS+0x48>)
 800924a:	f7fe fdae 	bl	8007daa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800924e:	4805      	ldr	r0, [pc, #20]	; (8009264 <CDC_Transmit_FS+0x48>)
 8009250:	f7fe fdd8 	bl	8007e04 <USBD_CDC_TransmitPacket>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200006a4 	.word	0x200006a4

08009268 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800927a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800927e:	4618      	mov	r0, r3
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2212      	movs	r2, #18
 800929c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20000150 	.word	0x20000150

080092b0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2204      	movs	r2, #4
 80092c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092c2:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	20000164 	.word	0x20000164

080092d4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	6039      	str	r1, [r7, #0]
 80092de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d105      	bne.n	80092f2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4907      	ldr	r1, [pc, #28]	; (8009308 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092ea:	4808      	ldr	r0, [pc, #32]	; (800930c <USBD_CDC_ProductStrDescriptor+0x38>)
 80092ec:	f7ff fdf3 	bl	8008ed6 <USBD_GetString>
 80092f0:	e004      	b.n	80092fc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4904      	ldr	r1, [pc, #16]	; (8009308 <USBD_CDC_ProductStrDescriptor+0x34>)
 80092f6:	4805      	ldr	r0, [pc, #20]	; (800930c <USBD_CDC_ProductStrDescriptor+0x38>)
 80092f8:	f7ff fded 	bl	8008ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20001144 	.word	0x20001144
 800930c:	08009b10 	.word	0x08009b10

08009310 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	4603      	mov	r3, r0
 8009318:	6039      	str	r1, [r7, #0]
 800931a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	4904      	ldr	r1, [pc, #16]	; (8009330 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009320:	4804      	ldr	r0, [pc, #16]	; (8009334 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009322:	f7ff fdd8 	bl	8008ed6 <USBD_GetString>
  return USBD_StrDesc;
 8009326:	4b02      	ldr	r3, [pc, #8]	; (8009330 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20001144 	.word	0x20001144
 8009334:	08009b28 	.word	0x08009b28

08009338 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	221a      	movs	r2, #26
 8009348:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800934a:	f000 f843 	bl	80093d4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800934e:	4b02      	ldr	r3, [pc, #8]	; (8009358 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000168 	.word	0x20000168

0800935c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	4907      	ldr	r1, [pc, #28]	; (8009390 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009372:	4808      	ldr	r0, [pc, #32]	; (8009394 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009374:	f7ff fdaf 	bl	8008ed6 <USBD_GetString>
 8009378:	e004      	b.n	8009384 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	4904      	ldr	r1, [pc, #16]	; (8009390 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800937e:	4805      	ldr	r0, [pc, #20]	; (8009394 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009380:	f7ff fda9 	bl	8008ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20001144 	.word	0x20001144
 8009394:	08009b3c 	.word	0x08009b3c

08009398 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d105      	bne.n	80093b6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4907      	ldr	r1, [pc, #28]	; (80093cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093ae:	4808      	ldr	r0, [pc, #32]	; (80093d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093b0:	f7ff fd91 	bl	8008ed6 <USBD_GetString>
 80093b4:	e004      	b.n	80093c0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	4904      	ldr	r1, [pc, #16]	; (80093cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093ba:	4805      	ldr	r0, [pc, #20]	; (80093d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093bc:	f7ff fd8b 	bl	8008ed6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c0:	4b02      	ldr	r3, [pc, #8]	; (80093cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20001144 	.word	0x20001144
 80093d0:	08009b48 	.word	0x08009b48

080093d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093da:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <Get_SerialNum+0x44>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093e0:	4b0e      	ldr	r3, [pc, #56]	; (800941c <Get_SerialNum+0x48>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093e6:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <Get_SerialNum+0x4c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093fa:	2208      	movs	r2, #8
 80093fc:	4909      	ldr	r1, [pc, #36]	; (8009424 <Get_SerialNum+0x50>)
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 f814 	bl	800942c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009404:	2204      	movs	r2, #4
 8009406:	4908      	ldr	r1, [pc, #32]	; (8009428 <Get_SerialNum+0x54>)
 8009408:	68b8      	ldr	r0, [r7, #8]
 800940a:	f000 f80f 	bl	800942c <IntToUnicode>
  }
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	1fff7590 	.word	0x1fff7590
 800941c:	1fff7594 	.word	0x1fff7594
 8009420:	1fff7598 	.word	0x1fff7598
 8009424:	2000016a 	.word	0x2000016a
 8009428:	2000017a 	.word	0x2000017a

0800942c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800943e:	2300      	movs	r3, #0
 8009440:	75fb      	strb	r3, [r7, #23]
 8009442:	e027      	b.n	8009494 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	0f1b      	lsrs	r3, r3, #28
 8009448:	2b09      	cmp	r3, #9
 800944a:	d80b      	bhi.n	8009464 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	b2da      	uxtb	r2, r3
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4619      	mov	r1, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	440b      	add	r3, r1
 800945c:	3230      	adds	r2, #48	; 0x30
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	e00a      	b.n	800947a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	0f1b      	lsrs	r3, r3, #28
 8009468:	b2da      	uxtb	r2, r3
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	4619      	mov	r1, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	440b      	add	r3, r1
 8009474:	3237      	adds	r2, #55	; 0x37
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	3301      	adds	r3, #1
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	4413      	add	r3, r2
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	3301      	adds	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
 8009494:	7dfa      	ldrb	r2, [r7, #23]
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	429a      	cmp	r2, r3
 800949a:	d3d3      	bcc.n	8009444 <IntToUnicode+0x18>
  }
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <HAL_PCD_MspInit+0x44>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d113      	bne.n	80094e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094ba:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <HAL_PCD_MspInit+0x48>)
 80094bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094be:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <HAL_PCD_MspInit+0x48>)
 80094c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094c4:	6593      	str	r3, [r2, #88]	; 0x58
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <HAL_PCD_MspInit+0x48>)
 80094c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80094d2:	2200      	movs	r2, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	2014      	movs	r0, #20
 80094d8:	f7f8 f92b 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80094dc:	2014      	movs	r0, #20
 80094de:	f7f8 f942 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	40005c00 	.word	0x40005c00
 80094f0:	40021000 	.word	0x40021000

080094f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fe fd76 	bl	8007ffc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	440b      	add	r3, r1
 8009538:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	4619      	mov	r1, r3
 8009542:	f7fe fdae 	bl	80080a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	440b      	add	r3, r1
 800956e:	333c      	adds	r3, #60	; 0x3c
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	4619      	mov	r1, r3
 8009576:	f7fe fdf7 	bl	8008168 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe fefb 	bl	800838c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095a6:	2301      	movs	r3, #1
 80095a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d001      	beq.n	80095b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095b2:	f7f7 fc85 	bl	8000ec0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095bc:	7bfa      	ldrb	r2, [r7, #15]
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fea8 	bl	8008316 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe fe61 	bl	8008294 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe fea3 	bl	8008336 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <HAL_PCD_SuspendCallback+0x30>)
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	4a03      	ldr	r2, [pc, #12]	; (800960c <HAL_PCD_SuspendCallback+0x30>)
 80095fe:	f043 0306 	orr.w	r3, r3, #6
 8009602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	e000ed00 	.word	0xe000ed00

08009610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009620:	4b08      	ldr	r3, [pc, #32]	; (8009644 <HAL_PCD_ResumeCallback+0x34>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	4a07      	ldr	r2, [pc, #28]	; (8009644 <HAL_PCD_ResumeCallback+0x34>)
 8009626:	f023 0306 	bic.w	r3, r3, #6
 800962a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800962c:	f000 f9fa 	bl	8009a24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fe92 	bl	8008360 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000ed00 	.word	0xe000ed00

08009648 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009650:	4a2b      	ldr	r2, [pc, #172]	; (8009700 <USBD_LL_Init+0xb8>)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a29      	ldr	r2, [pc, #164]	; (8009700 <USBD_LL_Init+0xb8>)
 800965c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <USBD_LL_Init+0xb8>)
 8009662:	4a28      	ldr	r2, [pc, #160]	; (8009704 <USBD_LL_Init+0xbc>)
 8009664:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009666:	4b26      	ldr	r3, [pc, #152]	; (8009700 <USBD_LL_Init+0xb8>)
 8009668:	2208      	movs	r2, #8
 800966a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800966c:	4b24      	ldr	r3, [pc, #144]	; (8009700 <USBD_LL_Init+0xb8>)
 800966e:	2202      	movs	r2, #2
 8009670:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009672:	4b23      	ldr	r3, [pc, #140]	; (8009700 <USBD_LL_Init+0xb8>)
 8009674:	2202      	movs	r2, #2
 8009676:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009678:	4b21      	ldr	r3, [pc, #132]	; (8009700 <USBD_LL_Init+0xb8>)
 800967a:	2200      	movs	r2, #0
 800967c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800967e:	4b20      	ldr	r3, [pc, #128]	; (8009700 <USBD_LL_Init+0xb8>)
 8009680:	2200      	movs	r2, #0
 8009682:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009684:	4b1e      	ldr	r3, [pc, #120]	; (8009700 <USBD_LL_Init+0xb8>)
 8009686:	2200      	movs	r2, #0
 8009688:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800968a:	4b1d      	ldr	r3, [pc, #116]	; (8009700 <USBD_LL_Init+0xb8>)
 800968c:	2200      	movs	r2, #0
 800968e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009690:	481b      	ldr	r0, [pc, #108]	; (8009700 <USBD_LL_Init+0xb8>)
 8009692:	f7f8 fa37 	bl	8001b04 <HAL_PCD_Init>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800969c:	f7f7 fc10 	bl	8000ec0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096a6:	2318      	movs	r3, #24
 80096a8:	2200      	movs	r2, #0
 80096aa:	2100      	movs	r1, #0
 80096ac:	f7f9 fd25 	bl	80030fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096b6:	2358      	movs	r3, #88	; 0x58
 80096b8:	2200      	movs	r2, #0
 80096ba:	2180      	movs	r1, #128	; 0x80
 80096bc:	f7f9 fd1d 	bl	80030fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096c6:	23c0      	movs	r3, #192	; 0xc0
 80096c8:	2200      	movs	r2, #0
 80096ca:	2181      	movs	r1, #129	; 0x81
 80096cc:	f7f9 fd15 	bl	80030fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096da:	2200      	movs	r2, #0
 80096dc:	2101      	movs	r1, #1
 80096de:	f7f9 fd0c 	bl	80030fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ec:	2200      	movs	r2, #0
 80096ee:	2182      	movs	r1, #130	; 0x82
 80096f0:	f7f9 fd03 	bl	80030fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20001344 	.word	0x20001344
 8009704:	40005c00 	.word	0x40005c00

08009708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800971e:	4618      	mov	r0, r3
 8009720:	f7f8 fad5 	bl	8001cce <HAL_PCD_Start>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f980 	bl	8009a30 <USBD_Get_USB_Status>
 8009730:	4603      	mov	r3, r0
 8009732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009734:	7bbb      	ldrb	r3, [r7, #14]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	461a      	mov	r2, r3
 800974c:	4603      	mov	r3, r0
 800974e:	70fb      	strb	r3, [r7, #3]
 8009750:	460b      	mov	r3, r1
 8009752:	70bb      	strb	r3, [r7, #2]
 8009754:	4613      	mov	r3, r2
 8009756:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009766:	78bb      	ldrb	r3, [r7, #2]
 8009768:	883a      	ldrh	r2, [r7, #0]
 800976a:	78f9      	ldrb	r1, [r7, #3]
 800976c:	f7f8 fc44 	bl	8001ff8 <HAL_PCD_EP_Open>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f95a 	bl	8009a30 <USBD_Get_USB_Status>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009780:	7bbb      	ldrb	r3, [r7, #14]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	460b      	mov	r3, r1
 8009794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097a4:	78fa      	ldrb	r2, [r7, #3]
 80097a6:	4611      	mov	r1, r2
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7f8 fc8b 	bl	80020c4 <HAL_PCD_EP_Close>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f93b 	bl	8009a30 <USBD_Get_USB_Status>
 80097ba:	4603      	mov	r3, r0
 80097bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097be:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7f8 fd4c 	bl	8002284 <HAL_PCD_EP_SetStall>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 f91c 	bl	8009a30 <USBD_Get_USB_Status>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009820:	78fa      	ldrb	r2, [r7, #3]
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7f8 fd8d 	bl	8002344 <HAL_PCD_EP_ClrStall>
 800982a:	4603      	mov	r3, r0
 800982c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	4618      	mov	r0, r3
 8009832:	f000 f8fd 	bl	8009a30 <USBD_Get_USB_Status>
 8009836:	4603      	mov	r3, r0
 8009838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800983a:	7bbb      	ldrb	r3, [r7, #14]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009856:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800985c:	2b00      	cmp	r3, #0
 800985e:	da0c      	bge.n	800987a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	440b      	add	r3, r1
 8009874:	3302      	adds	r3, #2
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	e00b      	b.n	8009892 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009880:	68f9      	ldr	r1, [r7, #12]
 8009882:	4613      	mov	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	440b      	add	r3, r1
 800988c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009890:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7f8 fb76 	bl	8001fae <HAL_PCD_SetAddress>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f8b1 	bl	8009a30 <USBD_Get_USB_Status>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	603b      	str	r3, [r7, #0]
 80098e8:	460b      	mov	r3, r1
 80098ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098fa:	7af9      	ldrb	r1, [r7, #11]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	f7f8 fc7d 	bl	80021fe <HAL_PCD_EP_Transmit>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f890 	bl	8009a30 <USBD_Get_USB_Status>
 8009910:	4603      	mov	r3, r0
 8009912:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009914:	7dbb      	ldrb	r3, [r7, #22]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	460b      	mov	r3, r1
 800992c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800993c:	7af9      	ldrb	r1, [r7, #11]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f7f8 fc07 	bl	8002154 <HAL_PCD_EP_Receive>
 8009946:	4603      	mov	r3, r0
 8009948:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	4618      	mov	r0, r3
 800994e:	f000 f86f 	bl	8009a30 <USBD_Get_USB_Status>
 8009952:	4603      	mov	r3, r0
 8009954:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009956:	7dbb      	ldrb	r3, [r7, #22]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7f8 fc29 	bl	80021ce <HAL_PCD_EP_GetRxCount>
 800997c:	4603      	mov	r3, r0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <HAL_PCDEx_LPM_Callback+0x18>
 800999a:	2b01      	cmp	r3, #1
 800999c:	d013      	beq.n	80099c6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800999e:	e023      	b.n	80099e8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099a8:	f000 f83c 	bl	8009a24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099ac:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	4a0f      	ldr	r2, [pc, #60]	; (80099f0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099b2:	f023 0306 	bic.w	r3, r3, #6
 80099b6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fcce 	bl	8008360 <USBD_LL_Resume>
    break;
 80099c4:	e010      	b.n	80099e8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe fcb2 	bl	8008336 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d005      	beq.n	80099e6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099da:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	4a04      	ldr	r2, [pc, #16]	; (80099f0 <HAL_PCDEx_LPM_Callback+0x68>)
 80099e0:	f043 0306 	orr.w	r3, r3, #6
 80099e4:	6113      	str	r3, [r2, #16]
    break;
 80099e6:	bf00      	nop
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	e000ed00 	.word	0xe000ed00

080099f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099fc:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <USBD_static_malloc+0x18>)
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	200001d4 	.word	0x200001d4

08009a10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a28:	f7f6 fd16 	bl	8000458 <SystemClock_Config>
}
 8009a2c:	bf00      	nop
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d817      	bhi.n	8009a74 <USBD_Get_USB_Status+0x44>
 8009a44:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <USBD_Get_USB_Status+0x1c>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009a63 	.word	0x08009a63
 8009a54:	08009a69 	.word	0x08009a69
 8009a58:	08009a6f 	.word	0x08009a6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a60:	e00b      	b.n	8009a7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	73fb      	strb	r3, [r7, #15]
    break;
 8009a66:	e008      	b.n	8009a7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a6c:	e005      	b.n	8009a7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	73fb      	strb	r3, [r7, #15]
    break;
 8009a72:	e002      	b.n	8009a7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	bf00      	nop
  }
  return usb_status;
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <__libc_init_array>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	4e0d      	ldr	r6, [pc, #52]	; (8009ac0 <__libc_init_array+0x38>)
 8009a8c:	4c0d      	ldr	r4, [pc, #52]	; (8009ac4 <__libc_init_array+0x3c>)
 8009a8e:	1ba4      	subs	r4, r4, r6
 8009a90:	10a4      	asrs	r4, r4, #2
 8009a92:	2500      	movs	r5, #0
 8009a94:	42a5      	cmp	r5, r4
 8009a96:	d109      	bne.n	8009aac <__libc_init_array+0x24>
 8009a98:	4e0b      	ldr	r6, [pc, #44]	; (8009ac8 <__libc_init_array+0x40>)
 8009a9a:	4c0c      	ldr	r4, [pc, #48]	; (8009acc <__libc_init_array+0x44>)
 8009a9c:	f000 f82c 	bl	8009af8 <_init>
 8009aa0:	1ba4      	subs	r4, r4, r6
 8009aa2:	10a4      	asrs	r4, r4, #2
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	42a5      	cmp	r5, r4
 8009aa8:	d105      	bne.n	8009ab6 <__libc_init_array+0x2e>
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ab0:	4798      	blx	r3
 8009ab2:	3501      	adds	r5, #1
 8009ab4:	e7ee      	b.n	8009a94 <__libc_init_array+0xc>
 8009ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aba:	4798      	blx	r3
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7f2      	b.n	8009aa6 <__libc_init_array+0x1e>
 8009ac0:	08009b68 	.word	0x08009b68
 8009ac4:	08009b68 	.word	0x08009b68
 8009ac8:	08009b68 	.word	0x08009b68
 8009acc:	08009b6c 	.word	0x08009b6c

08009ad0 <memcpy>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	1e43      	subs	r3, r0, #1
 8009ad4:	440a      	add	r2, r1
 8009ad6:	4291      	cmp	r1, r2
 8009ad8:	d100      	bne.n	8009adc <memcpy+0xc>
 8009ada:	bd10      	pop	{r4, pc}
 8009adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ae4:	e7f7      	b.n	8009ad6 <memcpy+0x6>

08009ae6 <memset>:
 8009ae6:	4402      	add	r2, r0
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d100      	bne.n	8009af0 <memset+0xa>
 8009aee:	4770      	bx	lr
 8009af0:	f803 1b01 	strb.w	r1, [r3], #1
 8009af4:	e7f9      	b.n	8009aea <memset+0x4>
	...

08009af8 <_init>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	bf00      	nop
 8009afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afe:	bc08      	pop	{r3}
 8009b00:	469e      	mov	lr, r3
 8009b02:	4770      	bx	lr

08009b04 <_fini>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr
