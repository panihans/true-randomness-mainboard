
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d1c  08009d1c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009d1c  08009d1c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d1c  08009d1c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  20000184  08009ea8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  08009ea8  00021648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad9a  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003456  00000000  00000000  0003af4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  0003e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003f750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205f4  00000000  00000000  00040980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c39  00000000  00000000  00060f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c446e  00000000  00000000  00072bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013701b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f4  00000000  00000000  00137098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009cac 	.word	0x08009cac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009cac 	.word	0x08009cac

08000218 <CDC_On_Receive>:
volatile int32_t motor1_target_rpm = 0;
volatile int32_t motor2_target_rpm = 0;
volatile int32_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b1c      	cmp	r3, #28
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	221c      	movs	r2, #28
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fd28 	bl	8009c84 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001d8 	.word	0x200001d8

08000258 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t * channel_a, volatile uint32_t * channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dd15      	ble.n	8000296 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b64      	cmp	r3, #100	; 0x64
 800026e:	dc0b      	bgt.n	8000288 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000276:	fb02 f303 	mul.w	r3, r2, r3
 800027a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800027e:	3320      	adds	r3, #32
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000294:	e020      	b.n	80002d8 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	da17      	bge.n	80002cc <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002a2:	db0a      	blt.n	80002ba <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <Set_Motor_Speed+0x8c>)
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80002b0:	3320      	adds	r3, #32
 80002b2:	461a      	mov	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e004      	b.n	80002c4 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	425b      	negs	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	e005      	b.n	80002d8 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	fffffe3e 	.word	0xfffffe3e

080002e8 <Set_Thrower_Speed>:

inline void Set_Thrower_Speed(volatile uint32_t * channel_a, int32_t thrower_speed) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dd0e      	ble.n	8000316 <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	dc0f      	bgt.n	800031e <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	1a9b      	subs	r3, r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800030c:	3308      	adds	r3, #8
 800030e:	461a      	mov	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000314:	e003      	b.n	800031e <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t * channel_a, int32_t servo_speed, GPIO_PinState ir_status, int32_t ir_control) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	4613      	mov	r3, r2
 800033a:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d005      	beq.n	800034e <Set_Servo_Speed+0x22>
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d02a      	beq.n	800039e <Set_Servo_Speed+0x72>
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d027      	beq.n	800039e <Set_Servo_Speed+0x72>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b00      	cmp	r3, #0
 8000352:	dd0c      	ble.n	800036e <Set_Servo_Speed+0x42>
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b64      	cmp	r3, #100	; 0x64
 8000358:	dc09      	bgt.n	800036e <Set_Servo_Speed+0x42>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <Set_Servo_Speed+0x80>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f5c3 6392 	rsb	r3, r3, #1168	; 0x490
 8000362:	3307      	adds	r3, #7
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	461a      	mov	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e017      	b.n	800039e <Set_Servo_Speed+0x72>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <Set_Servo_Speed+0x80>)
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	2b00      	cmp	r3, #0
 8000374:	da0f      	bge.n	8000396 <Set_Servo_Speed+0x6a>
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800037c:	db0b      	blt.n	8000396 <Set_Servo_Speed+0x6a>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <Set_Servo_Speed+0x80>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f2a3 42e2 	subw	r2, r3, #1250	; 0x4e2
 8000386:	4613      	mov	r3, r2
 8000388:	079b      	lsls	r3, r3, #30
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	461a      	mov	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	e003      	b.n	800039e <Set_Servo_Speed+0x72>
		} else {
			*channel_a = 0;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800039c:	e7ff      	b.n	800039e <Set_Servo_Speed+0x72>
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	200001a0 	.word	0x200001a0

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b598      	push	{r3, r4, r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f001 f933 	bl	800161e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f8e4 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 fd38 	bl	8000e30 <MX_GPIO_Init>
  MX_TIM4_Init();
 80003c0:	f000 fac0 	bl	8000944 <MX_TIM4_Init>
  MX_TIM8_Init();
 80003c4:	f000 fb4a 	bl	8000a5c <MX_TIM8_Init>
  MX_TIM15_Init();
 80003c8:	f000 fbb8 	bl	8000b3c <MX_TIM15_Init>
  MX_TIM16_Init();
 80003cc:	f000 fc3c 	bl	8000c48 <MX_TIM16_Init>
  MX_TIM1_Init();
 80003d0:	f000 f940 	bl	8000654 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003d4:	f000 f9ee 	bl	80007b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d8:	f000 fa40 	bl	800085c <MX_TIM3_Init>
  MX_TIM7_Init();
 80003dc:	f000 fb08 	bl	80009f0 <MX_TIM7_Init>
  MX_TIM17_Init();
 80003e0:	f000 fcac 	bl	8000d3c <MX_TIM17_Init>
  MX_USB_Device_Init();
 80003e4:	f008 ff32 	bl	800924c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003e8:	2104      	movs	r1, #4
 80003ea:	484b      	ldr	r0, [pc, #300]	; (8000518 <main+0x168>)
 80003ec:	f004 fa2c 	bl	8004848 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003f0:	2104      	movs	r1, #4
 80003f2:	484a      	ldr	r0, [pc, #296]	; (800051c <main+0x16c>)
 80003f4:	f004 fa28 	bl	8004848 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003f8:	2104      	movs	r1, #4
 80003fa:	4849      	ldr	r0, [pc, #292]	; (8000520 <main+0x170>)
 80003fc:	f004 fa24 	bl	8004848 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000400:	2100      	movs	r1, #0
 8000402:	4848      	ldr	r0, [pc, #288]	; (8000524 <main+0x174>)
 8000404:	f004 f87a 	bl	80044fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000408:	2104      	movs	r1, #4
 800040a:	4846      	ldr	r0, [pc, #280]	; (8000524 <main+0x174>)
 800040c:	f004 f876 	bl	80044fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000410:	2108      	movs	r1, #8
 8000412:	4844      	ldr	r0, [pc, #272]	; (8000524 <main+0x174>)
 8000414:	f004 f872 	bl	80044fc <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000418:	4b43      	ldr	r3, [pc, #268]	; (8000528 <main+0x178>)
 800041a:	2200      	movs	r2, #0
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800041e:	4b42      	ldr	r3, [pc, #264]	; (8000528 <main+0x178>)
 8000420:	2200      	movs	r2, #0
 8000422:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000424:	4b40      	ldr	r3, [pc, #256]	; (8000528 <main+0x178>)
 8000426:	2200      	movs	r2, #0
 8000428:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800042a:	2100      	movs	r1, #0
 800042c:	483f      	ldr	r0, [pc, #252]	; (800052c <main+0x17c>)
 800042e:	f004 f865 	bl	80044fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000432:	2104      	movs	r1, #4
 8000434:	483d      	ldr	r0, [pc, #244]	; (800052c <main+0x17c>)
 8000436:	f004 f861 	bl	80044fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800043a:	2108      	movs	r1, #8
 800043c:	483b      	ldr	r0, [pc, #236]	; (800052c <main+0x17c>)
 800043e:	f004 f85d 	bl	80044fc <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 8000442:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <main+0x180>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 8000448:	4b39      	ldr	r3, [pc, #228]	; (8000530 <main+0x180>)
 800044a:	2200      	movs	r2, #0
 800044c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 800044e:	4b38      	ldr	r3, [pc, #224]	; (8000530 <main+0x180>)
 8000450:	2200      	movs	r2, #0
 8000452:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000454:	2100      	movs	r1, #0
 8000456:	4837      	ldr	r0, [pc, #220]	; (8000534 <main+0x184>)
 8000458:	f004 f850 	bl	80044fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800045c:	2100      	movs	r1, #0
 800045e:	4836      	ldr	r0, [pc, #216]	; (8000538 <main+0x188>)
 8000460:	f004 f84c 	bl	80044fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000464:	2100      	movs	r1, #0
 8000466:	4835      	ldr	r0, [pc, #212]	; (800053c <main+0x18c>)
 8000468:	f004 f848 	bl	80044fc <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 800046c:	4b34      	ldr	r3, [pc, #208]	; (8000540 <main+0x190>)
 800046e:	2200      	movs	r2, #0
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = ESC_IDLE_CCR;
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <main+0x194>)
 8000474:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 800047a:	4b33      	ldr	r3, [pc, #204]	; (8000548 <main+0x198>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000480:	4832      	ldr	r0, [pc, #200]	; (800054c <main+0x19c>)
 8000482:	f003 ff79 	bl	8004378 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 8000486:	4b32      	ldr	r3, [pc, #200]	; (8000550 <main+0x1a0>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b01      	cmp	r3, #1
 800048e:	d1fa      	bne.n	8000486 <main+0xd6>
		command_received = 0;
 8000490:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <main+0x1a0>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		command_received_ticker = 60;
 8000496:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <main+0x1a4>)
 8000498:	223c      	movs	r2, #60	; 0x3c
 800049a:	701a      	strb	r2, [r3, #0]

		// toggle led
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800049c:	2120      	movs	r1, #32
 800049e:	482e      	ldr	r0, [pc, #184]	; (8000558 <main+0x1a8>)
 80004a0:	f001 fbf0 	bl	8001c84 <HAL_GPIO_TogglePin>

		feedback.thrower = 666;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <main+0x1ac>)
 80004a6:	f240 229a 	movw	r2, #666	; 0x29a
 80004aa:	60da      	str	r2, [r3, #12]
		feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80004ac:	2108      	movs	r1, #8
 80004ae:	482a      	ldr	r0, [pc, #168]	; (8000558 <main+0x1a8>)
 80004b0:	f001 fbb8 	bl	8001c24 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <main+0x1ac>)
 80004ba:	615a      	str	r2, [r3, #20]
//			}
//		} else {
//			Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), command.motor1);
//		}

		Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), command.motor1);
 80004bc:	4b28      	ldr	r3, [pc, #160]	; (8000560 <main+0x1b0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4928      	ldr	r1, [pc, #160]	; (8000564 <main+0x1b4>)
 80004c4:	4828      	ldr	r0, [pc, #160]	; (8000568 <main+0x1b8>)
 80004c6:	f7ff fec7 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
 80004ca:	4b25      	ldr	r3, [pc, #148]	; (8000560 <main+0x1b0>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4926      	ldr	r1, [pc, #152]	; (800056c <main+0x1bc>)
 80004d2:	4827      	ldr	r0, [pc, #156]	; (8000570 <main+0x1c0>)
 80004d4:	f7ff fec0 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <main+0x1b0>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	461a      	mov	r2, r3
 80004de:	4925      	ldr	r1, [pc, #148]	; (8000574 <main+0x1c4>)
 80004e0:	4825      	ldr	r0, [pc, #148]	; (8000578 <main+0x1c8>)
 80004e2:	f7ff feb9 	bl	8000258 <Set_Motor_Speed>

		Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <main+0x1b0>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	4619      	mov	r1, r3
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <main+0x1cc>)
 80004ee:	f7ff fefb 	bl	80002e8 <Set_Thrower_Speed>

		Set_Servo_Speed(&(TIM17->CCR1), command.servo, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <main+0x1b0>)
 80004f4:	691c      	ldr	r4, [r3, #16]
 80004f6:	2108      	movs	r1, #8
 80004f8:	4817      	ldr	r0, [pc, #92]	; (8000558 <main+0x1a8>)
 80004fa:	f001 fb93 	bl	8001c24 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0x1b0>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4621      	mov	r1, r4
 8000508:	481d      	ldr	r0, [pc, #116]	; (8000580 <main+0x1d0>)
 800050a:	f7ff ff0f 	bl	800032c <Set_Servo_Speed>

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 800050e:	211c      	movs	r1, #28
 8000510:	4812      	ldr	r0, [pc, #72]	; (800055c <main+0x1ac>)
 8000512:	f008 ff5d 	bl	80093d0 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000516:	e7b6      	b.n	8000486 <main+0xd6>
 8000518:	200005cc 	.word	0x200005cc
 800051c:	20000450 	.word	0x20000450
 8000520:	20000404 	.word	0x20000404
 8000524:	20000580 	.word	0x20000580
 8000528:	40012c00 	.word	0x40012c00
 800052c:	20000534 	.word	0x20000534
 8000530:	40000400 	.word	0x40000400
 8000534:	2000049c 	.word	0x2000049c
 8000538:	20000618 	.word	0x20000618
 800053c:	200004e8 	.word	0x200004e8
 8000540:	40014000 	.word	0x40014000
 8000544:	40014400 	.word	0x40014400
 8000548:	40014800 	.word	0x40014800
 800054c:	20000664 	.word	0x20000664
 8000550:	200001d8 	.word	0x200001d8
 8000554:	200001d9 	.word	0x200001d9
 8000558:	48000400 	.word	0x48000400
 800055c:	200001bc 	.word	0x200001bc
 8000560:	200001a0 	.word	0x200001a0
 8000564:	40012c3c 	.word	0x40012c3c
 8000568:	40012c38 	.word	0x40012c38
 800056c:	4000043c 	.word	0x4000043c
 8000570:	40012c34 	.word	0x40012c34
 8000574:	40000438 	.word	0x40000438
 8000578:	40000434 	.word	0x40000434
 800057c:	40014434 	.word	0x40014434
 8000580:	40014834 	.word	0x40014834

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a4      	sub	sp, #144	; 0x90
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800058e:	2238      	movs	r2, #56	; 0x38
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f009 fb81 	bl	8009c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2244      	movs	r2, #68	; 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f009 fb73 	bl	8009c9a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f002 fee7 	bl	8003388 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005ba:	2322      	movs	r3, #34	; 0x22
 80005bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005d8:	2314      	movs	r3, #20
 80005da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 ff7b 	bl	80034f0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000600:	f000 fd20 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000618:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800061c:	2104      	movs	r1, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fa7e 	bl	8003b20 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062a:	f000 fd0b 	bl	8001044 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800062e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000632:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000634:	2300      	movs	r3, #0
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fc54 	bl	8003ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 fcfd 	bl	8001044 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3790      	adds	r7, #144	; 0x90
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	; 0x60
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2234      	movs	r2, #52	; 0x34
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f009 fb0a 	bl	8009c9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b49      	ldr	r3, [pc, #292]	; (80007ac <MX_TIM1_Init+0x158>)
 8000688:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <MX_TIM1_Init+0x15c>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800068c:	4b47      	ldr	r3, [pc, #284]	; (80007ac <MX_TIM1_Init+0x158>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b46      	ldr	r3, [pc, #280]	; (80007ac <MX_TIM1_Init+0x158>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <MX_TIM1_Init+0x158>)
 800069a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b42      	ldr	r3, [pc, #264]	; (80007ac <MX_TIM1_Init+0x158>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a6:	4b41      	ldr	r3, [pc, #260]	; (80007ac <MX_TIM1_Init+0x158>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <MX_TIM1_Init+0x158>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b2:	483e      	ldr	r0, [pc, #248]	; (80007ac <MX_TIM1_Init+0x158>)
 80006b4:	f003 feca 	bl	800444c <HAL_TIM_PWM_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fcc1 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d2:	4619      	mov	r1, r3
 80006d4:	4835      	ldr	r0, [pc, #212]	; (80007ac <MX_TIM1_Init+0x158>)
 80006d6:	f004 ffa7 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fcb0 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ec:	2300      	movs	r3, #0
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000700:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	4828      	ldr	r0, [pc, #160]	; (80007ac <MX_TIM1_Init+0x158>)
 800070a:	f004 faa9 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000714:	f000 fc96 	bl	8001044 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800071c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000720:	2204      	movs	r2, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4821      	ldr	r0, [pc, #132]	; (80007ac <MX_TIM1_Init+0x158>)
 8000726:	f004 fa9b 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000730:	f000 fc88 	bl	8001044 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073c:	2208      	movs	r2, #8
 800073e:	4619      	mov	r1, r3
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <MX_TIM1_Init+0x158>)
 8000742:	f004 fa8d 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800074c:	f000 fc7a 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <MX_TIM1_Init+0x158>)
 800078e:	f004 ffcd 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000798:	f000 fc54 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM1_Init+0x158>)
 800079e:	f000 fdd5 	bl	800134c <HAL_TIM_MspPostInit>

}
 80007a2:	bf00      	nop
 80007a4:	3760      	adds	r7, #96	; 0x60
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000580 	.word	0x20000580
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2224      	movs	r2, #36	; 0x24
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f009 fa69 	bl	8009c9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000812:	2301      	movs	r3, #1
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_TIM2_Init+0xa4>)
 8000826:	f003 ff69 	bl	80046fc <HAL_TIM_Encoder_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000830:	f000 fc08 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM2_Init+0xa4>)
 8000842:	f004 fef1 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800084c:	f000 fbfa 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200005cc 	.word	0x200005cc

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <MX_TIM3_Init+0xe0>)
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <MX_TIM3_Init+0xe4>)
 8000884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_TIM3_Init+0xe0>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_TIM3_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_TIM3_Init+0xe0>)
 8000894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_TIM3_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_TIM3_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <MX_TIM3_Init+0xe0>)
 80008a8:	f003 fdd0 	bl	800444c <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008b2:	f000 fbc7 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_TIM3_Init+0xe0>)
 80008c6:	f004 feaf 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008d0:	f000 fbb8 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	; 0x60
 80008d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <MX_TIM3_Init+0xe0>)
 80008ec:	f004 f9b8 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008f6:	f000 fba5 	bl	8001044 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	2204      	movs	r2, #4
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_TIM3_Init+0xe0>)
 8000906:	f004 f9ab 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000910:	f000 fb98 	bl	8001044 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2208      	movs	r2, #8
 800091c:	4619      	mov	r1, r3
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_TIM3_Init+0xe0>)
 8000920:	f004 f99e 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800092a:	f000 fb8b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <MX_TIM3_Init+0xe0>)
 8000930:	f000 fd0c 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000534 	.word	0x20000534
 8000940:	40000400 	.word	0x40000400

08000944 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2224      	movs	r2, #36	; 0x24
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f009 f9a1 	bl	8009c9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_TIM4_Init+0xa8>)
 8000966:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_TIM4_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM4_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000988:	2303      	movs	r3, #3
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_TIM4_Init+0xa4>)
 80009b4:	f003 fea2 	bl	80046fc <HAL_TIM_Encoder_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009be:	f000 fb41 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_TIM4_Init+0xa4>)
 80009d0:	f004 fe2a 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009da:	f000 fb33 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000450 	.word	0x20000450
 80009ec:	40000800 	.word	0x40000800

080009f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_TIM7_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a08:	2228      	movs	r2, #40	; 0x28
 8000a0a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65044;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a14:	f64f 6214 	movw	r2, #65044	; 0xfe14
 8000a18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a22:	f003 fc51 	bl	80042c8 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a2c:	f000 fb0a 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a3e:	f004 fdf3 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fafc 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000664 	.word	0x20000664
 8000a58:	40001400 	.word	0x40001400

08000a5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09a      	sub	sp, #104	; 0x68
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a66:	2224      	movs	r2, #36	; 0x24
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f009 f915 	bl	8009c9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2234      	movs	r2, #52	; 0x34
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 f909 	bl	8009c9a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <MX_TIM8_Init+0xdc>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000abc:	2301      	movs	r3, #1
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000acc:	2301      	movs	r3, #1
 8000ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000ad8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000ae0:	f003 fe0c 	bl	80046fc <HAL_TIM_Encoder_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000aea:	f000 faab 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000b02:	f004 fd91 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000b0c:	f000 fa9a 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000b1e:	f004 fe05 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000b28:	f000 fa8c 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3768      	adds	r7, #104	; 0x68
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000404 	.word	0x20000404
 8000b38:	40013400 	.word	0x40013400

08000b3c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b098      	sub	sp, #96	; 0x60
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2234      	movs	r2, #52	; 0x34
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f009 f896 	bl	8009c9a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b6e:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b70:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <MX_TIM15_Init+0x108>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b9a:	4829      	ldr	r0, [pc, #164]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b9c:	f003 fc56 	bl	800444c <HAL_TIM_PWM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 fa4d 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000bba:	f004 fd35 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 fa3e 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	; 0x60
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000bee:	f004 f837 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000bf8:	f000 fa24 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000c24:	f004 fd82 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000c2e:	f000 fa09 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000c34:	f000 fb8a 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000c38:	bf00      	nop
 8000c3a:	3760      	adds	r7, #96	; 0x60
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000049c 	.word	0x2000049c
 8000c44:	40014000 	.word	0x40014000

08000c48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f009 f816 	bl	8009c9a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <MX_TIM16_Init+0xf0>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c76:	2230      	movs	r2, #48	; 0x30
 8000c78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65300;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c82:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000c86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c9c:	f003 fb14 	bl	80042c8 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ca6:	f000 f9cd 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000cac:	f003 fbce 	bl	800444c <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cb6:	f000 f9c5 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000ce0:	f003 ffbe 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cea:	f000 f9ab 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d16:	f004 fd09 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d20:	f000 f990 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d26:	f000 fb11 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000618 	.word	0x20000618
 8000d38:	40014400 	.word	0x40014400

08000d3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 ff9c 	bl	8009c9a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xf0>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65300;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d76:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000d7a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d90:	f003 fa9a 	bl	80042c8 <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9a:	f000 f953 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000da0:	f003 fb54 	bl	800444c <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000daa:	f000 f94b 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000dd4:	f003 ff44 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dde:	f000 f931 	bl	8001044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e0a:	f004 fc8f 	bl	800572c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e14:	f000 f916 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e1a:	f000 fa97 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200004e8 	.word	0x200004e8
 8000e2c:	40014800 	.word	0x40014800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2120      	movs	r1, #32
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <MX_GPIO_Init+0x90>)
 8000e7c:	f000 feea 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e80:	2308      	movs	r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0x90>)
 8000e94:	f000 fd44 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_GPIO_Init+0x90>)
 8000eb0:	f000 fd36 	bl	8001920 <HAL_GPIO_Init>

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	81fb      	strh	r3, [r7, #14]
	uint16_t motor2_position = TIM4->CNT;
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	81bb      	strh	r3, [r7, #12]
	uint16_t motor3_position = TIM8->CNT;
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	817b      	strh	r3, [r7, #10]
//	int32_t motor1_position_change = ;
//	int32_t motor2_position_change = motor2_position - motor2_position_prev;
//	int32_t motor3_position_change = motor3_position - motor3_position_prev;

	feedback.motor1 = (((10000 + motor1_position - motor1_position_prev) % 65535) - 10000) / 2;
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000ee6:	3310      	adds	r3, #16
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	b292      	uxth	r2, r2
 8000eee:	1a9a      	subs	r2, r3, r2
 8000ef0:	4b49      	ldr	r3, [pc, #292]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000ef2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	13d9      	asrs	r1, r3, #15
 8000efa:	17d3      	asrs	r3, r2, #31
 8000efc:	1ac9      	subs	r1, r1, r3
 8000efe:	460b      	mov	r3, r1
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	1a5b      	subs	r3, r3, r1
 8000f04:	1ad1      	subs	r1, r2, r3
 8000f06:	f5a1 531c 	sub.w	r3, r1, #9984	; 0x2700
 8000f0a:	3b10      	subs	r3, #16
 8000f0c:	0fda      	lsrs	r2, r3, #31
 8000f0e:	4413      	add	r3, r2
 8000f10:	105b      	asrs	r3, r3, #1
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b41      	ldr	r3, [pc, #260]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f16:	601a      	str	r2, [r3, #0]
	feedback.motor2 = (((10000 + motor2_position - motor2_position_prev) % 65535) - 10000) / 2;
 8000f18:	89bb      	ldrh	r3, [r7, #12]
 8000f1a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f1e:	3310      	adds	r3, #16
 8000f20:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	b292      	uxth	r2, r2
 8000f26:	1a9a      	subs	r2, r3, r2
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2e:	4413      	add	r3, r2
 8000f30:	13d9      	asrs	r1, r3, #15
 8000f32:	17d3      	asrs	r3, r2, #31
 8000f34:	1ac9      	subs	r1, r1, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	041b      	lsls	r3, r3, #16
 8000f3a:	1a5b      	subs	r3, r3, r1
 8000f3c:	1ad1      	subs	r1, r2, r3
 8000f3e:	f5a1 531c 	sub.w	r3, r1, #9984	; 0x2700
 8000f42:	3b10      	subs	r3, #16
 8000f44:	0fda      	lsrs	r2, r3, #31
 8000f46:	4413      	add	r3, r2
 8000f48:	105b      	asrs	r3, r3, #1
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f4e:	605a      	str	r2, [r3, #4]
	feedback.motor3 = (((10000 + motor3_position - motor3_position_prev) % 65535) - 10000) / 2;
 8000f50:	897b      	ldrh	r3, [r7, #10]
 8000f52:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000f56:	3310      	adds	r3, #16
 8000f58:	4a32      	ldr	r2, [pc, #200]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f5a:	8812      	ldrh	r2, [r2, #0]
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	1a9a      	subs	r2, r3, r2
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f62:	fb83 1302 	smull	r1, r3, r3, r2
 8000f66:	4413      	add	r3, r2
 8000f68:	13d9      	asrs	r1, r3, #15
 8000f6a:	17d3      	asrs	r3, r2, #31
 8000f6c:	1ac9      	subs	r1, r1, r3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	041b      	lsls	r3, r3, #16
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	1ad1      	subs	r1, r2, r3
 8000f76:	f5a1 531c 	sub.w	r3, r1, #9984	; 0x2700
 8000f7a:	3b10      	subs	r3, #16
 8000f7c:	0fda      	lsrs	r2, r3, #31
 8000f7e:	4413      	add	r3, r2
 8000f80:	105b      	asrs	r3, r3, #1
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f86:	609a      	str	r2, [r3, #8]


	motor1_position_prev = motor1_position;
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f90:	89bb      	ldrh	r3, [r7, #12]
 8000f92:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000f94:	4a23      	ldr	r2, [pc, #140]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f96:	897b      	ldrh	r3, [r7, #10]
 8000f98:	8013      	strh	r3, [r2, #0]
//		//Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), (motor1_target_rpm - 50 - pTerm) / 3);
//	}


	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	4822      	ldr	r0, [pc, #136]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f9e:	f000 fe41 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0xf2>
		TIM17->CCR1 = 0;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x10c>
		command_received_ticker -= 1;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000fcc:	701a      	strb	r2, [r3, #0]
		TIM16->CCR1 = ESC_IDLE_CCR;

		// stop servo
		TIM17->CCR1 = 0;
	}
}
 8000fce:	e018      	b.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x13e>
		TIM1->CCR1 = 0;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ff6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40000800 	.word	0x40000800
 8001010:	40013400 	.word	0x40013400
 8001014:	200001da 	.word	0x200001da
 8001018:	80008001 	.word	0x80008001
 800101c:	200001bc 	.word	0x200001bc
 8001020:	200001dc 	.word	0x200001dc
 8001024:	200001de 	.word	0x200001de
 8001028:	48000400 	.word	0x48000400
 800102c:	200001a0 	.word	0x200001a0
 8001030:	40014800 	.word	0x40014800
 8001034:	200001d9 	.word	0x200001d9
 8001038:	40012c00 	.word	0x40012c00
 800103c:	40000400 	.word	0x40000400
 8001040:	40014400 	.word	0x40014400

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108a:	f002 fa21 	bl	80034d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_TIM_PWM_MspInit+0x80>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10c      	bne.n	80010c8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010c6:	e022      	b.n	800110e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a15      	ldr	r2, [pc, #84]	; (8001124 <HAL_TIM_PWM_MspInit+0x88>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10c      	bne.n	80010ec <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
}
 80010ea:	e010      	b.n	800110e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_TIM_PWM_MspInit+0x8c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10b      	bne.n	800110e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_TIM_PWM_MspInit+0x84>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40012c00 	.word	0x40012c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40000400 	.word	0x40000400
 8001128:	40014000 	.word	0x40014000

0800112c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d129      	bne.n	80011a2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a53      	ldr	r2, [pc, #332]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117e:	2303      	movs	r3, #3
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800118e:	2301      	movs	r3, #1
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119c:	f000 fbc0 	bl	8001920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80011a0:	e079      	b.n	8001296 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a3f      	ldr	r2, [pc, #252]	; (80012a4 <HAL_TIM_Encoder_MspInit+0x178>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d128      	bne.n	80011fe <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ac:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6593      	str	r3, [r2, #88]	; 0x58
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a35      	ldr	r2, [pc, #212]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011ec:	2302      	movs	r3, #2
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	482c      	ldr	r0, [pc, #176]	; (80012a8 <HAL_TIM_Encoder_MspInit+0x17c>)
 80011f8:	f000 fb92 	bl	8001920 <HAL_GPIO_Init>
}
 80011fc:	e04b      	b.n	8001296 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <HAL_TIM_Encoder_MspInit+0x180>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d146      	bne.n	8001296 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800120e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001212:	6613      	str	r3, [r2, #96]	; 0x60
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001262:	2302      	movs	r3, #2
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f000 fb56 	bl	8001920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001286:	230a      	movs	r3, #10
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001292:	f000 fb45 	bl	8001920 <HAL_GPIO_Init>
}
 8001296:	bf00      	nop
 8001298:	3738      	adds	r7, #56	; 0x38
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40000800 	.word	0x40000800
 80012a8:	48000400 	.word	0x48000400
 80012ac:	40013400 	.word	0x40013400

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_TIM_Base_MspInit+0x8c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d114      	bne.n	80012ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2037      	movs	r0, #55	; 0x37
 80012e0:	f000 fae9 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012e4:	2037      	movs	r0, #55	; 0x37
 80012e6:	f000 fb00 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012ea:	e022      	b.n	8001332 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_TIM_Base_MspInit+0x94>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10c      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
}
 800130e:	e010      	b.n	8001332 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_TIM_Base_MspInit+0x98>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10b      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001324:	6613      	str	r3, [r2, #96]	; 0x60
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_TIM_Base_MspInit+0x90>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40001400 	.word	0x40001400
 8001340:	40021000 	.word	0x40021000
 8001344:	40014400 	.word	0x40014400
 8001348:	40014800 	.word	0x40014800

0800134c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <HAL_TIM_MspPostInit+0x1b4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11e      	bne.n	80013ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a64      	ldr	r2, [pc, #400]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b62      	ldr	r3, [pc, #392]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	623b      	str	r3, [r7, #32]
 8001384:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001386:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001398:	2306      	movs	r3, #6
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f000 fabb 	bl	8001920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80013aa:	e0a5      	b.n	80014f8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a55      	ldr	r2, [pc, #340]	; (8001508 <HAL_TIM_MspPostInit+0x1bc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d139      	bne.n	800142a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b50      	ldr	r3, [pc, #320]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013e6:	2350      	movs	r3, #80	; 0x50
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013f6:	2302      	movs	r3, #2
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f000 fa8c 	bl	8001920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001408:	2301      	movs	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001418:	2302      	movs	r3, #2
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	483a      	ldr	r0, [pc, #232]	; (800150c <HAL_TIM_MspPostInit+0x1c0>)
 8001424:	f000 fa7c 	bl	8001920 <HAL_GPIO_Init>
}
 8001428:	e066      	b.n	80014f8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a38      	ldr	r2, [pc, #224]	; (8001510 <HAL_TIM_MspPostInit+0x1c4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d11d      	bne.n	8001470 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800144c:	2304      	movs	r3, #4
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800145c:	2309      	movs	r3, #9
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f000 fa59 	bl	8001920 <HAL_GPIO_Init>
}
 800146e:	e043      	b.n	80014f8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_TIM_MspPostInit+0x1c8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11c      	bne.n	80014b4 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001492:	2310      	movs	r3, #16
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80014a2:	2301      	movs	r3, #1
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_TIM_MspPostInit+0x1c0>)
 80014ae:	f000 fa37 	bl	8001920 <HAL_GPIO_Init>
}
 80014b2:	e021      	b.n	80014f8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_TIM_MspPostInit+0x1cc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11c      	bne.n	80014f8 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_MspPostInit+0x1b8>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014e6:	2301      	movs	r3, #1
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f000 fa14 	bl	8001920 <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3738      	adds	r7, #56	; 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40000400 	.word	0x40000400
 800150c:	48000400 	.word	0x48000400
 8001510:	40014000 	.word	0x40014000
 8001514:	40014400 	.word	0x40014400
 8001518:	40014800 	.word	0x40014800

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f8a8 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USB_LP_IRQHandler+0x10>)
 800157e:	f000 fca2 	bl	8001ec6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20001354 	.word	0x20001354

0800158c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM7_IRQHandler+0x10>)
 8001592:	f003 f9e6 	bl	8004962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000664 	.word	0x20000664

080015a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SystemInit+0x28>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <SystemInit+0x28>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SystemInit+0x28>)
 80015b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ba:	609a      	str	r2, [r3, #8]
#endif
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopForever+0x6>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopForever+0xe>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopForever+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f6:	f7ff ffd3 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f008 fb1f 	bl	8009c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fe:	f7fe fed7 	bl	80003b0 <main>

08001602 <LoopForever>:

LoopForever:
    b LoopForever
 8001602:	e7fe      	b.n	8001602 <LoopForever>
  ldr   r0, =_estack
 8001604:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001610:	08009d24 	.word	0x08009d24
  ldr r2, =_sbss
 8001614:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001618:	20001648 	.word	0x20001648

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>

0800161e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f939 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f80e 	bl	8001650 <HAL_InitTick>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	e001      	b.n	8001644 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001640:	f7ff fd08 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001644:	79fb      	ldrb	r3, [r7, #7]

}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_InitTick+0x68>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d022      	beq.n	80016aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_InitTick+0x6c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_InitTick+0x68>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001670:	fbb1 f3f3 	udiv	r3, r1, r3
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f944 	bl	8001906 <HAL_SYSTICK_Config>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10f      	bne.n	80016a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d809      	bhi.n	800169e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168a:	2200      	movs	r2, #0
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	f04f 30ff 	mov.w	r0, #4294967295
 8001692:	f000 f910 	bl	80018b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_InitTick+0x70>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e007      	b.n	80016ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e004      	b.n	80016ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e001      	b.n	80016ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x20>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_IncTick+0x1c>)
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	200006b0 	.word	0x200006b0
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200006b0 	.word	0x200006b0

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff40 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff33 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa4 	bl	800185c <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192e:	e15a      	b.n	8001be6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 814c 	beq.w	8001be0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d00b      	beq.n	8001968 <HAL_GPIO_Init+0x48>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195c:	2b11      	cmp	r3, #17
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 0201 	and.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0xea>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80a6 	beq.w	8001be0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	4a5a      	ldr	r2, [pc, #360]	; (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa0:	4b58      	ldr	r3, [pc, #352]	; (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aac:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad6:	d01f      	beq.n	8001b18 <HAL_GPIO_Init+0x1f8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_GPIO_Init+0x2ec>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d019      	beq.n	8001b14 <HAL_GPIO_Init+0x1f4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a4b      	ldr	r2, [pc, #300]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_GPIO_Init+0x1f0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4a      	ldr	r2, [pc, #296]	; (8001c14 <HAL_GPIO_Init+0x2f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x1e8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a48      	ldr	r2, [pc, #288]	; (8001c1c <HAL_GPIO_Init+0x2fc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_Init+0x1e4>
 8001b00:	2305      	movs	r3, #5
 8001b02:	e00a      	b.n	8001b1a <HAL_GPIO_Init+0x1fa>
 8001b04:	2306      	movs	r3, #6
 8001b06:	e008      	b.n	8001b1a <HAL_GPIO_Init+0x1fa>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e006      	b.n	8001b1a <HAL_GPIO_Init+0x1fa>
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e004      	b.n	8001b1a <HAL_GPIO_Init+0x1fa>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e002      	b.n	8001b1a <HAL_GPIO_Init+0x1fa>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_GPIO_Init+0x1fa>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	f002 0203 	and.w	r2, r2, #3
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	4093      	lsls	r3, r2
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2a:	4937      	ldr	r1, [pc, #220]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b38:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b5c:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b86:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f ae9d 	bne.w	8001930 <HAL_GPIO_Init+0x10>
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	48000800 	.word	0x48000800
 8001c14:	48000c00 	.word	0x48000c00
 8001c18:	48001000 	.word	0x48001000
 8001c1c:	48001400 	.word	0x48001400
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43d9      	mvns	r1, r3
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b08b      	sub	sp, #44	; 0x2c
 8001cbc:	af06      	add	r7, sp, #24
 8001cbe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0d7      	b.n	8001e7a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f007 fcbc 	bl	800965c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fe18 	bl	8005926 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e04c      	b.n	8001d96 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3336      	adds	r3, #54	; 0x36
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3303      	adds	r3, #3
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	333c      	adds	r3, #60	; 0x3c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3340      	adds	r3, #64	; 0x40
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	3301      	adds	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3ad      	bcc.n	8001cfc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e044      	b.n	8001e30 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3b5      	bcc.n	8001da6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	687e      	ldr	r6, [r7, #4]
 8001e42:	466d      	mov	r5, sp
 8001e44:	f106 0410 	add.w	r4, r6, #16
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	1d33      	adds	r3, r6, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f003 fd81 	bl	800595c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f001 fa5e 	bl	8003334 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_PCD_Start+0x16>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e012      	b.n	8001ebe <HAL_PCD_Start+0x3c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fd27 	bl	80058f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f005 fd13 	bl	80078da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f005 fd18 	bl	8007908 <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee2:	d102      	bne.n	8001eea <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb5b 	bl	80025a0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f005 fd0a 	bl	8007908 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d112      	bne.n	8001f26 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f007 fc1a 	bl	8009752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f91e 	bl	8002162 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 fcec 	bl	8007908 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f3a:	d10b      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f005 fcd5 	bl	8007908 <USB_ReadInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f68:	d10b      	bne.n	8001f82 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f005 fcbe 	bl	8007908 <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f96:	d133      	bne.n	8002000 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0208 	bic.w	r2, r2, #8
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f007 fdad 	bl	8009b3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f007 fbee 	bl	80097c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f005 fc7f 	bl	8007908 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002014:	d126      	bne.n	8002064 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0208 	orr.w	r2, r2, #8
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002040:	b292      	uxth	r2, r2
 8002042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800204e:	b29a      	uxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0204 	orr.w	r2, r2, #4
 8002058:	b292      	uxth	r2, r2
 800205a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f007 fb96 	bl	8009790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fc4d 	bl	8007908 <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	d13f      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208a:	b292      	uxth	r2, r2
 800208c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d12b      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0204 	orr.w	r2, r2, #4
 80020ac:	b292      	uxth	r2, r2
 80020ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0208 	orr.w	r2, r2, #8
 80020c4:	b292      	uxth	r2, r2
 80020c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020da:	b29b      	uxth	r3, r3
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020e8:	2101      	movs	r1, #1
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f007 fd26 	bl	8009b3c <HAL_PCDEx_LPM_Callback>
 80020f0:	e002      	b.n	80020f8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f007 fb4c 	bl	8009790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f005 fc03 	bl	8007908 <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210c:	d10e      	bne.n	800212c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f007 fb05 	bl	8009736 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f005 fbe9 	bl	8007908 <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002140:	d10b      	bne.n	800215a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002154:	b292      	uxth	r2, r2
 8002156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_PCD_SetAddress+0x1a>
 8002178:	2302      	movs	r3, #2
 800217a:	e013      	b.n	80021a4 <HAL_PCD_SetAddress+0x42>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f005 fb8c 	bl	80078b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	70fb      	strb	r3, [r7, #3]
 80021be:	460b      	mov	r3, r1
 80021c0:	803b      	strh	r3, [r7, #0]
 80021c2:	4613      	mov	r3, r2
 80021c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da0e      	bge.n	80021f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
 80021ee:	e00e      	b.n	800220e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 0207 	and.w	r2, r3, #7
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800221a:	883a      	ldrh	r2, [r7, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	78ba      	ldrb	r2, [r7, #2]
 8002224:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002238:	78bb      	ldrb	r3, [r7, #2]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d102      	bne.n	8002244 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_PCD_EP_Open+0xa6>
 800224e:	2302      	movs	r3, #2
 8002250:	e00e      	b.n	8002270 <HAL_PCD_EP_Open+0xc4>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68f9      	ldr	r1, [r7, #12]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fb9d 	bl	80059a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800226e:	7afb      	ldrb	r3, [r7, #11]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da0e      	bge.n	80022aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	705a      	strb	r2, [r3, #1]
 80022a8:	e00e      	b.n	80022c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0207 	and.w	r2, r3, #7
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_PCD_EP_Close+0x6a>
 80022de:	2302      	movs	r3, #2
 80022e0:	e00e      	b.n	8002300 <HAL_PCD_EP_Close+0x88>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fec3 	bl	800607c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	f003 0207 	and.w	r2, r3, #7
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2200      	movs	r2, #0
 8002346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002348:	7afb      	ldrb	r3, [r7, #11]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	b2da      	uxtb	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6979      	ldr	r1, [r7, #20]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f876 	bl	8006456 <USB_EPStartXfer>
 800236a:	e005      	b.n	8002378 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6979      	ldr	r1, [r7, #20]
 8002372:	4618      	mov	r0, r3
 8002374:	f004 f86f 	bl	8006456 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 0207 	and.w	r2, r3, #7
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80023a4:	681b      	ldr	r3, [r3, #0]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	460b      	mov	r3, r1
 80023c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2201      	movs	r2, #1
 80023fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	b2da      	uxtb	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800240a:	7afb      	ldrb	r3, [r7, #11]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	4618      	mov	r0, r3
 800241c:	f004 f81b 	bl	8006456 <USB_EPStartXfer>
 8002420:	e005      	b.n	800242e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6979      	ldr	r1, [r7, #20]
 8002428:	4618      	mov	r0, r3
 800242a:	f004 f814 	bl	8006456 <USB_EPStartXfer>
  }

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	f003 0207 	and.w	r2, r3, #7
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d901      	bls.n	8002456 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e04c      	b.n	80024f0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800245a:	2b00      	cmp	r3, #0
 800245c:	da0e      	bge.n	800247c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	705a      	strb	r2, [r3, #1]
 800247a:	e00c      	b.n	8002496 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_PCD_EP_SetStall+0x7e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e01c      	b.n	80024f0 <HAL_PCD_EP_SetStall+0xb8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f005 f8f5 	bl	80076b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d108      	bne.n	80024e6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f005 fa21 	bl	8007928 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d901      	bls.n	8002516 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e040      	b.n	8002598 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800251a:	2b00      	cmp	r3, #0
 800251c:	da0e      	bge.n	800253c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	705a      	strb	r2, [r3, #1]
 800253a:	e00e      	b.n	800255a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 0207 	and.w	r2, r3, #7
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_PCD_EP_ClrStall+0x82>
 8002576:	2302      	movs	r3, #2
 8002578:	e00e      	b.n	8002598 <HAL_PCD_EP_ClrStall+0xa0>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	4618      	mov	r0, r3
 800258a:	f005 f8e4 	bl	8007756 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025a8:	e2d1      	b.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80025c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 8152 	bne.w	800286e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d150      	bne.n	8002676 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e4:	81fb      	strh	r3, [r7, #14]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3328      	adds	r3, #40	; 0x28
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	441a      	add	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002634:	2100      	movs	r1, #0
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f007 f863 	bl	8009702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8282 	beq.w	8002b4e <PCD_EP_ISR_Handler+0x5ae>
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 827d 	bne.w	8002b4e <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002660:	b2da      	uxtb	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b292      	uxth	r2, r2
 8002668:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002674:	e26b      	b.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268c:	2b00      	cmp	r3, #0
 800268e:	d032      	beq.n	80026f6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f005 f979 	bl	80079c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026dc:	4013      	ands	r3, r2
 80026de:	823b      	strh	r3, [r7, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	8a3a      	ldrh	r2, [r7, #16]
 80026e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ea:	b292      	uxth	r2, r2
 80026ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f006 ffda 	bl	80096a8 <HAL_PCD_SetupStageCallback>
 80026f4:	e22b      	b.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f280 8227 	bge.w	8002b4e <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29a      	uxth	r2, r3
 8002708:	f640 738f 	movw	r3, #3983	; 0xf8f
 800270c:	4013      	ands	r3, r2
 800270e:	83bb      	strh	r3, [r7, #28]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	8bba      	ldrh	r2, [r7, #28]
 8002716:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271a:	b292      	uxth	r2, r2
 800271c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	4413      	add	r3, r2
 8002738:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d019      	beq.n	8002782 <PCD_EP_ISR_Handler+0x1e2>
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	6959      	ldr	r1, [r3, #20]
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002766:	b29b      	uxth	r3, r3
 8002768:	f005 f92b 	bl	80079c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	441a      	add	r2, r3
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f006 ffa5 	bl	80096cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d112      	bne.n	80027d0 <PCD_EP_ISR_Handler+0x230>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	e02f      	b.n	8002830 <PCD_EP_ISR_Handler+0x290>
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b3e      	cmp	r3, #62	; 0x3e
 80027d6:	d813      	bhi.n	8002800 <PCD_EP_ISR_Handler+0x260>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <PCD_EP_ISR_Handler+0x252>
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	3301      	adds	r3, #1
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	e017      	b.n	8002830 <PCD_EP_ISR_Handler+0x290>
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <PCD_EP_ISR_Handler+0x27a>
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	3b01      	subs	r3, #1
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	b29b      	uxth	r3, r3
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	b29b      	uxth	r3, r3
 8002822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282a:	b29a      	uxth	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800283c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002840:	827b      	strh	r3, [r7, #18]
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002848:	827b      	strh	r3, [r7, #18]
 800284a:	8a7b      	ldrh	r3, [r7, #18]
 800284c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002850:	827b      	strh	r3, [r7, #18]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800285c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002868:	b29b      	uxth	r3, r3
 800286a:	8013      	strh	r3, [r2, #0]
 800286c:	e16f      	b.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002880:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002884:	2b00      	cmp	r3, #0
 8002886:	f280 80e4 	bge.w	8002a52 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29a      	uxth	r2, r3
 800289c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028a0:	4013      	ands	r3, r2
 80028a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028b8:	b292      	uxth	r2, r2
 80028ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	7b1b      	ldrb	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d120      	bne.n	800291c <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8083 	beq.w	8002a0e <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	6959      	ldr	r1, [r3, #20]
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	88da      	ldrh	r2, [r3, #6]
 8002914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002916:	f005 f854 	bl	80079c2 <USB_ReadPMA>
 800291a:	e078      	b.n	8002a0e <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	78db      	ldrb	r3, [r3, #3]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d108      	bne.n	8002936 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002924:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002926:	461a      	mov	r2, r3
 8002928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f91d 	bl	8002b6a <HAL_PCD_EP_DB_Receive>
 8002930:	4603      	mov	r3, r0
 8002932:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002934:	e06b      	b.n	8002a0e <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	847b      	strh	r3, [r7, #34]	; 0x22
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	441a      	add	r2, r3
 8002960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01f      	beq.n	80029d0 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d028      	beq.n	8002a0e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	6959      	ldr	r1, [r3, #20]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	891a      	ldrh	r2, [r3, #8]
 80029c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029ca:	f004 fffa 	bl	80079c2 <USB_ReadPMA>
 80029ce:	e01e      	b.n	8002a0e <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	6959      	ldr	r1, [r3, #20]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	895a      	ldrh	r2, [r3, #10]
 8002a08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a0a:	f004 ffda 	bl	80079c2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a14:	441a      	add	r2, r3
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a20:	441a      	add	r2, r3
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <PCD_EP_ISR_Handler+0x498>
 8002a2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d206      	bcs.n	8002a46 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f006 fe44 	bl	80096cc <HAL_PCD_DataOutStageCallback>
 8002a44:	e005      	b.n	8002a52 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 fd02 	bl	8006456 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d078      	beq.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	843b      	strh	r3, [r7, #32]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	8c3b      	ldrh	r3, [r7, #32]
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d108      	bne.n	8002ac2 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d144      	bne.n	8002b42 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ab8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d13f      	bne.n	8002b42 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	8bfb      	ldrh	r3, [r7, #30]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d906      	bls.n	8002b00 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	8bfb      	ldrh	r3, [r7, #30]
 8002af8:	1ad2      	subs	r2, r2, r3
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	619a      	str	r2, [r3, #24]
 8002afe:	e002      	b.n	8002b06 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f006 fdf4 	bl	8009702 <HAL_PCD_DataInStageCallback>
 8002b1a:	e018      	b.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	8bfb      	ldrh	r3, [r7, #30]
 8002b22:	441a      	add	r2, r3
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	8bfb      	ldrh	r3, [r7, #30]
 8002b2e:	441a      	add	r2, r3
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fc8b 	bl	8006456 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b40:	e005      	b.n	8002b4e <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b44:	461a      	mov	r2, r3
 8002b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f917 	bl	8002d7c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f6ff ad25 	blt.w	80025aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3738      	adds	r7, #56	; 0x38
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b088      	sub	sp, #32
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	4613      	mov	r3, r2
 8002b76:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d07c      	beq.n	8002c7c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d306      	bcc.n	8002bc0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	8b7b      	ldrh	r3, [r7, #26]
 8002bb8:	1ad2      	subs	r2, r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e002      	b.n	8002bc6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d123      	bne.n	8002c16 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	833b      	strh	r3, [r7, #24]
 8002bea:	8b3b      	ldrh	r3, [r7, #24]
 8002bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bf0:	833b      	strh	r3, [r7, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	441a      	add	r2, r3
 8002c00:	8b3b      	ldrh	r3, [r7, #24]
 8002c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01f      	beq.n	8002c60 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	82fb      	strh	r3, [r7, #22]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8085 	beq.w	8002d72 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6959      	ldr	r1, [r3, #20]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	891a      	ldrh	r2, [r3, #8]
 8002c74:	8b7b      	ldrh	r3, [r7, #26]
 8002c76:	f004 fea4 	bl	80079c2 <USB_ReadPMA>
 8002c7a:	e07a      	b.n	8002d72 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	4413      	add	r3, r2
 8002c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	8b7b      	ldrh	r3, [r7, #26]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d306      	bcc.n	8002cba <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	8b7b      	ldrh	r3, [r7, #26]
 8002cb2:	1ad2      	subs	r2, r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	619a      	str	r2, [r3, #24]
 8002cb8:	e002      	b.n	8002cc0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d123      	bne.n	8002d10 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	83fb      	strh	r3, [r7, #30]
 8002ce4:	8bfb      	ldrh	r3, [r7, #30]
 8002ce6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cea:	83fb      	strh	r3, [r7, #30]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	8bfb      	ldrh	r3, [r7, #30]
 8002cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11f      	bne.n	8002d5a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	83bb      	strh	r3, [r7, #28]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	8bbb      	ldrh	r3, [r7, #28]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d5a:	8b7b      	ldrh	r3, [r7, #26]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6959      	ldr	r1, [r3, #20]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	895a      	ldrh	r2, [r3, #10]
 8002d6c:	8b7b      	ldrh	r3, [r7, #26]
 8002d6e:	f004 fe28 	bl	80079c2 <USB_ReadPMA>
    }
  }

  return count;
 8002d72:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b092      	sub	sp, #72	; 0x48
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8130 	beq.w	8002ff6 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dba:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d906      	bls.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dcc:	1ad2      	subs	r2, r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	619a      	str	r2, [r3, #24]
 8002dd2:	e002      	b.n	8002dda <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d12c      	bne.n	8002e3c <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f006 fc8a 	bl	8009702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 822d 	beq.w	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e14:	827b      	strh	r3, [r7, #18]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	8a7b      	ldrh	r3, [r7, #18]
 8002e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8013      	strh	r3, [r2, #0]
 8002e3a:	e20b      	b.n	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01f      	beq.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e60:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	441a      	add	r2, r3
 8002e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 81e1 	bne.w	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e98:	441a      	add	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ea4:	441a      	add	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d309      	bcc.n	8002eca <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	621a      	str	r2, [r3, #32]
 8002ec8:	e014      	b.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ede:	e009      	b.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d155      	bne.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4413      	add	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00da      	lsls	r2, r3, #3
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d112      	bne.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	e047      	b.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	2b3e      	cmp	r3, #62	; 0x3e
 8002f54:	d811      	bhi.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	3301      	adds	r3, #1
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	029b      	lsls	r3, r3, #10
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	e032      	b.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x214>
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	029b      	lsls	r3, r3, #10
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	e01b      	b.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d117      	bne.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x264>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	00da      	lsls	r2, r3, #3
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6959      	ldr	r1, [r3, #20]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	891a      	ldrh	r2, [r3, #8]
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f004 fca6 	bl	8007940 <USB_WritePMA>
 8002ff4:	e12e      	b.n	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4413      	add	r3, r2
 8003010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003022:	429a      	cmp	r2, r3
 8003024:	d306      	bcc.n	8003034 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800302c:	1ad2      	subs	r2, r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	619a      	str	r2, [r3, #24]
 8003032:	e002      	b.n	800303a <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d12c      	bne.n	800309c <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f006 fb5a 	bl	8009702 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 80fd 	bne.w	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	441a      	add	r2, r3
 8003084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]
 800309a:	e0db      	b.n	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11f      	bne.n	80030e6 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 80b1 	bne.w	8003254 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030f8:	441a      	add	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003104:	441a      	add	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	429a      	cmp	r2, r3
 8003114:	d309      	bcc.n	800312a <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	621a      	str	r2, [r3, #32]
 8003128:	e014      	b.n	8003154 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800313e:	e009      	b.n	8003154 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d155      	bne.n	800320e <HAL_PCD_EP_DB_Transmit+0x492>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	647b      	str	r3, [r7, #68]	; 0x44
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	4413      	add	r3, r2
 8003178:	647b      	str	r3, [r7, #68]	; 0x44
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00da      	lsls	r2, r3, #3
 8003180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003182:	4413      	add	r3, r2
 8003184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003188:	643b      	str	r3, [r7, #64]	; 0x40
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	2b00      	cmp	r3, #0
 800318e:	d112      	bne.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x43a>
 8003190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800319a:	b29a      	uxth	r2, r3
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e044      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	2b3e      	cmp	r3, #62	; 0x3e
 80031ba:	d811      	bhi.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x464>
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x456>
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	3301      	adds	r3, #1
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	029b      	lsls	r3, r3, #10
 80031d8:	b29a      	uxth	r2, r3
 80031da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031dc:	801a      	strh	r2, [r3, #0]
 80031de:	e02f      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x47a>
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	3b01      	subs	r3, #1
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	029b      	lsls	r3, r3, #10
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003206:	b29a      	uxth	r2, r3
 8003208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	e018      	b.n	8003240 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d114      	bne.n	8003240 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	4413      	add	r3, r2
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	00da      	lsls	r2, r3, #3
 800322e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003230:	4413      	add	r3, r2
 8003232:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	b29a      	uxth	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6959      	ldr	r1, [r3, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	895a      	ldrh	r2, [r3, #10]
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	b29b      	uxth	r3, r3
 8003250:	f004 fb76 	bl	8007940 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800326e:	823b      	strh	r3, [r7, #16]
 8003270:	8a3b      	ldrh	r3, [r7, #16]
 8003272:	f083 0310 	eor.w	r3, r3, #16
 8003276:	823b      	strh	r3, [r7, #16]
 8003278:	8a3b      	ldrh	r3, [r7, #16]
 800327a:	f083 0320 	eor.w	r3, r3, #32
 800327e:	823b      	strh	r3, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	8a3b      	ldrh	r3, [r7, #16]
 8003290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3748      	adds	r7, #72	; 0x48
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	817b      	strh	r3, [r7, #10]
 80032bc:	4613      	mov	r3, r2
 80032be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032c0:	897b      	ldrh	r3, [r7, #10]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	897b      	ldrh	r3, [r7, #10]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e009      	b.n	80032f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032e4:	897a      	ldrh	r2, [r7, #10]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032f8:	893b      	ldrh	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	b29a      	uxth	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	80da      	strh	r2, [r3, #6]
 800330c:	e00b      	b.n	8003326 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2201      	movs	r2, #1
 8003312:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	b29a      	uxth	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	b29a      	uxth	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003358:	b29b      	uxth	r3, r3
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800336c:	b29b      	uxth	r3, r3
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d141      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003396:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d131      	bne.n	8003408 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a4:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033aa:	4a46      	ldr	r2, [pc, #280]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b4:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033bc:	4a41      	ldr	r2, [pc, #260]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2232      	movs	r2, #50	; 0x32
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	0c9b      	lsrs	r3, r3, #18
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033da:	e002      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d102      	bne.n	80033f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f2      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d158      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e057      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003418:	e04d      	b.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d141      	bne.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d131      	bne.n	8003494 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2232      	movs	r2, #50	; 0x32
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003466:	e002      	b.n	800346e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d102      	bne.n	8003482 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f2      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d112      	bne.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e011      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034a4:	e007      	b.n	80034b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a6:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ae:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40007000 	.word	0x40007000
 80034c8:	20000000 	.word	0x20000000
 80034cc:	431bde83 	.word	0x431bde83

080034d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034de:	6093      	str	r3, [r2, #8]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40007000 	.word	0x40007000

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e308      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d075      	beq.n	80035fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800350e:	4ba3      	ldr	r3, [pc, #652]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003518:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d102      	bne.n	800352e <HAL_RCC_OscConfig+0x3e>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d002      	beq.n	8003534 <HAL_RCC_OscConfig+0x44>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b99      	ldr	r3, [pc, #612]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e2e3      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b91      	ldr	r3, [pc, #580]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a90      	ldr	r2, [pc, #576]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b8b      	ldr	r3, [pc, #556]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a8a      	ldr	r2, [pc, #552]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a87      	ldr	r2, [pc, #540]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003588:	4b84      	ldr	r3, [pc, #528]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a83      	ldr	r2, [pc, #524]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a80      	ldr	r2, [pc, #512]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe f89e 	bl	80016e8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe f89a 	bl	80016e8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e2a8      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xc0>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe f88a 	bl	80016e8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe f886 	bl	80016e8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e294      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ea:	4b6c      	ldr	r3, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0xe8>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4b62      	ldr	r3, [pc, #392]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x136>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d002      	beq.n	800362c <HAL_RCC_OscConfig+0x13c>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d11f      	bne.n	800366c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362c:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_OscConfig+0x154>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e267      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b55      	ldr	r3, [pc, #340]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	4952      	ldr	r1, [pc, #328]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003658:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_RCC_OscConfig+0x2b0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd fff7 	bl	8001650 <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d043      	beq.n	80036f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e253      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003674:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a48      	ldr	r2, [pc, #288]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe f832 	bl	80016e8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fe f82e 	bl	80016e8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e23c      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369a:	4b40      	ldr	r3, [pc, #256]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	061b      	lsls	r3, r3, #24
 80036b4:	4939      	ldr	r1, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
 80036ba:	e01a      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036bc:	4b37      	ldr	r3, [pc, #220]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a36      	ldr	r2, [pc, #216]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe f80e 	bl	80016e8 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fe f80a 	bl	80016e8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e218      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1e0>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03c      	beq.n	8003778 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01c      	beq.n	8003740 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370c:	4a23      	ldr	r2, [pc, #140]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7fd ffe7 	bl	80016e8 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371e:	f7fd ffe3 	bl	80016e8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1f1      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ef      	beq.n	800371e <HAL_RCC_OscConfig+0x22e>
 800373e:	e01b      	b.n	8003778 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd ffca 	bl	80016e8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003758:	f7fd ffc6 	bl	80016e8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1d4      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ef      	bne.n	8003758 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80ab 	beq.w	80038dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_RCC_OscConfig+0x2ac>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_RCC_OscConfig+0x2b4>
 8003796:	2301      	movs	r3, #1
 8003798:	e005      	b.n	80037a6 <HAL_RCC_OscConfig+0x2b6>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	20000004 	.word	0x20000004
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	4baf      	ldr	r3, [pc, #700]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4aae      	ldr	r2, [pc, #696]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
 80037b6:	4bac      	ldr	r3, [pc, #688]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037c2:	2301      	movs	r3, #1
 80037c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c6:	4ba9      	ldr	r3, [pc, #676]	; (8003a6c <HAL_RCC_OscConfig+0x57c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d118      	bne.n	8003804 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d2:	4ba6      	ldr	r3, [pc, #664]	; (8003a6c <HAL_RCC_OscConfig+0x57c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4aa5      	ldr	r2, [pc, #660]	; (8003a6c <HAL_RCC_OscConfig+0x57c>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037de:	f7fd ff83 	bl	80016e8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e6:	f7fd ff7f 	bl	80016e8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e18d      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f8:	4b9c      	ldr	r3, [pc, #624]	; (8003a6c <HAL_RCC_OscConfig+0x57c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d108      	bne.n	800381e <HAL_RCC_OscConfig+0x32e>
 800380c:	4b96      	ldr	r3, [pc, #600]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	4a95      	ldr	r2, [pc, #596]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800381c:	e024      	b.n	8003868 <HAL_RCC_OscConfig+0x378>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d110      	bne.n	8003848 <HAL_RCC_OscConfig+0x358>
 8003826:	4b90      	ldr	r3, [pc, #576]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	4a8e      	ldr	r2, [pc, #568]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003836:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	4a8a      	ldr	r2, [pc, #552]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003846:	e00f      	b.n	8003868 <HAL_RCC_OscConfig+0x378>
 8003848:	4b87      	ldr	r3, [pc, #540]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a86      	ldr	r2, [pc, #536]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003858:	4b83      	ldr	r3, [pc, #524]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	4a82      	ldr	r2, [pc, #520]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d016      	beq.n	800389e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fd ff3a 	bl	80016e8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd ff36 	bl	80016e8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e142      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388e:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ed      	beq.n	8003878 <HAL_RCC_OscConfig+0x388>
 800389c:	e015      	b.n	80038ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fd ff23 	bl	80016e8 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd ff1f 	bl	80016e8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e12b      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038bc:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ed      	bne.n	80038a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4a64      	ldr	r2, [pc, #400]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d03c      	beq.n	8003962 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01c      	beq.n	800392a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038f0:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80038f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f6:	4a5c      	ldr	r2, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd fef2 	bl	80016e8 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003908:	f7fd feee 	bl	80016e8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0fc      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391a:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <HAL_RCC_OscConfig+0x418>
 8003928:	e01b      	b.n	8003962 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800392a:	4b4f      	ldr	r3, [pc, #316]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800392c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003930:	4a4d      	ldr	r2, [pc, #308]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fed5 	bl	80016e8 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003942:	f7fd fed1 	bl	80016e8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0df      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003954:	4b44      	ldr	r3, [pc, #272]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ef      	bne.n	8003942 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80d3 	beq.w	8003b12 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396c:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b0c      	cmp	r3, #12
 8003976:	f000 808d 	beq.w	8003a94 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d15a      	bne.n	8003a38 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800398c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fd feab 	bl	80016e8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003996:	f7fd fea7 	bl	80016e8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0b5      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f0      	bne.n	8003996 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b4:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_RCC_OscConfig+0x580>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a11      	ldr	r1, [r2, #32]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ce:	0212      	lsls	r2, r2, #8
 80039d0:	4311      	orrs	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	3a01      	subs	r2, #1
 80039da:	0552      	lsls	r2, r2, #21
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e2:	0852      	lsrs	r2, r2, #1
 80039e4:	3a01      	subs	r2, #1
 80039e6:	0652      	lsls	r2, r2, #25
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ee:	06d2      	lsls	r2, r2, #27
 80039f0:	430a      	orrs	r2, r1
 80039f2:	491d      	ldr	r1, [pc, #116]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fe6a 	bl	80016e8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fd fe66 	bl	80016e8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e074      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x528>
 8003a36:	e06c      	b.n	8003b12 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_RCC_OscConfig+0x578>)
 8003a56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fe42 	bl	80016e8 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	e00e      	b.n	8003a86 <HAL_RCC_OscConfig+0x596>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fe38 	bl	80016e8 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e046      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a86:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_RCC_OscConfig+0x62c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x584>
 8003a92:	e03e      	b.n	8003b12 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e039      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_RCC_OscConfig+0x62c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d12c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d123      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11b      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d113      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e11e      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b38:	4b91      	ldr	r3, [pc, #580]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d910      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b8e      	ldr	r3, [pc, #568]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 020f 	bic.w	r2, r3, #15
 8003b4e:	498c      	ldr	r1, [pc, #560]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b8a      	ldr	r3, [pc, #552]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e106      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d073      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d129      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7c:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0f4      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b8c:	f000 f966 	bl	8003e5c <RCC_GetSysClockFreqFromPLLSource>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4a7c      	ldr	r2, [pc, #496]	; (8003d88 <HAL_RCC_ClockConfig+0x268>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d93f      	bls.n	8003c1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b9a:	4b7a      	ldr	r3, [pc, #488]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d033      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d12f      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bba:	4b72      	ldr	r3, [pc, #456]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc2:	4a70      	ldr	r2, [pc, #448]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e024      	b.n	8003c1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0c6      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0be      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bf8:	f000 f8ce 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4a61      	ldr	r2, [pc, #388]	; (8003d88 <HAL_RCC_ClockConfig+0x268>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d909      	bls.n	8003c1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0e:	4a5d      	ldr	r2, [pc, #372]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b5a      	ldr	r3, [pc, #360]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4957      	ldr	r1, [pc, #348]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2c:	f7fd fd5c 	bl	80016e8 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fd fd58 	bl	80016e8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e095      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d023      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a42      	ldr	r2, [pc, #264]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c8c:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c94:	4a3b      	ldr	r2, [pc, #236]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4936      	ldr	r1, [pc, #216]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d105      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cb6:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc2:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d21d      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 020f 	bic.w	r2, r3, #15
 8003cd8:	4929      	ldr	r1, [pc, #164]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ce0:	f7fd fd02 	bl	80016e8 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fd fcfe 	bl	80016e8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e03b      	b.n	8003d76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_RCC_ClockConfig+0x260>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1ed      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4917      	ldr	r1, [pc, #92]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490f      	ldr	r1, [pc, #60]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d4a:	f000 f825 	bl	8003d98 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_RCC_ClockConfig+0x264>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <HAL_RCC_ClockConfig+0x26c>)
 8003d5c:	5cd3      	ldrb	r3, [r2, r3]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	fa21 f303 	lsr.w	r3, r1, r3
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <HAL_RCC_ClockConfig+0x270>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x274>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fc6e 	bl	8001650 <HAL_InitTick>
 8003d74:	4603      	mov	r3, r0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40021000 	.word	0x40021000
 8003d88:	04c4b400 	.word	0x04c4b400
 8003d8c:	08009d0c 	.word	0x08009d0c
 8003d90:	20000000 	.word	0x20000000
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d102      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003daa:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e047      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003db0:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	e03e      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d136      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dec:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df6:	68d2      	ldr	r2, [r2, #12]
 8003df8:	0a12      	lsrs	r2, r2, #8
 8003dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	617b      	str	r3, [r7, #20]
      break;
 8003e04:	e00c      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	0a12      	lsrs	r2, r2, #8
 8003e14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
      break;
 8003e1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0e5b      	lsrs	r3, r3, #25
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e001      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e40:	693b      	ldr	r3, [r7, #16]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	007a1200 	.word	0x007a1200

08003e5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d10c      	bne.n	8003e9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	0a12      	lsrs	r2, r2, #8
 8003e8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	617b      	str	r3, [r7, #20]
    break;
 8003e98:	e00c      	b.n	8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e9a:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	4a0e      	ldr	r2, [pc, #56]	; (8003edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea4:	68d2      	ldr	r2, [r2, #12]
 8003ea6:	0a12      	lsrs	r2, r2, #8
 8003ea8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    break;
 8003eb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	0e5b      	lsrs	r3, r3, #25
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ece:	687b      	ldr	r3, [r7, #4]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	007a1200 	.word	0x007a1200
 8003ee4:	00f42400 	.word	0x00f42400

08003ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8098 	beq.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0a:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10d      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	; 0x58
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f32:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a39      	ldr	r2, [pc, #228]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f3e:	f7fd fbd3 	bl	80016e8 <HAL_GetTick>
 8003f42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f44:	e009      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fd fbcf 	bl	80016e8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d902      	bls.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	74fb      	strb	r3, [r7, #19]
        break;
 8003f58:	e005      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ef      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d159      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01e      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d019      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fb4:	4a18      	ldr	r2, [pc, #96]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fb8f 	bl	80016e8 <HAL_GetTick>
 8003fca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fcc:	e00b      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7fd fb8b 	bl	80016e8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d902      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	74fb      	strb	r3, [r7, #19]
            break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0ec      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	4903      	ldr	r1, [pc, #12]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004010:	e008      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004012:	7cfb      	ldrb	r3, [r7, #19]
 8004014:	74bb      	strb	r3, [r7, #18]
 8004016:	e005      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004018:	40021000 	.word	0x40021000
 800401c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004024:	7c7b      	ldrb	r3, [r7, #17]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4ba6      	ldr	r3, [pc, #664]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	4aa5      	ldr	r2, [pc, #660]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004042:	4ba0      	ldr	r3, [pc, #640]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004048:	f023 0203 	bic.w	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	499c      	ldr	r1, [pc, #624]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004064:	4b97      	ldr	r3, [pc, #604]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f023 020c 	bic.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4994      	ldr	r1, [pc, #592]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004086:	4b8f      	ldr	r3, [pc, #572]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	498b      	ldr	r1, [pc, #556]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040a8:	4b86      	ldr	r3, [pc, #536]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	4983      	ldr	r1, [pc, #524]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ca:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	497a      	ldr	r1, [pc, #488]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ec:	4b75      	ldr	r3, [pc, #468]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	4972      	ldr	r1, [pc, #456]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800410e:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4969      	ldr	r1, [pc, #420]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004130:	4b64      	ldr	r3, [pc, #400]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4961      	ldr	r1, [pc, #388]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	4958      	ldr	r1, [pc, #352]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	4950      	ldr	r1, [pc, #320]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004194:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a4a      	ldr	r2, [pc, #296]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041ac:	4b45      	ldr	r3, [pc, #276]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4942      	ldr	r1, [pc, #264]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ca:	d105      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041cc:	4b3d      	ldr	r3, [pc, #244]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a3c      	ldr	r2, [pc, #240]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041e4:	4b37      	ldr	r3, [pc, #220]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	4934      	ldr	r1, [pc, #208]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004204:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a2e      	ldr	r2, [pc, #184]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800421c:	4b29      	ldr	r3, [pc, #164]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422a:	4926      	ldr	r1, [pc, #152]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a20      	ldr	r2, [pc, #128]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	4918      	ldr	r1, [pc, #96]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	490a      	ldr	r1, [pc, #40]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e049      	b.n	800436e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc ffde 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fde2 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e04a      	b.n	8004426 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a21      	ldr	r2, [pc, #132]	; (8004434 <HAL_TIM_Base_Start_IT+0xbc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d013      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <HAL_TIM_Base_Start_IT+0xc0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_TIM_Base_Start_IT+0xc4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_TIM_Base_Start_IT+0xc8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_TIM_Base_Start_IT+0xcc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d115      	bne.n	8004410 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d015      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0xaa>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d011      	beq.n	8004422 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440e:	e008      	b.n	8004422 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e000      	b.n	8004424 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40013400 	.word	0x40013400
 8004444:	40014000 	.word	0x40014000
 8004448:	00010007 	.word	0x00010007

0800444c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e049      	b.n	80044f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc fe12 	bl	800109c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fd20 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x24>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e03c      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d109      	bne.n	800453a <HAL_TIM_PWM_Start+0x3e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e02f      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d109      	bne.n	8004554 <HAL_TIM_PWM_Start+0x58>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e022      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d109      	bne.n	800456e <HAL_TIM_PWM_Start+0x72>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e015      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d109      	bne.n	8004588 <HAL_TIM_PWM_Start+0x8c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e008      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e097      	b.n	80046d2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_PWM_Start+0xb6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	e023      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_PWM_Start+0xc6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	e01b      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_PWM_Start+0xd6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d0:	e013      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Start+0xe6>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e0:	e00b      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0xf6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f0:	e003      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2201      	movs	r2, #1
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ffea 	bl	80055dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a33      	ldr	r2, [pc, #204]	; (80046dc <HAL_TIM_PWM_Start+0x1e0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_TIM_PWM_Start+0x13e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a32      	ldr	r2, [pc, #200]	; (80046e0 <HAL_TIM_PWM_Start+0x1e4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_TIM_PWM_Start+0x13e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <HAL_TIM_PWM_Start+0x1e8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_TIM_PWM_Start+0x13e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <HAL_TIM_PWM_Start+0x1ec>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_TIM_PWM_Start+0x13e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_TIM_PWM_Start+0x1f0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <HAL_TIM_PWM_Start+0x142>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <HAL_TIM_PWM_Start+0x144>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004652:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a20      	ldr	r2, [pc, #128]	; (80046dc <HAL_TIM_PWM_Start+0x1e0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_TIM_PWM_Start+0x194>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d013      	beq.n	8004690 <HAL_TIM_PWM_Start+0x194>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <HAL_TIM_PWM_Start+0x1f4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_TIM_PWM_Start+0x194>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_TIM_PWM_Start+0x1f8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_TIM_PWM_Start+0x194>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_TIM_PWM_Start+0x1e4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_PWM_Start+0x194>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_TIM_PWM_Start+0x1e8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d115      	bne.n	80046bc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <HAL_TIM_PWM_Start+0x1fc>)
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d015      	beq.n	80046ce <HAL_TIM_PWM_Start+0x1d2>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d011      	beq.n	80046ce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ba:	e008      	b.n	80046ce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e000      	b.n	80046d0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40012c00 	.word	0x40012c00
 80046e0:	40013400 	.word	0x40013400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	00010007 	.word	0x00010007

080046fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e097      	b.n	8004840 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc fd01 	bl	800112c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004740:	f023 0307 	bic.w	r3, r3, #7
 8004744:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 fbbd 	bl	8004ed0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800479c:	f023 030c 	bic.w	r3, r3, #12
 80047a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	4313      	orrs	r3, r2
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	031b      	lsls	r3, r3, #12
 80047cc:	4313      	orrs	r3, r2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	4313      	orrs	r3, r2
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004858:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004860:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004868:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004870:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d110      	bne.n	800489a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d102      	bne.n	8004884 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800487e:	7b7b      	ldrb	r3, [r7, #13]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e068      	b.n	800495a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004898:	e031      	b.n	80048fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d110      	bne.n	80048c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048a6:	7b3b      	ldrb	r3, [r7, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d001      	beq.n	80048b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e054      	b.n	800495a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d108      	bne.n	80048da <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048ce:	7b7b      	ldrb	r3, [r7, #13]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d102      	bne.n	80048da <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048d4:	7b3b      	ldrb	r3, [r7, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e03d      	b.n	800495a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_TIM_Encoder_Start+0xc2>
 8004904:	2b04      	cmp	r3, #4
 8004906:	d008      	beq.n	800491a <HAL_TIM_Encoder_Start+0xd2>
 8004908:	e00f      	b.n	800492a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe62 	bl	80055dc <TIM_CCxChannelCmd>
      break;
 8004918:	e016      	b.n	8004948 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2201      	movs	r2, #1
 8004920:	2104      	movs	r1, #4
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe5a 	bl	80055dc <TIM_CCxChannelCmd>
      break;
 8004928:	e00e      	b.n	8004948 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fe52 	bl	80055dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2201      	movs	r2, #1
 800493e:	2104      	movs	r1, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fe4b 	bl	80055dc <TIM_CCxChannelCmd>
      break;
 8004946:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d122      	bne.n	80049be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b02      	cmp	r3, #2
 8004984:	d11b      	bne.n	80049be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f06f 0202 	mvn.w	r2, #2
 800498e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa75 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 80049aa:	e005      	b.n	80049b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fa67 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa78 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d122      	bne.n	8004a12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d11b      	bne.n	8004a12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0204 	mvn.w	r2, #4
 80049e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa4b 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 80049fe:	e005      	b.n	8004a0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa3d 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa4e 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d122      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0208 	mvn.w	r2, #8
 8004a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fa21 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004a52:	e005      	b.n	8004a60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fa13 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa24 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d122      	bne.n	8004aba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d11b      	bne.n	8004aba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0210 	mvn.w	r2, #16
 8004a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9f7 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004aa6:	e005      	b.n	8004ab4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f9e9 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9fa 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d10e      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0201 	mvn.w	r2, #1
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fc f9ef 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d10e      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d107      	bne.n	8004b12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 feb7 	bl	8005880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 feaa 	bl	8005894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d10e      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d107      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9a8 	bl	8004ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d10e      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d107      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0220 	mvn.w	r2, #32
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fe6a 	bl	800586c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba6:	d10f      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fe70 	bl	80058a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fe62 	bl	80058bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c06:	d10f      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fe54 	bl	80058d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c36:	d10f      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c46:	d107      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fe46 	bl	80058e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0fd      	b.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b14      	cmp	r3, #20
 8004c86:	f200 80f0 	bhi.w	8004e6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004e6b 	.word	0x08004e6b
 8004c98:	08004e6b 	.word	0x08004e6b
 8004c9c:	08004e6b 	.word	0x08004e6b
 8004ca0:	08004d25 	.word	0x08004d25
 8004ca4:	08004e6b 	.word	0x08004e6b
 8004ca8:	08004e6b 	.word	0x08004e6b
 8004cac:	08004e6b 	.word	0x08004e6b
 8004cb0:	08004d67 	.word	0x08004d67
 8004cb4:	08004e6b 	.word	0x08004e6b
 8004cb8:	08004e6b 	.word	0x08004e6b
 8004cbc:	08004e6b 	.word	0x08004e6b
 8004cc0:	08004da7 	.word	0x08004da7
 8004cc4:	08004e6b 	.word	0x08004e6b
 8004cc8:	08004e6b 	.word	0x08004e6b
 8004ccc:	08004e6b 	.word	0x08004e6b
 8004cd0:	08004de9 	.word	0x08004de9
 8004cd4:	08004e6b 	.word	0x08004e6b
 8004cd8:	08004e6b 	.word	0x08004e6b
 8004cdc:	08004e6b 	.word	0x08004e6b
 8004ce0:	08004e29 	.word	0x08004e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 f980 	bl	8004ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0208 	orr.w	r2, r2, #8
 8004cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0204 	bic.w	r2, r2, #4
 8004d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	619a      	str	r2, [r3, #24]
      break;
 8004d22:	e0a3      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f9f0 	bl	8005110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6999      	ldr	r1, [r3, #24]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	021a      	lsls	r2, r3, #8
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	619a      	str	r2, [r3, #24]
      break;
 8004d64:	e082      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fa59 	bl	8005224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0208 	orr.w	r2, r2, #8
 8004d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0204 	bic.w	r2, r2, #4
 8004d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69d9      	ldr	r1, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	61da      	str	r2, [r3, #28]
      break;
 8004da4:	e062      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fac1 	bl	8005334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69d9      	ldr	r1, [r3, #28]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	021a      	lsls	r2, r3, #8
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	61da      	str	r2, [r3, #28]
      break;
 8004de6:	e041      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fb2a 	bl	8005448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0208 	orr.w	r2, r2, #8
 8004e02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0204 	bic.w	r2, r2, #4
 8004e12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e26:	e021      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fb6e 	bl	8005510 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	021a      	lsls	r2, r3, #8
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e68:	e000      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop

08004e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3c      	ldr	r2, [pc, #240]	; (8004fd4 <TIM_Base_SetConfig+0x104>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a39      	ldr	r2, [pc, #228]	; (8004fd8 <TIM_Base_SetConfig+0x108>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a38      	ldr	r2, [pc, #224]	; (8004fdc <TIM_Base_SetConfig+0x10c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0x38>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a37      	ldr	r2, [pc, #220]	; (8004fe0 <TIM_Base_SetConfig+0x110>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d108      	bne.n	8004f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <TIM_Base_SetConfig+0x104>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01b      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d017      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <TIM_Base_SetConfig+0x108>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a29      	ldr	r2, [pc, #164]	; (8004fdc <TIM_Base_SetConfig+0x10c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <TIM_Base_SetConfig+0x110>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <TIM_Base_SetConfig+0x114>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <TIM_Base_SetConfig+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_Base_SetConfig+0x8a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a25      	ldr	r2, [pc, #148]	; (8004fec <TIM_Base_SetConfig+0x11c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d108      	bne.n	8004f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <TIM_Base_SetConfig+0x104>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0xe8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <TIM_Base_SetConfig+0x110>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0xe8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <TIM_Base_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0xe8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a0f      	ldr	r2, [pc, #60]	; (8004fe8 <TIM_Base_SetConfig+0x118>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0xe8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <TIM_Base_SetConfig+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d103      	bne.n	8004fc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	615a      	str	r2, [r3, #20]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0302 	bic.w	r3, r3, #2
 800503c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <TIM_OC1_SetConfig+0x10c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_OC1_SetConfig+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <TIM_OC1_SetConfig+0x110>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_OC1_SetConfig+0x80>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2a      	ldr	r2, [pc, #168]	; (8005104 <TIM_OC1_SetConfig+0x114>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC1_SetConfig+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a29      	ldr	r2, [pc, #164]	; (8005108 <TIM_OC1_SetConfig+0x118>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC1_SetConfig+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <TIM_OC1_SetConfig+0x11c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10c      	bne.n	800508a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0308 	bic.w	r3, r3, #8
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1b      	ldr	r2, [pc, #108]	; (80050fc <TIM_OC1_SetConfig+0x10c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_OC1_SetConfig+0xc2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1a      	ldr	r2, [pc, #104]	; (8005100 <TIM_OC1_SetConfig+0x110>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_OC1_SetConfig+0xc2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a19      	ldr	r2, [pc, #100]	; (8005104 <TIM_OC1_SetConfig+0x114>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_OC1_SetConfig+0xc2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <TIM_OC1_SetConfig+0x118>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_OC1_SetConfig+0xc2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <TIM_OC1_SetConfig+0x11c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d111      	bne.n	80050d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	621a      	str	r2, [r3, #32]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0210 	bic.w	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0320 	bic.w	r3, r3, #32
 800515e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a28      	ldr	r2, [pc, #160]	; (8005210 <TIM_OC2_SetConfig+0x100>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC2_SetConfig+0x6c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a27      	ldr	r2, [pc, #156]	; (8005214 <TIM_OC2_SetConfig+0x104>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10d      	bne.n	8005198 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <TIM_OC2_SetConfig+0x100>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00f      	beq.n	80051c0 <TIM_OC2_SetConfig+0xb0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <TIM_OC2_SetConfig+0x104>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_OC2_SetConfig+0xb0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <TIM_OC2_SetConfig+0x108>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_OC2_SetConfig+0xb0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <TIM_OC2_SetConfig+0x10c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0xb0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <TIM_OC2_SetConfig+0x110>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d113      	bne.n	80051e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a27      	ldr	r2, [pc, #156]	; (8005320 <TIM_OC3_SetConfig+0xfc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC3_SetConfig+0x6a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a26      	ldr	r2, [pc, #152]	; (8005324 <TIM_OC3_SetConfig+0x100>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d10d      	bne.n	80052aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <TIM_OC3_SetConfig+0xfc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00f      	beq.n	80052d2 <TIM_OC3_SetConfig+0xae>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <TIM_OC3_SetConfig+0x100>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00b      	beq.n	80052d2 <TIM_OC3_SetConfig+0xae>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <TIM_OC3_SetConfig+0x104>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <TIM_OC3_SetConfig+0xae>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <TIM_OC3_SetConfig+0x108>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_OC3_SetConfig+0xae>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <TIM_OC3_SetConfig+0x10c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d113      	bne.n	80052fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	031b      	lsls	r3, r3, #12
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a28      	ldr	r2, [pc, #160]	; (8005434 <TIM_OC4_SetConfig+0x100>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x6c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a27      	ldr	r2, [pc, #156]	; (8005438 <TIM_OC4_SetConfig+0x104>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10d      	bne.n	80053bc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <TIM_OC4_SetConfig+0x100>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_OC4_SetConfig+0xb0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <TIM_OC4_SetConfig+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_OC4_SetConfig+0xb0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1b      	ldr	r2, [pc, #108]	; (800543c <TIM_OC4_SetConfig+0x108>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_OC4_SetConfig+0xb0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <TIM_OC4_SetConfig+0x10c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC4_SetConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a19      	ldr	r2, [pc, #100]	; (8005444 <TIM_OC4_SetConfig+0x110>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d113      	bne.n	800540c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40014000 	.word	0x40014000
 8005440:	40014400 	.word	0x40014400
 8005444:	40014800 	.word	0x40014800

08005448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800548c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a17      	ldr	r2, [pc, #92]	; (80054fc <TIM_OC5_SetConfig+0xb4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00f      	beq.n	80054c2 <TIM_OC5_SetConfig+0x7a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <TIM_OC5_SetConfig+0xb8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00b      	beq.n	80054c2 <TIM_OC5_SetConfig+0x7a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <TIM_OC5_SetConfig+0xbc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <TIM_OC5_SetConfig+0x7a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <TIM_OC5_SetConfig+0xc0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_OC5_SetConfig+0x7a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <TIM_OC5_SetConfig+0xc4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d109      	bne.n	80054d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	621a      	str	r2, [r3, #32]
}
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	051b      	lsls	r3, r3, #20
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <TIM_OC6_SetConfig+0xb8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00f      	beq.n	800558c <TIM_OC6_SetConfig+0x7c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <TIM_OC6_SetConfig+0xbc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_OC6_SetConfig+0x7c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <TIM_OC6_SetConfig+0xc0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_OC6_SetConfig+0x7c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <TIM_OC6_SetConfig+0xc4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC6_SetConfig+0x7c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <TIM_OC6_SetConfig+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d109      	bne.n	80055a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40013400 	.word	0x40013400
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800

080055dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2201      	movs	r2, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	43db      	mvns	r3, r3
 80055fe:	401a      	ands	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	621a      	str	r2, [r3, #32]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800563c:	2302      	movs	r3, #2
 800563e:	e065      	b.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2c      	ldr	r2, [pc, #176]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2b      	ldr	r2, [pc, #172]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800567a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800568c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005690:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d013      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a17      	ldr	r2, [pc, #92]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a12      	ldr	r2, [pc, #72]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a13      	ldr	r2, [pc, #76]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10c      	bne.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40013400 	.word	0x40013400
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40014000 	.word	0x40014000

0800572c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005744:	2302      	movs	r3, #2
 8005746:	e087      	b.n	8005858 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a27      	ldr	r2, [pc, #156]	; (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d004      	beq.n	80057d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d106      	bne.n	80057e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d126      	bne.n	8005846 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	051b      	lsls	r3, r3, #20
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a0e      	ldr	r2, [pc, #56]	; (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d106      	bne.n	8005846 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40013400 	.word	0x40013400

0800586c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005908:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800590c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	b29a      	uxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800592e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005932:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	b29b      	uxth	r3, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	4013      	ands	r3, r2
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800595c:	b084      	sub	sp, #16
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	f107 0014 	add.w	r0, r7, #20
 800596a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	b004      	add	sp, #16
 800599c:	4770      	bx	lr
	...

080059a0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b09b      	sub	sp, #108	; 0x6c
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d81f      	bhi.n	8005a12 <USB_ActivateEndpoint+0x72>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <USB_ActivateEndpoint+0x38>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a1b 	.word	0x08005a1b
 80059e4:	080059f7 	.word	0x080059f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059f4:	e012      	b.n	8005a1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a02:	e00b      	b.n	8005a1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005a10:	e004      	b.n	8005a1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005a18:	e000      	b.n	8005a1c <USB_ActivateEndpoint+0x7c>
      break;
 8005a1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	b21a      	sxth	r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b21b      	sxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	7b1b      	ldrb	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 8149 	bne.w	8005d24 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8084 	beq.w	8005ba4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4413      	add	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	00da      	lsls	r2, r3, #3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	88db      	ldrh	r3, [r3, #6]
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	81fb      	strh	r3, [r7, #14]
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <USB_ActivateEndpoint+0x180>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	81bb      	strh	r3, [r7, #12]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	89bb      	ldrh	r3, [r7, #12]
 8005b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	78db      	ldrb	r3, [r3, #3]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d020      	beq.n	8005b6a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3e:	813b      	strh	r3, [r7, #8]
 8005b40:	893b      	ldrh	r3, [r7, #8]
 8005b42:	f083 0320 	eor.w	r3, r3, #32
 8005b46:	813b      	strh	r3, [r7, #8]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
 8005b68:	e27f      	b.n	800606a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b80:	817b      	strh	r3, [r7, #10]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	897b      	ldrh	r3, [r7, #10]
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
 8005ba2:	e262      	b.n	800606a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	4413      	add	r3, r2
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	00da      	lsls	r2, r3, #3
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	88db      	ldrh	r3, [r3, #6]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	4413      	add	r3, r2
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	00da      	lsls	r2, r3, #3
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d112      	bne.n	8005c2a <USB_ActivateEndpoint+0x28a>
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e02f      	b.n	8005c8a <USB_ActivateEndpoint+0x2ea>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c30:	d813      	bhi.n	8005c5a <USB_ActivateEndpoint+0x2ba>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <USB_ActivateEndpoint+0x2ac>
 8005c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c48:	3301      	adds	r3, #1
 8005c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	e017      	b.n	8005c8a <USB_ActivateEndpoint+0x2ea>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	663b      	str	r3, [r7, #96]	; 0x60
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <USB_ActivateEndpoint+0x2d4>
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c70:	3b01      	subs	r3, #1
 8005c72:	663b      	str	r3, [r7, #96]	; 0x60
 8005c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	83fb      	strh	r3, [r7, #30]
 8005c98:	8bfb      	ldrh	r3, [r7, #30]
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01b      	beq.n	8005cda <USB_ActivateEndpoint+0x33a>
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb8:	83bb      	strh	r3, [r7, #28]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	8bbb      	ldrh	r3, [r7, #28]
 8005cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	837b      	strh	r3, [r7, #26]
 8005cf2:	8b7b      	ldrh	r3, [r7, #26]
 8005cf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cf8:	837b      	strh	r3, [r7, #26]
 8005cfa:	8b7b      	ldrh	r3, [r7, #26]
 8005cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d00:	837b      	strh	r3, [r7, #26]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	441a      	add	r2, r3
 8005d0c:	8b7b      	ldrh	r3, [r7, #26]
 8005d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8013      	strh	r3, [r2, #0]
 8005d22:	e1a2      	b.n	800606a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d54:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d70:	4413      	add	r3, r2
 8005d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d82:	657b      	str	r3, [r7, #84]	; 0x54
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	891b      	ldrh	r3, [r3, #8]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	653b      	str	r3, [r7, #80]	; 0x50
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	4413      	add	r3, r2
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	895b      	ldrh	r3, [r3, #10]
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f040 8091 	bne.w	8005ef4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005de0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01b      	beq.n	8005e22 <USB_ActivateEndpoint+0x482>
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01b      	beq.n	8005e72 <USB_ActivateEndpoint+0x4d2>
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8013      	strh	r3, [r2, #0]
 8005ef2:	e0ba      	b.n	800606a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005f04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01d      	beq.n	8005f4c <USB_ActivateEndpoint+0x5ac>
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01d      	beq.n	8005fa4 <USB_ActivateEndpoint+0x604>
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	441a      	add	r2, r3
 8005f8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	78db      	ldrb	r3, [r3, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d024      	beq.n	8005ff6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fca:	f083 0320 	eor.w	r3, r3, #32
 8005fce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	441a      	add	r2, r3
 8005fdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
 8005ff4:	e01d      	b.n	8006032 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800606a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800606e:	4618      	mov	r0, r3
 8006070:	376c      	adds	r7, #108	; 0x6c
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop

0800607c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800607c:	b480      	push	{r7}
 800607e:	b08d      	sub	sp, #52	; 0x34
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	7b1b      	ldrb	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 808e 	bne.w	80061ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d044      	beq.n	8006122 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	81bb      	strh	r3, [r7, #12]
 80060a6:	89bb      	ldrh	r3, [r7, #12]
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01b      	beq.n	80060e8 <USB_DeactivateEndpoint+0x6c>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	817b      	strh	r3, [r7, #10]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	897b      	ldrh	r3, [r7, #10]
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fe:	813b      	strh	r3, [r7, #8]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	893b      	ldrh	r3, [r7, #8]
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
 8006120:	e192      	b.n	8006448 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	827b      	strh	r3, [r7, #18]
 8006130:	8a7b      	ldrh	r3, [r7, #18]
 8006132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01b      	beq.n	8006172 <USB_DeactivateEndpoint+0xf6>
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	823b      	strh	r3, [r7, #16]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	8a3b      	ldrh	r3, [r7, #16]
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006188:	81fb      	strh	r3, [r7, #14]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
 80061aa:	e14d      	b.n	8006448 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 80a5 	bne.w	8006300 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	843b      	strh	r3, [r7, #32]
 80061c4:	8c3b      	ldrh	r3, [r7, #32]
 80061c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <USB_DeactivateEndpoint+0x18a>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	83fb      	strh	r3, [r7, #30]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8bfb      	ldrh	r3, [r7, #30]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	83bb      	strh	r3, [r7, #28]
 8006214:	8bbb      	ldrh	r3, [r7, #28]
 8006216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01b      	beq.n	8006256 <USB_DeactivateEndpoint+0x1da>
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	837b      	strh	r3, [r7, #26]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8b7b      	ldrh	r3, [r7, #26]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	833b      	strh	r3, [r7, #24]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	8b3b      	ldrh	r3, [r7, #24]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	82fb      	strh	r3, [r7, #22]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8afb      	ldrh	r3, [r7, #22]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	82bb      	strh	r3, [r7, #20]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	8abb      	ldrh	r3, [r7, #20]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]
 80062fe:	e0a3      	b.n	8006448 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800630e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <USB_DeactivateEndpoint+0x2d4>
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800635e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01b      	beq.n	80063a0 <USB_DeactivateEndpoint+0x324>
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	847b      	strh	r3, [r7, #34]	; 0x22
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	b29b      	uxth	r3, r3
 8006446:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3734      	adds	r7, #52	; 0x34
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b0c4      	sub	sp, #272	; 0x110
 800645a:	af00      	add	r7, sp, #0
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	6018      	str	r0, [r3, #0]
 8006460:	463b      	mov	r3, r7
 8006462:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	2b01      	cmp	r3, #1
 800646c:	f040 8566 	bne.w	8006f3c <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006470:	463b      	mov	r3, r7
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	463b      	mov	r3, r7
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d905      	bls.n	800648c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800648a:	e004      	b.n	8006496 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	7b1b      	ldrb	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d12c      	bne.n	80064fa <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064a0:	463b      	mov	r3, r7
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6959      	ldr	r1, [r3, #20]
 80064a6:	463b      	mov	r3, r7
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	88da      	ldrh	r2, [r3, #6]
 80064ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	1d38      	adds	r0, r7, #4
 80064b4:	6800      	ldr	r0, [r0, #0]
 80064b6:	f001 fa43 	bl	8007940 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00da      	lsls	r2, r3, #3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80064e2:	f107 0310 	add.w	r3, r7, #16
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f107 0310 	add.w	r3, r7, #16
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	f000 bcec 	b.w	8006ed2 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064fa:	463b      	mov	r3, r7
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	78db      	ldrb	r3, [r3, #3]
 8006500:	2b02      	cmp	r3, #2
 8006502:	f040 8356 	bne.w	8006bb2 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006506:	463b      	mov	r3, r7
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1a      	ldr	r2, [r3, #32]
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	f240 82fa 	bls.w	8006b0c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
 8006544:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800655c:	463b      	mov	r3, r7
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006566:	463b      	mov	r3, r7
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006570:	1ad2      	subs	r2, r2, r3
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 815e 	beq.w	8006850 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d164      	bne.n	800666e <USB_EPStartXfer+0x218>
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	4413      	add	r3, r2
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	00da      	lsls	r2, r3, #3
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	4413      	add	r3, r2
 80065c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d112      	bne.n	80065fc <USB_EPStartXfer+0x1a6>
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e054      	b.n	80066a6 <USB_EPStartXfer+0x250>
 80065fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006600:	2b3e      	cmp	r3, #62	; 0x3e
 8006602:	d817      	bhi.n	8006634 <USB_EPStartXfer+0x1de>
 8006604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800660e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <USB_EPStartXfer+0x1ce>
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661e:	3301      	adds	r3, #1
 8006620:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29b      	uxth	r3, r3
 800662a:	029b      	lsls	r3, r3, #10
 800662c:	b29a      	uxth	r2, r3
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e038      	b.n	80066a6 <USB_EPStartXfer+0x250>
 8006634:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800663e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <USB_EPStartXfer+0x1fe>
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664e:	3b01      	subs	r3, #1
 8006650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	b29b      	uxth	r3, r3
 800665a:	029b      	lsls	r3, r3, #10
 800665c:	b29b      	uxth	r3, r3
 800665e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006666:	b29a      	uxth	r2, r3
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	e01b      	b.n	80066a6 <USB_EPStartXfer+0x250>
 800666e:	463b      	mov	r3, r7
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d116      	bne.n	80066a6 <USB_EPStartXfer+0x250>
 8006678:	1d3b      	adds	r3, r7, #4
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	4413      	add	r3, r2
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	00da      	lsls	r2, r3, #3
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	4413      	add	r3, r2
 8006696:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
 800669c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066a6:	463b      	mov	r3, r7
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	895b      	ldrh	r3, [r3, #10]
 80066ac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6959      	ldr	r1, [r3, #20]
 80066b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80066c0:	1d38      	adds	r0, r7, #4
 80066c2:	6800      	ldr	r0, [r0, #0]
 80066c4:	f001 f93c 	bl	8007940 <USB_WritePMA>
            ep->xfer_buff += len;
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d2:	441a      	add	r2, r3
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a1a      	ldr	r2, [r3, #32]
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90e      	bls.n	8006708 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80066ea:	463b      	mov	r3, r7
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	621a      	str	r2, [r3, #32]
 8006706:	e008      	b.n	800671a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006712:	463b      	mov	r3, r7
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d164      	bne.n	80067ee <USB_EPStartXfer+0x398>
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	4413      	add	r3, r2
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	463b      	mov	r3, r7
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	00da      	lsls	r2, r3, #3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006752:	2b00      	cmp	r3, #0
 8006754:	d112      	bne.n	800677c <USB_EPStartXfer+0x326>
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006760:	b29a      	uxth	r2, r3
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e057      	b.n	800682c <USB_EPStartXfer+0x3d6>
 800677c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006780:	2b3e      	cmp	r3, #62	; 0x3e
 8006782:	d817      	bhi.n	80067b4 <USB_EPStartXfer+0x35e>
 8006784:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800678e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <USB_EPStartXfer+0x34e>
 800679a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800679e:	3301      	adds	r3, #1
 80067a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	029b      	lsls	r3, r3, #10
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e03b      	b.n	800682c <USB_EPStartXfer+0x3d6>
 80067b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <USB_EPStartXfer+0x37e>
 80067ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ce:	3b01      	subs	r3, #1
 80067d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067d8:	b29b      	uxth	r3, r3
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e01e      	b.n	800682c <USB_EPStartXfer+0x3d6>
 80067ee:	463b      	mov	r3, r7
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d119      	bne.n	800682c <USB_EPStartXfer+0x3d6>
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	4413      	add	r3, r2
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
 8006810:	463b      	mov	r3, r7
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00da      	lsls	r2, r3, #3
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	4413      	add	r3, r2
 800681c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006826:	b29a      	uxth	r2, r3
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	891b      	ldrh	r3, [r3, #8]
 8006832:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6959      	ldr	r1, [r3, #20]
 800683c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006840:	b29b      	uxth	r3, r3
 8006842:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006846:	1d38      	adds	r0, r7, #4
 8006848:	6800      	ldr	r0, [r0, #0]
 800684a:	f001 f879 	bl	8007940 <USB_WritePMA>
 800684e:	e340      	b.n	8006ed2 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d164      	bne.n	8006924 <USB_EPStartXfer+0x4ce>
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686e:	4413      	add	r3, r2
 8006870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	00da      	lsls	r2, r3, #3
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	4413      	add	r3, r2
 800687e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006882:	64bb      	str	r3, [r7, #72]	; 0x48
 8006884:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006888:	2b00      	cmp	r3, #0
 800688a:	d112      	bne.n	80068b2 <USB_EPStartXfer+0x45c>
 800688c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006896:	b29a      	uxth	r2, r3
 8006898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e057      	b.n	8006962 <USB_EPStartXfer+0x50c>
 80068b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b6:	2b3e      	cmp	r3, #62	; 0x3e
 80068b8:	d817      	bhi.n	80068ea <USB_EPStartXfer+0x494>
 80068ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <USB_EPStartXfer+0x484>
 80068d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d4:	3301      	adds	r3, #1
 80068d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068de:	b29b      	uxth	r3, r3
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e03b      	b.n	8006962 <USB_EPStartXfer+0x50c>
 80068ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <USB_EPStartXfer+0x4b4>
 8006900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006904:	3b01      	subs	r3, #1
 8006906:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800690a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690e:	b29b      	uxth	r3, r3
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691c:	b29a      	uxth	r2, r3
 800691e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e01e      	b.n	8006962 <USB_EPStartXfer+0x50c>
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d119      	bne.n	8006962 <USB_EPStartXfer+0x50c>
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	657b      	str	r3, [r7, #84]	; 0x54
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006942:	4413      	add	r3, r2
 8006944:	657b      	str	r3, [r7, #84]	; 0x54
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	00da      	lsls	r2, r3, #3
 800694e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006950:	4413      	add	r3, r2
 8006952:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006956:	653b      	str	r3, [r7, #80]	; 0x50
 8006958:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800695c:	b29a      	uxth	r2, r3
 800695e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006962:	463b      	mov	r3, r7
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	891b      	ldrh	r3, [r3, #8]
 8006968:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6959      	ldr	r1, [r3, #20]
 8006972:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006976:	b29b      	uxth	r3, r3
 8006978:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800697c:	1d38      	adds	r0, r7, #4
 800697e:	6800      	ldr	r0, [r0, #0]
 8006980:	f000 ffde 	bl	8007940 <USB_WritePMA>
            ep->xfer_buff += len;
 8006984:	463b      	mov	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800698e:	441a      	add	r2, r3
 8006990:	463b      	mov	r3, r7
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006996:	463b      	mov	r3, r7
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d90e      	bls.n	80069c4 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80069a6:	463b      	mov	r3, r7
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80069b0:	463b      	mov	r3, r7
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a1a      	ldr	r2, [r3, #32]
 80069b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	621a      	str	r2, [r3, #32]
 80069c2:	e008      	b.n	80069d6 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80069c4:	463b      	mov	r3, r7
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80069ce:	463b      	mov	r3, r7
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	647b      	str	r3, [r7, #68]	; 0x44
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d164      	bne.n	8006ab0 <USB_EPStartXfer+0x65a>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fa:	4413      	add	r3, r2
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	00da      	lsls	r2, r3, #3
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d112      	bne.n	8006a3e <USB_EPStartXfer+0x5e8>
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e054      	b.n	8006ae8 <USB_EPStartXfer+0x692>
 8006a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a42:	2b3e      	cmp	r3, #62	; 0x3e
 8006a44:	d817      	bhi.n	8006a76 <USB_EPStartXfer+0x620>
 8006a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <USB_EPStartXfer+0x610>
 8006a5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e038      	b.n	8006ae8 <USB_EPStartXfer+0x692>
 8006a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <USB_EPStartXfer+0x640>
 8006a8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a90:	3b01      	subs	r3, #1
 8006a92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	029b      	lsls	r3, r3, #10
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e01b      	b.n	8006ae8 <USB_EPStartXfer+0x692>
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d116      	bne.n	8006ae8 <USB_EPStartXfer+0x692>
 8006aba:	1d3b      	adds	r3, r7, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac8:	4413      	add	r3, r2
 8006aca:	647b      	str	r3, [r7, #68]	; 0x44
 8006acc:	463b      	mov	r3, r7
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	00da      	lsls	r2, r3, #3
 8006ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006adc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ae8:	463b      	mov	r3, r7
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	895b      	ldrh	r3, [r3, #10]
 8006aee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6959      	ldr	r1, [r3, #20]
 8006af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006b02:	1d38      	adds	r0, r7, #4
 8006b04:	6800      	ldr	r0, [r0, #0]
 8006b06:	f000 ff1b 	bl	8007940 <USB_WritePMA>
 8006b0a:	e1e2      	b.n	8006ed2 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b30:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006b34:	1d3b      	adds	r3, r7, #4
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006b60:	1d3b      	adds	r3, r7, #4
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b6e:	4413      	add	r3, r2
 8006b70:	663b      	str	r3, [r7, #96]	; 0x60
 8006b72:	463b      	mov	r3, r7
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	00da      	lsls	r2, r3, #3
 8006b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b8e:	463b      	mov	r3, r7
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	891b      	ldrh	r3, [r3, #8]
 8006b94:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b98:	463b      	mov	r3, r7
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6959      	ldr	r1, [r3, #20]
 8006b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006ba8:	1d38      	adds	r0, r7, #4
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	f000 fec8 	bl	8007940 <USB_WritePMA>
 8006bb0:	e18f      	b.n	8006ed2 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bb2:	1d3b      	adds	r3, r7, #4
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 808f 	beq.w	8006cec <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	785b      	ldrb	r3, [r3, #1]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d164      	bne.n	8006ca8 <USB_EPStartXfer+0x852>
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	673b      	str	r3, [r7, #112]	; 0x70
 8006be4:	1d3b      	adds	r3, r7, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf2:	4413      	add	r3, r2
 8006bf4:	673b      	str	r3, [r7, #112]	; 0x70
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	00da      	lsls	r2, r3, #3
 8006bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c00:	4413      	add	r3, r2
 8006c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d112      	bne.n	8006c36 <USB_EPStartXfer+0x7e0>
 8006c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	e054      	b.n	8006ce0 <USB_EPStartXfer+0x88a>
 8006c36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c3c:	d817      	bhi.n	8006c6e <USB_EPStartXfer+0x818>
 8006c3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d004      	beq.n	8006c5e <USB_EPStartXfer+0x808>
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	029b      	lsls	r3, r3, #10
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e038      	b.n	8006ce0 <USB_EPStartXfer+0x88a>
 8006c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d104      	bne.n	8006c8e <USB_EPStartXfer+0x838>
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	029b      	lsls	r3, r3, #10
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e01b      	b.n	8006ce0 <USB_EPStartXfer+0x88a>
 8006ca8:	463b      	mov	r3, r7
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	785b      	ldrb	r3, [r3, #1]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d116      	bne.n	8006ce0 <USB_EPStartXfer+0x88a>
 8006cb2:	1d3b      	adds	r3, r7, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc0:	4413      	add	r3, r2
 8006cc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	00da      	lsls	r2, r3, #3
 8006ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cd4:	677b      	str	r3, [r7, #116]	; 0x74
 8006cd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	895b      	ldrh	r3, [r3, #10]
 8006ce6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006cea:	e097      	b.n	8006e1c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d168      	bne.n	8006dc8 <USB_EPStartXfer+0x972>
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d0e:	4413      	add	r3, r2
 8006d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d14:	463b      	mov	r3, r7
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	00da      	lsls	r2, r3, #3
 8006d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d112      	bne.n	8006d56 <USB_EPStartXfer+0x900>
 8006d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e05d      	b.n	8006e12 <USB_EPStartXfer+0x9bc>
 8006d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d5c:	d817      	bhi.n	8006d8e <USB_EPStartXfer+0x938>
 8006d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <USB_EPStartXfer+0x928>
 8006d74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d78:	3301      	adds	r3, #1
 8006d7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	e041      	b.n	8006e12 <USB_EPStartXfer+0x9bc>
 8006d8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <USB_EPStartXfer+0x958>
 8006da4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006da8:	3b01      	subs	r3, #1
 8006daa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e024      	b.n	8006e12 <USB_EPStartXfer+0x9bc>
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d11f      	bne.n	8006e12 <USB_EPStartXfer+0x9bc>
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dea:	4413      	add	r3, r2
 8006dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	00da      	lsls	r2, r3, #3
 8006df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e12:	463b      	mov	r3, r7
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	891b      	ldrh	r3, [r3, #8]
 8006e18:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6959      	ldr	r1, [r3, #20]
 8006e22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006e2c:	1d38      	adds	r0, r7, #4
 8006e2e:	6800      	ldr	r0, [r0, #0]
 8006e30:	f000 fd86 	bl	8007940 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d122      	bne.n	8006e84 <USB_EPStartXfer+0xa2e>
 8006e3e:	1d3b      	adds	r3, r7, #4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	463b      	mov	r3, r7
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006e5c:	1d3b      	adds	r3, r7, #4
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	463b      	mov	r3, r7
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	441a      	add	r2, r3
 8006e6a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	8013      	strh	r3, [r2, #0]
 8006e82:	e026      	b.n	8006ed2 <USB_EPStartXfer+0xa7c>
 8006e84:	463b      	mov	r3, r7
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d121      	bne.n	8006ed2 <USB_EPStartXfer+0xa7c>
 8006e8e:	1d3b      	adds	r3, r7, #4
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006eac:	1d3b      	adds	r3, r7, #4
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f107 020e 	add.w	r2, r7, #14
 8006ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef0:	8013      	strh	r3, [r2, #0]
 8006ef2:	f107 030e 	add.w	r3, r7, #14
 8006ef6:	f107 020e 	add.w	r2, r7, #14
 8006efa:	8812      	ldrh	r2, [r2, #0]
 8006efc:	f082 0210 	eor.w	r2, r2, #16
 8006f00:	801a      	strh	r2, [r3, #0]
 8006f02:	f107 030e 	add.w	r3, r7, #14
 8006f06:	f107 020e 	add.w	r2, r7, #14
 8006f0a:	8812      	ldrh	r2, [r2, #0]
 8006f0c:	f082 0220 	eor.w	r2, r2, #32
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	f107 030e 	add.w	r3, r7, #14
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
 8006f3a:	e3b5      	b.n	80076a8 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	7b1b      	ldrb	r3, [r3, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 8090 	bne.w	8007068 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006f48:	463b      	mov	r3, r7
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	463b      	mov	r3, r7
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d90e      	bls.n	8006f76 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006f62:	463b      	mov	r3, r7
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699a      	ldr	r2, [r3, #24]
 8006f68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f6c:	1ad2      	subs	r2, r2, r3
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	619a      	str	r2, [r3, #24]
 8006f74:	e008      	b.n	8006f88 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f88:	1d3b      	adds	r3, r7, #4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	00da      	lsls	r2, r3, #3
 8006fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d116      	bne.n	8006ff2 <USB_EPStartXfer+0xb9c>
 8006fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	e32c      	b.n	800764c <USB_EPStartXfer+0x11f6>
 8006ff2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff8:	d818      	bhi.n	800702c <USB_EPStartXfer+0xbd6>
 8006ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <USB_EPStartXfer+0xbc4>
 8007010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007014:	3301      	adds	r3, #1
 8007016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800701a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800701e:	b29b      	uxth	r3, r3
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	b29a      	uxth	r2, r3
 8007024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e30f      	b.n	800764c <USB_EPStartXfer+0x11f6>
 800702c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007036:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <USB_EPStartXfer+0xbf6>
 8007042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007046:	3b01      	subs	r3, #1
 8007048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800704c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007050:	b29b      	uxth	r3, r3
 8007052:	029b      	lsls	r3, r3, #10
 8007054:	b29b      	uxth	r3, r3
 8007056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	e2f1      	b.n	800764c <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	78db      	ldrb	r3, [r3, #3]
 800706e:	2b02      	cmp	r3, #2
 8007070:	f040 818f 	bne.w	8007392 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007074:	463b      	mov	r3, r7
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d175      	bne.n	800716a <USB_EPStartXfer+0xd14>
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007096:	4413      	add	r3, r2
 8007098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800709c:	463b      	mov	r3, r7
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070a8:	4413      	add	r3, r2
 80070aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070b2:	463b      	mov	r3, r7
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d116      	bne.n	80070ea <USB_EPStartXfer+0xc94>
 80070bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	e065      	b.n	80071b6 <USB_EPStartXfer+0xd60>
 80070ea:	463b      	mov	r3, r7
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b3e      	cmp	r3, #62	; 0x3e
 80070f2:	d81a      	bhi.n	800712a <USB_EPStartXfer+0xcd4>
 80070f4:	463b      	mov	r3, r7
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <USB_EPStartXfer+0xcc2>
 800710e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800711c:	b29b      	uxth	r3, r3
 800711e:	029b      	lsls	r3, r3, #10
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e045      	b.n	80071b6 <USB_EPStartXfer+0xd60>
 800712a:	463b      	mov	r3, r7
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <USB_EPStartXfer+0xcf8>
 8007144:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007148:	3b01      	subs	r3, #1
 800714a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800714e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007152:	b29b      	uxth	r3, r3
 8007154:	029b      	lsls	r3, r3, #10
 8007156:	b29b      	uxth	r3, r3
 8007158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007160:	b29a      	uxth	r2, r3
 8007162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e025      	b.n	80071b6 <USB_EPStartXfer+0xd60>
 800716a:	463b      	mov	r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d120      	bne.n	80071b6 <USB_EPStartXfer+0xd60>
 8007174:	1d3b      	adds	r3, r7, #4
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800717c:	1d3b      	adds	r3, r7, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800718c:	4413      	add	r3, r2
 800718e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	00da      	lsls	r2, r3, #3
 800719a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800719e:	4413      	add	r3, r2
 80071a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a8:	463b      	mov	r3, r7
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d175      	bne.n	80072b4 <USB_EPStartXfer+0xe5e>
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d8:	b29b      	uxth	r3, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071e0:	4413      	add	r3, r2
 80071e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071e6:	463b      	mov	r3, r7
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	00da      	lsls	r2, r3, #3
 80071ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071f2:	4413      	add	r3, r2
 80071f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071fc:	463b      	mov	r3, r7
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d116      	bne.n	8007234 <USB_EPStartXfer+0xdde>
 8007206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007212:	b29a      	uxth	r2, r3
 8007214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	e061      	b.n	80072f8 <USB_EPStartXfer+0xea2>
 8007234:	463b      	mov	r3, r7
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b3e      	cmp	r3, #62	; 0x3e
 800723c:	d81a      	bhi.n	8007274 <USB_EPStartXfer+0xe1e>
 800723e:	463b      	mov	r3, r7
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800724a:	463b      	mov	r3, r7
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <USB_EPStartXfer+0xe0c>
 8007258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725c:	3301      	adds	r3, #1
 800725e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007266:	b29b      	uxth	r3, r3
 8007268:	029b      	lsls	r3, r3, #10
 800726a:	b29a      	uxth	r2, r3
 800726c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e041      	b.n	80072f8 <USB_EPStartXfer+0xea2>
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <USB_EPStartXfer+0xe42>
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	3b01      	subs	r3, #1
 8007294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	b29b      	uxth	r3, r3
 800729e:	029b      	lsls	r3, r3, #10
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e021      	b.n	80072f8 <USB_EPStartXfer+0xea2>
 80072b4:	463b      	mov	r3, r7
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	785b      	ldrb	r3, [r3, #1]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d11c      	bne.n	80072f8 <USB_EPStartXfer+0xea2>
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072ce:	4413      	add	r3, r2
 80072d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	00da      	lsls	r2, r3, #3
 80072dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072e0:	4413      	add	r3, r2
 80072e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80072ea:	463b      	mov	r3, r7
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072f6:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 81a4 	beq.w	800764c <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007304:	1d3b      	adds	r3, r7, #4
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	463b      	mov	r3, r7
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007318:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800731c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <USB_EPStartXfer+0xeda>
 8007324:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10d      	bne.n	800734c <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007330:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007338:	2b00      	cmp	r3, #0
 800733a:	f040 8187 	bne.w	800764c <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800733e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	f040 8180 	bne.w	800764c <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800734c:	1d3b      	adds	r3, r7, #4
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	463b      	mov	r3, r7
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	463b      	mov	r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	441a      	add	r2, r3
 8007378:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]
 8007390:	e15c      	b.n	800764c <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	78db      	ldrb	r3, [r3, #3]
 8007398:	2b01      	cmp	r3, #1
 800739a:	f040 8155 	bne.w	8007648 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800739e:	463b      	mov	r3, r7
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d90e      	bls.n	80073cc <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80073ae:	463b      	mov	r3, r7
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	463b      	mov	r3, r7
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	619a      	str	r2, [r3, #24]
 80073ca:	e008      	b.n	80073de <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80073cc:	463b      	mov	r3, r7
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073de:	463b      	mov	r3, r7
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d16f      	bne.n	80074c8 <USB_EPStartXfer+0x1072>
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007400:	4413      	add	r3, r2
 8007402:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	00da      	lsls	r2, r3, #3
 800740e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007412:	4413      	add	r3, r2
 8007414:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800741c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007420:	2b00      	cmp	r3, #0
 8007422:	d116      	bne.n	8007452 <USB_EPStartXfer+0xffc>
 8007424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007430:	b29a      	uxth	r2, r3
 8007432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007448:	b29a      	uxth	r2, r3
 800744a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	e05f      	b.n	8007512 <USB_EPStartXfer+0x10bc>
 8007452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007456:	2b3e      	cmp	r3, #62	; 0x3e
 8007458:	d818      	bhi.n	800748c <USB_EPStartXfer+0x1036>
 800745a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <USB_EPStartXfer+0x1024>
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007474:	3301      	adds	r3, #1
 8007476:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800747a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747e:	b29b      	uxth	r3, r3
 8007480:	029b      	lsls	r3, r3, #10
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	e042      	b.n	8007512 <USB_EPStartXfer+0x10bc>
 800748c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007490:	095b      	lsrs	r3, r3, #5
 8007492:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007496:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <USB_EPStartXfer+0x1056>
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a6:	3b01      	subs	r3, #1
 80074a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	029b      	lsls	r3, r3, #10
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e024      	b.n	8007512 <USB_EPStartXfer+0x10bc>
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d11f      	bne.n	8007512 <USB_EPStartXfer+0x10bc>
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ea:	4413      	add	r3, r2
 80074ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800750a:	b29a      	uxth	r2, r3
 800750c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800751a:	463b      	mov	r3, r7
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d16f      	bne.n	8007604 <USB_EPStartXfer+0x11ae>
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800752c:	1d3b      	adds	r3, r7, #4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800753c:	4413      	add	r3, r2
 800753e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	00da      	lsls	r2, r3, #3
 800754a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800754e:	4413      	add	r3, r2
 8007550:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800755c:	2b00      	cmp	r3, #0
 800755e:	d116      	bne.n	800758e <USB_EPStartXfer+0x1138>
 8007560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007584:	b29a      	uxth	r2, r3
 8007586:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e05e      	b.n	800764c <USB_EPStartXfer+0x11f6>
 800758e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007592:	2b3e      	cmp	r3, #62	; 0x3e
 8007594:	d818      	bhi.n	80075c8 <USB_EPStartXfer+0x1172>
 8007596:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <USB_EPStartXfer+0x1160>
 80075ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e041      	b.n	800764c <USB_EPStartXfer+0x11f6>
 80075c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <USB_EPStartXfer+0x1192>
 80075de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e2:	3b01      	subs	r3, #1
 80075e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	029b      	lsls	r3, r3, #10
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	e023      	b.n	800764c <USB_EPStartXfer+0x11f6>
 8007604:	463b      	mov	r3, r7
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d11e      	bne.n	800764c <USB_EPStartXfer+0x11f6>
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800761e:	4413      	add	r3, r2
 8007620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007624:	463b      	mov	r3, r7
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	00da      	lsls	r2, r3, #3
 800762c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007630:	4413      	add	r3, r2
 8007632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800763a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e001      	b.n	800764c <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e02e      	b.n	80076aa <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	463b      	mov	r3, r7
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800766a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800766e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007672:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007676:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800767a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800767e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	463b      	mov	r3, r7
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	441a      	add	r2, r3
 8007690:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d020      	beq.n	8007708 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076dc:	81bb      	strh	r3, [r7, #12]
 80076de:	89bb      	ldrh	r3, [r7, #12]
 80076e0:	f083 0310 	eor.w	r3, r3, #16
 80076e4:	81bb      	strh	r3, [r7, #12]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	441a      	add	r2, r3
 80076f0:	89bb      	ldrh	r3, [r7, #12]
 80076f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007702:	b29b      	uxth	r3, r3
 8007704:	8013      	strh	r3, [r2, #0]
 8007706:	e01f      	b.n	8007748 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	81fb      	strh	r3, [r7, #14]
 8007720:	89fb      	ldrh	r3, [r7, #14]
 8007722:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007726:	81fb      	strh	r3, [r7, #14]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	441a      	add	r2, r3
 8007732:	89fb      	ldrh	r3, [r7, #14]
 8007734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	b29b      	uxth	r3, r3
 8007746:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007756:	b480      	push	{r7}
 8007758:	b087      	sub	sp, #28
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	7b1b      	ldrb	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f040 809d 	bne.w	80078a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d04c      	beq.n	800780c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	823b      	strh	r3, [r7, #16]
 8007780:	8a3b      	ldrh	r3, [r7, #16]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d01b      	beq.n	80077c2 <USB_EPClearStall+0x6c>
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a0:	81fb      	strh	r3, [r7, #14]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	441a      	add	r2, r3
 80077ac:	89fb      	ldrh	r3, [r7, #14]
 80077ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077be:	b29b      	uxth	r3, r3
 80077c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	78db      	ldrb	r3, [r3, #3]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d06c      	beq.n	80078a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e0:	81bb      	strh	r3, [r7, #12]
 80077e2:	89bb      	ldrh	r3, [r7, #12]
 80077e4:	f083 0320 	eor.w	r3, r3, #32
 80077e8:	81bb      	strh	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	441a      	add	r2, r3
 80077f4:	89bb      	ldrh	r3, [r7, #12]
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
 800780a:	e04b      	b.n	80078a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	82fb      	strh	r3, [r7, #22]
 800781a:	8afb      	ldrh	r3, [r7, #22]
 800781c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01b      	beq.n	800785c <USB_EPClearStall+0x106>
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	82bb      	strh	r3, [r7, #20]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	8abb      	ldrh	r3, [r7, #20]
 8007848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007858:	b29b      	uxth	r3, r3
 800785a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	827b      	strh	r3, [r7, #18]
 8007874:	8a7b      	ldrh	r3, [r7, #18]
 8007876:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800787a:	827b      	strh	r3, [r7, #18]
 800787c:	8a7b      	ldrh	r3, [r7, #18]
 800787e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007882:	827b      	strh	r3, [r7, #18]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	8a7b      	ldrh	r3, [r7, #18]
 8007890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007916:	b29b      	uxth	r3, r3
 8007918:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800791a:	68fb      	ldr	r3, [r7, #12]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007940:	b480      	push	{r7}
 8007942:	b08d      	sub	sp, #52	; 0x34
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4611      	mov	r1, r2
 800794c:	461a      	mov	r2, r3
 800794e:	460b      	mov	r3, r1
 8007950:	80fb      	strh	r3, [r7, #6]
 8007952:	4613      	mov	r3, r2
 8007954:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007956:	88bb      	ldrh	r3, [r7, #4]
 8007958:	3301      	adds	r3, #1
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007976:	e01b      	b.n	80079b0 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	3301      	adds	r3, #1
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	b29a      	uxth	r2, r3
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	3302      	adds	r3, #2
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	3301      	adds	r3, #1
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	3b01      	subs	r3, #1
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e0      	bne.n	8007978 <USB_WritePMA+0x38>
  }
}
 80079b6:	bf00      	nop
 80079b8:	3734      	adds	r7, #52	; 0x34
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b08b      	sub	sp, #44	; 0x2c
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	4611      	mov	r1, r2
 80079ce:	461a      	mov	r2, r3
 80079d0:	460b      	mov	r3, r1
 80079d2:	80fb      	strh	r3, [r7, #6]
 80079d4:	4613      	mov	r3, r2
 80079d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80079d8:	88bb      	ldrh	r3, [r7, #4]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	b29b      	uxth	r3, r3
 80079de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079e8:	88fa      	ldrh	r2, [r7, #6]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
 80079f8:	e018      	b.n	8007a2c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	3302      	adds	r3, #2
 8007a06:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	3301      	adds	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e3      	bne.n	80079fa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007a32:	88bb      	ldrh	r3, [r7, #4]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d007      	beq.n	8007a4e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	701a      	strb	r2, [r3, #0]
  }
}
 8007a4e:	bf00      	nop
 8007a50:	372c      	adds	r7, #44	; 0x2c
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a66:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a6a:	f002 f89d 	bl	8009ba8 <USBD_static_malloc>
 8007a6e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e066      	b.n	8007b50 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7c1b      	ldrb	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d119      	bne.n	8007ac6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a96:	2202      	movs	r2, #2
 8007a98:	2181      	movs	r1, #129	; 0x81
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 ff29 	bl	80098f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aaa:	2202      	movs	r2, #2
 8007aac:	2101      	movs	r1, #1
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 ff1f 	bl	80098f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2210      	movs	r2, #16
 8007ac0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007ac4:	e016      	b.n	8007af4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	2202      	movs	r2, #2
 8007aca:	2181      	movs	r1, #129	; 0x81
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 ff10 	bl	80098f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ad8:	2340      	movs	r3, #64	; 0x40
 8007ada:	2202      	movs	r2, #2
 8007adc:	2101      	movs	r1, #1
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 ff07 	bl	80098f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2210      	movs	r2, #16
 8007af0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007af4:	2308      	movs	r3, #8
 8007af6:	2203      	movs	r2, #3
 8007af8:	2182      	movs	r1, #130	; 0x82
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fef9 	bl	80098f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7c1b      	ldrb	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b34:	2101      	movs	r1, #1
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 ffcb 	bl	8009ad2 <USBD_LL_PrepareReceive>
 8007b3c:	e007      	b.n	8007b4e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b44:	2340      	movs	r3, #64	; 0x40
 8007b46:	2101      	movs	r1, #1
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 ffc2 	bl	8009ad2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b64:	2181      	movs	r1, #129	; 0x81
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fee9 	bl	800993e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b72:	2101      	movs	r1, #1
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 fee2 	bl	800993e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b82:	2182      	movs	r1, #130	; 0x82
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 feda 	bl	800993e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00e      	beq.n	8007bc2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 f805 	bl	8009bc4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bdc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d03a      	beq.n	8007c6c <USBD_CDC_Setup+0xa0>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	f040 8097 	bne.w	8007d2a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	88db      	ldrh	r3, [r3, #6]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d029      	beq.n	8007c58 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b25b      	sxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da11      	bge.n	8007c32 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007c1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	88d2      	ldrh	r2, [r2, #6]
 8007c20:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c22:	6939      	ldr	r1, [r7, #16]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	88db      	ldrh	r3, [r3, #6]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fa8d 	bl	800914a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007c30:	e082      	b.n	8007d38 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	785a      	ldrb	r2, [r3, #1]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	88db      	ldrh	r3, [r3, #6]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c48:	6939      	ldr	r1, [r7, #16]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 faa6 	bl	80091a2 <USBD_CtlPrepareRx>
      break;
 8007c56:	e06f      	b.n	8007d38 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	7850      	ldrb	r0, [r2, #1]
 8007c64:	2200      	movs	r2, #0
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	4798      	blx	r3
      break;
 8007c6a:	e065      	b.n	8007d38 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b0b      	cmp	r3, #11
 8007c72:	d84f      	bhi.n	8007d14 <USBD_CDC_Setup+0x148>
 8007c74:	a201      	add	r2, pc, #4	; (adr r2, 8007c7c <USBD_CDC_Setup+0xb0>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007cad 	.word	0x08007cad
 8007c80:	08007d23 	.word	0x08007d23
 8007c84:	08007d15 	.word	0x08007d15
 8007c88:	08007d15 	.word	0x08007d15
 8007c8c:	08007d15 	.word	0x08007d15
 8007c90:	08007d15 	.word	0x08007d15
 8007c94:	08007d15 	.word	0x08007d15
 8007c98:	08007d15 	.word	0x08007d15
 8007c9c:	08007d15 	.word	0x08007d15
 8007ca0:	08007d15 	.word	0x08007d15
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007cfd 	.word	0x08007cfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d107      	bne.n	8007cc6 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cb6:	f107 030c 	add.w	r3, r7, #12
 8007cba:	2202      	movs	r2, #2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fa43 	bl	800914a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cc4:	e030      	b.n	8007d28 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f9cd 	bl	8009068 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cd2:	e029      	b.n	8007d28 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d107      	bne.n	8007cee <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007cde:	f107 030f 	add.w	r3, r7, #15
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fa2f 	bl	800914a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cec:	e01c      	b.n	8007d28 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f9b9 	bl	8009068 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8007cfa:	e015      	b.n	8007d28 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d00f      	beq.n	8007d26 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 f9ad 	bl	8009068 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d12:	e008      	b.n	8007d26 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 f9a6 	bl	8009068 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8007d20:	e002      	b.n	8007d28 <USBD_CDC_Setup+0x15c>
          break;
 8007d22:	bf00      	nop
 8007d24:	e008      	b.n	8007d38 <USBD_CDC_Setup+0x16c>
          break;
 8007d26:	bf00      	nop
      }
      break;
 8007d28:	e006      	b.n	8007d38 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 f99b 	bl	8009068 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	75fb      	strb	r3, [r7, #23]
      break;
 8007d36:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e04f      	b.n	8007e06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	3318      	adds	r3, #24
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d029      	beq.n	8007dd8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	3318      	adds	r3, #24
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	78f9      	ldrb	r1, [r7, #3]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4403      	add	r3, r0
 8007da4:	3338      	adds	r3, #56	; 0x38
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dac:	fb03 f301 	mul.w	r3, r3, r1
 8007db0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d110      	bne.n	8007dd8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3318      	adds	r3, #24
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007dca:	78f9      	ldrb	r1, [r7, #3]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fe5d 	bl	8009a90 <USBD_LL_Transmit>
 8007dd6:	e015      	b.n	8007e04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e00:	78fa      	ldrb	r2, [r7, #3]
 8007e02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e015      	b.n	8007e5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fe6d 	bl	8009b14 <USBD_LL_GetRxDataSize>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e56:	4611      	mov	r1, r2
 8007e58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e72:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d015      	beq.n	8007eaa <USBD_CDC_EP0_RxReady+0x46>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e84:	2bff      	cmp	r3, #255	; 0xff
 8007e86:	d010      	beq.n	8007eaa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007e96:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	22ff      	movs	r2, #255	; 0xff
 8007ea6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2243      	movs	r2, #67	; 0x43
 8007ec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007ec2:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	20000094 	.word	0x20000094

08007ed4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2243      	movs	r2, #67	; 0x43
 8007ee0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007ee2:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20000050 	.word	0x20000050

08007ef4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2243      	movs	r2, #67	; 0x43
 8007f00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f02:	4b03      	ldr	r3, [pc, #12]	; (8007f10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	200000d8 	.word	0x200000d8

08007f14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	220a      	movs	r2, #10
 8007f20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f22:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	2000000c 	.word	0x2000000c

08007f34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e004      	b.n	8007f52 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b087      	sub	sp, #28
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e01a      	b.n	8008010 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d114      	bne.n	800800e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008002:	2181      	movs	r1, #129	; 0x81
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fd43 	bl	8009a90 <USBD_LL_Transmit>

    ret = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008026:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008032:	2303      	movs	r3, #3
 8008034:	e016      	b.n	8008064 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	7c1b      	ldrb	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008048:	2101      	movs	r1, #1
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fd41 	bl	8009ad2 <USBD_LL_PrepareReceive>
 8008050:	e007      	b.n	8008062 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	2101      	movs	r1, #1
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 fd38 	bl	8009ad2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e01f      	b.n	80080c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	79fa      	ldrb	r2, [r7, #7]
 80080b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f001 fb9f 	bl	80097fc <USBD_LL_Init>
 80080be:	4603      	mov	r3, r0
 80080c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e016      	b.n	8008112 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	f107 020e 	add.w	r2, r7, #14
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3
 8008108:	4602      	mov	r2, r0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fbca 	bl	80098bc <USBD_LL_Start>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	4611      	mov	r1, r2
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	78fa      	ldrb	r2, [r7, #3]
 80081a0:	4611      	mov	r1, r2
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
  }

  return USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 ff16 	bl	8008ff4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d00e      	beq.n	800820a <USBD_LL_SetupStage+0x5a>
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d302      	bcc.n	80081f6 <USBD_LL_SetupStage+0x46>
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d014      	beq.n	800821e <USBD_LL_SetupStage+0x6e>
 80081f4:	e01d      	b.n	8008232 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f9d6 	bl	80085b0 <USBD_StdDevReq>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]
      break;
 8008208:	e020      	b.n	800824c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa3a 	bl	800868c <USBD_StdItfReq>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
      break;
 800821c:	e016      	b.n	800824c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa76 	bl	8008718 <USBD_StdEPReq>
 800822c:	4603      	mov	r3, r0
 800822e:	73fb      	strb	r3, [r7, #15]
      break;
 8008230:	e00c      	b.n	800824c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008238:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800823c:	b2db      	uxtb	r3, r3
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 fb9b 	bl	800997c <USBD_LL_StallEP>
 8008246:	4603      	mov	r3, r0
 8008248:	73fb      	strb	r3, [r7, #15]
      break;
 800824a:	bf00      	nop
  }

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	460b      	mov	r3, r1
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d137      	bne.n	80082da <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008270:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008278:	2b03      	cmp	r3, #3
 800827a:	d14a      	bne.n	8008312 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	429a      	cmp	r2, r3
 8008286:	d913      	bls.n	80082b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	1ad2      	subs	r2, r2, r3
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	4293      	cmp	r3, r2
 80082a0:	bf28      	it	cs
 80082a2:	4613      	movcs	r3, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 ff97 	bl	80091dc <USBD_CtlContinueRx>
 80082ae:	e030      	b.n	8008312 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d105      	bne.n	80082d2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 ff93 	bl	80091fe <USBD_CtlSendStatus>
 80082d8:	e01b      	b.n	8008312 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d013      	beq.n	800830e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d10e      	bne.n	800830e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	7afa      	ldrb	r2, [r7, #11]
 80082fa:	4611      	mov	r1, r2
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	4798      	blx	r3
 8008300:	4603      	mov	r3, r0
 8008302:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	e002      	b.n	8008314 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	e000      	b.n	8008314 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	460b      	mov	r3, r1
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d16a      	bne.n	8008406 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3314      	adds	r3, #20
 8008334:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800833c:	2b02      	cmp	r3, #2
 800833e:	d155      	bne.n	80083ec <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	429a      	cmp	r2, r3
 800834a:	d914      	bls.n	8008376 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	461a      	mov	r2, r3
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 ff0c 	bl	8009180 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008368:	2300      	movs	r3, #0
 800836a:	2200      	movs	r2, #0
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f001 fbaf 	bl	8009ad2 <USBD_LL_PrepareReceive>
 8008374:	e03a      	b.n	80083ec <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	d11c      	bne.n	80083bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800838a:	429a      	cmp	r2, r3
 800838c:	d316      	bcc.n	80083bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008398:	429a      	cmp	r2, r3
 800839a:	d20f      	bcs.n	80083bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800839c:	2200      	movs	r2, #0
 800839e:	2100      	movs	r1, #0
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 feed 	bl	8009180 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f001 fb8c 	bl	8009ad2 <USBD_LL_PrepareReceive>
 80083ba:	e017      	b.n	80083ec <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d105      	bne.n	80083de <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f001 facb 	bl	800997c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 ff1c 	bl	8009224 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d123      	bne.n	800843e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fe9b 	bl	8008132 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008404:	e01b      	b.n	800843e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d013      	beq.n	800843a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008418:	2b03      	cmp	r3, #3
 800841a:	d10e      	bne.n	800843a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	7afa      	ldrb	r2, [r7, #11]
 8008426:	4611      	mov	r1, r2
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	4798      	blx	r3
 800842c:	4603      	mov	r3, r0
 800842e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	e002      	b.n	8008440 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	e000      	b.n	8008440 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6852      	ldr	r2, [r2, #4]
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	4611      	mov	r1, r2
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800848c:	2340      	movs	r3, #64	; 0x40
 800848e:	2200      	movs	r2, #0
 8008490:	2100      	movs	r1, #0
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fa2d 	bl	80098f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2240      	movs	r2, #64	; 0x40
 80084a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	2200      	movs	r2, #0
 80084ac:	2180      	movs	r1, #128	; 0x80
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 fa1f 	bl	80098f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2240      	movs	r2, #64	; 0x40
 80084be:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2204      	movs	r2, #4
 8008502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008522:	2b04      	cmp	r3, #4
 8008524:	d105      	bne.n	8008532 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854e:	2b03      	cmp	r3, #3
 8008550:	d10b      	bne.n	800856a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	3301      	adds	r3, #1
 800858a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008592:	8a3b      	ldrh	r3, [r7, #16]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	b21a      	sxth	r2, r3
 8008598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800859c:	4313      	orrs	r3, r2
 800859e:	b21b      	sxth	r3, r3
 80085a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085a2:	89fb      	ldrh	r3, [r7, #14]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d004      	beq.n	80085d4 <USBD_StdDevReq+0x24>
 80085ca:	2b40      	cmp	r3, #64	; 0x40
 80085cc:	d002      	beq.n	80085d4 <USBD_StdDevReq+0x24>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <USBD_StdDevReq+0x38>
 80085d2:	e050      	b.n	8008676 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
    break;
 80085e6:	e04b      	b.n	8008680 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	d83c      	bhi.n	800866a <USBD_StdDevReq+0xba>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <USBD_StdDevReq+0x48>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	0800864d 	.word	0x0800864d
 80085fc:	08008661 	.word	0x08008661
 8008600:	0800866b 	.word	0x0800866b
 8008604:	08008657 	.word	0x08008657
 8008608:	0800866b 	.word	0x0800866b
 800860c:	0800862b 	.word	0x0800862b
 8008610:	08008621 	.word	0x08008621
 8008614:	0800866b 	.word	0x0800866b
 8008618:	08008643 	.word	0x08008643
 800861c:	08008635 	.word	0x08008635
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f9d0 	bl	80089c8 <USBD_GetDescriptor>
      break;
 8008628:	e024      	b.n	8008674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fb5f 	bl	8008cf0 <USBD_SetAddress>
      break;
 8008632:	e01f      	b.n	8008674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb9c 	bl	8008d74 <USBD_SetConfig>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
      break;
 8008640:	e018      	b.n	8008674 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fc39 	bl	8008ebc <USBD_GetConfig>
      break;
 800864a:	e013      	b.n	8008674 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc68 	bl	8008f24 <USBD_GetStatus>
      break;
 8008654:	e00e      	b.n	8008674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fc96 	bl	8008f8a <USBD_SetFeature>
      break;
 800865e:	e009      	b.n	8008674 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fca5 	bl	8008fb2 <USBD_ClrFeature>
      break;
 8008668:	e004      	b.n	8008674 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fcfb 	bl	8009068 <USBD_CtlError>
      break;
 8008672:	bf00      	nop
    }
    break;
 8008674:	e004      	b.n	8008680 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fcf5 	bl	8009068 <USBD_CtlError>
    break;
 800867e:	bf00      	nop
  }

  return ret;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop

0800868c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d003      	beq.n	80086ae <USBD_StdItfReq+0x22>
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	d001      	beq.n	80086ae <USBD_StdItfReq+0x22>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d12a      	bne.n	8008704 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d81d      	bhi.n	80086f6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	889b      	ldrh	r3, [r3, #4]
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d813      	bhi.n	80086ec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	88db      	ldrh	r3, [r3, #6]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d110      	bne.n	8008700 <USBD_StdItfReq+0x74>
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10d      	bne.n	8008700 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fd8a 	bl	80091fe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80086ea:	e009      	b.n	8008700 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fcba 	bl	8009068 <USBD_CtlError>
      break;
 80086f4:	e004      	b.n	8008700 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fcb5 	bl	8009068 <USBD_CtlError>
      break;
 80086fe:	e000      	b.n	8008702 <USBD_StdItfReq+0x76>
      break;
 8008700:	bf00      	nop
    }
    break;
 8008702:	e004      	b.n	800870e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fcae 	bl	8009068 <USBD_CtlError>
    break;
 800870c:	bf00      	nop
  }

  return ret;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	889b      	ldrh	r3, [r3, #4]
 800872a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008734:	2b20      	cmp	r3, #32
 8008736:	d004      	beq.n	8008742 <USBD_StdEPReq+0x2a>
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	d002      	beq.n	8008742 <USBD_StdEPReq+0x2a>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <USBD_StdEPReq+0x3e>
 8008740:	e137      	b.n	80089b2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e132      	b.n	80089bc <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d03e      	beq.n	80087dc <USBD_StdEPReq+0xc4>
 800875e:	2b03      	cmp	r3, #3
 8008760:	d002      	beq.n	8008768 <USBD_StdEPReq+0x50>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d079      	beq.n	800885a <USBD_StdEPReq+0x142>
 8008766:	e11e      	b.n	80089a6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876e:	2b02      	cmp	r3, #2
 8008770:	d002      	beq.n	8008778 <USBD_StdEPReq+0x60>
 8008772:	2b03      	cmp	r3, #3
 8008774:	d015      	beq.n	80087a2 <USBD_StdEPReq+0x8a>
 8008776:	e02b      	b.n	80087d0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <USBD_StdEPReq+0x80>
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b80      	cmp	r3, #128	; 0x80
 8008782:	d009      	beq.n	8008798 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 f8f7 	bl	800997c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800878e:	2180      	movs	r1, #128	; 0x80
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f8f3 	bl	800997c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008796:	e020      	b.n	80087da <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc64 	bl	8009068 <USBD_CtlError>
        break;
 80087a0:	e01b      	b.n	80087da <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	885b      	ldrh	r3, [r3, #2]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10e      	bne.n	80087c8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <USBD_StdEPReq+0xb0>
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b80      	cmp	r3, #128	; 0x80
 80087b4:	d008      	beq.n	80087c8 <USBD_StdEPReq+0xb0>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88db      	ldrh	r3, [r3, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f8da 	bl	800997c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fd18 	bl	80091fe <USBD_CtlSendStatus>

        break;
 80087ce:	e004      	b.n	80087da <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fc48 	bl	8009068 <USBD_CtlError>
        break;
 80087d8:	bf00      	nop
      }
      break;
 80087da:	e0e9      	b.n	80089b0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d002      	beq.n	80087ec <USBD_StdEPReq+0xd4>
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d015      	beq.n	8008816 <USBD_StdEPReq+0xfe>
 80087ea:	e02f      	b.n	800884c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <USBD_StdEPReq+0xf4>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d009      	beq.n	800880c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 f8bd 	bl	800997c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f8b9 	bl	800997c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800880a:	e025      	b.n	8008858 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fc2a 	bl	8009068 <USBD_CtlError>
        break;
 8008814:	e020      	b.n	8008858 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d11b      	bne.n	8008856 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f8c4 	bl	80099ba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fce3 	bl	80091fe <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800884a:	e004      	b.n	8008856 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fc0a 	bl	8009068 <USBD_CtlError>
        break;
 8008854:	e000      	b.n	8008858 <USBD_StdEPReq+0x140>
        break;
 8008856:	bf00      	nop
      }
      break;
 8008858:	e0aa      	b.n	80089b0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	2b02      	cmp	r3, #2
 8008862:	d002      	beq.n	800886a <USBD_StdEPReq+0x152>
 8008864:	2b03      	cmp	r3, #3
 8008866:	d032      	beq.n	80088ce <USBD_StdEPReq+0x1b6>
 8008868:	e097      	b.n	800899a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d007      	beq.n	8008880 <USBD_StdEPReq+0x168>
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d004      	beq.n	8008880 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fbf5 	bl	8009068 <USBD_CtlError>
          break;
 800887e:	e091      	b.n	80089a4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008884:	2b00      	cmp	r3, #0
 8008886:	da0b      	bge.n	80088a0 <USBD_StdEPReq+0x188>
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800888e:	4613      	mov	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	3310      	adds	r3, #16
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	4413      	add	r3, r2
 800889c:	3304      	adds	r3, #4
 800889e:	e00b      	b.n	80088b8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	4413      	add	r3, r2
 80088b6:	3304      	adds	r3, #4
 80088b8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2202      	movs	r2, #2
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc3f 	bl	800914a <USBD_CtlSendData>
        break;
 80088cc:	e06a      	b.n	80089a4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80088ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	da11      	bge.n	80088fa <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	3324      	adds	r3, #36	; 0x24
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d117      	bne.n	8008920 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fbb8 	bl	8009068 <USBD_CtlError>
            break;
 80088f8:	e054      	b.n	80089a4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	f003 020f 	and.w	r2, r3, #15
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fba5 	bl	8009068 <USBD_CtlError>
            break;
 800891e:	e041      	b.n	80089a4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008924:	2b00      	cmp	r3, #0
 8008926:	da0b      	bge.n	8008940 <USBD_StdEPReq+0x228>
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	3310      	adds	r3, #16
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4413      	add	r3, r2
 800893c:	3304      	adds	r3, #4
 800893e:	e00b      	b.n	8008958 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	3304      	adds	r3, #4
 8008958:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <USBD_StdEPReq+0x24e>
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d103      	bne.n	800896e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e00e      	b.n	800898c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 f840 	bl	80099f8 <USBD_LL_IsStallEP>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e002      	b.n	800898c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2202      	movs	r2, #2
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fbd9 	bl	800914a <USBD_CtlSendData>
          break;
 8008998:	e004      	b.n	80089a4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fb63 	bl	8009068 <USBD_CtlError>
        break;
 80089a2:	bf00      	nop
      }
      break;
 80089a4:	e004      	b.n	80089b0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fb5d 	bl	8009068 <USBD_CtlError>
      break;
 80089ae:	bf00      	nop
    }
    break;
 80089b0:	e004      	b.n	80089bc <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fb57 	bl	8009068 <USBD_CtlError>
    break;
 80089ba:	bf00      	nop
  }

  return ret;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	885b      	ldrh	r3, [r3, #2]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b0e      	cmp	r3, #14
 80089ea:	f200 8152 	bhi.w	8008c92 <USBD_GetDescriptor+0x2ca>
 80089ee:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <USBD_GetDescriptor+0x2c>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a65 	.word	0x08008a65
 80089f8:	08008a7d 	.word	0x08008a7d
 80089fc:	08008abd 	.word	0x08008abd
 8008a00:	08008c93 	.word	0x08008c93
 8008a04:	08008c93 	.word	0x08008c93
 8008a08:	08008c33 	.word	0x08008c33
 8008a0c:	08008c5f 	.word	0x08008c5f
 8008a10:	08008c93 	.word	0x08008c93
 8008a14:	08008c93 	.word	0x08008c93
 8008a18:	08008c93 	.word	0x08008c93
 8008a1c:	08008c93 	.word	0x08008c93
 8008a20:	08008c93 	.word	0x08008c93
 8008a24:	08008c93 	.word	0x08008c93
 8008a28:	08008c93 	.word	0x08008c93
 8008a2c:	08008a31 	.word	0x08008a31
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	7c12      	ldrb	r2, [r2, #16]
 8008a48:	f107 0108 	add.w	r1, r7, #8
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a52:	e126      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fb06 	bl	8009068 <USBD_CtlError>
      err++;
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	72fb      	strb	r3, [r7, #11]
    break;
 8008a62:	e11e      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	7c12      	ldrb	r2, [r2, #16]
 8008a70:	f107 0108 	add.w	r1, r7, #8
 8008a74:	4610      	mov	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	60f8      	str	r0, [r7, #12]
    break;
 8008a7a:	e112      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7c1b      	ldrb	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10d      	bne.n	8008aa0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	f107 0208 	add.w	r2, r7, #8
 8008a90:	4610      	mov	r0, r2
 8008a92:	4798      	blx	r3
 8008a94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a9e:	e100      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	f107 0208 	add.w	r2, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	701a      	strb	r2, [r3, #0]
    break;
 8008aba:	e0f2      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	885b      	ldrh	r3, [r3, #2]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	f200 80ac 	bhi.w	8008c20 <USBD_GetDescriptor+0x258>
 8008ac8:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <USBD_GetDescriptor+0x108>)
 8008aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008ae9 	.word	0x08008ae9
 8008ad4:	08008b1d 	.word	0x08008b1d
 8008ad8:	08008b51 	.word	0x08008b51
 8008adc:	08008b85 	.word	0x08008b85
 8008ae0:	08008bb9 	.word	0x08008bb9
 8008ae4:	08008bed 	.word	0x08008bed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b0a:	e091      	b.n	8008c30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 faaa 	bl	8009068 <USBD_CtlError>
        err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
      break;
 8008b1a:	e089      	b.n	8008c30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b3e:	e077      	b.n	8008c30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa90 	bl	8009068 <USBD_CtlError>
        err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b4e:	e06f      	b.n	8008c30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b72:	e05d      	b.n	8008c30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa76 	bl	8009068 <USBD_CtlError>
        err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
      break;
 8008b82:	e055      	b.n	8008c30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ba6:	e043      	b.n	8008c30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa5c 	bl	8009068 <USBD_CtlError>
        err++;
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	72fb      	strb	r3, [r7, #11]
      break;
 8008bb6:	e03b      	b.n	8008c30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bda:	e029      	b.n	8008c30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa42 	bl	8009068 <USBD_CtlError>
        err++;
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	3301      	adds	r3, #1
 8008be8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bea:	e021      	b.n	8008c30 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c0e:	e00f      	b.n	8008c30 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa28 	bl	8009068 <USBD_CtlError>
        err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c1e:	e007      	b.n	8008c30 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa20 	bl	8009068 <USBD_CtlError>
      err++;
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008c2e:	bf00      	nop
    }
    break;
 8008c30:	e037      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	7c1b      	ldrb	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	f107 0208 	add.w	r2, r7, #8
 8008c46:	4610      	mov	r0, r2
 8008c48:	4798      	blx	r3
 8008c4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c4c:	e029      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fa09 	bl	8009068 <USBD_CtlError>
      err++;
 8008c56:	7afb      	ldrb	r3, [r7, #11]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	72fb      	strb	r3, [r7, #11]
    break;
 8008c5c:	e021      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	7c1b      	ldrb	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10d      	bne.n	8008c82 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	f107 0208 	add.w	r2, r7, #8
 8008c72:	4610      	mov	r0, r2
 8008c74:	4798      	blx	r3
 8008c76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c80:	e00f      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9ef 	bl	8009068 <USBD_CtlError>
      err++;
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	72fb      	strb	r3, [r7, #11]
    break;
 8008c90:	e007      	b.n	8008ca2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f9e7 	bl	8009068 <USBD_CtlError>
    err++;
 8008c9a:	7afb      	ldrb	r3, [r7, #11]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	72fb      	strb	r3, [r7, #11]
    break;
 8008ca0:	bf00      	nop
  }

  if (err != 0U)
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11e      	bne.n	8008ce6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	88db      	ldrh	r3, [r3, #6]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d016      	beq.n	8008cde <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008cb0:	893b      	ldrh	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00e      	beq.n	8008cd4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	88da      	ldrh	r2, [r3, #6]
 8008cba:	893b      	ldrh	r3, [r7, #8]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	bf28      	it	cs
 8008cc0:	4613      	movcs	r3, r2
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cc6:	893b      	ldrh	r3, [r7, #8]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fa3c 	bl	800914a <USBD_CtlSendData>
 8008cd2:	e009      	b.n	8008ce8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9c6 	bl	8009068 <USBD_CtlError>
 8008cdc:	e004      	b.n	8008ce8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa8d 	bl	80091fe <USBD_CtlSendStatus>
 8008ce4:	e000      	b.n	8008ce8 <USBD_GetDescriptor+0x320>
    return;
 8008ce6:	bf00      	nop
    }
  }
}
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop

08008cf0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	889b      	ldrh	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d130      	bne.n	8008d64 <USBD_SetAddress+0x74>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	88db      	ldrh	r3, [r3, #6]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d12c      	bne.n	8008d64 <USBD_SetAddress+0x74>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d10:	d828      	bhi.n	8008d64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d104      	bne.n	8008d32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f99c 	bl	8009068 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d30:	e01c      	b.n	8008d6c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7bfa      	ldrb	r2, [r7, #15]
 8008d36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fe87 	bl	8009a52 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa5a 	bl	80091fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d58:	e008      	b.n	8008d6c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d62:	e003      	b.n	8008d6c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f97e 	bl	8009068 <USBD_CtlError>
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	4b4b      	ldr	r3, [pc, #300]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008d8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d8c:	4b4a      	ldr	r3, [pc, #296]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d905      	bls.n	8008da0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f966 	bl	8009068 <USBD_CtlError>
    return USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e087      	b.n	8008eb0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d002      	beq.n	8008db0 <USBD_SetConfig+0x3c>
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d025      	beq.n	8008dfa <USBD_SetConfig+0x86>
 8008dae:	e071      	b.n	8008e94 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008db0:	4b41      	ldr	r3, [pc, #260]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01c      	beq.n	8008df2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008db8:	4b3f      	ldr	r3, [pc, #252]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dc2:	4b3d      	ldr	r3, [pc, #244]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff f9bd 	bl	8008148 <USBD_SetClassConfig>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d004      	beq.n	8008de2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f944 	bl	8009068 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008de0:	e065      	b.n	8008eae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa0b 	bl	80091fe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2203      	movs	r2, #3
 8008dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008df0:	e05d      	b.n	8008eae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa03 	bl	80091fe <USBD_CtlSendStatus>
    break;
 8008df8:	e059      	b.n	8008eae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d112      	bne.n	8008e28 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008e0a:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e14:	4b28      	ldr	r3, [pc, #160]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff f9b0 	bl	8008180 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9ec 	bl	80091fe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008e26:	e042      	b.n	8008eae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008e28:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d02a      	beq.n	8008e8c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff f99e 	bl	8008180 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008e44:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff f977 	bl	8008148 <USBD_SetClassConfig>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00f      	beq.n	8008e84 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8fe 	bl	8009068 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff f983 	bl	8008180 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e82:	e014      	b.n	8008eae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f9ba 	bl	80091fe <USBD_CtlSendStatus>
    break;
 8008e8a:	e010      	b.n	8008eae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9b6 	bl	80091fe <USBD_CtlSendStatus>
    break;
 8008e92:	e00c      	b.n	8008eae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8e6 	bl	8009068 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <USBD_SetConfig+0x144>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff f96c 	bl	8008180 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8008eac:	bf00      	nop
  }

  return ret;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	200001e0 	.word	0x200001e0

08008ebc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	88db      	ldrh	r3, [r3, #6]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d004      	beq.n	8008ed8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f8c9 	bl	8009068 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008ed6:	e021      	b.n	8008f1c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	db17      	blt.n	8008f12 <USBD_GetConfig+0x56>
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	dd02      	ble.n	8008eec <USBD_GetConfig+0x30>
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d00b      	beq.n	8008f02 <USBD_GetConfig+0x46>
 8008eea:	e012      	b.n	8008f12 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f925 	bl	800914a <USBD_CtlSendData>
      break;
 8008f00:	e00c      	b.n	8008f1c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3304      	adds	r3, #4
 8008f06:	2201      	movs	r2, #1
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f91d 	bl	800914a <USBD_CtlSendData>
      break;
 8008f10:	e004      	b.n	8008f1c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f8a7 	bl	8009068 <USBD_CtlError>
      break;
 8008f1a:	bf00      	nop
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f34:	3b01      	subs	r3, #1
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d81e      	bhi.n	8008f78 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	88db      	ldrh	r3, [r3, #6]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d004      	beq.n	8008f4c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f88f 	bl	8009068 <USBD_CtlError>
      break;
 8008f4a:	e01a      	b.n	8008f82 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f043 0202 	orr.w	r2, r3, #2
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f8ea 	bl	800914a <USBD_CtlSendData>
    break;
 8008f76:	e004      	b.n	8008f82 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f874 	bl	8009068 <USBD_CtlError>
    break;
 8008f80:	bf00      	nop
  }
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d106      	bne.n	8008faa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f92a 	bl	80091fe <USBD_CtlSendStatus>
  }
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d80b      	bhi.n	8008fe0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	885b      	ldrh	r3, [r3, #2]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d10c      	bne.n	8008fea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f910 	bl	80091fe <USBD_CtlSendStatus>
      }
      break;
 8008fde:	e004      	b.n	8008fea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f840 	bl	8009068 <USBD_CtlError>
      break;
 8008fe8:	e000      	b.n	8008fec <USBD_ClrFeature+0x3a>
      break;
 8008fea:	bf00      	nop
  }
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff faa8 	bl	8008574 <SWAPBYTE>
 8009024:	4603      	mov	r3, r0
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3301      	adds	r3, #1
 8009030:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3301      	adds	r3, #1
 8009036:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7ff fa9b 	bl	8008574 <SWAPBYTE>
 800903e:	4603      	mov	r3, r0
 8009040:	461a      	mov	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f7ff fa8e 	bl	8008574 <SWAPBYTE>
 8009058:	4603      	mov	r3, r0
 800905a:	461a      	mov	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	80da      	strh	r2, [r3, #6]
}
 8009060:	bf00      	nop
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009072:	2180      	movs	r1, #128	; 0x80
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc81 	bl	800997c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800907a:	2100      	movs	r1, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fc7d 	bl	800997c <USBD_LL_StallEP>
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	60f8      	str	r0, [r7, #12]
 8009092:	60b9      	str	r1, [r7, #8]
 8009094:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d036      	beq.n	800910e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090a4:	6938      	ldr	r0, [r7, #16]
 80090a6:	f000 f836 	bl	8009116 <USBD_GetLen>
 80090aa:	4603      	mov	r3, r0
 80090ac:	3301      	adds	r3, #1
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4413      	add	r3, r2
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	7812      	ldrb	r2, [r2, #0]
 80090c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	3301      	adds	r3, #1
 80090c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	4413      	add	r3, r2
 80090d0:	2203      	movs	r2, #3
 80090d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	3301      	adds	r3, #1
 80090d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80090da:	e013      	b.n	8009104 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	4413      	add	r3, r2
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	7812      	ldrb	r2, [r2, #0]
 80090e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	3301      	adds	r3, #1
 80090ec:	613b      	str	r3, [r7, #16]
    idx++;
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	3301      	adds	r3, #1
 80090f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4413      	add	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	3301      	adds	r3, #1
 8009102:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e7      	bne.n	80090dc <USBD_GetString+0x52>
 800910c:	e000      	b.n	8009110 <USBD_GetString+0x86>
    return;
 800910e:	bf00      	nop
  }
}
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009126:	e005      	b.n	8009134 <USBD_GetLen+0x1e>
  {
    len++;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	3301      	adds	r3, #1
 800912c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	3301      	adds	r3, #1
 8009132:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f5      	bne.n	8009128 <USBD_GetLen+0x12>
  }

  return len;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2202      	movs	r2, #2
 800915a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	2100      	movs	r1, #0
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 fc8d 	bl	8009a90 <USBD_LL_Transmit>

  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	2100      	movs	r1, #0
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fc7c 	bl	8009a90 <USBD_LL_Transmit>

  return USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2203      	movs	r2, #3
 80091b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	2100      	movs	r1, #0
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fc80 	bl	8009ad2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	2100      	movs	r1, #0
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fc6f 	bl	8009ad2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b082      	sub	sp, #8
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2204      	movs	r2, #4
 800920a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800920e:	2300      	movs	r3, #0
 8009210:	2200      	movs	r2, #0
 8009212:	2100      	movs	r1, #0
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fc3b 	bl	8009a90 <USBD_LL_Transmit>

  return USBD_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2205      	movs	r2, #5
 8009230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009234:	2300      	movs	r3, #0
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc49 	bl	8009ad2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009250:	2200      	movs	r2, #0
 8009252:	4912      	ldr	r1, [pc, #72]	; (800929c <MX_USB_Device_Init+0x50>)
 8009254:	4812      	ldr	r0, [pc, #72]	; (80092a0 <MX_USB_Device_Init+0x54>)
 8009256:	f7fe ff09 	bl	800806c <USBD_Init>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009260:	f7f7 fef0 	bl	8001044 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009264:	490f      	ldr	r1, [pc, #60]	; (80092a4 <MX_USB_Device_Init+0x58>)
 8009266:	480e      	ldr	r0, [pc, #56]	; (80092a0 <MX_USB_Device_Init+0x54>)
 8009268:	f7fe ff30 	bl	80080cc <USBD_RegisterClass>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009272:	f7f7 fee7 	bl	8001044 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009276:	490c      	ldr	r1, [pc, #48]	; (80092a8 <MX_USB_Device_Init+0x5c>)
 8009278:	4809      	ldr	r0, [pc, #36]	; (80092a0 <MX_USB_Device_Init+0x54>)
 800927a:	f7fe fe5b 	bl	8007f34 <USBD_CDC_RegisterInterface>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009284:	f7f7 fede 	bl	8001044 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009288:	4805      	ldr	r0, [pc, #20]	; (80092a0 <MX_USB_Device_Init+0x54>)
 800928a:	f7fe ff46 	bl	800811a <USBD_Start>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009294:	f7f7 fed6 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009298:	bf00      	nop
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20000130 	.word	0x20000130
 80092a0:	200006b4 	.word	0x200006b4
 80092a4:	20000018 	.word	0x20000018
 80092a8:	2000011c 	.word	0x2000011c

080092ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092b0:	2200      	movs	r2, #0
 80092b2:	4905      	ldr	r1, [pc, #20]	; (80092c8 <CDC_Init_FS+0x1c>)
 80092b4:	4805      	ldr	r0, [pc, #20]	; (80092cc <CDC_Init_FS+0x20>)
 80092b6:	f7fe fe52 	bl	8007f5e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092ba:	4905      	ldr	r1, [pc, #20]	; (80092d0 <CDC_Init_FS+0x24>)
 80092bc:	4803      	ldr	r0, [pc, #12]	; (80092cc <CDC_Init_FS+0x20>)
 80092be:	f7fe fe67 	bl	8007f90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000d6c 	.word	0x20000d6c
 80092cc:	200006b4 	.word	0x200006b4
 80092d0:	20000984 	.word	0x20000984

080092d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092da:	4618      	mov	r0, r3
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
 80092f0:	4613      	mov	r3, r2
 80092f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b23      	cmp	r3, #35	; 0x23
 80092f8:	d84a      	bhi.n	8009390 <CDC_Control_FS+0xac>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <CDC_Control_FS+0x1c>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009391 	.word	0x08009391
 8009304:	08009391 	.word	0x08009391
 8009308:	08009391 	.word	0x08009391
 800930c:	08009391 	.word	0x08009391
 8009310:	08009391 	.word	0x08009391
 8009314:	08009391 	.word	0x08009391
 8009318:	08009391 	.word	0x08009391
 800931c:	08009391 	.word	0x08009391
 8009320:	08009391 	.word	0x08009391
 8009324:	08009391 	.word	0x08009391
 8009328:	08009391 	.word	0x08009391
 800932c:	08009391 	.word	0x08009391
 8009330:	08009391 	.word	0x08009391
 8009334:	08009391 	.word	0x08009391
 8009338:	08009391 	.word	0x08009391
 800933c:	08009391 	.word	0x08009391
 8009340:	08009391 	.word	0x08009391
 8009344:	08009391 	.word	0x08009391
 8009348:	08009391 	.word	0x08009391
 800934c:	08009391 	.word	0x08009391
 8009350:	08009391 	.word	0x08009391
 8009354:	08009391 	.word	0x08009391
 8009358:	08009391 	.word	0x08009391
 800935c:	08009391 	.word	0x08009391
 8009360:	08009391 	.word	0x08009391
 8009364:	08009391 	.word	0x08009391
 8009368:	08009391 	.word	0x08009391
 800936c:	08009391 	.word	0x08009391
 8009370:	08009391 	.word	0x08009391
 8009374:	08009391 	.word	0x08009391
 8009378:	08009391 	.word	0x08009391
 800937c:	08009391 	.word	0x08009391
 8009380:	08009391 	.word	0x08009391
 8009384:	08009391 	.word	0x08009391
 8009388:	08009391 	.word	0x08009391
 800938c:	08009391 	.word	0x08009391
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009390:	bf00      	nop
  }

  return (USBD_OK);
 8009392:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7f6 ff33 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	4805      	ldr	r0, [pc, #20]	; (80093cc <CDC_Receive_FS+0x2c>)
 80093b6:	f7fe fdeb 	bl	8007f90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093ba:	4804      	ldr	r0, [pc, #16]	; (80093cc <CDC_Receive_FS+0x2c>)
 80093bc:	f7fe fe2c 	bl	8008018 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	200006b4 	.word	0x200006b4

080093d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093e0:	4b0d      	ldr	r3, [pc, #52]	; (8009418 <CDC_Transmit_FS+0x48>)
 80093e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e00b      	b.n	800940e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80093f6:	887b      	ldrh	r3, [r7, #2]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6879      	ldr	r1, [r7, #4]
 80093fc:	4806      	ldr	r0, [pc, #24]	; (8009418 <CDC_Transmit_FS+0x48>)
 80093fe:	f7fe fdae 	bl	8007f5e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009402:	4805      	ldr	r0, [pc, #20]	; (8009418 <CDC_Transmit_FS+0x48>)
 8009404:	f7fe fdd8 	bl	8007fb8 <USBD_CDC_TransmitPacket>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200006b4 	.word	0x200006b4

0800941c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800942e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009432:	4618      	mov	r0, r3
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2212      	movs	r2, #18
 8009450:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009452:	4b03      	ldr	r3, [pc, #12]	; (8009460 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000150 	.word	0x20000150

08009464 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2204      	movs	r2, #4
 8009474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009476:	4b03      	ldr	r3, [pc, #12]	; (8009484 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	20000164 	.word	0x20000164

08009488 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d105      	bne.n	80094a6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	4907      	ldr	r1, [pc, #28]	; (80094bc <USBD_CDC_ProductStrDescriptor+0x34>)
 800949e:	4808      	ldr	r0, [pc, #32]	; (80094c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80094a0:	f7ff fdf3 	bl	800908a <USBD_GetString>
 80094a4:	e004      	b.n	80094b0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4904      	ldr	r1, [pc, #16]	; (80094bc <USBD_CDC_ProductStrDescriptor+0x34>)
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80094ac:	f7ff fded 	bl	800908a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20001154 	.word	0x20001154
 80094c0:	08009cc4 	.word	0x08009cc4

080094c4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	4904      	ldr	r1, [pc, #16]	; (80094e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80094d4:	4804      	ldr	r0, [pc, #16]	; (80094e8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80094d6:	f7ff fdd8 	bl	800908a <USBD_GetString>
  return USBD_StrDesc;
 80094da:	4b02      	ldr	r3, [pc, #8]	; (80094e4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20001154 	.word	0x20001154
 80094e8:	08009cdc 	.word	0x08009cdc

080094ec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	221a      	movs	r2, #26
 80094fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094fe:	f000 f843 	bl	8009588 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009502:	4b02      	ldr	r3, [pc, #8]	; (800950c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000168 	.word	0x20000168

08009510 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4907      	ldr	r1, [pc, #28]	; (8009544 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009526:	4808      	ldr	r0, [pc, #32]	; (8009548 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009528:	f7ff fdaf 	bl	800908a <USBD_GetString>
 800952c:	e004      	b.n	8009538 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4904      	ldr	r1, [pc, #16]	; (8009544 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009532:	4805      	ldr	r0, [pc, #20]	; (8009548 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009534:	f7ff fda9 	bl	800908a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009538:	4b02      	ldr	r3, [pc, #8]	; (8009544 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20001154 	.word	0x20001154
 8009548:	08009cf0 	.word	0x08009cf0

0800954c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4907      	ldr	r1, [pc, #28]	; (8009580 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009562:	4808      	ldr	r0, [pc, #32]	; (8009584 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009564:	f7ff fd91 	bl	800908a <USBD_GetString>
 8009568:	e004      	b.n	8009574 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4904      	ldr	r1, [pc, #16]	; (8009580 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800956e:	4805      	ldr	r0, [pc, #20]	; (8009584 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009570:	f7ff fd8b 	bl	800908a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20001154 	.word	0x20001154
 8009584:	08009cfc 	.word	0x08009cfc

08009588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <Get_SerialNum+0x44>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <Get_SerialNum+0x48>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800959a:	4b0e      	ldr	r3, [pc, #56]	; (80095d4 <Get_SerialNum+0x4c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d009      	beq.n	80095c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ae:	2208      	movs	r2, #8
 80095b0:	4909      	ldr	r1, [pc, #36]	; (80095d8 <Get_SerialNum+0x50>)
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f814 	bl	80095e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095b8:	2204      	movs	r2, #4
 80095ba:	4908      	ldr	r1, [pc, #32]	; (80095dc <Get_SerialNum+0x54>)
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f000 f80f 	bl	80095e0 <IntToUnicode>
  }
}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	1fff7590 	.word	0x1fff7590
 80095d0:	1fff7594 	.word	0x1fff7594
 80095d4:	1fff7598 	.word	0x1fff7598
 80095d8:	2000016a 	.word	0x2000016a
 80095dc:	2000017a 	.word	0x2000017a

080095e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
 80095f6:	e027      	b.n	8009648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	2b09      	cmp	r3, #9
 80095fe:	d80b      	bhi.n	8009618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	0f1b      	lsrs	r3, r3, #28
 8009604:	b2da      	uxtb	r2, r3
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	4619      	mov	r1, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	440b      	add	r3, r1
 8009610:	3230      	adds	r2, #48	; 0x30
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e00a      	b.n	800962e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	0f1b      	lsrs	r3, r3, #28
 800961c:	b2da      	uxtb	r2, r3
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4619      	mov	r1, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	440b      	add	r3, r1
 8009628:	3237      	adds	r2, #55	; 0x37
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	3301      	adds	r3, #1
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	3301      	adds	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
 8009648:	7dfa      	ldrb	r2, [r7, #23]
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	429a      	cmp	r2, r3
 800964e:	d3d3      	bcc.n	80095f8 <IntToUnicode+0x18>
  }
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a0d      	ldr	r2, [pc, #52]	; (80096a0 <HAL_PCD_MspInit+0x44>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d113      	bne.n	8009696 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800966e:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <HAL_PCD_MspInit+0x48>)
 8009670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009672:	4a0c      	ldr	r2, [pc, #48]	; (80096a4 <HAL_PCD_MspInit+0x48>)
 8009674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009678:	6593      	str	r3, [r2, #88]	; 0x58
 800967a:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <HAL_PCD_MspInit+0x48>)
 800967c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009686:	2200      	movs	r2, #0
 8009688:	2100      	movs	r1, #0
 800968a:	2014      	movs	r0, #20
 800968c:	f7f8 f913 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009690:	2014      	movs	r0, #20
 8009692:	f7f8 f92a 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	40005c00 	.word	0x40005c00
 80096a4:	40021000 	.word	0x40021000

080096a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fe fd76 	bl	80081b0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096de:	78fa      	ldrb	r2, [r7, #3]
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	440b      	add	r3, r1
 80096ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	4619      	mov	r1, r3
 80096f6:	f7fe fdae 	bl	8008256 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460b      	mov	r3, r1
 800970c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009714:	78fa      	ldrb	r2, [r7, #3]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	00db      	lsls	r3, r3, #3
 8009720:	440b      	add	r3, r1
 8009722:	333c      	adds	r3, #60	; 0x3c
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	78fb      	ldrb	r3, [r7, #3]
 8009728:	4619      	mov	r1, r3
 800972a:	f7fe fdf7 	bl	800831c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fefb 	bl	8008540 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800975a:	2301      	movs	r3, #1
 800975c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b02      	cmp	r3, #2
 8009764:	d001      	beq.n	800976a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009766:	f7f7 fc6d 	bl	8001044 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009770:	7bfa      	ldrb	r2, [r7, #15]
 8009772:	4611      	mov	r1, r2
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fea8 	bl	80084ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fe61 	bl	8008448 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fea3 	bl	80084ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097ac:	4b04      	ldr	r3, [pc, #16]	; (80097c0 <HAL_PCD_SuspendCallback+0x30>)
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	4a03      	ldr	r2, [pc, #12]	; (80097c0 <HAL_PCD_SuspendCallback+0x30>)
 80097b2:	f043 0306 	orr.w	r3, r3, #6
 80097b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	e000ed00 	.word	0xe000ed00

080097c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097d4:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <HAL_PCD_ResumeCallback+0x34>)
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	4a07      	ldr	r2, [pc, #28]	; (80097f8 <HAL_PCD_ResumeCallback+0x34>)
 80097da:	f023 0306 	bic.w	r3, r3, #6
 80097de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80097e0:	f000 f9fa 	bl	8009bd8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fe92 	bl	8008514 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed00 	.word	0xe000ed00

080097fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009804:	4a2b      	ldr	r2, [pc, #172]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a29      	ldr	r2, [pc, #164]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009810:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009814:	4b27      	ldr	r3, [pc, #156]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009816:	4a28      	ldr	r2, [pc, #160]	; (80098b8 <USBD_LL_Init+0xbc>)
 8009818:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800981a:	4b26      	ldr	r3, [pc, #152]	; (80098b4 <USBD_LL_Init+0xb8>)
 800981c:	2208      	movs	r2, #8
 800981e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009820:	4b24      	ldr	r3, [pc, #144]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009822:	2202      	movs	r2, #2
 8009824:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009826:	4b23      	ldr	r3, [pc, #140]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009828:	2202      	movs	r2, #2
 800982a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800982c:	4b21      	ldr	r3, [pc, #132]	; (80098b4 <USBD_LL_Init+0xb8>)
 800982e:	2200      	movs	r2, #0
 8009830:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009832:	4b20      	ldr	r3, [pc, #128]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009834:	2200      	movs	r2, #0
 8009836:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009838:	4b1e      	ldr	r3, [pc, #120]	; (80098b4 <USBD_LL_Init+0xb8>)
 800983a:	2200      	movs	r2, #0
 800983c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800983e:	4b1d      	ldr	r3, [pc, #116]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009840:	2200      	movs	r2, #0
 8009842:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009844:	481b      	ldr	r0, [pc, #108]	; (80098b4 <USBD_LL_Init+0xb8>)
 8009846:	f7f8 fa37 	bl	8001cb8 <HAL_PCD_Init>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009850:	f7f7 fbf8 	bl	8001044 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800985a:	2318      	movs	r3, #24
 800985c:	2200      	movs	r2, #0
 800985e:	2100      	movs	r1, #0
 8009860:	f7f9 fd25 	bl	80032ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800986a:	2358      	movs	r3, #88	; 0x58
 800986c:	2200      	movs	r2, #0
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	f7f9 fd1d 	bl	80032ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800987a:	23c0      	movs	r3, #192	; 0xc0
 800987c:	2200      	movs	r2, #0
 800987e:	2181      	movs	r1, #129	; 0x81
 8009880:	f7f9 fd15 	bl	80032ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800988a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800988e:	2200      	movs	r2, #0
 8009890:	2101      	movs	r1, #1
 8009892:	f7f9 fd0c 	bl	80032ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800989c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a0:	2200      	movs	r2, #0
 80098a2:	2182      	movs	r1, #130	; 0x82
 80098a4:	f7f9 fd03 	bl	80032ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20001354 	.word	0x20001354
 80098b8:	40005c00 	.word	0x40005c00

080098bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7f8 fad5 	bl	8001e82 <HAL_PCD_Start>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 f980 	bl	8009be4 <USBD_Get_USB_Status>
 80098e4:	4603      	mov	r3, r0
 80098e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	4608      	mov	r0, r1
 80098fc:	4611      	mov	r1, r2
 80098fe:	461a      	mov	r2, r3
 8009900:	4603      	mov	r3, r0
 8009902:	70fb      	strb	r3, [r7, #3]
 8009904:	460b      	mov	r3, r1
 8009906:	70bb      	strb	r3, [r7, #2]
 8009908:	4613      	mov	r3, r2
 800990a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800991a:	78bb      	ldrb	r3, [r7, #2]
 800991c:	883a      	ldrh	r2, [r7, #0]
 800991e:	78f9      	ldrb	r1, [r7, #3]
 8009920:	f7f8 fc44 	bl	80021ac <HAL_PCD_EP_Open>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f95a 	bl	8009be4 <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7f8 fc8b 	bl	8002278 <HAL_PCD_EP_Close>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f93b 	bl	8009be4 <USBD_Get_USB_Status>
 800996e:	4603      	mov	r3, r0
 8009970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009972:	7bbb      	ldrb	r3, [r7, #14]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7f8 fd4c 	bl	8002438 <HAL_PCD_EP_SetStall>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f91c 	bl	8009be4 <USBD_Get_USB_Status>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7f8 fd8d 	bl	80024f8 <HAL_PCD_EP_ClrStall>
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f8fd 	bl	8009be4 <USBD_Get_USB_Status>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da0c      	bge.n	8009a2e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	4613      	mov	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	440b      	add	r3, r1
 8009a28:	3302      	adds	r3, #2
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	e00b      	b.n	8009a46 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a34:	68f9      	ldr	r1, [r7, #12]
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	440b      	add	r3, r1
 8009a40:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a44:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7f8 fb76 	bl	8002162 <HAL_PCD_SetAddress>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 f8b1 	bl	8009be4 <USBD_Get_USB_Status>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aae:	7af9      	ldrb	r1, [r7, #11]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	f7f8 fc7d 	bl	80023b2 <HAL_PCD_EP_Transmit>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 f890 	bl	8009be4 <USBD_Get_USB_Status>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ac8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009af0:	7af9      	ldrb	r1, [r7, #11]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	f7f8 fc07 	bl	8002308 <HAL_PCD_EP_Receive>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f86f 	bl	8009be4 <USBD_Get_USB_Status>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f8 fc29 	bl	8002382 <HAL_PCD_EP_GetRxCount>
 8009b30:	4603      	mov	r3, r0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <HAL_PCDEx_LPM_Callback+0x18>
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d013      	beq.n	8009b7a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009b52:	e023      	b.n	8009b9c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d007      	beq.n	8009b6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b5c:	f000 f83c 	bl	8009bd8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b60:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	4a0f      	ldr	r2, [pc, #60]	; (8009ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b66:	f023 0306 	bic.w	r3, r3, #6
 8009b6a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fcce 	bl	8008514 <USBD_LL_Resume>
    break;
 8009b78:	e010      	b.n	8009b9c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fcb2 	bl	80084ea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d005      	beq.n	8009b9a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	4a04      	ldr	r2, [pc, #16]	; (8009ba4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b94:	f043 0306 	orr.w	r3, r3, #6
 8009b98:	6113      	str	r3, [r2, #16]
    break;
 8009b9a:	bf00      	nop
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	e000ed00 	.word	0xe000ed00

08009ba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bb0:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <USBD_static_malloc+0x18>)
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	200001e4 	.word	0x200001e4

08009bc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009bdc:	f7f6 fcd2 	bl	8000584 <SystemClock_Config>
}
 8009be0:	bf00      	nop
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d817      	bhi.n	8009c28 <USBD_Get_USB_Status+0x44>
 8009bf8:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <USBD_Get_USB_Status+0x1c>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c11 	.word	0x08009c11
 8009c04:	08009c17 	.word	0x08009c17
 8009c08:	08009c1d 	.word	0x08009c1d
 8009c0c:	08009c23 	.word	0x08009c23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
    break;
 8009c14:	e00b      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c16:	2303      	movs	r3, #3
 8009c18:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1a:	e008      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c20:	e005      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c22:	2303      	movs	r3, #3
 8009c24:	73fb      	strb	r3, [r7, #15]
    break;
 8009c26:	e002      	b.n	8009c2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2c:	bf00      	nop
  }
  return usb_status;
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <__libc_init_array>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	4e0d      	ldr	r6, [pc, #52]	; (8009c74 <__libc_init_array+0x38>)
 8009c40:	4c0d      	ldr	r4, [pc, #52]	; (8009c78 <__libc_init_array+0x3c>)
 8009c42:	1ba4      	subs	r4, r4, r6
 8009c44:	10a4      	asrs	r4, r4, #2
 8009c46:	2500      	movs	r5, #0
 8009c48:	42a5      	cmp	r5, r4
 8009c4a:	d109      	bne.n	8009c60 <__libc_init_array+0x24>
 8009c4c:	4e0b      	ldr	r6, [pc, #44]	; (8009c7c <__libc_init_array+0x40>)
 8009c4e:	4c0c      	ldr	r4, [pc, #48]	; (8009c80 <__libc_init_array+0x44>)
 8009c50:	f000 f82c 	bl	8009cac <_init>
 8009c54:	1ba4      	subs	r4, r4, r6
 8009c56:	10a4      	asrs	r4, r4, #2
 8009c58:	2500      	movs	r5, #0
 8009c5a:	42a5      	cmp	r5, r4
 8009c5c:	d105      	bne.n	8009c6a <__libc_init_array+0x2e>
 8009c5e:	bd70      	pop	{r4, r5, r6, pc}
 8009c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c64:	4798      	blx	r3
 8009c66:	3501      	adds	r5, #1
 8009c68:	e7ee      	b.n	8009c48 <__libc_init_array+0xc>
 8009c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c6e:	4798      	blx	r3
 8009c70:	3501      	adds	r5, #1
 8009c72:	e7f2      	b.n	8009c5a <__libc_init_array+0x1e>
 8009c74:	08009d1c 	.word	0x08009d1c
 8009c78:	08009d1c 	.word	0x08009d1c
 8009c7c:	08009d1c 	.word	0x08009d1c
 8009c80:	08009d20 	.word	0x08009d20

08009c84 <memcpy>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	1e43      	subs	r3, r0, #1
 8009c88:	440a      	add	r2, r1
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	d100      	bne.n	8009c90 <memcpy+0xc>
 8009c8e:	bd10      	pop	{r4, pc}
 8009c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c98:	e7f7      	b.n	8009c8a <memcpy+0x6>

08009c9a <memset>:
 8009c9a:	4402      	add	r2, r0
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d100      	bne.n	8009ca4 <memset+0xa>
 8009ca2:	4770      	bx	lr
 8009ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca8:	e7f9      	b.n	8009c9e <memset+0x4>
	...

08009cac <_init>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	bf00      	nop
 8009cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb2:	bc08      	pop	{r3}
 8009cb4:	469e      	mov	lr, r3
 8009cb6:	4770      	bx	lr

08009cb8 <_fini>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr
