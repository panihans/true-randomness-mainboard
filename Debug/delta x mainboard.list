
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a474  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a64c  0800a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6a4  0800a6a4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6a4  0800a6a4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6a4  0800a6a4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6a4  0800a6a4  0001a6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f4  20000184  0800a830  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001678  0800a830  00021678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae88  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003456  00000000  00000000  0003b03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  0003e498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  0003f848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205f4  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c82  00000000  00000000  00061074  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c44b4  00000000  00000000  00072cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001371aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005340  00000000  00000000  00137228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a634 	.word	0x0800a634

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a634 	.word	0x0800a634

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <CDC_On_Receive>:
volatile uint32_t motor1_error_acc = 0;
volatile float motor1_der_state = 0;
volatile float pGain, iGain, dGain = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b28      	cmp	r3, #40	; 0x28
 8000a04:	d10c      	bne.n	8000a20 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 8000a06:	2228      	movs	r2, #40	; 0x28
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <CDC_On_Receive+0x34>)
 8000a0c:	f009 fdfe 	bl	800a60c <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <CDC_On_Receive+0x34>)
 8000a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <CDC_On_Receive+0x38>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d102      	bne.n	8000a20 <CDC_On_Receive+0x2c>
			command_received = 1;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <CDC_On_Receive+0x3c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001a0 	.word	0x200001a0
 8000a2c:	00abcabc 	.word	0x00abcabc
 8000a30:	200001f0 	.word	0x200001f0
 8000a34:	00000000 	.word	0x00000000

08000a38 <Set_Motor_Speed_f>:
		*channel_a = 0;
		*channel_b = 0;
	}
}

inline void Set_Motor_Speed_f(volatile uint32_t * channel_a, volatile uint32_t * channel_b, float motor_speed) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	ed87 0a01 	vstr	s0, [r7, #4]
	if (motor_speed > 0) {
 8000a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	dd28      	ble.n	8000aa6 <Set_Motor_Speed_f+0x6e>
			// forward
			if (motor_speed > 100) {
 8000a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000b18 <Set_Motor_Speed_f+0xe0>
 8000a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a64:	dd01      	ble.n	8000a6a <Set_Motor_Speed_f+0x32>
				motor_speed = 100;
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <Set_Motor_Speed_f+0xe4>)
 8000a68:	607b      	str	r3, [r7, #4]
			}
			*channel_a = motor_speed * 65000.0 / 100.0;
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fd38 	bl	80004e0 <__aeabi_f2d>
 8000a70:	a325      	add	r3, pc, #148	; (adr r3, 8000b08 <Set_Motor_Speed_f+0xd0>)
 8000a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a76:	f7ff fd8b 	bl	8000590 <__aeabi_dmul>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460c      	mov	r4, r1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	4621      	mov	r1, r4
 8000a82:	f04f 0200 	mov.w	r2, #0
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <Set_Motor_Speed_f+0xe8>)
 8000a88:	f7ff feac 	bl	80007e4 <__aeabi_ddiv>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	460c      	mov	r4, r1
 8000a90:	4618      	mov	r0, r3
 8000a92:	4621      	mov	r1, r4
 8000a94:	f7ff ff8e 	bl	80009b4 <__aeabi_d2uiz>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	601a      	str	r2, [r3, #0]
			*channel_b = 0;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		} else {
			// stop
			*channel_a = 0;
			*channel_b = 0;
		}
}
 8000aa4:	e02c      	b.n	8000b00 <Set_Motor_Speed_f+0xc8>
		} else if (motor_speed < 0) {
 8000aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab2:	d51f      	bpl.n	8000af4 <Set_Motor_Speed_f+0xbc>
			if (motor_speed < -100) {
 8000ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ab8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b24 <Set_Motor_Speed_f+0xec>
 8000abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d501      	bpl.n	8000aca <Set_Motor_Speed_f+0x92>
				motor_speed = -100;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <Set_Motor_Speed_f+0xf0>)
 8000ac8:	607b      	str	r3, [r7, #4]
			*channel_b = motor_speed * -(65000.0 / 100.0);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fd08 	bl	80004e0 <__aeabi_f2d>
 8000ad0:	a30f      	add	r3, pc, #60	; (adr r3, 8000b10 <Set_Motor_Speed_f+0xd8>)
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	f7ff fd5b 	bl	8000590 <__aeabi_dmul>
 8000ada:	4603      	mov	r3, r0
 8000adc:	460c      	mov	r4, r1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	f7ff ff67 	bl	80009b4 <__aeabi_d2uiz>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	601a      	str	r2, [r3, #0]
			*channel_a = 0;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	e005      	b.n	8000b00 <Set_Motor_Speed_f+0xc8>
			*channel_a = 0;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			*channel_b = 0;
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	40efbd00 	.word	0x40efbd00
 8000b10:	00000000 	.word	0x00000000
 8000b14:	c0845000 	.word	0xc0845000
 8000b18:	42c80000 	.word	0x42c80000
 8000b1c:	42c80000 	.word	0x42c80000
 8000b20:	40590000 	.word	0x40590000
 8000b24:	c2c80000 	.word	0xc2c80000
 8000b28:	c2c80000 	.word	0xc2c80000

08000b2c <Set_Thrower_Speed>:

inline void Set_Thrower_Speed(volatile uint32_t * channel_a, int32_t thrower_speed) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dd0e      	ble.n	8000b5a <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b64      	cmp	r3, #100	; 0x64
 8000b40:	dc0f      	bgt.n	8000b62 <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4613      	mov	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000b50:	3308      	adds	r3, #8
 8000b52:	461a      	mov	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000b58:	e003      	b.n	8000b62 <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t * channel_a, int32_t servo_speed, GPIO_PinState ir_status, int32_t ir_control) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d005      	beq.n	8000b92 <Set_Servo_Speed+0x22>
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d02a      	beq.n	8000be2 <Set_Servo_Speed+0x72>
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d027      	beq.n	8000be2 <Set_Servo_Speed+0x72>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd0c      	ble.n	8000bb2 <Set_Servo_Speed+0x42>
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	2b64      	cmp	r3, #100	; 0x64
 8000b9c:	dc09      	bgt.n	8000bb2 <Set_Servo_Speed+0x42>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <Set_Servo_Speed+0x80>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	f5c3 6392 	rsb	r3, r3, #1168	; 0x490
 8000ba6:	3307      	adds	r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e017      	b.n	8000be2 <Set_Servo_Speed+0x72>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <Set_Servo_Speed+0x80>)
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da0f      	bge.n	8000bda <Set_Servo_Speed+0x6a>
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000bc0:	db0b      	blt.n	8000bda <Set_Servo_Speed+0x6a>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <Set_Servo_Speed+0x80>)
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	f2a3 42e2 	subw	r2, r3, #1250	; 0x4e2
 8000bca:	4613      	mov	r3, r2
 8000bcc:	079b      	lsls	r3, r3, #30
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	e003      	b.n	8000be2 <Set_Servo_Speed+0x72>
		} else {
			*channel_a = 0;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000be0:	e7ff      	b.n	8000be2 <Set_Servo_Speed+0x72>
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200001a0 	.word	0x200001a0

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b598      	push	{r3, r4, r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f001 f9d5 	bl	8001fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f8ca 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f000 fd1e 	bl	8001640 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000c04:	f000 faa6 	bl	8001154 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000c08:	f000 fb30 	bl	800126c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000c0c:	f000 fb9e 	bl	800134c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000c10:	f000 fc22 	bl	8001458 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000c14:	f000 f926 	bl	8000e64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c18:	f000 f9d4 	bl	8000fc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c1c:	f000 fa26 	bl	800106c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000c20:	f000 faee 	bl	8001200 <MX_TIM7_Init>
  MX_TIM17_Init();
 8000c24:	f000 fc92 	bl	800154c <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000c28:	f008 ffd4 	bl	8009bd4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	4843      	ldr	r0, [pc, #268]	; (8000d3c <main+0x148>)
 8000c30:	f004 face 	bl	80051d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c34:	2104      	movs	r1, #4
 8000c36:	4842      	ldr	r0, [pc, #264]	; (8000d40 <main+0x14c>)
 8000c38:	f004 faca 	bl	80051d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4841      	ldr	r0, [pc, #260]	; (8000d44 <main+0x150>)
 8000c40:	f004 fac6 	bl	80051d0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4840      	ldr	r0, [pc, #256]	; (8000d48 <main+0x154>)
 8000c48:	f004 f91c 	bl	8004e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	483e      	ldr	r0, [pc, #248]	; (8000d48 <main+0x154>)
 8000c50:	f004 f918 	bl	8004e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c54:	2108      	movs	r1, #8
 8000c56:	483c      	ldr	r0, [pc, #240]	; (8000d48 <main+0x154>)
 8000c58:	f004 f914 	bl	8004e84 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <main+0x158>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000c62:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <main+0x158>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <main+0x158>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4837      	ldr	r0, [pc, #220]	; (8000d50 <main+0x15c>)
 8000c72:	f004 f907 	bl	8004e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c76:	2104      	movs	r1, #4
 8000c78:	4835      	ldr	r0, [pc, #212]	; (8000d50 <main+0x15c>)
 8000c7a:	f004 f903 	bl	8004e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c7e:	2108      	movs	r1, #8
 8000c80:	4833      	ldr	r0, [pc, #204]	; (8000d50 <main+0x15c>)
 8000c82:	f004 f8ff 	bl	8004e84 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 8000c86:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <main+0x160>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 8000c8c:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <main+0x160>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 8000c92:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <main+0x160>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	482f      	ldr	r0, [pc, #188]	; (8000d58 <main+0x164>)
 8000c9c:	f004 f8f2 	bl	8004e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	482e      	ldr	r0, [pc, #184]	; (8000d5c <main+0x168>)
 8000ca4:	f004 f8ee 	bl	8004e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	482d      	ldr	r0, [pc, #180]	; (8000d60 <main+0x16c>)
 8000cac:	f004 f8ea 	bl	8004e84 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <main+0x170>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = ESC_IDLE_CCR;
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <main+0x174>)
 8000cb8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <main+0x178>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000cc4:	482a      	ldr	r0, [pc, #168]	; (8000d70 <main+0x17c>)
 8000cc6:	f004 f81b 	bl	8004d00 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <main+0x180>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d1fa      	bne.n	8000cca <main+0xd6>
		command_received = 0;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <main+0x180>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		command_received_ticker = 60;
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <main+0x184>)
 8000cdc:	223c      	movs	r2, #60	; 0x3c
 8000cde:	701a      	strb	r2, [r3, #0]

		// toggle led
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4826      	ldr	r0, [pc, #152]	; (8000d7c <main+0x188>)
 8000ce4:	f001 fc92 	bl	800260c <HAL_GPIO_TogglePin>

		feedback.thrower = 666;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <main+0x18c>)
 8000cea:	f240 229a 	movw	r2, #666	; 0x29a
 8000cee:	60da      	str	r2, [r3, #12]
		feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	4822      	ldr	r0, [pc, #136]	; (8000d7c <main+0x188>)
 8000cf4:	f001 fc5a 	bl	80025ac <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <main+0x18c>)
 8000cfe:	615a      	str	r2, [r3, #20]
//			}
//		} else {
//			Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), command.motor1);
//		}

		motor1_current_speed = command.motor1;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <main+0x190>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <main+0x194>)
 8000d06:	6013      	str	r3, [r2, #0]
		//Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), command.motor1);
		//Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
		//Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);

		Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <main+0x190>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <main+0x198>)
 8000d10:	f7ff ff0c 	bl	8000b2c <Set_Thrower_Speed>

		Set_Servo_Speed(&(TIM17->CCR1), command.servo, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <main+0x190>)
 8000d16:	691c      	ldr	r4, [r3, #16]
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <main+0x188>)
 8000d1c:	f001 fc46 	bl	80025ac <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <main+0x190>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4621      	mov	r1, r4
 8000d2a:	4819      	ldr	r0, [pc, #100]	; (8000d90 <main+0x19c>)
 8000d2c:	f7ff ff20 	bl	8000b70 <Set_Servo_Speed>

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000d30:	2128      	movs	r1, #40	; 0x28
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <main+0x18c>)
 8000d34:	f009 f810 	bl	8009d58 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000d38:	e7c7      	b.n	8000cca <main+0xd6>
 8000d3a:	bf00      	nop
 8000d3c:	200005fc 	.word	0x200005fc
 8000d40:	20000478 	.word	0x20000478
 8000d44:	2000042c 	.word	0x2000042c
 8000d48:	200005ac 	.word	0x200005ac
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	2000055c 	.word	0x2000055c
 8000d54:	40000400 	.word	0x40000400
 8000d58:	200004c4 	.word	0x200004c4
 8000d5c:	20000648 	.word	0x20000648
 8000d60:	20000510 	.word	0x20000510
 8000d64:	40014000 	.word	0x40014000
 8000d68:	40014400 	.word	0x40014400
 8000d6c:	40014800 	.word	0x40014800
 8000d70:	20000694 	.word	0x20000694
 8000d74:	200001f0 	.word	0x200001f0
 8000d78:	200001f1 	.word	0x200001f1
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	200001c8 	.word	0x200001c8
 8000d84:	200001a0 	.word	0x200001a0
 8000d88:	200001f8 	.word	0x200001f8
 8000d8c:	40014434 	.word	0x40014434
 8000d90:	40014834 	.word	0x40014834

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0a4      	sub	sp, #144	; 0x90
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d9e:	2238      	movs	r2, #56	; 0x38
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f009 fc3d 	bl	800a622 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2244      	movs	r2, #68	; 0x44
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f009 fc2f 	bl	800a622 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f002 ffa3 	bl	8003d10 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000dca:	2322      	movs	r3, #34	; 0x22
 8000dcc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000de8:	2314      	movs	r3, #20
 8000dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 f837 	bl	8003e78 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e10:	f000 fddc 	bl	80019cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fb3a 	bl	80044a8 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e3a:	f000 fdc7 	bl	80019cc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fd10 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e56:	f000 fdb9 	bl	80019cc <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3790      	adds	r7, #144	; 0x90
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b098      	sub	sp, #96	; 0x60
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2234      	movs	r2, #52	; 0x34
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f009 fbc6 	bl	800a622 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000e98:	4a49      	ldr	r2, [pc, #292]	; (8000fc0 <MX_TIM1_Init+0x15c>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e9c:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ea8:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ec2:	483e      	ldr	r0, [pc, #248]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000ec4:	f003 ff86 	bl	8004dd4 <HAL_TIM_PWM_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fd7d 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4835      	ldr	r0, [pc, #212]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000ee6:	f005 f863 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 fd6c 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	; 0x60
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f00:	2300      	movs	r3, #0
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4828      	ldr	r0, [pc, #160]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000f1a:	f004 fb65 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f24:	f000 fd52 	bl	80019cc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f30:	2204      	movs	r2, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4821      	ldr	r0, [pc, #132]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000f36:	f004 fb57 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000f40:	f000 fd44 	bl	80019cc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000f52:	f004 fb49 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f5c:	f000 fd36 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000f9e:	f005 f889 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000fa8:	f000 fd10 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM1_Init+0x158>)
 8000fae:	f000 fe91 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8000fb2:	bf00      	nop
 8000fb4:	3760      	adds	r7, #96	; 0x60
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200005ac 	.word	0x200005ac
 8000fc0:	40012c00 	.word	0x40012c00

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2224      	movs	r2, #36	; 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f009 fb25 	bl	800a622 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800100a:	2303      	movs	r3, #3
 800100c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001036:	f004 f825 	bl	8005084 <HAL_TIM_Encoder_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001040:	f000 fcc4 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001052:	f004 ffad 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800105c:	f000 fcb6 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200005fc 	.word	0x200005fc

0800106c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <MX_TIM3_Init+0xe0>)
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <MX_TIM3_Init+0xe4>)
 8001094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_TIM3_Init+0xe0>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_TIM3_Init+0xe0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_TIM3_Init+0xe0>)
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_TIM3_Init+0xe0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_TIM3_Init+0xe0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010b6:	4825      	ldr	r0, [pc, #148]	; (800114c <MX_TIM3_Init+0xe0>)
 80010b8:	f003 fe8c 	bl	8004dd4 <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80010c2:	f000 fc83 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <MX_TIM3_Init+0xe0>)
 80010d6:	f004 ff6b 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80010e0:	f000 fc74 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e4:	2360      	movs	r3, #96	; 0x60
 80010e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	4619      	mov	r1, r3
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <MX_TIM3_Init+0xe0>)
 80010fc:	f004 fa74 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001106:	f000 fc61 	bl	80019cc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	2204      	movs	r2, #4
 8001112:	4619      	mov	r1, r3
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_TIM3_Init+0xe0>)
 8001116:	f004 fa67 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001120:	f000 fc54 	bl	80019cc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2208      	movs	r2, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM3_Init+0xe0>)
 8001130:	f004 fa5a 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800113a:	f000 fc47 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM3_Init+0xe0>)
 8001140:	f000 fdc8 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000055c 	.word	0x2000055c
 8001150:	40000400 	.word	0x40000400

08001154 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f009 fa5d 	bl	800a622 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_TIM4_Init+0xa4>)
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <MX_TIM4_Init+0xa8>)
 8001176:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_TIM4_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_TIM4_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM4_Init+0xa4>)
 8001186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM4_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_TIM4_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001198:	2303      	movs	r3, #3
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_TIM4_Init+0xa4>)
 80011c4:	f003 ff5e 	bl	8005084 <HAL_TIM_Encoder_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011ce:	f000 fbfd 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_TIM4_Init+0xa4>)
 80011e0:	f004 fee6 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011ea:	f000 fbef 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3730      	adds	r7, #48	; 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000478 	.word	0x20000478
 80011fc:	40000800 	.word	0x40000800

08001200 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_TIM7_Init+0x64>)
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <MX_TIM7_Init+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_TIM7_Init+0x64>)
 8001218:	2228      	movs	r2, #40	; 0x28
 800121a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_TIM7_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65044;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_TIM7_Init+0x64>)
 8001224:	f64f 6214 	movw	r2, #65044	; 0xfe14
 8001228:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_TIM7_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_TIM7_Init+0x64>)
 8001232:	f003 fd0d 	bl	8004c50 <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800123c:	f000 fbc6 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_TIM7_Init+0x64>)
 800124e:	f004 feaf 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fbb8 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000694 	.word	0x20000694
 8001268:	40001400 	.word	0x40001400

0800126c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09a      	sub	sp, #104	; 0x68
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001272:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001276:	2224      	movs	r2, #36	; 0x24
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f009 f9d1 	bl	800a622 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2234      	movs	r2, #52	; 0x34
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f009 f9c5 	bl	800a622 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_TIM8_Init+0xd8>)
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <MX_TIM8_Init+0xdc>)
 800129c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012c4:	2303      	movs	r3, #3
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012d8:	2300      	movs	r3, #0
 80012da:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012dc:	2301      	movs	r3, #1
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80012e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ec:	4619      	mov	r1, r3
 80012ee:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_TIM8_Init+0xd8>)
 80012f0:	f003 fec8 	bl	8005084 <HAL_TIM_Encoder_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80012fa:	f000 fb67 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800130a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM8_Init+0xd8>)
 8001312:	f004 fe4d 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 800131c:	f000 fb56 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM8_Init+0xd8>)
 800132e:	f004 fec1 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8001338:	f000 fb48 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3768      	adds	r7, #104	; 0x68
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000042c 	.word	0x2000042c
 8001348:	40013400 	.word	0x40013400

0800134c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b098      	sub	sp, #96	; 0x60
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2234      	movs	r2, #52	; 0x34
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f009 f952 	bl	800a622 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <MX_TIM15_Init+0x104>)
 8001380:	4a34      	ldr	r2, [pc, #208]	; (8001454 <MX_TIM15_Init+0x108>)
 8001382:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_TIM15_Init+0x104>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_TIM15_Init+0x104>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <MX_TIM15_Init+0x104>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_TIM15_Init+0x104>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800139e:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_TIM15_Init+0x104>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_TIM15_Init+0x104>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013aa:	4829      	ldr	r0, [pc, #164]	; (8001450 <MX_TIM15_Init+0x104>)
 80013ac:	f003 fd12 	bl	8004dd4 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 fb09 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c6:	4619      	mov	r1, r3
 80013c8:	4821      	ldr	r0, [pc, #132]	; (8001450 <MX_TIM15_Init+0x104>)
 80013ca:	f004 fdf1 	bl	8005fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f000 fafa 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d8:	2360      	movs	r3, #96	; 0x60
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_TIM15_Init+0x104>)
 80013fe:	f004 f8f3 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001408:	f000 fae0 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001424:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM15_Init+0x104>)
 8001434:	f004 fe3e 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800143e:	f000 fac5 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM15_Init+0x104>)
 8001444:	f000 fc46 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3760      	adds	r7, #96	; 0x60
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200004c4 	.word	0x200004c4
 8001454:	40014000 	.word	0x40014000

08001458 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2234      	movs	r2, #52	; 0x34
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f009 f8d2 	bl	800a622 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <MX_TIM16_Init+0xec>)
 8001480:	4a31      	ldr	r2, [pc, #196]	; (8001548 <MX_TIM16_Init+0xf0>)
 8001482:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <MX_TIM16_Init+0xec>)
 8001486:	2230      	movs	r2, #48	; 0x30
 8001488:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <MX_TIM16_Init+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65300;
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <MX_TIM16_Init+0xec>)
 8001492:	f64f 7214 	movw	r2, #65300	; 0xff14
 8001496:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <MX_TIM16_Init+0xec>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <MX_TIM16_Init+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <MX_TIM16_Init+0xec>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014aa:	4826      	ldr	r0, [pc, #152]	; (8001544 <MX_TIM16_Init+0xec>)
 80014ac:	f003 fbd0 	bl	8004c50 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80014b6:	f000 fa89 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014ba:	4822      	ldr	r0, [pc, #136]	; (8001544 <MX_TIM16_Init+0xec>)
 80014bc:	f003 fc8a 	bl	8004dd4 <HAL_TIM_PWM_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80014c6:	f000 fa81 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ca:	2360      	movs	r3, #96	; 0x60
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d2:	2300      	movs	r3, #0
 80014d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d6:	2300      	movs	r3, #0
 80014d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4815      	ldr	r0, [pc, #84]	; (8001544 <MX_TIM16_Init+0xec>)
 80014f0:	f004 f87a 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80014fa:	f000 fa67 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM16_Init+0xec>)
 8001526:	f004 fdc5 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001530:	f000 fa4c 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM16_Init+0xec>)
 8001536:	f000 fbcd 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3750      	adds	r7, #80	; 0x50
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000648 	.word	0x20000648
 8001548:	40014400 	.word	0x40014400

0800154c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2234      	movs	r2, #52	; 0x34
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f009 f858 	bl	800a622 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <MX_TIM17_Init+0xec>)
 8001574:	4a31      	ldr	r2, [pc, #196]	; (800163c <MX_TIM17_Init+0xf0>)
 8001576:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48;
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <MX_TIM17_Init+0xec>)
 800157a:	2230      	movs	r2, #48	; 0x30
 800157c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <MX_TIM17_Init+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65300;
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <MX_TIM17_Init+0xec>)
 8001586:	f64f 7214 	movw	r2, #65300	; 0xff14
 800158a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <MX_TIM17_Init+0xec>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <MX_TIM17_Init+0xec>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <MX_TIM17_Init+0xec>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_TIM17_Init+0xec>)
 80015a0:	f003 fb56 	bl	8004c50 <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80015aa:	f000 fa0f 	bl	80019cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80015ae:	4822      	ldr	r0, [pc, #136]	; (8001638 <MX_TIM17_Init+0xec>)
 80015b0:	f003 fc10 	bl	8004dd4 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80015ba:	f000 fa07 	bl	80019cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015be:	2360      	movs	r3, #96	; 0x60
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ca:	2300      	movs	r3, #0
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_TIM17_Init+0xec>)
 80015e4:	f004 f800 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80015ee:	f000 f9ed 	bl	80019cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM17_Init+0xec>)
 800161a:	f004 fd4b 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001624:	f000 f9d2 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM17_Init+0xec>)
 800162a:	f000 fb53 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3750      	adds	r7, #80	; 0x50
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000510 	.word	0x20000510
 800163c:	40014800 	.word	0x40014800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_GPIO_Init+0x8c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <MX_GPIO_Init+0x8c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_GPIO_Init+0x8c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_GPIO_Init+0x8c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <MX_GPIO_Init+0x8c>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_GPIO_Init+0x8c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2120      	movs	r1, #32
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <MX_GPIO_Init+0x90>)
 800168c:	f000 ffa6 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001690:	2308      	movs	r3, #8
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <MX_GPIO_Init+0x90>)
 80016a4:	f000 fe00 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016a8:	2320      	movs	r3, #32
 80016aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_GPIO_Init+0x90>)
 80016c0:	f000 fdf2 	bl	80022a8 <HAL_GPIO_Init>

}
 80016c4:	bf00      	nop
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 80016dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t motor2_position = TIM4->CNT;
 80016e4:	4ba0      	ldr	r3, [pc, #640]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	843b      	strh	r3, [r7, #32]
	uint16_t motor3_position = TIM8->CNT;
 80016ea:	4ba0      	ldr	r3, [pc, #640]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	83fb      	strh	r3, [r7, #30]
//	int32_t motor1_position_change = ;
//	int32_t motor2_position_change = motor2_position - motor2_position_prev;
//	int32_t motor3_position_change = motor3_position - motor3_position_prev;

	int quadrant = 65535 / 4;
 80016f0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80016f4:	61bb      	str	r3, [r7, #24]
	if (motor1_position_prev > quadrant * 3 && motor1_position < quadrant) {
 80016f6:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	4299      	cmp	r1, r3
 8001708:	dd16      	ble.n	8001738 <HAL_TIM_PeriodElapsedCallback+0x64>
 800170a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	429a      	cmp	r2, r3
 8001710:	dd12      	ble.n	8001738 <HAL_TIM_PeriodElapsedCallback+0x64>
		feedback.motor1 = (65535 - motor1_position_prev + motor1_position) / 2;
 8001712:	4b97      	ldr	r3, [pc, #604]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800171c:	33ff      	adds	r3, #255	; 0xff
 800171e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001720:	4413      	add	r3, r2
 8001722:	0fda      	lsrs	r2, r3, #31
 8001724:	4413      	add	r3, r2
 8001726:	105b      	asrs	r3, r3, #1
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001730:	4b90      	ldr	r3, [pc, #576]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001732:	edc3 7a00 	vstr	s15, [r3]
 8001736:	e02f      	b.n	8001798 <HAL_TIM_PeriodElapsedCallback+0xc4>
	} else if (motor1_position_prev < quadrant && motor1_position > quadrant * 3) {
 8001738:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4293      	cmp	r3, r2
 8001744:	dd19      	ble.n	800177a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001746:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	4299      	cmp	r1, r3
 8001752:	dd12      	ble.n	800177a <HAL_TIM_PeriodElapsedCallback+0xa6>
		feedback.motor1 = (65535 - motor1_position_prev + motor1_position) / 2;
 8001754:	4b86      	ldr	r3, [pc, #536]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800175e:	33ff      	adds	r3, #255	; 0xff
 8001760:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001762:	4413      	add	r3, r2
 8001764:	0fda      	lsrs	r2, r3, #31
 8001766:	4413      	add	r3, r2
 8001768:	105b      	asrs	r3, r3, #1
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	4b80      	ldr	r3, [pc, #512]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001774:	edc3 7a00 	vstr	s15, [r3]
 8001778:	e00e      	b.n	8001798 <HAL_TIM_PeriodElapsedCallback+0xc4>
	} else {
		feedback.motor1 = (motor1_position - motor1_position_prev) / 2;
 800177a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800177c:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800177e:	8812      	ldrh	r2, [r2, #0]
 8001780:	b292      	uxth	r2, r2
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	0fda      	lsrs	r2, r3, #31
 8001786:	4413      	add	r3, r2
 8001788:	105b      	asrs	r3, r3, #1
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	4b78      	ldr	r3, [pc, #480]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
	}
//	feedback.motor1 = (((10000 + motor1_position - motor1_position_prev) % 65535) - 10000) / 2;
//	feedback.motor2 = (((10000 + motor2_position - motor2_position_prev) % 65535) - 10000) / 2;
//	feedback.motor3 = (((10000 + motor3_position - motor3_position_prev) % 65535) - 10000) / 2;

	motor1_position_prev = motor1_position;
 8001798:	4a75      	ldr	r2, [pc, #468]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800179a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800179c:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 800179e:	4a76      	ldr	r2, [pc, #472]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80017a0:	8c3b      	ldrh	r3, [r7, #32]
 80017a2:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 80017a4:	4a75      	ldr	r2, [pc, #468]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017a6:	8bfb      	ldrh	r3, [r7, #30]
 80017a8:	8013      	strh	r3, [r2, #0]
//	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
//	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19;
//	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19;

	// pwm pid
	if (iGain != command.iGain) {
 80017aa:	4b75      	ldr	r3, [pc, #468]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80017b0:	4b74      	ldr	r3, [pc, #464]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d002      	beq.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0xf2>
		motor1_error_acc = 0;
 80017c0:	4b71      	ldr	r3, [pc, #452]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
	}
	if (dGain != command.dGain) {
 80017c6:	4b6e      	ldr	r3, [pc, #440]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d003      	beq.n	80017e4 <HAL_TIM_PeriodElapsedCallback+0x110>
		motor1_der_state = 0;
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
	}
	pGain = command.pGain;
 80017e4:	4b66      	ldr	r3, [pc, #408]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a6a      	ldr	r2, [pc, #424]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80017ea:	6013      	str	r3, [r2, #0]
	iGain = command.iGain;
 80017ec:	4b64      	ldr	r3, [pc, #400]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	4a64      	ldr	r2, [pc, #400]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80017f2:	6013      	str	r3, [r2, #0]
	dGain = command.dGain;
 80017f4:	4b62      	ldr	r3, [pc, #392]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a64      	ldr	r2, [pc, #400]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017fa:	6013      	str	r3, [r2, #0]
	//int pGain = 1;
	int error = command.motor1 - feedback.motor1;
 80017fc:	4b60      	ldr	r3, [pc, #384]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001810:	ee17 3a90 	vmov	r3, s15
 8001814:	617b      	str	r3, [r7, #20]
	int pTerm = error * pGain;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001820:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	613b      	str	r3, [r7, #16]

	//float iGain = 0.01;
	motor1_error_acc += error;
 8001834:	4b54      	ldr	r3, [pc, #336]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	4413      	add	r3, r2
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800183e:	6013      	str	r3, [r2, #0]
	float iTerm = iGain * motor1_error_acc;
 8001840:	4b51      	ldr	r3, [pc, #324]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (iTerm > 100) {
 800185a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800185e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	dd02      	ble.n	8001872 <HAL_TIM_PeriodElapsedCallback+0x19e>
		iTerm = 10;
 800186c:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	e00a      	b.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x1b4>
	} else if (iTerm < -100) {
 8001872:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001876:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80019a0 <HAL_TIM_PeriodElapsedCallback+0x2cc>
 800187a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	d501      	bpl.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x1b4>
		iTerm = -10;
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
	}
	//float dGain = 0.5;
	float dTerm = dGain*(motor1_der_state - motor1_current_speed);
 8001888:	4b41      	ldr	r3, [pc, #260]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001898:	4b3c      	ldr	r3, [pc, #240]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a2:	edc7 7a03 	vstr	s15, [r7, #12]
	motor1_der_state = motor1_current_speed;
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a39      	ldr	r2, [pc, #228]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80018ac:	6013      	str	r3, [r2, #0]
	motor1_current_speed = motor1_current_speed + pTerm + iTerm + dTerm;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
	Set_Motor_Speed_f(&(TIM1->CCR2), &(TIM1->CCR3), motor1_current_speed);
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	eeb0 0a67 	vmov.f32	s0, s15
 80018e2:	4932      	ldr	r1, [pc, #200]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80018e4:	4832      	ldr	r0, [pc, #200]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80018e6:	f7ff f8a7 	bl	8000a38 <Set_Motor_Speed_f>
	feedback.motor2 = iTerm;
 80018ea:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor1_current_speed;
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018f6:	6093      	str	r3, [r2, #8]
//		//Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), (motor1_target_rpm - 50 - pTerm) / 3);
//	}


	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 80018f8:	2108      	movs	r1, #8
 80018fa:	482e      	ldr	r0, [pc, #184]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80018fc:	f000 fe56 	bl	80025ac <HAL_GPIO_ReadPin>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x240>
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x240>
		TIM17->CCR1 = 0;
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001910:	2200      	movs	r2, #0
 8001912:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_TIM_PeriodElapsedCallback+0x25a>
		command_received_ticker -= 1;
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800192a:	701a      	strb	r2, [r3, #0]
		TIM16->CCR1 = ESC_IDLE_CCR;

		// stop servo
		TIM17->CCR1 = 0;
	}
}
 800192c:	e018      	b.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x28c>
		TIM1->CCR1 = 0;
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001930:	2200      	movs	r2, #0
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001936:	2200      	movs	r2, #0
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800193c:	2200      	movs	r2, #0
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001942:	2200      	movs	r2, #0
 8001944:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001948:	2200      	movs	r2, #0
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800194e:	2200      	movs	r2, #0
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001954:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40000800 	.word	0x40000800
 800196c:	40013400 	.word	0x40013400
 8001970:	200001f2 	.word	0x200001f2
 8001974:	200001c8 	.word	0x200001c8
 8001978:	200001f4 	.word	0x200001f4
 800197c:	200001f6 	.word	0x200001f6
 8001980:	200001a0 	.word	0x200001a0
 8001984:	200005f8 	.word	0x200005f8
 8001988:	200001fc 	.word	0x200001fc
 800198c:	20000204 	.word	0x20000204
 8001990:	20000200 	.word	0x20000200
 8001994:	200005a8 	.word	0x200005a8
 8001998:	42c80000 	.word	0x42c80000
 800199c:	41200000 	.word	0x41200000
 80019a0:	c2c80000 	.word	0xc2c80000
 80019a4:	c1200000 	.word	0xc1200000
 80019a8:	200001f8 	.word	0x200001f8
 80019ac:	40012c3c 	.word	0x40012c3c
 80019b0:	40012c38 	.word	0x40012c38
 80019b4:	48000400 	.word	0x48000400
 80019b8:	40014800 	.word	0x40014800
 80019bc:	200001f1 	.word	0x200001f1
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40014400 	.word	0x40014400

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x44>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_MspInit+0x44>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6613      	str	r3, [r2, #96]	; 0x60
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_MspInit+0x44>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x44>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x44>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x44>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a12:	f002 fa21 	bl	8003e58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <HAL_TIM_PWM_MspInit+0x80>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10c      	bne.n	8001a50 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a40:	6613      	str	r3, [r2, #96]	; 0x60
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a4e:	e022      	b.n	8001a96 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <HAL_TIM_PWM_MspInit+0x88>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10c      	bne.n	8001a74 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
}
 8001a72:	e010      	b.n	8001a96 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10b      	bne.n	8001a96 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6613      	str	r3, [r2, #96]	; 0x60
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_TIM_PWM_MspInit+0x84>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40014000 	.word	0x40014000

08001ab4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d129      	bne.n	8001b2a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b06:	2303      	movs	r3, #3
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b16:	2301      	movs	r3, #1
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f000 fbc0 	bl	80022a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b28:	e079      	b.n	8001c1e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x178>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d128      	bne.n	8001b86 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b34:	4b3c      	ldr	r3, [pc, #240]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a35      	ldr	r2, [pc, #212]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b58:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b64:	23c0      	movs	r3, #192	; 0xc0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b74:	2302      	movs	r3, #2
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482c      	ldr	r0, [pc, #176]	; (8001c30 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001b80:	f000 fb92 	bl	80022a8 <HAL_GPIO_Init>
}
 8001b84:	e04b      	b.n	8001c1e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_TIM_Encoder_MspInit+0x180>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d146      	bne.n	8001c1e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x174>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001bea:	2302      	movs	r3, #2
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f000 fb56 	bl	80022a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001c0e:	230a      	movs	r3, #10
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001c1a:	f000 fb45 	bl	80022a8 <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3738      	adds	r7, #56	; 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40000800 	.word	0x40000800
 8001c30:	48000400 	.word	0x48000400
 8001c34:	40013400 	.word	0x40013400

08001c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIM_Base_MspInit+0x8c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d114      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c50:	f043 0320 	orr.w	r3, r3, #32
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2037      	movs	r0, #55	; 0x37
 8001c68:	f000 fae9 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c6c:	2037      	movs	r0, #55	; 0x37
 8001c6e:	f000 fb00 	bl	8002272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c72:	e022      	b.n	8001cba <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_TIM_Base_MspInit+0x94>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]
}
 8001c96:	e010      	b.n	8001cba <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_TIM_Base_MspInit+0x98>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10b      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6613      	str	r3, [r2, #96]	; 0x60
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_Base_MspInit+0x90>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40001400 	.word	0x40001400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40014400 	.word	0x40014400
 8001cd0:	40014800 	.word	0x40014800

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08e      	sub	sp, #56	; 0x38
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	; (8001e88 <HAL_TIM_MspPostInit+0x1b4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d11e      	bne.n	8001d34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a64      	ldr	r2, [pc, #400]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d0e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d20:	2306      	movs	r3, #6
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f000 fabb 	bl	80022a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001d32:	e0a5      	b.n	8001e80 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_TIM_MspPostInit+0x1bc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d139      	bne.n	8001db2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d6e:	2350      	movs	r3, #80	; 0x50
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8c:	f000 fa8c 	bl	80022a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d90:	2301      	movs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da0:	2302      	movs	r3, #2
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	483a      	ldr	r0, [pc, #232]	; (8001e94 <HAL_TIM_MspPostInit+0x1c0>)
 8001dac:	f000 fa7c 	bl	80022a8 <HAL_GPIO_Init>
}
 8001db0:	e066      	b.n	8001e80 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <HAL_TIM_MspPostInit+0x1c4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d11d      	bne.n	8001df8 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001de4:	2309      	movs	r3, #9
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f000 fa59 	bl	80022a8 <HAL_GPIO_Init>
}
 8001df6:	e043      	b.n	8001e80 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <HAL_TIM_MspPostInit+0x1c8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d11c      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4817      	ldr	r0, [pc, #92]	; (8001e94 <HAL_TIM_MspPostInit+0x1c0>)
 8001e36:	f000 fa37 	bl	80022a8 <HAL_GPIO_Init>
}
 8001e3a:	e021      	b.n	8001e80 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <HAL_TIM_MspPostInit+0x1cc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d11c      	bne.n	8001e80 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_TIM_MspPostInit+0x1b8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f000 fa14 	bl	80022a8 <HAL_GPIO_Init>
}
 8001e80:	bf00      	nop
 8001e82:	3738      	adds	r7, #56	; 0x38
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	48000400 	.word	0x48000400
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40014400 	.word	0x40014400
 8001ea0:	40014800 	.word	0x40014800

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef8:	f000 f8a8 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <USB_LP_IRQHandler+0x10>)
 8001f06:	f000 fca2 	bl	800284e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20001384 	.word	0x20001384

08001f14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM7_IRQHandler+0x10>)
 8001f1a:	f003 f9e6 	bl	80052ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000694 	.word	0x20000694

08001f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <SystemInit+0x28>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <SystemInit+0x28>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <SystemInit+0x28>)
 8001f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f42:	609a      	str	r2, [r3, #8]
#endif
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f7e:	f7ff ffd3 	bl	8001f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f008 fb1f 	bl	800a5c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f86:	f7fe fe35 	bl	8000bf4 <main>

08001f8a <LoopForever>:

LoopForever:
    b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   r0, =_estack
 8001f8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001f98:	0800a6ac 	.word	0x0800a6ac
  ldr r2, =_sbss
 8001f9c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001fa0:	20001678 	.word	0x20001678

08001fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_2_IRQHandler>

08001fa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f939 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f80e 	bl	8001fd8 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	e001      	b.n	8001fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc8:	f7ff fd08 	bl	80019dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fcc:	79fb      	ldrb	r3, [r7, #7]

}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_InitTick+0x68>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d022      	beq.n	8002032 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_InitTick+0x6c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_InitTick+0x68>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f944 	bl	800228e <HAL_SYSTICK_Config>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10f      	bne.n	800202c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d809      	bhi.n	8002026 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002012:	2200      	movs	r2, #0
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	f04f 30ff 	mov.w	r0, #4294967295
 800201a:	f000 f910 	bl	800223e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_InitTick+0x70>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e007      	b.n	8002036 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e004      	b.n	8002036 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	e001      	b.n	8002036 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000008 	.word	0x20000008
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_IncTick+0x1c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_IncTick+0x20>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4413      	add	r3, r2
 800205a:	4a03      	ldr	r2, [pc, #12]	; (8002068 <HAL_IncTick+0x1c>)
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	200006e0 	.word	0x200006e0
 800206c:	20000008 	.word	0x20000008

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	200006e0 	.word	0x200006e0

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff40 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff90 	bl	800217c <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5f 	bl	8002128 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff33 	bl	80020ec <__NVIC_EnableIRQ>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ffa4 	bl	80021e4 <SysTick_Config>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022b6:	e15a      	b.n	800256e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 814c 	beq.w	8002568 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d00b      	beq.n	80022f0 <HAL_GPIO_Init+0x48>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d007      	beq.n	80022f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e4:	2b11      	cmp	r3, #17
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d130      	bne.n	8002352 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002326:	2201      	movs	r2, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0201 	and.w	r2, r3, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0xea>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b12      	cmp	r3, #18
 8002390:	d123      	bne.n	80023da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	6939      	ldr	r1, [r7, #16]
 80023d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80a6 	beq.w	8002568 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	4b5b      	ldr	r3, [pc, #364]	; (800258c <HAL_GPIO_Init+0x2e4>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_GPIO_Init+0x2e4>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6613      	str	r3, [r2, #96]	; 0x60
 8002428:	4b58      	ldr	r3, [pc, #352]	; (800258c <HAL_GPIO_Init+0x2e4>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002434:	4a56      	ldr	r2, [pc, #344]	; (8002590 <HAL_GPIO_Init+0x2e8>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800245e:	d01f      	beq.n	80024a0 <HAL_GPIO_Init+0x1f8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <HAL_GPIO_Init+0x2ec>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d019      	beq.n	800249c <HAL_GPIO_Init+0x1f4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_GPIO_Init+0x2f0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x1f0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4a      	ldr	r2, [pc, #296]	; (800259c <HAL_GPIO_Init+0x2f4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1ec>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a49      	ldr	r2, [pc, #292]	; (80025a0 <HAL_GPIO_Init+0x2f8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1e8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_GPIO_Init+0x2fc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1e4>
 8002488:	2305      	movs	r3, #5
 800248a:	e00a      	b.n	80024a2 <HAL_GPIO_Init+0x1fa>
 800248c:	2306      	movs	r3, #6
 800248e:	e008      	b.n	80024a2 <HAL_GPIO_Init+0x1fa>
 8002490:	2304      	movs	r3, #4
 8002492:	e006      	b.n	80024a2 <HAL_GPIO_Init+0x1fa>
 8002494:	2303      	movs	r3, #3
 8002496:	e004      	b.n	80024a2 <HAL_GPIO_Init+0x1fa>
 8002498:	2302      	movs	r3, #2
 800249a:	e002      	b.n	80024a2 <HAL_GPIO_Init+0x1fa>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_GPIO_Init+0x1fa>
 80024a0:	2300      	movs	r3, #0
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	f002 0203 	and.w	r2, r2, #3
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	4093      	lsls	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b2:	4937      	ldr	r1, [pc, #220]	; (8002590 <HAL_GPIO_Init+0x2e8>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_GPIO_Init+0x300>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e4:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <HAL_GPIO_Init+0x300>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <HAL_GPIO_Init+0x300>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800250e:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_GPIO_Init+0x300>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_GPIO_Init+0x300>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_GPIO_Init+0x300>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_GPIO_Init+0x300>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_GPIO_Init+0x300>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f ae9d 	bne.w	80022b8 <HAL_GPIO_Init+0x10>
  }
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	48000400 	.word	0x48000400
 8002598:	48000800 	.word	0x48000800
 800259c:	48000c00 	.word	0x48000c00
 80025a0:	48001000 	.word	0x48001000
 80025a4:	48001400 	.word	0x48001400
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e001      	b.n	80025ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43d9      	mvns	r1, r3
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	400b      	ands	r3, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af06      	add	r7, sp, #24
 8002646:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0d7      	b.n	8002802 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f007 fcbc 	bl	8009fe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fe18 	bl	80062ae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e04c      	b.n	800271e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3301      	adds	r3, #1
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	b298      	uxth	r0, r3
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	3336      	adds	r3, #54	; 0x36
 80026c2:	4602      	mov	r2, r0
 80026c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	3303      	adds	r3, #3
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	3338      	adds	r3, #56	; 0x38
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	333c      	adds	r3, #60	; 0x3c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	3340      	adds	r3, #64	; 0x40
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3301      	adds	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3ad      	bcc.n	8002684 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e044      	b.n	80027b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	3301      	adds	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3b5      	bcc.n	800272e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	687e      	ldr	r6, [r7, #4]
 80027ca:	466d      	mov	r5, sp
 80027cc:	f106 0410 	add.w	r4, r6, #16
 80027d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	602b      	str	r3, [r5, #0]
 80027d8:	1d33      	adds	r3, r6, #4
 80027da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f003 fd81 	bl	80062e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 fa5e 	bl	8003cbc <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800280a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_PCD_Start+0x16>
 800281c:	2302      	movs	r3, #2
 800281e:	e012      	b.n	8002846 <HAL_PCD_Start+0x3c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 fd27 	bl	8006280 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fd13 	bl	8008262 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f005 fd18 	bl	8008290 <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286a:	d102      	bne.n	8002872 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fb5b 	bl	8002f28 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fd0a 	bl	8008290 <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	d112      	bne.n	80028ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289a:	b292      	uxth	r2, r2
 800289c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f007 fc1a 	bl	800a0da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028a6:	2100      	movs	r1, #0
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f91e 	bl	8002aea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fcec 	bl	8008290 <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c2:	d10b      	bne.n	80028dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028d6:	b292      	uxth	r2, r2
 80028d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f005 fcd5 	bl	8008290 <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d10b      	bne.n	800290a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002904:	b292      	uxth	r2, r2
 8002906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f005 fcbe 	bl	8008290 <USB_ReadInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d133      	bne.n	8002988 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0204 	bic.w	r2, r2, #4
 8002932:	b292      	uxth	r2, r2
 8002934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0208 	bic.w	r2, r2, #8
 800294a:	b292      	uxth	r2, r2
 800294c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002962:	2100      	movs	r1, #0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f007 fdad 	bl	800a4c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f007 fbee 	bl	800a14c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002982:	b292      	uxth	r2, r2
 8002984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f005 fc7f 	bl	8008290 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	d126      	bne.n	80029ec <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0208 	orr.w	r2, r2, #8
 80029b0:	b292      	uxth	r2, r2
 80029b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c8:	b292      	uxth	r2, r2
 80029ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0204 	orr.w	r2, r2, #4
 80029e0:	b292      	uxth	r2, r2
 80029e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f007 fb96 	bl	800a118 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fc4d 	bl	8008290 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d13f      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a12:	b292      	uxth	r2, r2
 8002a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12b      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0204 	orr.w	r2, r2, #4
 8002a34:	b292      	uxth	r2, r2
 8002a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0208 	orr.w	r2, r2, #8
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a70:	2101      	movs	r1, #1
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f007 fd26 	bl	800a4c4 <HAL_PCDEx_LPM_Callback>
 8002a78:	e002      	b.n	8002a80 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f007 fb4c 	bl	800a118 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fc03 	bl	8008290 <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a94:	d10e      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa8:	b292      	uxth	r2, r2
 8002aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f007 fb05 	bl	800a0be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 fbe9 	bl	8008290 <USB_ReadInterrupts>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_PCD_SetAddress+0x1a>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e013      	b.n	8002b2c <HAL_PCD_SetAddress+0x42>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f005 fb8c 	bl	800823a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	70fb      	strb	r3, [r7, #3]
 8002b46:	460b      	mov	r3, r1
 8002b48:	803b      	strh	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da0e      	bge.n	8002b78 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	705a      	strb	r2, [r3, #1]
 8002b76:	e00e      	b.n	8002b96 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 0207 	and.w	r2, r3, #7
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ba2:	883a      	ldrh	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	78ba      	ldrb	r2, [r7, #2]
 8002bac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bc0:	78bb      	ldrb	r3, [r7, #2]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d102      	bne.n	8002bcc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_PCD_EP_Open+0xa6>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e00e      	b.n	8002bf8 <HAL_PCD_EP_Open+0xc4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fb9d 	bl	8006328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da0e      	bge.n	8002c32 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	705a      	strb	r2, [r3, #1]
 8002c30:	e00e      	b.n	8002c50 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 0207 	and.w	r2, r3, #7
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_PCD_EP_Close+0x6a>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e00e      	b.n	8002c88 <HAL_PCD_EP_Close+0x88>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fec3 	bl	8006a04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca0:	7afb      	ldrb	r3, [r7, #11]
 8002ca2:	f003 0207 	and.w	r2, r3, #7
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 f876 	bl	8006dde <USB_EPStartXfer>
 8002cf2:	e005      	b.n	8002d00 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6979      	ldr	r1, [r7, #20]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 f86f 	bl	8006dde <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 0207 	and.w	r2, r3, #7
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d2c:	681b      	ldr	r3, [r3, #0]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	460b      	mov	r3, r1
 8002d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2201      	movs	r2, #1
 8002d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d92:	7afb      	ldrb	r3, [r7, #11]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 f81b 	bl	8006dde <USB_EPStartXfer>
 8002da8:	e005      	b.n	8002db6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6979      	ldr	r1, [r7, #20]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 f814 	bl	8006dde <USB_EPStartXfer>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 0207 	and.w	r2, r3, #7
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d901      	bls.n	8002dde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e04c      	b.n	8002e78 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da0e      	bge.n	8002e04 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	705a      	strb	r2, [r3, #1]
 8002e02:	e00c      	b.n	8002e1e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_PCD_EP_SetStall+0x7e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e01c      	b.n	8002e78 <HAL_PCD_EP_SetStall+0xb8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68f9      	ldr	r1, [r7, #12]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f005 f8f5 	bl	800803c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f005 fa21 	bl	80082b0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 020f 	and.w	r2, r3, #15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d901      	bls.n	8002e9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e040      	b.n	8002f20 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da0e      	bge.n	8002ec4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
 8002ec2:	e00e      	b.n	8002ee2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 0207 	and.w	r2, r3, #7
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_EP_ClrStall+0x82>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e00e      	b.n	8002f20 <HAL_PCD_EP_ClrStall+0xa0>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 f8e4 	bl	80080de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	; 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f30:	e2d1      	b.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002f48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 8152 	bne.w	80031f6 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d150      	bne.n	8002ffe <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6c:	81fb      	strh	r3, [r7, #14]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3328      	adds	r3, #40	; 0x28
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f007 f863 	bl	800a08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8282 	beq.w	80034d6 <PCD_EP_ISR_Handler+0x5ae>
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 827d 	bne.w	80034d6 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b292      	uxth	r2, r2
 8002ff0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ffc:	e26b      	b.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800300e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003014:	2b00      	cmp	r3, #0
 8003016:	d032      	beq.n	800307e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003020:	b29b      	uxth	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	4413      	add	r3, r2
 8003032:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003052:	b29b      	uxth	r3, r3
 8003054:	f005 f979 	bl	800834a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29a      	uxth	r2, r3
 8003060:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003064:	4013      	ands	r3, r2
 8003066:	823b      	strh	r3, [r7, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	8a3a      	ldrh	r2, [r7, #16]
 800306e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003072:	b292      	uxth	r2, r2
 8003074:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f006 ffda 	bl	800a030 <HAL_PCD_SetupStageCallback>
 800307c:	e22b      	b.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800307e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003082:	2b00      	cmp	r3, #0
 8003084:	f280 8227 	bge.w	80034d6 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29a      	uxth	r2, r3
 8003090:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003094:	4013      	ands	r3, r2
 8003096:	83bb      	strh	r3, [r7, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	8bba      	ldrh	r2, [r7, #28]
 800309e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a2:	b292      	uxth	r2, r2
 80030a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d019      	beq.n	800310a <PCD_EP_ISR_Handler+0x1e2>
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d015      	beq.n	800310a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	6959      	ldr	r1, [r3, #20]
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f005 f92b 	bl	800834a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	441a      	add	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003102:	2100      	movs	r1, #0
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f006 ffa5 	bl	800a054 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d112      	bne.n	8003158 <PCD_EP_ISR_Handler+0x230>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313c:	b29a      	uxth	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003150:	b29a      	uxth	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e02f      	b.n	80031b8 <PCD_EP_ISR_Handler+0x290>
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b3e      	cmp	r3, #62	; 0x3e
 800315e:	d813      	bhi.n	8003188 <PCD_EP_ISR_Handler+0x260>
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <PCD_EP_ISR_Handler+0x252>
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	3301      	adds	r3, #1
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	b29b      	uxth	r3, r3
 800317e:	029b      	lsls	r3, r3, #10
 8003180:	b29a      	uxth	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	e017      	b.n	80031b8 <PCD_EP_ISR_Handler+0x290>
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <PCD_EP_ISR_Handler+0x27a>
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	3b01      	subs	r3, #1
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	029b      	lsls	r3, r3, #10
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	827b      	strh	r3, [r7, #18]
 80031ca:	8a7b      	ldrh	r3, [r7, #18]
 80031cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031d0:	827b      	strh	r3, [r7, #18]
 80031d2:	8a7b      	ldrh	r3, [r7, #18]
 80031d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031d8:	827b      	strh	r3, [r7, #18]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	8a7b      	ldrh	r3, [r7, #18]
 80031e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	8013      	strh	r3, [r2, #0]
 80031f4:	e16f      	b.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003208:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800320c:	2b00      	cmp	r3, #0
 800320e:	f280 80e4 	bge.w	80033da <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29a      	uxth	r2, r3
 8003224:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003228:	4013      	ands	r3, r2
 800322a:	853b      	strh	r3, [r7, #40]	; 0x28
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800323c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003240:	b292      	uxth	r2, r2
 8003242:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003244:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	7b1b      	ldrb	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d120      	bne.n	80032a4 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	4413      	add	r3, r2
 800327c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003286:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8083 	beq.w	8003396 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	6959      	ldr	r1, [r3, #20]
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	88da      	ldrh	r2, [r3, #6]
 800329c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800329e:	f005 f854 	bl	800834a <USB_ReadPMA>
 80032a2:	e078      	b.n	8003396 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d108      	bne.n	80032be <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80032ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032ae:	461a      	mov	r2, r3
 80032b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f91d 	bl	80034f2 <HAL_PCD_EP_DB_Receive>
 80032b8:	4603      	mov	r3, r0
 80032ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80032bc:	e06b      	b.n	8003396 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	847b      	strh	r3, [r7, #34]	; 0x22
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01f      	beq.n	8003358 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	4413      	add	r3, r2
 8003332:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800333e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003340:	2b00      	cmp	r3, #0
 8003342:	d028      	beq.n	8003396 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	6959      	ldr	r1, [r3, #20]
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	891a      	ldrh	r2, [r3, #8]
 8003350:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003352:	f004 fffa 	bl	800834a <USB_ReadPMA>
 8003356:	e01e      	b.n	8003396 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003360:	b29b      	uxth	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	4413      	add	r3, r2
 8003372:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800337c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800337e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	6959      	ldr	r1, [r3, #20]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	895a      	ldrh	r2, [r3, #10]
 8003390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003392:	f004 ffda 	bl	800834a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800339c:	441a      	add	r2, r3
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033a8:	441a      	add	r2, r3
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <PCD_EP_ISR_Handler+0x498>
 80033b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d206      	bcs.n	80033ce <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f006 fe44 	bl	800a054 <HAL_PCD_DataOutStageCallback>
 80033cc:	e005      	b.n	80033da <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fd02 	bl	8006dde <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80033da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d078      	beq.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80033e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	843b      	strh	r3, [r7, #32]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	441a      	add	r2, r3
 8003422:	8c3b      	ldrh	r3, [r7, #32]
 8003424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342c:	b29b      	uxth	r3, r3
 800342e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	78db      	ldrb	r3, [r3, #3]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d108      	bne.n	800344a <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800343c:	2b02      	cmp	r3, #2
 800343e:	d144      	bne.n	80034ca <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d13f      	bne.n	80034ca <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	4413      	add	r3, r2
 8003464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	8bfb      	ldrh	r3, [r7, #30]
 8003476:	429a      	cmp	r2, r3
 8003478:	d906      	bls.n	8003488 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	8bfb      	ldrh	r3, [r7, #30]
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	619a      	str	r2, [r3, #24]
 8003486:	e002      	b.n	800348e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f006 fdf4 	bl	800a08a <HAL_PCD_DataInStageCallback>
 80034a2:	e018      	b.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	8bfb      	ldrh	r3, [r7, #30]
 80034aa:	441a      	add	r2, r3
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	8bfb      	ldrh	r3, [r7, #30]
 80034b6:	441a      	add	r2, r3
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 fc8b 	bl	8006dde <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80034c8:	e005      	b.n	80034d6 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034cc:	461a      	mov	r2, r3
 80034ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f917 	bl	8003704 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034de:	b29b      	uxth	r3, r3
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f6ff ad25 	blt.w	8002f32 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3738      	adds	r7, #56	; 0x38
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d07c      	beq.n	8003604 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4413      	add	r3, r2
 8003524:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800352e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	8b7b      	ldrh	r3, [r7, #26]
 8003536:	429a      	cmp	r2, r3
 8003538:	d306      	bcc.n	8003548 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	8b7b      	ldrh	r3, [r7, #26]
 8003540:	1ad2      	subs	r2, r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	619a      	str	r2, [r3, #24]
 8003546:	e002      	b.n	800354e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d123      	bne.n	800359e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	833b      	strh	r3, [r7, #24]
 8003572:	8b3b      	ldrh	r3, [r7, #24]
 8003574:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003578:	833b      	strh	r3, [r7, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	441a      	add	r2, r3
 8003588:	8b3b      	ldrh	r3, [r7, #24]
 800358a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359a:	b29b      	uxth	r3, r3
 800359c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01f      	beq.n	80035e8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	82fb      	strh	r3, [r7, #22]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	8afb      	ldrh	r3, [r7, #22]
 80035d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035e8:	8b7b      	ldrh	r3, [r7, #26]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8085 	beq.w	80036fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	891a      	ldrh	r2, [r3, #8]
 80035fc:	8b7b      	ldrh	r3, [r7, #26]
 80035fe:	f004 fea4 	bl	800834a <USB_ReadPMA>
 8003602:	e07a      	b.n	80036fa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360c:	b29b      	uxth	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4413      	add	r3, r2
 800361e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003628:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	8b7b      	ldrh	r3, [r7, #26]
 8003630:	429a      	cmp	r2, r3
 8003632:	d306      	bcc.n	8003642 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	8b7b      	ldrh	r3, [r7, #26]
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	619a      	str	r2, [r3, #24]
 8003640:	e002      	b.n	8003648 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d123      	bne.n	8003698 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	83fb      	strh	r3, [r7, #30]
 800366c:	8bfb      	ldrh	r3, [r7, #30]
 800366e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003672:	83fb      	strh	r3, [r7, #30]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	8bfb      	ldrh	r3, [r7, #30]
 8003684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003694:	b29b      	uxth	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11f      	bne.n	80036e2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036bc:	83bb      	strh	r3, [r7, #28]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	441a      	add	r2, r3
 80036cc:	8bbb      	ldrh	r3, [r7, #28]
 80036ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6959      	ldr	r1, [r3, #20]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	895a      	ldrh	r2, [r3, #10]
 80036f4:	8b7b      	ldrh	r3, [r7, #26]
 80036f6:	f004 fe28 	bl	800834a <USB_ReadPMA>
    }
  }

  return count;
 80036fa:	8b7b      	ldrh	r3, [r7, #26]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b092      	sub	sp, #72	; 0x48
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8130 	beq.w	800397e <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	4413      	add	r3, r2
 8003738:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003742:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800374a:	429a      	cmp	r2, r3
 800374c:	d906      	bls.n	800375c <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003754:	1ad2      	subs	r2, r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	619a      	str	r2, [r3, #24]
 800375a:	e002      	b.n	8003762 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12c      	bne.n	80037c4 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f006 fc8a 	bl	800a08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 822d 	beq.w	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379c:	827b      	strh	r3, [r7, #18]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	8a7b      	ldrh	r3, [r7, #18]
 80037ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	b29b      	uxth	r3, r3
 80037c0:	8013      	strh	r3, [r2, #0]
 80037c2:	e20b      	b.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01f      	beq.n	800380e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	441a      	add	r2, r3
 80037f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 81e1 	bne.w	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003820:	441a      	add	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800382c:	441a      	add	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6a1a      	ldr	r2, [r3, #32]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	429a      	cmp	r2, r3
 800383c:	d309      	bcc.n	8003852 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	6a1a      	ldr	r2, [r3, #32]
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	621a      	str	r2, [r3, #32]
 8003850:	e014      	b.n	800387c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800385a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003866:	e009      	b.n	800387c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d155      	bne.n	8003930 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4413      	add	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	00da      	lsls	r2, r3, #3
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d112      	bne.n	80038d8 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038bc:	b29a      	uxth	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	e047      	b.n	8003968 <HAL_PCD_EP_DB_Transmit+0x264>
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	2b3e      	cmp	r3, #62	; 0x3e
 80038dc:	d811      	bhi.n	8003902 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	3301      	adds	r3, #1
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	029b      	lsls	r3, r3, #10
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	e032      	b.n	8003968 <HAL_PCD_EP_DB_Transmit+0x264>
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_PCD_EP_DB_Transmit+0x214>
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	b29b      	uxth	r3, r3
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	b29b      	uxth	r3, r3
 8003920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003928:	b29a      	uxth	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e01b      	b.n	8003968 <HAL_PCD_EP_DB_Transmit+0x264>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d117      	bne.n	8003968 <HAL_PCD_EP_DB_Transmit+0x264>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	623b      	str	r3, [r7, #32]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	4413      	add	r3, r2
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	00da      	lsls	r2, r3, #3
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	4413      	add	r3, r2
 800395a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	b29a      	uxth	r2, r3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6959      	ldr	r1, [r3, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	891a      	ldrh	r2, [r3, #8]
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	b29b      	uxth	r3, r3
 8003978:	f004 fca6 	bl	80082c8 <USB_WritePMA>
 800397c:	e12e      	b.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	4413      	add	r3, r2
 8003998:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d306      	bcc.n	80039bc <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	619a      	str	r2, [r3, #24]
 80039ba:	e002      	b.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d12c      	bne.n	8003a24 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f006 fb5a 	bl	800a08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 80fd 	bne.w	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	8013      	strh	r3, [r2, #0]
 8003a22:	e0db      	b.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11f      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a48:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 80b1 	bne.w	8003bdc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a80:	441a      	add	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a8c:	441a      	add	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6a1a      	ldr	r2, [r3, #32]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d309      	bcc.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	621a      	str	r2, [r3, #32]
 8003ab0:	e014      	b.n	8003adc <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ac6:	e009      	b.n	8003adc <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d155      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x492>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	647b      	str	r3, [r7, #68]	; 0x44
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afe:	4413      	add	r3, r2
 8003b00:	647b      	str	r3, [r7, #68]	; 0x44
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	00da      	lsls	r2, r3, #3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d112      	bne.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x43a>
 8003b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3a:	801a      	strh	r2, [r3, #0]
 8003b3c:	e044      	b.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b3e      	cmp	r3, #62	; 0x3e
 8003b42:	d811      	bhi.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x464>
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x456>
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	3301      	adds	r3, #1
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e02f      	b.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	029b      	lsls	r3, r3, #10
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	e018      	b.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d114      	bne.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	4413      	add	r3, r2
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	00da      	lsls	r2, r3, #3
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	4413      	add	r3, r2
 8003bba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6959      	ldr	r1, [r3, #20]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	895a      	ldrh	r2, [r3, #10]
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f004 fb76 	bl	80082c8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf6:	823b      	strh	r3, [r7, #16]
 8003bf8:	8a3b      	ldrh	r3, [r7, #16]
 8003bfa:	f083 0310 	eor.w	r3, r3, #16
 8003bfe:	823b      	strh	r3, [r7, #16]
 8003c00:	8a3b      	ldrh	r3, [r7, #16]
 8003c02:	f083 0320 	eor.w	r3, r3, #32
 8003c06:	823b      	strh	r3, [r7, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	8a3b      	ldrh	r3, [r7, #16]
 8003c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3748      	adds	r7, #72	; 0x48
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	817b      	strh	r3, [r7, #10]
 8003c44:	4613      	mov	r3, r2
 8003c46:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c48:	897b      	ldrh	r3, [r7, #10]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c54:	897b      	ldrh	r3, [r7, #10]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e009      	b.n	8003c80 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c6c:	897a      	ldrh	r2, [r7, #10]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c80:	893b      	ldrh	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	80da      	strh	r2, [r3, #6]
 8003c94:	e00b      	b.n	8003cae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d141      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2a:	d131      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d2c:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	4a46      	ldr	r2, [pc, #280]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3c:	4b43      	ldr	r3, [pc, #268]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d44:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d4c:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2232      	movs	r2, #50	; 0x32
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	0c9b      	lsrs	r3, r3, #18
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d62:	e002      	b.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d102      	bne.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f2      	bne.n	8003d64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d7e:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d158      	bne.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e057      	b.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d90:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d96:	4a2d      	ldr	r2, [pc, #180]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003da0:	e04d      	b.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d141      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d131      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbe:	4a23      	ldr	r2, [pc, #140]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc8:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2232      	movs	r2, #50	; 0x32
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	0c9b      	lsrs	r3, r3, #18
 8003dea:	3301      	adds	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dee:	e002      	b.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df6:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d102      	bne.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f2      	bne.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d112      	bne.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e011      	b.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e2c:	e007      	b.n	8003e3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e36:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	20000000 	.word	0x20000000
 8003e54:	431bde83 	.word	0x431bde83

08003e58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e66:	6093      	str	r3, [r2, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e308      	b.n	800449c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d075      	beq.n	8003f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e96:	4ba3      	ldr	r3, [pc, #652]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea0:	4ba0      	ldr	r3, [pc, #640]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d102      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3e>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d002      	beq.n	8003ebc <HAL_RCC_OscConfig+0x44>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	4b99      	ldr	r3, [pc, #612]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05b      	beq.n	8003f80 <HAL_RCC_OscConfig+0x108>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d157      	bne.n	8003f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e2e3      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d106      	bne.n	8003eec <HAL_RCC_OscConfig+0x74>
 8003ede:	4b91      	ldr	r3, [pc, #580]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a90      	ldr	r2, [pc, #576]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e01d      	b.n	8003f28 <HAL_RCC_OscConfig+0xb0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x98>
 8003ef6:	4b8b      	ldr	r3, [pc, #556]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a8a      	ldr	r2, [pc, #552]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0xb0>
 8003f10:	4b84      	ldr	r3, [pc, #528]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a83      	ldr	r2, [pc, #524]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a80      	ldr	r2, [pc, #512]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe f89e 	bl	8002070 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fe f89a 	bl	8002070 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e2a8      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4a:	4b76      	ldr	r3, [pc, #472]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0xc0>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe f88a 	bl	8002070 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fe f886 	bl	8002070 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e294      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f72:	4b6c      	ldr	r3, [pc, #432]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0xe8>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d075      	beq.n	800407a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8e:	4b65      	ldr	r3, [pc, #404]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f98:	4b62      	ldr	r3, [pc, #392]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d102      	bne.n	8003fae <HAL_RCC_OscConfig+0x136>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x13c>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11f      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x154>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e267      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b55      	ldr	r3, [pc, #340]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	4952      	ldr	r1, [pc, #328]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <HAL_RCC_OscConfig+0x2b0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd fff7 	bl	8001fd8 <HAL_InitTick>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d043      	beq.n	8004078 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e253      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ffc:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a48      	ldr	r2, [pc, #288]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe f832 	bl	8002070 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fe f82e 	bl	8002070 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e23c      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	4939      	ldr	r1, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
 8004042:	e01a      	b.n	800407a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a36      	ldr	r2, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe f80e 	bl	8002070 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe f80a 	bl	8002070 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e218      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800406a:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1e0>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d03c      	beq.n	8004100 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004094:	4a23      	ldr	r2, [pc, #140]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd ffe7 	bl	8002070 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fd ffe3 	bl	8002070 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1f1      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ef      	beq.n	80040a6 <HAL_RCC_OscConfig+0x22e>
 80040c6:	e01b      	b.n	8004100 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd ffca 	bl	8002070 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fd ffc6 	bl	8002070 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1d4      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ef      	bne.n	80040e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80ab 	beq.w	8004264 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004112:	4b04      	ldr	r3, [pc, #16]	; (8004124 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_RCC_OscConfig+0x2b4>
 800411e:	2301      	movs	r3, #1
 8004120:	e005      	b.n	800412e <HAL_RCC_OscConfig+0x2b6>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	20000004 	.word	0x20000004
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	4baf      	ldr	r3, [pc, #700]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	4aae      	ldr	r2, [pc, #696]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413c:	6593      	str	r3, [r2, #88]	; 0x58
 800413e:	4bac      	ldr	r3, [pc, #688]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800414a:	2301      	movs	r3, #1
 800414c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800414e:	4ba9      	ldr	r3, [pc, #676]	; (80043f4 <HAL_RCC_OscConfig+0x57c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d118      	bne.n	800418c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415a:	4ba6      	ldr	r3, [pc, #664]	; (80043f4 <HAL_RCC_OscConfig+0x57c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4aa5      	ldr	r2, [pc, #660]	; (80043f4 <HAL_RCC_OscConfig+0x57c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004166:	f7fd ff83 	bl	8002070 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416e:	f7fd ff7f 	bl	8002070 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e18d      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004180:	4b9c      	ldr	r3, [pc, #624]	; (80043f4 <HAL_RCC_OscConfig+0x57c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d108      	bne.n	80041a6 <HAL_RCC_OscConfig+0x32e>
 8004194:	4b96      	ldr	r3, [pc, #600]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	4a95      	ldr	r2, [pc, #596]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a4:	e024      	b.n	80041f0 <HAL_RCC_OscConfig+0x378>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d110      	bne.n	80041d0 <HAL_RCC_OscConfig+0x358>
 80041ae:	4b90      	ldr	r3, [pc, #576]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	4a8e      	ldr	r2, [pc, #568]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041be:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	4a8a      	ldr	r2, [pc, #552]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ce:	e00f      	b.n	80041f0 <HAL_RCC_OscConfig+0x378>
 80041d0:	4b87      	ldr	r3, [pc, #540]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	4a86      	ldr	r2, [pc, #536]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e0:	4b83      	ldr	r3, [pc, #524]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	4a82      	ldr	r2, [pc, #520]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d016      	beq.n	8004226 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd ff3a 	bl	8002070 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004200:	f7fd ff36 	bl	8002070 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e142      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004216:	4b76      	ldr	r3, [pc, #472]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ed      	beq.n	8004200 <HAL_RCC_OscConfig+0x388>
 8004224:	e015      	b.n	8004252 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fd ff23 	bl	8002070 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fd ff1f 	bl	8002070 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e12b      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ed      	bne.n	800422e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004252:	7ffb      	ldrb	r3, [r7, #31]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4a64      	ldr	r2, [pc, #400]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d03c      	beq.n	80042ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004278:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800427a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800427e:	4a5c      	ldr	r2, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fef2 	bl	8002070 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004290:	f7fd feee 	bl	8002070 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0fc      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80042a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <HAL_RCC_OscConfig+0x418>
 80042b0:	e01b      	b.n	80042ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042b2:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80042b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042b8:	4a4d      	ldr	r2, [pc, #308]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd fed5 	bl	8002070 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ca:	f7fd fed1 	bl	8002070 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0df      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042dc:	4b44      	ldr	r3, [pc, #272]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80042de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1ef      	bne.n	80042ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80d3 	beq.w	800449a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f4:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 030c 	and.w	r3, r3, #12
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	f000 808d 	beq.w	800441c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d15a      	bne.n	80043c0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430a:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fd feab 	bl	8002070 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431e:	f7fd fea7 	bl	8002070 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0b5      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004330:	4b2f      	ldr	r3, [pc, #188]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_RCC_OscConfig+0x580>)
 8004342:	4013      	ands	r3, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6a11      	ldr	r1, [r2, #32]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800434c:	3a01      	subs	r2, #1
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004356:	0212      	lsls	r2, r2, #8
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800435e:	0852      	lsrs	r2, r2, #1
 8004360:	3a01      	subs	r2, #1
 8004362:	0552      	lsls	r2, r2, #21
 8004364:	4311      	orrs	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0652      	lsls	r2, r2, #25
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004376:	06d2      	lsls	r2, r2, #27
 8004378:	430a      	orrs	r2, r1
 800437a:	491d      	ldr	r1, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd fe6a 	bl	8002070 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fe66 	bl	8002070 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e074      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x528>
 80043be:	e06c      	b.n	800449a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_RCC_OscConfig+0x578>)
 80043de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fe42 	bl	8002070 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ee:	e00e      	b.n	800440e <HAL_RCC_OscConfig+0x596>
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40007000 	.word	0x40007000
 80043f8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fd fe38 	bl	8002070 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e046      	b.n	800449c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_OscConfig+0x62c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x584>
 800441a:	e03e      	b.n	800449a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e039      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_RCC_OscConfig+0x62c>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 0203 	and.w	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	429a      	cmp	r2, r3
 800443a:	d12c      	bne.n	8004496 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	3b01      	subs	r3, #1
 8004448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d123      	bne.n	8004496 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d11b      	bne.n	8004496 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d113      	bne.n	8004496 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d109      	bne.n	8004496 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e11e      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b91      	ldr	r3, [pc, #580]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d910      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b8e      	ldr	r3, [pc, #568]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 020f 	bic.w	r2, r3, #15
 80044d6:	498c      	ldr	r1, [pc, #560]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b8a      	ldr	r3, [pc, #552]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e106      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d073      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d129      	bne.n	8004558 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004504:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0f4      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004514:	f000 f966 	bl	80047e4 <RCC_GetSysClockFreqFromPLLSource>
 8004518:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4a7c      	ldr	r2, [pc, #496]	; (8004710 <HAL_RCC_ClockConfig+0x268>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d93f      	bls.n	80045a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004522:	4b7a      	ldr	r3, [pc, #488]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d033      	beq.n	80045a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800453e:	2b00      	cmp	r3, #0
 8004540:	d12f      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004542:	4b72      	ldr	r3, [pc, #456]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800454a:	4a70      	ldr	r2, [pc, #448]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 800454c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004550:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e024      	b.n	80045a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d107      	bne.n	8004570 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004560:	4b6a      	ldr	r3, [pc, #424]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0c6      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004570:	4b66      	ldr	r3, [pc, #408]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0be      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004580:	f000 f8ce 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 8004584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4a61      	ldr	r2, [pc, #388]	; (8004710 <HAL_RCC_ClockConfig+0x268>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d909      	bls.n	80045a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800458e:	4b5f      	ldr	r3, [pc, #380]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004596:	4a5d      	ldr	r2, [pc, #372]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b5a      	ldr	r3, [pc, #360]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4957      	ldr	r1, [pc, #348]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b4:	f7fd fd5c 	bl	8002070 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fd fd58 	bl	8002070 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e095      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b4e      	ldr	r3, [pc, #312]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d023      	beq.n	8004638 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045fc:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004606:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004614:	4b3d      	ldr	r3, [pc, #244]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800461c:	4a3b      	ldr	r2, [pc, #236]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 800461e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004624:	4b39      	ldr	r3, [pc, #228]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4936      	ldr	r1, [pc, #216]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
 8004636:	e008      	b.n	800464a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d105      	bne.n	800464a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	4a32      	ldr	r2, [pc, #200]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 8004644:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004648:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800464a:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d21d      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 020f 	bic.w	r2, r3, #15
 8004660:	4929      	ldr	r1, [pc, #164]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004668:	f7fd fd02 	bl	8002070 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7fd fcfe 	bl	8002070 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e03b      	b.n	80046fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d1ed      	bne.n	8004670 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a0:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4917      	ldr	r1, [pc, #92]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	490f      	ldr	r1, [pc, #60]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046d2:	f000 f825 	bl	8004720 <HAL_RCC_GetSysClockFreq>
 80046d6:	4601      	mov	r1, r0
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <HAL_RCC_ClockConfig+0x26c>)
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	fa21 f303 	lsr.w	r3, r1, r3
 80046ee:	4a0a      	ldr	r2, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x270>)
 80046f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_RCC_ClockConfig+0x274>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fd fc6e 	bl	8001fd8 <HAL_InitTick>
 80046fc:	4603      	mov	r3, r0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
 8004710:	04c4b400 	.word	0x04c4b400
 8004714:	0800a694 	.word	0x0800a694
 8004718:	20000000 	.word	0x20000000
 800471c:	20000004 	.word	0x20000004

08004720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b04      	cmp	r3, #4
 8004730:	d102      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e047      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d102      	bne.n	800474a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004744:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	e03e      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d136      	bne.n	80047c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004756:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	3301      	adds	r3, #1
 800476c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d10c      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800477e:	68d2      	ldr	r2, [r2, #12]
 8004780:	0a12      	lsrs	r2, r2, #8
 8004782:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	617b      	str	r3, [r7, #20]
      break;
 800478c:	e00c      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800478e:	4a13      	ldr	r2, [pc, #76]	; (80047dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004798:	68d2      	ldr	r2, [r2, #12]
 800479a:	0a12      	lsrs	r2, r2, #8
 800479c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	0e5b      	lsrs	r3, r3, #25
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	3301      	adds	r3, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e001      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047c8:	693b      	ldr	r3, [r7, #16]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
 80047dc:	00f42400 	.word	0x00f42400
 80047e0:	007a1200 	.word	0x007a1200

080047e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d10c      	bne.n	8004822 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004808:	4a17      	ldr	r2, [pc, #92]	; (8004868 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	4a14      	ldr	r2, [pc, #80]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004812:	68d2      	ldr	r2, [r2, #12]
 8004814:	0a12      	lsrs	r2, r2, #8
 8004816:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
    break;
 8004820:	e00c      	b.n	800483c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004822:	4a12      	ldr	r2, [pc, #72]	; (800486c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	4a0e      	ldr	r2, [pc, #56]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	0a12      	lsrs	r2, r2, #8
 8004830:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    break;
 800483a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004856:	687b      	ldr	r3, [r7, #4]
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40021000 	.word	0x40021000
 8004868:	007a1200 	.word	0x007a1200
 800486c:	00f42400 	.word	0x00f42400

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004878:	2300      	movs	r3, #0
 800487a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487c:	2300      	movs	r3, #0
 800487e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8098 	beq.w	80049be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004892:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4b40      	ldr	r3, [pc, #256]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	4a3f      	ldr	r2, [pc, #252]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ba:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a39      	ldr	r2, [pc, #228]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c6:	f7fd fbd3 	bl	8002070 <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048cc:	e009      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fd fbcf 	bl	8002070 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d902      	bls.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	74fb      	strb	r3, [r7, #19]
        break;
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d159      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f4:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01e      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d019      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004910:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491c:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800492c:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800493c:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fb8f 	bl	8002070 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004954:	e00b      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fb8b 	bl	8002070 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d902      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	74fb      	strb	r3, [r7, #19]
            break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ec      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004998:	e008      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	74bb      	strb	r3, [r7, #18]
 800499e:	e005      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ac:	7c7b      	ldrb	r3, [r7, #17]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d105      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b2:	4ba6      	ldr	r3, [pc, #664]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	4aa5      	ldr	r2, [pc, #660]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ca:	4ba0      	ldr	r3, [pc, #640]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f023 0203 	bic.w	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	499c      	ldr	r1, [pc, #624]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ec:	4b97      	ldr	r3, [pc, #604]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f023 020c 	bic.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4994      	ldr	r1, [pc, #592]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a0e:	4b8f      	ldr	r3, [pc, #572]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	498b      	ldr	r1, [pc, #556]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a30:	4b86      	ldr	r3, [pc, #536]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4983      	ldr	r1, [pc, #524]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a52:	4b7e      	ldr	r3, [pc, #504]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	497a      	ldr	r1, [pc, #488]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a74:	4b75      	ldr	r3, [pc, #468]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	4972      	ldr	r1, [pc, #456]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a96:	4b6d      	ldr	r3, [pc, #436]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4969      	ldr	r1, [pc, #420]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ab8:	4b64      	ldr	r3, [pc, #400]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4961      	ldr	r1, [pc, #388]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ada:	4b5c      	ldr	r3, [pc, #368]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	4958      	ldr	r1, [pc, #352]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004afc:	4b53      	ldr	r3, [pc, #332]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	4950      	ldr	r1, [pc, #320]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a4a      	ldr	r2, [pc, #296]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b34:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4942      	ldr	r1, [pc, #264]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b54:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a3c      	ldr	r2, [pc, #240]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b6c:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	4934      	ldr	r1, [pc, #208]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8c:	4b2f      	ldr	r3, [pc, #188]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a2e      	ldr	r2, [pc, #184]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d015      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	4926      	ldr	r1, [pc, #152]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a20      	ldr	r2, [pc, #128]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	4918      	ldr	r1, [pc, #96]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	490a      	ldr	r1, [pc, #40]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c32:	d105      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e049      	b.n	8004cf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc ffde 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 fde2 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e04a      	b.n	8004dae <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <HAL_TIM_Base_Start_IT+0xbc>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d018      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x6c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d013      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x6c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00e      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x6c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d009      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x6c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d004      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x6c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d115      	bne.n	8004d98 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b06      	cmp	r3, #6
 8004d7c:	d015      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0xaa>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d011      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	e008      	b.n	8004daa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e000      	b.n	8004dac <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40013400 	.word	0x40013400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	00010007 	.word	0x00010007

08004dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e049      	b.n	8004e7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fc fe12 	bl	8001a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f000 fd20 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x24>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e03c      	b.n	8004f22 <HAL_TIM_PWM_Start+0x9e>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d109      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x3e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e02f      	b.n	8004f22 <HAL_TIM_PWM_Start+0x9e>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x58>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e022      	b.n	8004f22 <HAL_TIM_PWM_Start+0x9e>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d109      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0x72>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e015      	b.n	8004f22 <HAL_TIM_PWM_Start+0x9e>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start+0x8c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e008      	b.n	8004f22 <HAL_TIM_PWM_Start+0x9e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e097      	b.n	800505a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start+0xb6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	e023      	b.n	8004f82 <HAL_TIM_PWM_Start+0xfe>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Start+0xc6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f48:	e01b      	b.n	8004f82 <HAL_TIM_PWM_Start+0xfe>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Start+0xd6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	e013      	b.n	8004f82 <HAL_TIM_PWM_Start+0xfe>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_PWM_Start+0xe6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f68:	e00b      	b.n	8004f82 <HAL_TIM_PWM_Start+0xfe>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xf6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f78:	e003      	b.n	8004f82 <HAL_TIM_PWM_Start+0xfe>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ffea 	bl	8005f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a33      	ldr	r2, [pc, #204]	; (8005064 <HAL_TIM_PWM_Start+0x1e0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x13e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a32      	ldr	r2, [pc, #200]	; (8005068 <HAL_TIM_PWM_Start+0x1e4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x13e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a30      	ldr	r2, [pc, #192]	; (800506c <HAL_TIM_PWM_Start+0x1e8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x13e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2f      	ldr	r2, [pc, #188]	; (8005070 <HAL_TIM_PWM_Start+0x1ec>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x13e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	; (8005074 <HAL_TIM_PWM_Start+0x1f0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x142>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_TIM_PWM_Start+0x144>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_TIM_PWM_Start+0x1e0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d018      	beq.n	8005018 <HAL_TIM_PWM_Start+0x194>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d013      	beq.n	8005018 <HAL_TIM_PWM_Start+0x194>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a20      	ldr	r2, [pc, #128]	; (8005078 <HAL_TIM_PWM_Start+0x1f4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_TIM_PWM_Start+0x194>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <HAL_TIM_PWM_Start+0x1f8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d009      	beq.n	8005018 <HAL_TIM_PWM_Start+0x194>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a17      	ldr	r2, [pc, #92]	; (8005068 <HAL_TIM_PWM_Start+0x1e4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <HAL_TIM_PWM_Start+0x194>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <HAL_TIM_PWM_Start+0x1e8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d115      	bne.n	8005044 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	4b18      	ldr	r3, [pc, #96]	; (8005080 <HAL_TIM_PWM_Start+0x1fc>)
 8005020:	4013      	ands	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b06      	cmp	r3, #6
 8005028:	d015      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1d2>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d011      	beq.n	8005056 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005042:	e008      	b.n	8005056 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e000      	b.n	8005058 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	00010007 	.word	0x00010007

08005084 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e097      	b.n	80051c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fc fd01 	bl	8001ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80050c8:	f023 0307 	bic.w	r3, r3, #7
 80050cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 fbbd 	bl	8005858 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	4313      	orrs	r3, r2
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005124:	f023 030c 	bic.w	r3, r3, #12
 8005128:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	4313      	orrs	r3, r2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	011a      	lsls	r2, r3, #4
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	031b      	lsls	r3, r3, #12
 8005154:	4313      	orrs	r3, r2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4313      	orrs	r3, r2
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d110      	bne.n	8005222 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d102      	bne.n	800520c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005206:	7b7b      	ldrb	r3, [r7, #13]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d001      	beq.n	8005210 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e068      	b.n	80052e2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005220:	e031      	b.n	8005286 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d110      	bne.n	800524a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005228:	7bbb      	ldrb	r3, [r7, #14]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d102      	bne.n	8005234 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800522e:	7b3b      	ldrb	r3, [r7, #12]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e054      	b.n	80052e2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005248:	e01d      	b.n	8005286 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d108      	bne.n	8005262 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d105      	bne.n	8005262 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d102      	bne.n	8005262 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800525c:	7b3b      	ldrb	r3, [r7, #12]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e03d      	b.n	80052e2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_TIM_Encoder_Start+0xc2>
 800528c:	2b04      	cmp	r3, #4
 800528e:	d008      	beq.n	80052a2 <HAL_TIM_Encoder_Start+0xd2>
 8005290:	e00f      	b.n	80052b2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fe62 	bl	8005f64 <TIM_CCxChannelCmd>
      break;
 80052a0:	e016      	b.n	80052d0 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2201      	movs	r2, #1
 80052a8:	2104      	movs	r1, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fe5a 	bl	8005f64 <TIM_CCxChannelCmd>
      break;
 80052b0:	e00e      	b.n	80052d0 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fe52 	bl	8005f64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2201      	movs	r2, #1
 80052c6:	2104      	movs	r1, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fe4b 	bl	8005f64 <TIM_CCxChannelCmd>
      break;
 80052ce:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d122      	bne.n	8005346 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d11b      	bne.n	8005346 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f06f 0202 	mvn.w	r2, #2
 8005316:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fa75 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005332:	e005      	b.n	8005340 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa67 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa78 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b04      	cmp	r3, #4
 8005352:	d122      	bne.n	800539a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d11b      	bne.n	800539a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f06f 0204 	mvn.w	r2, #4
 800536a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa4b 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 8005386:	e005      	b.n	8005394 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fa3d 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa4e 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d122      	bne.n	80053ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d11b      	bne.n	80053ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0208 	mvn.w	r2, #8
 80053be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2204      	movs	r2, #4
 80053c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fa21 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 80053da:	e005      	b.n	80053e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa13 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa24 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d122      	bne.n	8005442 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d11b      	bne.n	8005442 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0210 	mvn.w	r2, #16
 8005412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2208      	movs	r2, #8
 8005418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f9f7 	bl	800581c <HAL_TIM_IC_CaptureCallback>
 800542e:	e005      	b.n	800543c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f9e9 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f9fa 	bl	8005830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10e      	bne.n	800546e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f06f 0201 	mvn.w	r2, #1
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fc f933 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d10e      	bne.n	800549a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d107      	bne.n	800549a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 feb7 	bl	8006208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 feaa 	bl	800621c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f9a8 	bl	8005844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0220 	mvn.w	r2, #32
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fe6a 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552e:	d10f      	bne.n	8005550 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe70 	bl	8006230 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800555e:	d10f      	bne.n	8005580 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fe62 	bl	8006244 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558e:	d10f      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fe54 	bl	8006258 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055be:	d10f      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fe46 	bl	800626c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055fe:	2302      	movs	r3, #2
 8005600:	e0fd      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b14      	cmp	r3, #20
 800560e:	f200 80f0 	bhi.w	80057f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800566d 	.word	0x0800566d
 800561c:	080057f3 	.word	0x080057f3
 8005620:	080057f3 	.word	0x080057f3
 8005624:	080057f3 	.word	0x080057f3
 8005628:	080056ad 	.word	0x080056ad
 800562c:	080057f3 	.word	0x080057f3
 8005630:	080057f3 	.word	0x080057f3
 8005634:	080057f3 	.word	0x080057f3
 8005638:	080056ef 	.word	0x080056ef
 800563c:	080057f3 	.word	0x080057f3
 8005640:	080057f3 	.word	0x080057f3
 8005644:	080057f3 	.word	0x080057f3
 8005648:	0800572f 	.word	0x0800572f
 800564c:	080057f3 	.word	0x080057f3
 8005650:	080057f3 	.word	0x080057f3
 8005654:	080057f3 	.word	0x080057f3
 8005658:	08005771 	.word	0x08005771
 800565c:	080057f3 	.word	0x080057f3
 8005660:	080057f3 	.word	0x080057f3
 8005664:	080057f3 	.word	0x080057f3
 8005668:	080057b1 	.word	0x080057b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f980 	bl	8005978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0208 	orr.w	r2, r2, #8
 8005686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0204 	bic.w	r2, r2, #4
 8005696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	619a      	str	r2, [r3, #24]
      break;
 80056aa:	e0a3      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f9f0 	bl	8005a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	619a      	str	r2, [r3, #24]
      break;
 80056ec:	e082      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fa59 	bl	8005bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0208 	orr.w	r2, r2, #8
 8005708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0204 	bic.w	r2, r2, #4
 8005718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	61da      	str	r2, [r3, #28]
      break;
 800572c:	e062      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fac1 	bl	8005cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	61da      	str	r2, [r3, #28]
      break;
 800576e:	e041      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb2a 	bl	8005dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0208 	orr.w	r2, r2, #8
 800578a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0204 	bic.w	r2, r2, #4
 800579a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057ae:	e021      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fb6e 	bl	8005e98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057f0:	e000      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80057f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop

08005808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3c      	ldr	r2, [pc, #240]	; (800595c <TIM_Base_SetConfig+0x104>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00b      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a39      	ldr	r2, [pc, #228]	; (8005960 <TIM_Base_SetConfig+0x108>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a38      	ldr	r2, [pc, #224]	; (8005964 <TIM_Base_SetConfig+0x10c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0x38>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a37      	ldr	r2, [pc, #220]	; (8005968 <TIM_Base_SetConfig+0x110>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2d      	ldr	r2, [pc, #180]	; (800595c <TIM_Base_SetConfig+0x104>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <TIM_Base_SetConfig+0x108>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a29      	ldr	r2, [pc, #164]	; (8005964 <TIM_Base_SetConfig+0x10c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a28      	ldr	r2, [pc, #160]	; (8005968 <TIM_Base_SetConfig+0x110>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a27      	ldr	r2, [pc, #156]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a26      	ldr	r2, [pc, #152]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a25      	ldr	r2, [pc, #148]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a10      	ldr	r2, [pc, #64]	; (800595c <TIM_Base_SetConfig+0x104>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_Base_SetConfig+0xe8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a11      	ldr	r2, [pc, #68]	; (8005968 <TIM_Base_SetConfig+0x110>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_Base_SetConfig+0xe8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_Base_SetConfig+0xe8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <TIM_Base_SetConfig+0x118>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_Base_SetConfig+0xe8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a0e      	ldr	r2, [pc, #56]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d103      	bne.n	8005948 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	615a      	str	r2, [r3, #20]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 0302 	bic.w	r3, r3, #2
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a2c      	ldr	r2, [pc, #176]	; (8005a84 <TIM_OC1_SetConfig+0x10c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00f      	beq.n	80059f8 <TIM_OC1_SetConfig+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <TIM_OC1_SetConfig+0x110>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00b      	beq.n	80059f8 <TIM_OC1_SetConfig+0x80>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <TIM_OC1_SetConfig+0x114>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d007      	beq.n	80059f8 <TIM_OC1_SetConfig+0x80>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <TIM_OC1_SetConfig+0x118>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC1_SetConfig+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a28      	ldr	r2, [pc, #160]	; (8005a94 <TIM_OC1_SetConfig+0x11c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d10c      	bne.n	8005a12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0308 	bic.w	r3, r3, #8
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <TIM_OC1_SetConfig+0x10c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00f      	beq.n	8005a3a <TIM_OC1_SetConfig+0xc2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <TIM_OC1_SetConfig+0x110>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00b      	beq.n	8005a3a <TIM_OC1_SetConfig+0xc2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <TIM_OC1_SetConfig+0x114>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d007      	beq.n	8005a3a <TIM_OC1_SetConfig+0xc2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <TIM_OC1_SetConfig+0x118>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d003      	beq.n	8005a3a <TIM_OC1_SetConfig+0xc2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <TIM_OC1_SetConfig+0x11c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d111      	bne.n	8005a5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0210 	bic.w	r2, r3, #16
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0320 	bic.w	r3, r3, #32
 8005ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_OC2_SetConfig+0x100>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC2_SetConfig+0x6c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_OC2_SetConfig+0x104>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10d      	bne.n	8005b20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <TIM_OC2_SetConfig+0x100>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00f      	beq.n	8005b48 <TIM_OC2_SetConfig+0xb0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <TIM_OC2_SetConfig+0x104>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_OC2_SetConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <TIM_OC2_SetConfig+0x108>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_OC2_SetConfig+0xb0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <TIM_OC2_SetConfig+0x10c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC2_SetConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <TIM_OC2_SetConfig+0x110>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40014400 	.word	0x40014400
 8005ba8:	40014800 	.word	0x40014800

08005bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <TIM_OC3_SetConfig+0xfc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_OC3_SetConfig+0x6a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a26      	ldr	r2, [pc, #152]	; (8005cac <TIM_OC3_SetConfig+0x100>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10d      	bne.n	8005c32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <TIM_OC3_SetConfig+0xfc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_OC3_SetConfig+0xae>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <TIM_OC3_SetConfig+0x100>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_OC3_SetConfig+0xae>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <TIM_OC3_SetConfig+0x104>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_OC3_SetConfig+0xae>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a19      	ldr	r2, [pc, #100]	; (8005cb4 <TIM_OC3_SetConfig+0x108>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC3_SetConfig+0xae>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <TIM_OC3_SetConfig+0x10c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d113      	bne.n	8005c82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <TIM_OC4_SetConfig+0x100>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC4_SetConfig+0x6c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <TIM_OC4_SetConfig+0x104>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10d      	bne.n	8005d44 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <TIM_OC4_SetConfig+0x100>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00f      	beq.n	8005d6c <TIM_OC4_SetConfig+0xb0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <TIM_OC4_SetConfig+0x104>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_OC4_SetConfig+0xb0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1b      	ldr	r2, [pc, #108]	; (8005dc4 <TIM_OC4_SetConfig+0x108>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_OC4_SetConfig+0xb0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <TIM_OC4_SetConfig+0x10c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_OC4_SetConfig+0xb0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a19      	ldr	r2, [pc, #100]	; (8005dcc <TIM_OC4_SetConfig+0x110>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d113      	bne.n	8005d94 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <TIM_OC5_SetConfig+0xb4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_OC5_SetConfig+0x7a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <TIM_OC5_SetConfig+0xb8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_OC5_SetConfig+0x7a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <TIM_OC5_SetConfig+0xbc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_OC5_SetConfig+0x7a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a14      	ldr	r2, [pc, #80]	; (8005e90 <TIM_OC5_SetConfig+0xc0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC5_SetConfig+0x7a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <TIM_OC5_SetConfig+0xc4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d109      	bne.n	8005e5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	051b      	lsls	r3, r3, #20
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <TIM_OC6_SetConfig+0xb8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00f      	beq.n	8005f14 <TIM_OC6_SetConfig+0x7c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <TIM_OC6_SetConfig+0xbc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <TIM_OC6_SetConfig+0x7c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <TIM_OC6_SetConfig+0xc0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <TIM_OC6_SetConfig+0x7c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <TIM_OC6_SetConfig+0xc4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC6_SetConfig+0x7c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <TIM_OC6_SetConfig+0xc8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d109      	bne.n	8005f28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e065      	b.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2b      	ldr	r2, [pc, #172]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1b      	ldr	r2, [pc, #108]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d013      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a12      	ldr	r2, [pc, #72]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d10c      	bne.n	8006082 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4313      	orrs	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40014000 	.word	0x40014000

080060b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e087      	b.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	041b      	lsls	r3, r3, #16
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a27      	ldr	r2, [pc, #156]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d106      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1d      	ldr	r2, [pc, #116]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d126      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	051b      	lsls	r3, r3, #20
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d106      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006290:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006294:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062b6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4013      	ands	r3, r2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062e4:	b084      	sub	sp, #16
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	f107 0014 	add.w	r0, r7, #20
 80062f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	b004      	add	sp, #16
 8006324:	4770      	bx	lr
	...

08006328 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006328:	b480      	push	{r7}
 800632a:	b09b      	sub	sp, #108	; 0x6c
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	2b03      	cmp	r3, #3
 8006358:	d81f      	bhi.n	800639a <USB_ActivateEndpoint+0x72>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <USB_ActivateEndpoint+0x38>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006371 	.word	0x08006371
 8006364:	0800638d 	.word	0x0800638d
 8006368:	080063a3 	.word	0x080063a3
 800636c:	0800637f 	.word	0x0800637f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006370:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006378:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800637c:	e012      	b.n	80063a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800637e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006382:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006386:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800638a:	e00b      	b.n	80063a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800638c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006394:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006398:	e004      	b.n	80063a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80063a0:	e000      	b.n	80063a4 <USB_ActivateEndpoint+0x7c>
      break;
 80063a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	b21b      	sxth	r3, r3
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063de:	b21a      	sxth	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	4313      	orrs	r3, r2
 80063e8:	b21b      	sxth	r3, r3
 80063ea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	7b1b      	ldrb	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 8149 	bne.w	80066ac <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8084 	beq.w	800652c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	4413      	add	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	00da      	lsls	r2, r3, #3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	88db      	ldrh	r3, [r3, #6]
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	b29b      	uxth	r3, r3
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	81fb      	strh	r3, [r7, #14]
 8006466:	89fb      	ldrh	r3, [r7, #14]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01b      	beq.n	80064a8 <USB_ActivateEndpoint+0x180>
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	81bb      	strh	r3, [r7, #12]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	441a      	add	r2, r3
 8006492:	89bb      	ldrh	r3, [r7, #12]
 8006494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d020      	beq.n	80064f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	813b      	strh	r3, [r7, #8]
 80064c8:	893b      	ldrh	r3, [r7, #8]
 80064ca:	f083 0320 	eor.w	r3, r3, #32
 80064ce:	813b      	strh	r3, [r7, #8]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	893b      	ldrh	r3, [r7, #8]
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
 80064f0:	e27f      	b.n	80069f2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006508:	817b      	strh	r3, [r7, #10]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	897b      	ldrh	r3, [r7, #10]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
 800652a:	e262      	b.n	80069f2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	4413      	add	r3, r2
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	00da      	lsls	r2, r3, #3
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	4413      	add	r3, r2
 800654a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	b29b      	uxth	r3, r3
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	4413      	add	r3, r2
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	00da      	lsls	r2, r3, #3
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	4413      	add	r3, r2
 800657e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d112      	bne.n	80065b2 <USB_ActivateEndpoint+0x28a>
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006596:	b29a      	uxth	r2, r3
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	e02f      	b.n	8006612 <USB_ActivateEndpoint+0x2ea>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b3e      	cmp	r3, #62	; 0x3e
 80065b8:	d813      	bhi.n	80065e2 <USB_ActivateEndpoint+0x2ba>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	663b      	str	r3, [r7, #96]	; 0x60
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <USB_ActivateEndpoint+0x2ac>
 80065ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d0:	3301      	adds	r3, #1
 80065d2:	663b      	str	r3, [r7, #96]	; 0x60
 80065d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	801a      	strh	r2, [r3, #0]
 80065e0:	e017      	b.n	8006612 <USB_ActivateEndpoint+0x2ea>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	663b      	str	r3, [r7, #96]	; 0x60
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <USB_ActivateEndpoint+0x2d4>
 80065f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f8:	3b01      	subs	r3, #1
 80065fa:	663b      	str	r3, [r7, #96]	; 0x60
 80065fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065fe:	b29b      	uxth	r3, r3
 8006600:	029b      	lsls	r3, r3, #10
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	83fb      	strh	r3, [r7, #30]
 8006620:	8bfb      	ldrh	r3, [r7, #30]
 8006622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01b      	beq.n	8006662 <USB_ActivateEndpoint+0x33a>
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	83bb      	strh	r3, [r7, #28]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	8bbb      	ldrh	r3, [r7, #28]
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800665a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006678:	837b      	strh	r3, [r7, #26]
 800667a:	8b7b      	ldrh	r3, [r7, #26]
 800667c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006680:	837b      	strh	r3, [r7, #26]
 8006682:	8b7b      	ldrh	r3, [r7, #26]
 8006684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006688:	837b      	strh	r3, [r7, #26]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	8b7b      	ldrh	r3, [r7, #26]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
 80066aa:	e1a2      	b.n	80069f2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066f8:	4413      	add	r3, r2
 80066fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	00da      	lsls	r2, r3, #3
 8006702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006704:	4413      	add	r3, r2
 8006706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670a:	657b      	str	r3, [r7, #84]	; 0x54
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	891b      	ldrh	r3, [r3, #8]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672c:	4413      	add	r3, r2
 800672e:	653b      	str	r3, [r7, #80]	; 0x50
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	00da      	lsls	r2, r3, #3
 8006736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006738:	4413      	add	r3, r2
 800673a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	895b      	ldrh	r3, [r3, #10]
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	b29b      	uxth	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 8091 	bne.w	800687c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006768:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800676a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01b      	beq.n	80067aa <USB_ActivateEndpoint+0x482>
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006788:	877b      	strh	r3, [r7, #58]	; 0x3a
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80067b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01b      	beq.n	80067fa <USB_ActivateEndpoint+0x4d2>
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	441a      	add	r2, r3
 80067e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006812:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006814:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006818:	86bb      	strh	r3, [r7, #52]	; 0x34
 800681a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800681c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006820:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	867b      	strh	r3, [r7, #50]	; 0x32
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	441a      	add	r2, r3
 8006864:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	b29b      	uxth	r3, r3
 8006878:	8013      	strh	r3, [r2, #0]
 800687a:	e0ba      	b.n	80069f2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800688c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01d      	beq.n	80068d4 <USB_ActivateEndpoint+0x5ac>
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80068e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01d      	beq.n	800692c <USB_ActivateEndpoint+0x604>
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	78db      	ldrb	r3, [r3, #3]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d024      	beq.n	800697e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800694e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006952:	f083 0320 	eor.w	r3, r3, #32
 8006956:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	441a      	add	r2, r3
 8006964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]
 800697c:	e01d      	b.n	80069ba <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80069f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	376c      	adds	r7, #108	; 0x6c
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b08d      	sub	sp, #52	; 0x34
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	7b1b      	ldrb	r3, [r3, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 808e 	bne.w	8006b34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d044      	beq.n	8006aaa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	81bb      	strh	r3, [r7, #12]
 8006a2e:	89bb      	ldrh	r3, [r7, #12]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <USB_DeactivateEndpoint+0x6c>
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4e:	817b      	strh	r3, [r7, #10]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a86:	813b      	strh	r3, [r7, #8]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	441a      	add	r2, r3
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	8013      	strh	r3, [r2, #0]
 8006aa8:	e192      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	827b      	strh	r3, [r7, #18]
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01b      	beq.n	8006afa <USB_DeactivateEndpoint+0xf6>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	823b      	strh	r3, [r7, #16]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8a3b      	ldrh	r3, [r7, #16]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	81fb      	strh	r3, [r7, #14]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e14d      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80a5 	bne.w	8006c88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	843b      	strh	r3, [r7, #32]
 8006b4c:	8c3b      	ldrh	r3, [r7, #32]
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01b      	beq.n	8006b8e <USB_DeactivateEndpoint+0x18a>
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	83fb      	strh	r3, [r7, #30]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	8bfb      	ldrh	r3, [r7, #30]
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	83bb      	strh	r3, [r7, #28]
 8006b9c:	8bbb      	ldrh	r3, [r7, #28]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <USB_DeactivateEndpoint+0x1da>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	837b      	strh	r3, [r7, #26]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	833b      	strh	r3, [r7, #24]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8b3b      	ldrh	r3, [r7, #24]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	82fb      	strh	r3, [r7, #22]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c64:	82bb      	strh	r3, [r7, #20]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8abb      	ldrh	r3, [r7, #20]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	e0a3      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <USB_DeactivateEndpoint+0x2d4>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <USB_DeactivateEndpoint+0x324>
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	847b      	strh	r3, [r7, #34]	; 0x22
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3734      	adds	r7, #52	; 0x34
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b0c4      	sub	sp, #272	; 0x110
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	6018      	str	r0, [r3, #0]
 8006de8:	463b      	mov	r3, r7
 8006dea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	f040 8566 	bne.w	80078c4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	463b      	mov	r3, r7
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d905      	bls.n	8006e14 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e12:	e004      	b.n	8006e1e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e1e:	463b      	mov	r3, r7
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	7b1b      	ldrb	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d12c      	bne.n	8006e82 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6959      	ldr	r1, [r3, #20]
 8006e2e:	463b      	mov	r3, r7
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	88da      	ldrh	r2, [r3, #6]
 8006e34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	1d38      	adds	r0, r7, #4
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f001 fa43 	bl	80082c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	1d3b      	adds	r3, r7, #4
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	4413      	add	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	00da      	lsls	r2, r3, #3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4413      	add	r3, r2
 8006e66:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006e6a:	f107 0310 	add.w	r3, r7, #16
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	f107 0310 	add.w	r3, r7, #16
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	f000 bcec 	b.w	800785a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	78db      	ldrb	r3, [r3, #3]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	f040 8356 	bne.w	800753a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e8e:	463b      	mov	r3, r7
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6a1a      	ldr	r2, [r3, #32]
 8006e94:	463b      	mov	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f240 82fa 	bls.w	8007494 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006ea0:	1d3b      	adds	r3, r7, #4
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6a1a      	ldr	r2, [r3, #32]
 8006ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef8:	1ad2      	subs	r2, r2, r3
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	463b      	mov	r3, r7
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 815e 	beq.w	80071d8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f1c:	1d3b      	adds	r3, r7, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
 8006f22:	463b      	mov	r3, r7
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d164      	bne.n	8006ff6 <USB_EPStartXfer+0x218>
 8006f2c:	1d3b      	adds	r3, r7, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f32:	1d3b      	adds	r3, r7, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	4413      	add	r3, r2
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	00da      	lsls	r2, r3, #3
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	4413      	add	r3, r2
 8006f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d112      	bne.n	8006f84 <USB_EPStartXfer+0x1a6>
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	e054      	b.n	800702e <USB_EPStartXfer+0x250>
 8006f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f88:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8a:	d817      	bhi.n	8006fbc <USB_EPStartXfer+0x1de>
 8006f8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <USB_EPStartXfer+0x1ce>
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	e038      	b.n	800702e <USB_EPStartXfer+0x250>
 8006fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <USB_EPStartXfer+0x1fe>
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	029b      	lsls	r3, r3, #10
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e01b      	b.n	800702e <USB_EPStartXfer+0x250>
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d116      	bne.n	800702e <USB_EPStartXfer+0x250>
 8007000:	1d3b      	adds	r3, r7, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700e:	4413      	add	r3, r2
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	463b      	mov	r3, r7
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	00da      	lsls	r2, r3, #3
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	4413      	add	r3, r2
 800701e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007022:	633b      	str	r3, [r7, #48]	; 0x30
 8007024:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007028:	b29a      	uxth	r2, r3
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800702e:	463b      	mov	r3, r7
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	895b      	ldrh	r3, [r3, #10]
 8007034:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007038:	463b      	mov	r3, r7
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6959      	ldr	r1, [r3, #20]
 800703e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007042:	b29b      	uxth	r3, r3
 8007044:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007048:	1d38      	adds	r0, r7, #4
 800704a:	6800      	ldr	r0, [r0, #0]
 800704c:	f001 f93c 	bl	80082c8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007050:	463b      	mov	r3, r7
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800705a:	441a      	add	r2, r3
 800705c:	463b      	mov	r3, r7
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	429a      	cmp	r2, r3
 8007070:	d90e      	bls.n	8007090 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8007072:	463b      	mov	r3, r7
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800707c:	463b      	mov	r3, r7
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6a1a      	ldr	r2, [r3, #32]
 8007082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	463b      	mov	r3, r7
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	621a      	str	r2, [r3, #32]
 800708e:	e008      	b.n	80070a2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007090:	463b      	mov	r3, r7
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800709a:	463b      	mov	r3, r7
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070a2:	463b      	mov	r3, r7
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d164      	bne.n	8007176 <USB_EPStartXfer+0x398>
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	1d3b      	adds	r3, r7, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	463b      	mov	r3, r7
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	00da      	lsls	r2, r3, #3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d112      	bne.n	8007104 <USB_EPStartXfer+0x326>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	e057      	b.n	80071b4 <USB_EPStartXfer+0x3d6>
 8007104:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007108:	2b3e      	cmp	r3, #62	; 0x3e
 800710a:	d817      	bhi.n	800713c <USB_EPStartXfer+0x35e>
 800710c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007116:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <USB_EPStartXfer+0x34e>
 8007122:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007126:	3301      	adds	r3, #1
 8007128:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800712c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007130:	b29b      	uxth	r3, r3
 8007132:	029b      	lsls	r3, r3, #10
 8007134:	b29a      	uxth	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	e03b      	b.n	80071b4 <USB_EPStartXfer+0x3d6>
 800713c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007146:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USB_EPStartXfer+0x37e>
 8007152:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007156:	3b01      	subs	r3, #1
 8007158:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800715c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007160:	b29b      	uxth	r3, r3
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	b29b      	uxth	r3, r3
 8007166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716e:	b29a      	uxth	r2, r3
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e01e      	b.n	80071b4 <USB_EPStartXfer+0x3d6>
 8007176:	463b      	mov	r3, r7
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d119      	bne.n	80071b4 <USB_EPStartXfer+0x3d6>
 8007180:	1d3b      	adds	r3, r7, #4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	4413      	add	r3, r2
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
 8007198:	463b      	mov	r3, r7
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00da      	lsls	r2, r3, #3
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	891b      	ldrh	r3, [r3, #8]
 80071ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071be:	463b      	mov	r3, r7
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6959      	ldr	r1, [r3, #20]
 80071c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80071ce:	1d38      	adds	r0, r7, #4
 80071d0:	6800      	ldr	r0, [r0, #0]
 80071d2:	f001 f879 	bl	80082c8 <USB_WritePMA>
 80071d6:	e340      	b.n	800785a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071d8:	463b      	mov	r3, r7
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d164      	bne.n	80072ac <USB_EPStartXfer+0x4ce>
 80071e2:	1d3b      	adds	r3, r7, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e8:	1d3b      	adds	r3, r7, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f6:	4413      	add	r3, r2
 80071f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071fa:	463b      	mov	r3, r7
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	00da      	lsls	r2, r3, #3
 8007202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007204:	4413      	add	r3, r2
 8007206:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800720a:	64bb      	str	r3, [r7, #72]	; 0x48
 800720c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007210:	2b00      	cmp	r3, #0
 8007212:	d112      	bne.n	800723a <USB_EPStartXfer+0x45c>
 8007214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800721e:	b29a      	uxth	r2, r3
 8007220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800722e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007232:	b29a      	uxth	r2, r3
 8007234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	e057      	b.n	80072ea <USB_EPStartXfer+0x50c>
 800723a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800723e:	2b3e      	cmp	r3, #62	; 0x3e
 8007240:	d817      	bhi.n	8007272 <USB_EPStartXfer+0x494>
 8007242:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800724c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <USB_EPStartXfer+0x484>
 8007258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725c:	3301      	adds	r3, #1
 800725e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007266:	b29b      	uxth	r3, r3
 8007268:	029b      	lsls	r3, r3, #10
 800726a:	b29a      	uxth	r2, r3
 800726c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	e03b      	b.n	80072ea <USB_EPStartXfer+0x50c>
 8007272:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800727c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USB_EPStartXfer+0x4b4>
 8007288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728c:	3b01      	subs	r3, #1
 800728e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007296:	b29b      	uxth	r3, r3
 8007298:	029b      	lsls	r3, r3, #10
 800729a:	b29b      	uxth	r3, r3
 800729c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	e01e      	b.n	80072ea <USB_EPStartXfer+0x50c>
 80072ac:	463b      	mov	r3, r7
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d119      	bne.n	80072ea <USB_EPStartXfer+0x50c>
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	657b      	str	r3, [r7, #84]	; 0x54
 80072bc:	1d3b      	adds	r3, r7, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ca:	4413      	add	r3, r2
 80072cc:	657b      	str	r3, [r7, #84]	; 0x54
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	00da      	lsls	r2, r3, #3
 80072d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d8:	4413      	add	r3, r2
 80072da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072de:	653b      	str	r3, [r7, #80]	; 0x50
 80072e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072ea:	463b      	mov	r3, r7
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	891b      	ldrh	r3, [r3, #8]
 80072f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f4:	463b      	mov	r3, r7
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6959      	ldr	r1, [r3, #20]
 80072fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007304:	1d38      	adds	r0, r7, #4
 8007306:	6800      	ldr	r0, [r0, #0]
 8007308:	f000 ffde 	bl	80082c8 <USB_WritePMA>
            ep->xfer_buff += len;
 800730c:	463b      	mov	r3, r7
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695a      	ldr	r2, [r3, #20]
 8007312:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007316:	441a      	add	r2, r3
 8007318:	463b      	mov	r3, r7
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800731e:	463b      	mov	r3, r7
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d90e      	bls.n	800734c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800732e:	463b      	mov	r3, r7
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8007338:	463b      	mov	r3, r7
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	621a      	str	r2, [r3, #32]
 800734a:	e008      	b.n	800735e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	647b      	str	r3, [r7, #68]	; 0x44
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d164      	bne.n	8007438 <USB_EPStartXfer+0x65a>
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007374:	1d3b      	adds	r3, r7, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007382:	4413      	add	r3, r2
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007386:	463b      	mov	r3, r7
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007390:	4413      	add	r3, r2
 8007392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
 8007398:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800739c:	2b00      	cmp	r3, #0
 800739e:	d112      	bne.n	80073c6 <USB_EPStartXfer+0x5e8>
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e054      	b.n	8007470 <USB_EPStartXfer+0x692>
 80073c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ca:	2b3e      	cmp	r3, #62	; 0x3e
 80073cc:	d817      	bhi.n	80073fe <USB_EPStartXfer+0x620>
 80073ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <USB_EPStartXfer+0x610>
 80073e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073e8:	3301      	adds	r3, #1
 80073ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e038      	b.n	8007470 <USB_EPStartXfer+0x692>
 80073fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007408:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <USB_EPStartXfer+0x640>
 8007414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007418:	3b01      	subs	r3, #1
 800741a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800741e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007422:	b29b      	uxth	r3, r3
 8007424:	029b      	lsls	r3, r3, #10
 8007426:	b29b      	uxth	r3, r3
 8007428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007430:	b29a      	uxth	r2, r3
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	e01b      	b.n	8007470 <USB_EPStartXfer+0x692>
 8007438:	463b      	mov	r3, r7
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d116      	bne.n	8007470 <USB_EPStartXfer+0x692>
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744a:	b29b      	uxth	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007450:	4413      	add	r3, r2
 8007452:	647b      	str	r3, [r7, #68]	; 0x44
 8007454:	463b      	mov	r3, r7
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	00da      	lsls	r2, r3, #3
 800745c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745e:	4413      	add	r3, r2
 8007460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007464:	643b      	str	r3, [r7, #64]	; 0x40
 8007466:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800746a:	b29a      	uxth	r2, r3
 800746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007470:	463b      	mov	r3, r7
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	895b      	ldrh	r3, [r3, #10]
 8007476:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800747a:	463b      	mov	r3, r7
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6959      	ldr	r1, [r3, #20]
 8007480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007484:	b29b      	uxth	r3, r3
 8007486:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800748a:	1d38      	adds	r0, r7, #4
 800748c:	6800      	ldr	r0, [r0, #0]
 800748e:	f000 ff1b 	bl	80082c8 <USB_WritePMA>
 8007492:	e1e2      	b.n	800785a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8007494:	463b      	mov	r3, r7
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800749e:	1d3b      	adds	r3, r7, #4
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	463b      	mov	r3, r7
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80074bc:	1d3b      	adds	r3, r7, #4
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	441a      	add	r2, r3
 80074ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80074ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	663b      	str	r3, [r7, #96]	; 0x60
 80074e8:	1d3b      	adds	r3, r7, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f6:	4413      	add	r3, r2
 80074f8:	663b      	str	r3, [r7, #96]	; 0x60
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	00da      	lsls	r2, r3, #3
 8007502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007504:	4413      	add	r3, r2
 8007506:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800750a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800750c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007510:	b29a      	uxth	r2, r3
 8007512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007514:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007516:	463b      	mov	r3, r7
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	891b      	ldrh	r3, [r3, #8]
 800751c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007520:	463b      	mov	r3, r7
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6959      	ldr	r1, [r3, #20]
 8007526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800752a:	b29b      	uxth	r3, r3
 800752c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007530:	1d38      	adds	r0, r7, #4
 8007532:	6800      	ldr	r0, [r0, #0]
 8007534:	f000 fec8 	bl	80082c8 <USB_WritePMA>
 8007538:	e18f      	b.n	800785a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800753a:	1d3b      	adds	r3, r7, #4
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	463b      	mov	r3, r7
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 808f 	beq.w	8007674 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007556:	1d3b      	adds	r3, r7, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	67bb      	str	r3, [r7, #120]	; 0x78
 800755c:	463b      	mov	r3, r7
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d164      	bne.n	8007630 <USB_EPStartXfer+0x852>
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	673b      	str	r3, [r7, #112]	; 0x70
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007574:	b29b      	uxth	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800757a:	4413      	add	r3, r2
 800757c:	673b      	str	r3, [r7, #112]	; 0x70
 800757e:	463b      	mov	r3, r7
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	00da      	lsls	r2, r3, #3
 8007586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007588:	4413      	add	r3, r2
 800758a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800758e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007594:	2b00      	cmp	r3, #0
 8007596:	d112      	bne.n	80075be <USB_EPStartXfer+0x7e0>
 8007598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e054      	b.n	8007668 <USB_EPStartXfer+0x88a>
 80075be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075c2:	2b3e      	cmp	r3, #62	; 0x3e
 80075c4:	d817      	bhi.n	80075f6 <USB_EPStartXfer+0x818>
 80075c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <USB_EPStartXfer+0x808>
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e0:	3301      	adds	r3, #1
 80075e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	029b      	lsls	r3, r3, #10
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e038      	b.n	8007668 <USB_EPStartXfer+0x88a>
 80075f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007600:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <USB_EPStartXfer+0x838>
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	3b01      	subs	r3, #1
 8007612:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29b      	uxth	r3, r3
 8007620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007628:	b29a      	uxth	r2, r3
 800762a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	e01b      	b.n	8007668 <USB_EPStartXfer+0x88a>
 8007630:	463b      	mov	r3, r7
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d116      	bne.n	8007668 <USB_EPStartXfer+0x88a>
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007648:	4413      	add	r3, r2
 800764a:	67bb      	str	r3, [r7, #120]	; 0x78
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	00da      	lsls	r2, r3, #3
 8007654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007656:	4413      	add	r3, r2
 8007658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800765c:	677b      	str	r3, [r7, #116]	; 0x74
 800765e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007662:	b29a      	uxth	r2, r3
 8007664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	895b      	ldrh	r3, [r3, #10]
 800766e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8007672:	e097      	b.n	80077a4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007674:	463b      	mov	r3, r7
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	785b      	ldrb	r3, [r3, #1]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d168      	bne.n	8007750 <USB_EPStartXfer+0x972>
 800767e:	1d3b      	adds	r3, r7, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007686:	1d3b      	adds	r3, r7, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007696:	4413      	add	r3, r2
 8007698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800769c:	463b      	mov	r3, r7
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	00da      	lsls	r2, r3, #3
 80076a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d112      	bne.n	80076de <USB_EPStartXfer+0x900>
 80076b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e05d      	b.n	800779a <USB_EPStartXfer+0x9bc>
 80076de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076e2:	2b3e      	cmp	r3, #62	; 0x3e
 80076e4:	d817      	bhi.n	8007716 <USB_EPStartXfer+0x938>
 80076e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ea:	085b      	lsrs	r3, r3, #1
 80076ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d004      	beq.n	8007706 <USB_EPStartXfer+0x928>
 80076fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007700:	3301      	adds	r3, #1
 8007702:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800770a:	b29b      	uxth	r3, r3
 800770c:	029b      	lsls	r3, r3, #10
 800770e:	b29a      	uxth	r2, r3
 8007710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	e041      	b.n	800779a <USB_EPStartXfer+0x9bc>
 8007716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007720:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <USB_EPStartXfer+0x958>
 800772c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007730:	3b01      	subs	r3, #1
 8007732:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007736:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800773a:	b29b      	uxth	r3, r3
 800773c:	029b      	lsls	r3, r3, #10
 800773e:	b29b      	uxth	r3, r3
 8007740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007748:	b29a      	uxth	r2, r3
 800774a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800774c:	801a      	strh	r2, [r3, #0]
 800774e:	e024      	b.n	800779a <USB_EPStartXfer+0x9bc>
 8007750:	463b      	mov	r3, r7
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d11f      	bne.n	800779a <USB_EPStartXfer+0x9bc>
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007762:	1d3b      	adds	r3, r7, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007772:	4413      	add	r3, r2
 8007774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00da      	lsls	r2, r3, #3
 8007780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007784:	4413      	add	r3, r2
 8007786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800778a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800778e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007798:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800779a:	463b      	mov	r3, r7
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	891b      	ldrh	r3, [r3, #8]
 80077a0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6959      	ldr	r1, [r3, #20]
 80077aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80077b4:	1d38      	adds	r0, r7, #4
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	f000 fd86 	bl	80082c8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80077bc:	463b      	mov	r3, r7
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d122      	bne.n	800780c <USB_EPStartXfer+0xa2e>
 80077c6:	1d3b      	adds	r3, r7, #4
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	463b      	mov	r3, r7
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80077e4:	1d3b      	adds	r3, r7, #4
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	463b      	mov	r3, r7
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
 800780a:	e026      	b.n	800785a <USB_EPStartXfer+0xa7c>
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d121      	bne.n	800785a <USB_EPStartXfer+0xa7c>
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	463b      	mov	r3, r7
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007830:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007834:	1d3b      	adds	r3, r7, #4
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	463b      	mov	r3, r7
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	463b      	mov	r3, r7
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f107 020e 	add.w	r2, r7, #14
 8007870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	8013      	strh	r3, [r2, #0]
 800787a:	f107 030e 	add.w	r3, r7, #14
 800787e:	f107 020e 	add.w	r2, r7, #14
 8007882:	8812      	ldrh	r2, [r2, #0]
 8007884:	f082 0210 	eor.w	r2, r2, #16
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	f107 030e 	add.w	r3, r7, #14
 800788e:	f107 020e 	add.w	r2, r7, #14
 8007892:	8812      	ldrh	r2, [r2, #0]
 8007894:	f082 0220 	eor.w	r2, r2, #32
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	1d3b      	adds	r3, r7, #4
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	463b      	mov	r3, r7
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	f107 030e 	add.w	r3, r7, #14
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078be:	b29b      	uxth	r3, r3
 80078c0:	8013      	strh	r3, [r2, #0]
 80078c2:	e3b5      	b.n	8008030 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078c4:	463b      	mov	r3, r7
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	7b1b      	ldrb	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f040 8090 	bne.w	80079f0 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80078d0:	463b      	mov	r3, r7
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	463b      	mov	r3, r7
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d90e      	bls.n	80078fe <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80078e0:	463b      	mov	r3, r7
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80078ea:	463b      	mov	r3, r7
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	463b      	mov	r3, r7
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	619a      	str	r2, [r3, #24]
 80078fc:	e008      	b.n	8007910 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80078fe:	463b      	mov	r3, r7
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2200      	movs	r2, #0
 800790e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007910:	1d3b      	adds	r3, r7, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007918:	1d3b      	adds	r3, r7, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007928:	4413      	add	r3, r2
 800792a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800792e:	463b      	mov	r3, r7
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	00da      	lsls	r2, r3, #3
 8007936:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800793a:	4413      	add	r3, r2
 800793c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007948:	2b00      	cmp	r3, #0
 800794a:	d116      	bne.n	800797a <USB_EPStartXfer+0xb9c>
 800794c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007958:	b29a      	uxth	r2, r3
 800795a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007970:	b29a      	uxth	r2, r3
 8007972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	e32c      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
 800797a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800797e:	2b3e      	cmp	r3, #62	; 0x3e
 8007980:	d818      	bhi.n	80079b4 <USB_EPStartXfer+0xbd6>
 8007982:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800798c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <USB_EPStartXfer+0xbc4>
 8007998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800799c:	3301      	adds	r3, #1
 800799e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	029b      	lsls	r3, r3, #10
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	e30f      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
 80079b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079b8:	095b      	lsrs	r3, r3, #5
 80079ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <USB_EPStartXfer+0xbf6>
 80079ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079ce:	3b01      	subs	r3, #1
 80079d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079d8:	b29b      	uxth	r3, r3
 80079da:	029b      	lsls	r3, r3, #10
 80079dc:	b29b      	uxth	r3, r3
 80079de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	e2f1      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80079f0:	463b      	mov	r3, r7
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	78db      	ldrb	r3, [r3, #3]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	f040 818f 	bne.w	8007d1a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d175      	bne.n	8007af2 <USB_EPStartXfer+0xd14>
 8007a06:	1d3b      	adds	r3, r7, #4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a0e:	1d3b      	adds	r3, r7, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a1e:	4413      	add	r3, r2
 8007a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a24:	463b      	mov	r3, r7
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	00da      	lsls	r2, r3, #3
 8007a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a30:	4413      	add	r3, r2
 8007a32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a3a:	463b      	mov	r3, r7
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d116      	bne.n	8007a72 <USB_EPStartXfer+0xc94>
 8007a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	e065      	b.n	8007b3e <USB_EPStartXfer+0xd60>
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b3e      	cmp	r3, #62	; 0x3e
 8007a7a:	d81a      	bhi.n	8007ab2 <USB_EPStartXfer+0xcd4>
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	085b      	lsrs	r3, r3, #1
 8007a84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a88:	463b      	mov	r3, r7
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <USB_EPStartXfer+0xcc2>
 8007a96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e045      	b.n	8007b3e <USB_EPStartXfer+0xd60>
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007abe:	463b      	mov	r3, r7
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <USB_EPStartXfer+0xcf8>
 8007acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ad6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	029b      	lsls	r3, r3, #10
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e025      	b.n	8007b3e <USB_EPStartXfer+0xd60>
 8007af2:	463b      	mov	r3, r7
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d120      	bne.n	8007b3e <USB_EPStartXfer+0xd60>
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b04:	1d3b      	adds	r3, r7, #4
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b14:	4413      	add	r3, r2
 8007b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	00da      	lsls	r2, r3, #3
 8007b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b26:	4413      	add	r3, r2
 8007b28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b30:	463b      	mov	r3, r7
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d175      	bne.n	8007c3c <USB_EPStartXfer+0xe5e>
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b68:	4413      	add	r3, r2
 8007b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b6e:	463b      	mov	r3, r7
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	00da      	lsls	r2, r3, #3
 8007b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b84:	463b      	mov	r3, r7
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d116      	bne.n	8007bbc <USB_EPStartXfer+0xdde>
 8007b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e061      	b.n	8007c80 <USB_EPStartXfer+0xea2>
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc4:	d81a      	bhi.n	8007bfc <USB_EPStartXfer+0xe1e>
 8007bc6:	463b      	mov	r3, r7
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <USB_EPStartXfer+0xe0c>
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be4:	3301      	adds	r3, #1
 8007be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	029b      	lsls	r3, r3, #10
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	e041      	b.n	8007c80 <USB_EPStartXfer+0xea2>
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c08:	463b      	mov	r3, r7
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <USB_EPStartXfer+0xe42>
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	029b      	lsls	r3, r3, #10
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	e021      	b.n	8007c80 <USB_EPStartXfer+0xea2>
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d11c      	bne.n	8007c80 <USB_EPStartXfer+0xea2>
 8007c46:	1d3b      	adds	r3, r7, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c56:	4413      	add	r3, r2
 8007c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	00da      	lsls	r2, r3, #3
 8007c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c72:	463b      	mov	r3, r7
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c7e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 81a4 	beq.w	8007fd4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c8c:	1d3b      	adds	r3, r7, #4
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	463b      	mov	r3, r7
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ca0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <USB_EPStartXfer+0xeda>
 8007cac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10d      	bne.n	8007cd4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cb8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 8187 	bne.w	8007fd4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f040 8180 	bne.w	8007fd4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007cd4:	1d3b      	adds	r3, r7, #4
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	463b      	mov	r3, r7
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007cf2:	1d3b      	adds	r3, r7, #4
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	441a      	add	r2, r3
 8007d00:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]
 8007d18:	e15c      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	78db      	ldrb	r3, [r3, #3]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	f040 8155 	bne.w	8007fd0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007d26:	463b      	mov	r3, r7
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d90e      	bls.n	8007d54 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007d36:	463b      	mov	r3, r7
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007d40:	463b      	mov	r3, r7
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d4a:	1ad2      	subs	r2, r2, r3
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	619a      	str	r2, [r3, #24]
 8007d52:	e008      	b.n	8007d66 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007d54:	463b      	mov	r3, r7
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007d5e:	463b      	mov	r3, r7
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d16f      	bne.n	8007e50 <USB_EPStartXfer+0x1072>
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d78:	1d3b      	adds	r3, r7, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d8e:	463b      	mov	r3, r7
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00da      	lsls	r2, r3, #3
 8007d96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d116      	bne.n	8007dda <USB_EPStartXfer+0xffc>
 8007dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dbe:	801a      	strh	r2, [r3, #0]
 8007dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	e05f      	b.n	8007e9a <USB_EPStartXfer+0x10bc>
 8007dda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dde:	2b3e      	cmp	r3, #62	; 0x3e
 8007de0:	d818      	bhi.n	8007e14 <USB_EPStartXfer+0x1036>
 8007de2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <USB_EPStartXfer+0x1024>
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	029b      	lsls	r3, r3, #10
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e042      	b.n	8007e9a <USB_EPStartXfer+0x10bc>
 8007e14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <USB_EPStartXfer+0x1056>
 8007e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	029b      	lsls	r3, r3, #10
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	e024      	b.n	8007e9a <USB_EPStartXfer+0x10bc>
 8007e50:	463b      	mov	r3, r7
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d11f      	bne.n	8007e9a <USB_EPStartXfer+0x10bc>
 8007e5a:	1d3b      	adds	r3, r7, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e62:	1d3b      	adds	r3, r7, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e72:	4413      	add	r3, r2
 8007e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	00da      	lsls	r2, r3, #3
 8007e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e84:	4413      	add	r3, r2
 8007e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e98:	801a      	strh	r2, [r3, #0]
 8007e9a:	1d3b      	adds	r3, r7, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d16f      	bne.n	8007f8c <USB_EPStartXfer+0x11ae>
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eca:	463b      	mov	r3, r7
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	00da      	lsls	r2, r3, #3
 8007ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ee0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d116      	bne.n	8007f16 <USB_EPStartXfer+0x1138>
 8007ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e05e      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
 8007f16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1c:	d818      	bhi.n	8007f50 <USB_EPStartXfer+0x1172>
 8007f1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USB_EPStartXfer+0x1160>
 8007f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	029b      	lsls	r3, r3, #10
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	e041      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
 8007f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <USB_EPStartXfer+0x1192>
 8007f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	029b      	lsls	r3, r3, #10
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	e023      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d11e      	bne.n	8007fd4 <USB_EPStartXfer+0x11f6>
 8007f96:	1d3b      	adds	r3, r7, #4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fac:	463b      	mov	r3, r7
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fb8:	4413      	add	r3, r2
 8007fba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fcc:	801a      	strh	r2, [r3, #0]
 8007fce:	e001      	b.n	8007fd4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e02e      	b.n	8008032 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fd4:	1d3b      	adds	r3, r7, #4
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	463b      	mov	r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007ff2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007ff6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ffa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007ffe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008002:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008006:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800800a:	1d3b      	adds	r3, r7, #4
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	463b      	mov	r3, r7
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800801c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802c:	b29b      	uxth	r3, r3
 800802e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	785b      	ldrb	r3, [r3, #1]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d020      	beq.n	8008090 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008064:	81bb      	strh	r3, [r7, #12]
 8008066:	89bb      	ldrh	r3, [r7, #12]
 8008068:	f083 0310 	eor.w	r3, r3, #16
 800806c:	81bb      	strh	r3, [r7, #12]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	441a      	add	r2, r3
 8008078:	89bb      	ldrh	r3, [r7, #12]
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]
 800808e:	e01f      	b.n	80080d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a6:	81fb      	strh	r3, [r7, #14]
 80080a8:	89fb      	ldrh	r3, [r7, #14]
 80080aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080ae:	81fb      	strh	r3, [r7, #14]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	89fb      	ldrh	r3, [r7, #14]
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	7b1b      	ldrb	r3, [r3, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 809d 	bne.w	800822c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d04c      	beq.n	8008194 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	823b      	strh	r3, [r7, #16]
 8008108:	8a3b      	ldrh	r3, [r7, #16]
 800810a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01b      	beq.n	800814a <USB_EPClearStall+0x6c>
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	81fb      	strh	r3, [r7, #14]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800813e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008146:	b29b      	uxth	r3, r3
 8008148:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	78db      	ldrb	r3, [r3, #3]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d06c      	beq.n	800822c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008168:	81bb      	strh	r3, [r7, #12]
 800816a:	89bb      	ldrh	r3, [r7, #12]
 800816c:	f083 0320 	eor.w	r3, r3, #32
 8008170:	81bb      	strh	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	89bb      	ldrh	r3, [r7, #12]
 800817e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]
 8008192:	e04b      	b.n	800822c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	82fb      	strh	r3, [r7, #22]
 80081a2:	8afb      	ldrh	r3, [r7, #22]
 80081a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01b      	beq.n	80081e4 <USB_EPClearStall+0x106>
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c2:	82bb      	strh	r3, [r7, #20]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	441a      	add	r2, r3
 80081ce:	8abb      	ldrh	r3, [r7, #20]
 80081d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fa:	827b      	strh	r3, [r7, #18]
 80081fc:	8a7b      	ldrh	r3, [r7, #18]
 80081fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008202:	827b      	strh	r3, [r7, #18]
 8008204:	8a7b      	ldrh	r3, [r7, #18]
 8008206:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800820a:	827b      	strh	r3, [r7, #18]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	441a      	add	r2, r3
 8008216:	8a7b      	ldrh	r3, [r7, #18]
 8008218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008228:	b29b      	uxth	r3, r3
 800822a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d103      	bne.n	8008254 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2280      	movs	r2, #128	; 0x80
 8008250:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800829e:	b29b      	uxth	r3, r3
 80082a0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b08d      	sub	sp, #52	; 0x34
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4611      	mov	r1, r2
 80082d4:	461a      	mov	r2, r3
 80082d6:	460b      	mov	r3, r1
 80082d8:	80fb      	strh	r3, [r7, #6]
 80082da:	4613      	mov	r3, r2
 80082dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082de:	88bb      	ldrh	r3, [r7, #4]
 80082e0:	3301      	adds	r3, #1
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082ee:	88fa      	ldrh	r2, [r7, #6]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082f8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082fe:	e01b      	b.n	8008338 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	3301      	adds	r3, #1
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	b29a      	uxth	r2, r3
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	3302      	adds	r3, #2
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	3301      	adds	r3, #1
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	3b01      	subs	r3, #1
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e0      	bne.n	8008300 <USB_WritePMA+0x38>
  }
}
 800833e:	bf00      	nop
 8008340:	3734      	adds	r7, #52	; 0x34
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800834a:	b480      	push	{r7}
 800834c:	b08b      	sub	sp, #44	; 0x2c
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	4611      	mov	r1, r2
 8008356:	461a      	mov	r2, r3
 8008358:	460b      	mov	r3, r1
 800835a:	80fb      	strh	r3, [r7, #6]
 800835c:	4613      	mov	r3, r2
 800835e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008360:	88bb      	ldrh	r3, [r7, #4]
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
 8008380:	e018      	b.n	80083b4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	3302      	adds	r3, #2
 800838e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	b2da      	uxtb	r2, r3
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3301      	adds	r3, #1
 800839c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	3301      	adds	r3, #1
 80083ac:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	3b01      	subs	r3, #1
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e3      	bne.n	8008382 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80083ba:	88bb      	ldrh	r3, [r7, #4]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	701a      	strb	r2, [r3, #0]
  }
}
 80083d6:	bf00      	nop
 80083d8:	372c      	adds	r7, #44	; 0x2c
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80083ee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80083f2:	f002 f89d 	bl	800a530 <USBD_static_malloc>
 80083f6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d105      	bne.n	800840a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008406:	2302      	movs	r3, #2
 8008408:	e066      	b.n	80084d8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d119      	bne.n	800844e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800841a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841e:	2202      	movs	r2, #2
 8008420:	2181      	movs	r1, #129	; 0x81
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 ff29 	bl	800a27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800842e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008432:	2202      	movs	r2, #2
 8008434:	2101      	movs	r1, #1
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 ff1f 	bl	800a27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2210      	movs	r2, #16
 8008448:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800844c:	e016      	b.n	800847c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800844e:	2340      	movs	r3, #64	; 0x40
 8008450:	2202      	movs	r2, #2
 8008452:	2181      	movs	r1, #129	; 0x81
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 ff10 	bl	800a27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	2202      	movs	r2, #2
 8008464:	2101      	movs	r1, #1
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 ff07 	bl	800a27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2210      	movs	r2, #16
 8008478:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800847c:	2308      	movs	r3, #8
 800847e:	2203      	movs	r2, #3
 8008480:	2182      	movs	r1, #130	; 0x82
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 fef9 	bl	800a27a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	7c1b      	ldrb	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084bc:	2101      	movs	r1, #1
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 ffcb 	bl	800a45a <USBD_LL_PrepareReceive>
 80084c4:	e007      	b.n	80084d6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084cc:	2340      	movs	r3, #64	; 0x40
 80084ce:	2101      	movs	r1, #1
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 ffc2 	bl	800a45a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80084ec:	2181      	movs	r1, #129	; 0x81
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 fee9 	bl	800a2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80084fa:	2101      	movs	r1, #1
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 fee2 	bl	800a2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800850a:	2182      	movs	r1, #130	; 0x82
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 feda 	bl	800a2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00e      	beq.n	800854a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853c:	4618      	mov	r0, r3
 800853e:	f002 f805 	bl	800a54c <USBD_static_free>
    pdev->pClassData = NULL;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008564:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800857a:	2b00      	cmp	r3, #0
 800857c:	d03a      	beq.n	80085f4 <USBD_CDC_Setup+0xa0>
 800857e:	2b20      	cmp	r3, #32
 8008580:	f040 8097 	bne.w	80086b2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	88db      	ldrh	r3, [r3, #6]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d029      	beq.n	80085e0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b25b      	sxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	da11      	bge.n	80085ba <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80085a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	88d2      	ldrh	r2, [r2, #6]
 80085a8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80085aa:	6939      	ldr	r1, [r7, #16]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fa8d 	bl	8009ad2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80085b8:	e082      	b.n	80086c0 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785a      	ldrb	r2, [r3, #1]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	88db      	ldrh	r3, [r3, #6]
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80085d0:	6939      	ldr	r1, [r7, #16]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 faa6 	bl	8009b2a <USBD_CtlPrepareRx>
      break;
 80085de:	e06f      	b.n	80086c0 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	7850      	ldrb	r0, [r2, #1]
 80085ec:	2200      	movs	r2, #0
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	4798      	blx	r3
      break;
 80085f2:	e065      	b.n	80086c0 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	2b0b      	cmp	r3, #11
 80085fa:	d84f      	bhi.n	800869c <USBD_CDC_Setup+0x148>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USBD_CDC_Setup+0xb0>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008635 	.word	0x08008635
 8008608:	080086ab 	.word	0x080086ab
 800860c:	0800869d 	.word	0x0800869d
 8008610:	0800869d 	.word	0x0800869d
 8008614:	0800869d 	.word	0x0800869d
 8008618:	0800869d 	.word	0x0800869d
 800861c:	0800869d 	.word	0x0800869d
 8008620:	0800869d 	.word	0x0800869d
 8008624:	0800869d 	.word	0x0800869d
 8008628:	0800869d 	.word	0x0800869d
 800862c:	0800865d 	.word	0x0800865d
 8008630:	08008685 	.word	0x08008685
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863a:	2b03      	cmp	r3, #3
 800863c:	d107      	bne.n	800864e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	2202      	movs	r2, #2
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fa43 	bl	8009ad2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800864c:	e030      	b.n	80086b0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 f9cd 	bl	80099f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	75fb      	strb	r3, [r7, #23]
          break;
 800865a:	e029      	b.n	80086b0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	2b03      	cmp	r3, #3
 8008664:	d107      	bne.n	8008676 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008666:	f107 030f 	add.w	r3, r7, #15
 800866a:	2201      	movs	r2, #1
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fa2f 	bl	8009ad2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008674:	e01c      	b.n	80086b0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 f9b9 	bl	80099f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	75fb      	strb	r3, [r7, #23]
          break;
 8008682:	e015      	b.n	80086b0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868a:	2b03      	cmp	r3, #3
 800868c:	d00f      	beq.n	80086ae <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f9ad 	bl	80099f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008696:	2303      	movs	r3, #3
 8008698:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800869a:	e008      	b.n	80086ae <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 f9a6 	bl	80099f0 <USBD_CtlError>
          ret = USBD_FAIL;
 80086a4:	2303      	movs	r3, #3
 80086a6:	75fb      	strb	r3, [r7, #23]
          break;
 80086a8:	e002      	b.n	80086b0 <USBD_CDC_Setup+0x15c>
          break;
 80086aa:	bf00      	nop
 80086ac:	e008      	b.n	80086c0 <USBD_CDC_Setup+0x16c>
          break;
 80086ae:	bf00      	nop
      }
      break;
 80086b0:	e006      	b.n	80086c0 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f99b 	bl	80099f0 <USBD_CtlError>
      ret = USBD_FAIL;
 80086ba:	2303      	movs	r3, #3
 80086bc:	75fb      	strb	r3, [r7, #23]
      break;
 80086be:	bf00      	nop
  }

  return (uint8_t)ret;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e04f      	b.n	800878e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	3318      	adds	r3, #24
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d029      	beq.n	8008760 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800870c:	78fa      	ldrb	r2, [r7, #3]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	3318      	adds	r3, #24
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	78f9      	ldrb	r1, [r7, #3]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	460b      	mov	r3, r1
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	4403      	add	r3, r0
 800872c:	3338      	adds	r3, #56	; 0x38
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	fbb2 f1f3 	udiv	r1, r2, r3
 8008734:	fb03 f301 	mul.w	r3, r3, r1
 8008738:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800873a:	2b00      	cmp	r3, #0
 800873c:	d110      	bne.n	8008760 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800873e:	78fa      	ldrb	r2, [r7, #3]
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3318      	adds	r3, #24
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008752:	78f9      	ldrb	r1, [r7, #3]
 8008754:	2300      	movs	r3, #0
 8008756:	2200      	movs	r2, #0
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 fe5d 	bl	800a418 <USBD_LL_Transmit>
 800875e:	e015      	b.n	800878c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00b      	beq.n	800878c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008788:	78fa      	ldrb	r2, [r7, #3]
 800878a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e015      	b.n	80087e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 fe6d 	bl	800a49c <USBD_LL_GetRxDataSize>
 80087c2:	4602      	mov	r2, r0
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80087de:	4611      	mov	r1, r2
 80087e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d015      	beq.n	8008832 <USBD_CDC_EP0_RxReady+0x46>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800880c:	2bff      	cmp	r3, #255	; 0xff
 800880e:	d010      	beq.n	8008832 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800881e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008826:	b292      	uxth	r2, r2
 8008828:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	22ff      	movs	r2, #255	; 0xff
 800882e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2243      	movs	r2, #67	; 0x43
 8008848:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	20000094 	.word	0x20000094

0800885c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2243      	movs	r2, #67	; 0x43
 8008868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000050 	.word	0x20000050

0800887c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2243      	movs	r2, #67	; 0x43
 8008888:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800888a:	4b03      	ldr	r3, [pc, #12]	; (8008898 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	200000d8 	.word	0x200000d8

0800889c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	220a      	movs	r2, #10
 80088a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80088aa:	4b03      	ldr	r3, [pc, #12]	; (80088b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	2000000c 	.word	0x2000000c

080088bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e004      	b.n	80088da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008928:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800894e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800895e:	2303      	movs	r3, #3
 8008960:	e01a      	b.n	8008998 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008968:	2b00      	cmp	r3, #0
 800896a:	d114      	bne.n	8008996 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2201      	movs	r2, #1
 8008970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800898a:	2181      	movs	r1, #129	; 0x81
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fd43 	bl	800a418 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e016      	b.n	80089ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	7c1b      	ldrb	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089d0:	2101      	movs	r1, #1
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fd41 	bl	800a45a <USBD_LL_PrepareReceive>
 80089d8:	e007      	b.n	80089ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089e0:	2340      	movs	r3, #64	; 0x40
 80089e2:	2101      	movs	r1, #1
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 fd38 	bl	800a45a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e01f      	b.n	8008a4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	79fa      	ldrb	r2, [r7, #7]
 8008a3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f001 fb9f 	bl	800a184 <USBD_LL_Init>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e016      	b.n	8008a9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	f107 020e 	add.w	r2, r7, #14
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	4602      	mov	r2, r0
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fbca 	bl	800a244 <USBD_LL_Start>
 8008ab0:	4603      	mov	r3, r0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d009      	beq.n	8008afe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	4611      	mov	r1, r2
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
  }

  return USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 ff16 	bl	800997c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b6c:	f003 031f 	and.w	r3, r3, #31
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d00e      	beq.n	8008b92 <USBD_LL_SetupStage+0x5a>
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d302      	bcc.n	8008b7e <USBD_LL_SetupStage+0x46>
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d014      	beq.n	8008ba6 <USBD_LL_SetupStage+0x6e>
 8008b7c:	e01d      	b.n	8008bba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f9d6 	bl	8008f38 <USBD_StdDevReq>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b90:	e020      	b.n	8008bd4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa3a 	bl	8009014 <USBD_StdItfReq>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba4:	e016      	b.n	8008bd4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa76 	bl	80090a0 <USBD_StdEPReq>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb8:	e00c      	b.n	8008bd4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fb9b 	bl	800a304 <USBD_LL_StallEP>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd2:	bf00      	nop
  }

  return ret;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b086      	sub	sp, #24
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	460b      	mov	r3, r1
 8008be8:	607a      	str	r2, [r7, #4]
 8008bea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d137      	bne.n	8008c62 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008bf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d14a      	bne.n	8008c9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d913      	bls.n	8008c38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	1ad2      	subs	r2, r2, r3
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	bf28      	it	cs
 8008c2a:	4613      	movcs	r3, r2
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 ff97 	bl	8009b64 <USBD_CtlContinueRx>
 8008c36:	e030      	b.n	8008c9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00a      	beq.n	8008c5a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d105      	bne.n	8008c5a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 ff93 	bl	8009b86 <USBD_CtlSendStatus>
 8008c60:	e01b      	b.n	8008c9a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d013      	beq.n	8008c96 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d10e      	bne.n	8008c96 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	7afa      	ldrb	r2, [r7, #11]
 8008c82:	4611      	mov	r1, r2
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	4798      	blx	r3
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	e002      	b.n	8008c9c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e000      	b.n	8008c9c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	460b      	mov	r3, r1
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d16a      	bne.n	8008d8e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3314      	adds	r3, #20
 8008cbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d155      	bne.n	8008d74 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d914      	bls.n	8008cfe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 ff0c 	bl	8009b08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f001 fbaf 	bl	800a45a <USBD_LL_PrepareReceive>
 8008cfc:	e03a      	b.n	8008d74 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d11c      	bne.n	8008d44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d316      	bcc.n	8008d44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d20f      	bcs.n	8008d44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d24:	2200      	movs	r2, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 feed 	bl	8009b08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d36:	2300      	movs	r3, #0
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f001 fb8c 	bl	800a45a <USBD_LL_PrepareReceive>
 8008d42:	e017      	b.n	8008d74 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d105      	bne.n	8008d66 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d66:	2180      	movs	r1, #128	; 0x80
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f001 facb 	bl	800a304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 ff1c 	bl	8009bac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d123      	bne.n	8008dc6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff fe9b 	bl	8008aba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d8c:	e01b      	b.n	8008dc6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d013      	beq.n	8008dc2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d10e      	bne.n	8008dc2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	7afa      	ldrb	r2, [r7, #11]
 8008dae:	4611      	mov	r1, r2
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	4798      	blx	r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	e002      	b.n	8008dc8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e000      	b.n	8008dc8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d009      	beq.n	8008e14 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6852      	ldr	r2, [r2, #4]
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	4611      	mov	r1, r2
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e14:	2340      	movs	r3, #64	; 0x40
 8008e16:	2200      	movs	r2, #0
 8008e18:	2100      	movs	r1, #0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f001 fa2d 	bl	800a27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2240      	movs	r2, #64	; 0x40
 8008e2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	2200      	movs	r2, #0
 8008e34:	2180      	movs	r1, #128	; 0x80
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fa1f 	bl	800a27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2240      	movs	r2, #64	; 0x40
 8008e46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2204      	movs	r2, #4
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d105      	bne.n	8008eba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d10b      	bne.n	8008ef2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	3301      	adds	r3, #1
 8008f12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f1a:	8a3b      	ldrh	r3, [r7, #16]
 8008f1c:	021b      	lsls	r3, r3, #8
 8008f1e:	b21a      	sxth	r2, r3
 8008f20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	b21b      	sxth	r3, r3
 8008f28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d004      	beq.n	8008f5c <USBD_StdDevReq+0x24>
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d002      	beq.n	8008f5c <USBD_StdDevReq+0x24>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <USBD_StdDevReq+0x38>
 8008f5a:	e050      	b.n	8008ffe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	4798      	blx	r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6e:	e04b      	b.n	8009008 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	2b09      	cmp	r3, #9
 8008f76:	d83c      	bhi.n	8008ff2 <USBD_StdDevReq+0xba>
 8008f78:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <USBD_StdDevReq+0x48>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	08008fd5 	.word	0x08008fd5
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	08008ff3 	.word	0x08008ff3
 8008f8c:	08008fdf 	.word	0x08008fdf
 8008f90:	08008ff3 	.word	0x08008ff3
 8008f94:	08008fb3 	.word	0x08008fb3
 8008f98:	08008fa9 	.word	0x08008fa9
 8008f9c:	08008ff3 	.word	0x08008ff3
 8008fa0:	08008fcb 	.word	0x08008fcb
 8008fa4:	08008fbd 	.word	0x08008fbd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f9d0 	bl	8009350 <USBD_GetDescriptor>
      break;
 8008fb0:	e024      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb5f 	bl	8009678 <USBD_SetAddress>
      break;
 8008fba:	e01f      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fb9c 	bl	80096fc <USBD_SetConfig>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc8:	e018      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fc39 	bl	8009844 <USBD_GetConfig>
      break;
 8008fd2:	e013      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fc68 	bl	80098ac <USBD_GetStatus>
      break;
 8008fdc:	e00e      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc96 	bl	8009912 <USBD_SetFeature>
      break;
 8008fe6:	e009      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fca5 	bl	800993a <USBD_ClrFeature>
      break;
 8008ff0:	e004      	b.n	8008ffc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fcfb 	bl	80099f0 <USBD_CtlError>
      break;
 8008ffa:	bf00      	nop
    }
    break;
 8008ffc:	e004      	b.n	8009008 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fcf5 	bl	80099f0 <USBD_CtlError>
    break;
 8009006:	bf00      	nop
  }

  return ret;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop

08009014 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800902a:	2b20      	cmp	r3, #32
 800902c:	d003      	beq.n	8009036 <USBD_StdItfReq+0x22>
 800902e:	2b40      	cmp	r3, #64	; 0x40
 8009030:	d001      	beq.n	8009036 <USBD_StdItfReq+0x22>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d12a      	bne.n	800908c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903c:	3b01      	subs	r3, #1
 800903e:	2b02      	cmp	r3, #2
 8009040:	d81d      	bhi.n	800907e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	889b      	ldrh	r3, [r3, #4]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b01      	cmp	r3, #1
 800904a:	d813      	bhi.n	8009074 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <USBD_StdItfReq+0x74>
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fd8a 	bl	8009b86 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009072:	e009      	b.n	8009088 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fcba 	bl	80099f0 <USBD_CtlError>
      break;
 800907c:	e004      	b.n	8009088 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fcb5 	bl	80099f0 <USBD_CtlError>
      break;
 8009086:	e000      	b.n	800908a <USBD_StdItfReq+0x76>
      break;
 8009088:	bf00      	nop
    }
    break;
 800908a:	e004      	b.n	8009096 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fcae 	bl	80099f0 <USBD_CtlError>
    break;
 8009094:	bf00      	nop
  }

  return ret;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	889b      	ldrh	r3, [r3, #4]
 80090b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d004      	beq.n	80090ca <USBD_StdEPReq+0x2a>
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	d002      	beq.n	80090ca <USBD_StdEPReq+0x2a>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00a      	beq.n	80090de <USBD_StdEPReq+0x3e>
 80090c8:	e137      	b.n	800933a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
    break;
 80090dc:	e132      	b.n	8009344 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	785b      	ldrb	r3, [r3, #1]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d03e      	beq.n	8009164 <USBD_StdEPReq+0xc4>
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d002      	beq.n	80090f0 <USBD_StdEPReq+0x50>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d079      	beq.n	80091e2 <USBD_StdEPReq+0x142>
 80090ee:	e11e      	b.n	800932e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d002      	beq.n	8009100 <USBD_StdEPReq+0x60>
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d015      	beq.n	800912a <USBD_StdEPReq+0x8a>
 80090fe:	e02b      	b.n	8009158 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00c      	beq.n	8009120 <USBD_StdEPReq+0x80>
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b80      	cmp	r3, #128	; 0x80
 800910a:	d009      	beq.n	8009120 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 f8f7 	bl	800a304 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009116:	2180      	movs	r1, #128	; 0x80
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 f8f3 	bl	800a304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800911e:	e020      	b.n	8009162 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fc64 	bl	80099f0 <USBD_CtlError>
        break;
 8009128:	e01b      	b.n	8009162 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	885b      	ldrh	r3, [r3, #2]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10e      	bne.n	8009150 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_StdEPReq+0xb0>
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b80      	cmp	r3, #128	; 0x80
 800913c:	d008      	beq.n	8009150 <USBD_StdEPReq+0xb0>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f8da 	bl	800a304 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fd18 	bl	8009b86 <USBD_CtlSendStatus>

        break;
 8009156:	e004      	b.n	8009162 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc48 	bl	80099f0 <USBD_CtlError>
        break;
 8009160:	bf00      	nop
      }
      break;
 8009162:	e0e9      	b.n	8009338 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916a:	2b02      	cmp	r3, #2
 800916c:	d002      	beq.n	8009174 <USBD_StdEPReq+0xd4>
 800916e:	2b03      	cmp	r3, #3
 8009170:	d015      	beq.n	800919e <USBD_StdEPReq+0xfe>
 8009172:	e02f      	b.n	80091d4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00c      	beq.n	8009194 <USBD_StdEPReq+0xf4>
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	d009      	beq.n	8009194 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 f8bd 	bl	800a304 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800918a:	2180      	movs	r1, #128	; 0x80
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 f8b9 	bl	800a304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009192:	e025      	b.n	80091e0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fc2a 	bl	80099f0 <USBD_CtlError>
        break;
 800919c:	e020      	b.n	80091e0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	885b      	ldrh	r3, [r3, #2]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11b      	bne.n	80091de <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f8c4 	bl	800a342 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fce3 	bl	8009b86 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80091d2:	e004      	b.n	80091de <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fc0a 	bl	80099f0 <USBD_CtlError>
        break;
 80091dc:	e000      	b.n	80091e0 <USBD_StdEPReq+0x140>
        break;
 80091de:	bf00      	nop
      }
      break;
 80091e0:	e0aa      	b.n	8009338 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d002      	beq.n	80091f2 <USBD_StdEPReq+0x152>
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d032      	beq.n	8009256 <USBD_StdEPReq+0x1b6>
 80091f0:	e097      	b.n	8009322 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <USBD_StdEPReq+0x168>
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b80      	cmp	r3, #128	; 0x80
 80091fc:	d004      	beq.n	8009208 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fbf5 	bl	80099f0 <USBD_CtlError>
          break;
 8009206:	e091      	b.n	800932c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da0b      	bge.n	8009228 <USBD_StdEPReq+0x188>
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	3310      	adds	r3, #16
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	4413      	add	r3, r2
 8009224:	3304      	adds	r3, #4
 8009226:	e00b      	b.n	8009240 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	4413      	add	r3, r2
 800923e:	3304      	adds	r3, #4
 8009240:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2202      	movs	r2, #2
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fc3f 	bl	8009ad2 <USBD_CtlSendData>
        break;
 8009254:	e06a      	b.n	800932c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	da11      	bge.n	8009282 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	f003 020f 	and.w	r2, r3, #15
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	3324      	adds	r3, #36	; 0x24
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d117      	bne.n	80092a8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fbb8 	bl	80099f0 <USBD_CtlError>
            break;
 8009280:	e054      	b.n	800932c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	f003 020f 	and.w	r2, r3, #15
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d104      	bne.n	80092a8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fba5 	bl	80099f0 <USBD_CtlError>
            break;
 80092a6:	e041      	b.n	800932c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da0b      	bge.n	80092c8 <USBD_StdEPReq+0x228>
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	3310      	adds	r3, #16
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	3304      	adds	r3, #4
 80092c6:	e00b      	b.n	80092e0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4413      	add	r3, r2
 80092de:	3304      	adds	r3, #4
 80092e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <USBD_StdEPReq+0x24e>
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	2b80      	cmp	r3, #128	; 0x80
 80092ec:	d103      	bne.n	80092f6 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e00e      	b.n	8009314 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f840 	bl	800a380 <USBD_LL_IsStallEP>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2201      	movs	r2, #1
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	e002      	b.n	8009314 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2202      	movs	r2, #2
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fbd9 	bl	8009ad2 <USBD_CtlSendData>
          break;
 8009320:	e004      	b.n	800932c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fb63 	bl	80099f0 <USBD_CtlError>
        break;
 800932a:	bf00      	nop
      }
      break;
 800932c:	e004      	b.n	8009338 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fb5d 	bl	80099f0 <USBD_CtlError>
      break;
 8009336:	bf00      	nop
    }
    break;
 8009338:	e004      	b.n	8009344 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fb57 	bl	80099f0 <USBD_CtlError>
    break;
 8009342:	bf00      	nop
  }

  return ret;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	885b      	ldrh	r3, [r3, #2]
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	2b0e      	cmp	r3, #14
 8009372:	f200 8152 	bhi.w	800961a <USBD_GetDescriptor+0x2ca>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <USBD_GetDescriptor+0x2c>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	080093ed 	.word	0x080093ed
 8009380:	08009405 	.word	0x08009405
 8009384:	08009445 	.word	0x08009445
 8009388:	0800961b 	.word	0x0800961b
 800938c:	0800961b 	.word	0x0800961b
 8009390:	080095bb 	.word	0x080095bb
 8009394:	080095e7 	.word	0x080095e7
 8009398:	0800961b 	.word	0x0800961b
 800939c:	0800961b 	.word	0x0800961b
 80093a0:	0800961b 	.word	0x0800961b
 80093a4:	0800961b 	.word	0x0800961b
 80093a8:	0800961b 	.word	0x0800961b
 80093ac:	0800961b 	.word	0x0800961b
 80093b0:	0800961b 	.word	0x0800961b
 80093b4:	080093b9 	.word	0x080093b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	7c12      	ldrb	r2, [r2, #16]
 80093d0:	f107 0108 	add.w	r1, r7, #8
 80093d4:	4610      	mov	r0, r2
 80093d6:	4798      	blx	r3
 80093d8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80093da:	e126      	b.n	800962a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fb06 	bl	80099f0 <USBD_CtlError>
      err++;
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	3301      	adds	r3, #1
 80093e8:	72fb      	strb	r3, [r7, #11]
    break;
 80093ea:	e11e      	b.n	800962a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	7c12      	ldrb	r2, [r2, #16]
 80093f8:	f107 0108 	add.w	r1, r7, #8
 80093fc:	4610      	mov	r0, r2
 80093fe:	4798      	blx	r3
 8009400:	60f8      	str	r0, [r7, #12]
    break;
 8009402:	e112      	b.n	800962a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7c1b      	ldrb	r3, [r3, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10d      	bne.n	8009428 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009414:	f107 0208 	add.w	r2, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	2202      	movs	r2, #2
 8009424:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009426:	e100      	b.n	800962a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	f107 0208 	add.w	r2, r7, #8
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	2202      	movs	r2, #2
 8009440:	701a      	strb	r2, [r3, #0]
    break;
 8009442:	e0f2      	b.n	800962a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	885b      	ldrh	r3, [r3, #2]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b05      	cmp	r3, #5
 800944c:	f200 80ac 	bhi.w	80095a8 <USBD_GetDescriptor+0x258>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <USBD_GetDescriptor+0x108>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	08009471 	.word	0x08009471
 800945c:	080094a5 	.word	0x080094a5
 8009460:	080094d9 	.word	0x080094d9
 8009464:	0800950d 	.word	0x0800950d
 8009468:	08009541 	.word	0x08009541
 800946c:	08009575 	.word	0x08009575
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00b      	beq.n	8009494 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	7c12      	ldrb	r2, [r2, #16]
 8009488:	f107 0108 	add.w	r1, r7, #8
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
 8009490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009492:	e091      	b.n	80095b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 faaa 	bl	80099f0 <USBD_CtlError>
        err++;
 800949c:	7afb      	ldrb	r3, [r7, #11]
 800949e:	3301      	adds	r3, #1
 80094a0:	72fb      	strb	r3, [r7, #11]
      break;
 80094a2:	e089      	b.n	80095b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00b      	beq.n	80094c8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	7c12      	ldrb	r2, [r2, #16]
 80094bc:	f107 0108 	add.w	r1, r7, #8
 80094c0:	4610      	mov	r0, r2
 80094c2:	4798      	blx	r3
 80094c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094c6:	e077      	b.n	80095b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa90 	bl	80099f0 <USBD_CtlError>
        err++;
 80094d0:	7afb      	ldrb	r3, [r7, #11]
 80094d2:	3301      	adds	r3, #1
 80094d4:	72fb      	strb	r3, [r7, #11]
      break;
 80094d6:	e06f      	b.n	80095b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00b      	beq.n	80094fc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	7c12      	ldrb	r2, [r2, #16]
 80094f0:	f107 0108 	add.w	r1, r7, #8
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094fa:	e05d      	b.n	80095b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa76 	bl	80099f0 <USBD_CtlError>
        err++;
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	3301      	adds	r3, #1
 8009508:	72fb      	strb	r3, [r7, #11]
      break;
 800950a:	e055      	b.n	80095b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00b      	beq.n	8009530 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	7c12      	ldrb	r2, [r2, #16]
 8009524:	f107 0108 	add.w	r1, r7, #8
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
 800952c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800952e:	e043      	b.n	80095b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa5c 	bl	80099f0 <USBD_CtlError>
        err++;
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	3301      	adds	r3, #1
 800953c:	72fb      	strb	r3, [r7, #11]
      break;
 800953e:	e03b      	b.n	80095b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	7c12      	ldrb	r2, [r2, #16]
 8009558:	f107 0108 	add.w	r1, r7, #8
 800955c:	4610      	mov	r0, r2
 800955e:	4798      	blx	r3
 8009560:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009562:	e029      	b.n	80095b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa42 	bl	80099f0 <USBD_CtlError>
        err++;
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	3301      	adds	r3, #1
 8009570:	72fb      	strb	r3, [r7, #11]
      break;
 8009572:	e021      	b.n	80095b8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00b      	beq.n	8009598 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	7c12      	ldrb	r2, [r2, #16]
 800958c:	f107 0108 	add.w	r1, r7, #8
 8009590:	4610      	mov	r0, r2
 8009592:	4798      	blx	r3
 8009594:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009596:	e00f      	b.n	80095b8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fa28 	bl	80099f0 <USBD_CtlError>
        err++;
 80095a0:	7afb      	ldrb	r3, [r7, #11]
 80095a2:	3301      	adds	r3, #1
 80095a4:	72fb      	strb	r3, [r7, #11]
      break;
 80095a6:	e007      	b.n	80095b8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fa20 	bl	80099f0 <USBD_CtlError>
      err++;
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	3301      	adds	r3, #1
 80095b4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80095b6:	bf00      	nop
    }
    break;
 80095b8:	e037      	b.n	800962a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	7c1b      	ldrb	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ca:	f107 0208 	add.w	r2, r7, #8
 80095ce:	4610      	mov	r0, r2
 80095d0:	4798      	blx	r3
 80095d2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80095d4:	e029      	b.n	800962a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa09 	bl	80099f0 <USBD_CtlError>
      err++;
 80095de:	7afb      	ldrb	r3, [r7, #11]
 80095e0:	3301      	adds	r3, #1
 80095e2:	72fb      	strb	r3, [r7, #11]
    break;
 80095e4:	e021      	b.n	800962a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7c1b      	ldrb	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10d      	bne.n	800960a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	f107 0208 	add.w	r2, r7, #8
 80095fa:	4610      	mov	r0, r2
 80095fc:	4798      	blx	r3
 80095fe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	2207      	movs	r2, #7
 8009606:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009608:	e00f      	b.n	800962a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9ef 	bl	80099f0 <USBD_CtlError>
      err++;
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	3301      	adds	r3, #1
 8009616:	72fb      	strb	r3, [r7, #11]
    break;
 8009618:	e007      	b.n	800962a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f9e7 	bl	80099f0 <USBD_CtlError>
    err++;
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	3301      	adds	r3, #1
 8009626:	72fb      	strb	r3, [r7, #11]
    break;
 8009628:	bf00      	nop
  }

  if (err != 0U)
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d11e      	bne.n	800966e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	88db      	ldrh	r3, [r3, #6]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d016      	beq.n	8009666 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009638:	893b      	ldrh	r3, [r7, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00e      	beq.n	800965c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	88da      	ldrh	r2, [r3, #6]
 8009642:	893b      	ldrh	r3, [r7, #8]
 8009644:	4293      	cmp	r3, r2
 8009646:	bf28      	it	cs
 8009648:	4613      	movcs	r3, r2
 800964a:	b29b      	uxth	r3, r3
 800964c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800964e:	893b      	ldrh	r3, [r7, #8]
 8009650:	461a      	mov	r2, r3
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fa3c 	bl	8009ad2 <USBD_CtlSendData>
 800965a:	e009      	b.n	8009670 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f9c6 	bl	80099f0 <USBD_CtlError>
 8009664:	e004      	b.n	8009670 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa8d 	bl	8009b86 <USBD_CtlSendStatus>
 800966c:	e000      	b.n	8009670 <USBD_GetDescriptor+0x320>
    return;
 800966e:	bf00      	nop
    }
  }
}
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop

08009678 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	889b      	ldrh	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d130      	bne.n	80096ec <USBD_SetAddress+0x74>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	88db      	ldrh	r3, [r3, #6]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d12c      	bne.n	80096ec <USBD_SetAddress+0x74>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	2b7f      	cmp	r3, #127	; 0x7f
 8009698:	d828      	bhi.n	80096ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d104      	bne.n	80096ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f99c 	bl	80099f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b8:	e01c      	b.n	80096f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fe87 	bl	800a3da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fa5a 	bl	8009b86 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e0:	e008      	b.n	80096f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ea:	e003      	b.n	80096f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f97e 	bl	80099f0 <USBD_CtlError>
  }
}
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b4b      	ldr	r3, [pc, #300]	; (8009840 <USBD_SetConfig+0x144>)
 8009712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009714:	4b4a      	ldr	r3, [pc, #296]	; (8009840 <USBD_SetConfig+0x144>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d905      	bls.n	8009728 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f966 	bl	80099f0 <USBD_CtlError>
    return USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	e087      	b.n	8009838 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800972e:	2b02      	cmp	r3, #2
 8009730:	d002      	beq.n	8009738 <USBD_SetConfig+0x3c>
 8009732:	2b03      	cmp	r3, #3
 8009734:	d025      	beq.n	8009782 <USBD_SetConfig+0x86>
 8009736:	e071      	b.n	800981c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009738:	4b41      	ldr	r3, [pc, #260]	; (8009840 <USBD_SetConfig+0x144>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01c      	beq.n	800977a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009740:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <USBD_SetConfig+0x144>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800974a:	4b3d      	ldr	r3, [pc, #244]	; (8009840 <USBD_SetConfig+0x144>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff f9bd 	bl	8008ad0 <USBD_SetClassConfig>
 8009756:	4603      	mov	r3, r0
 8009758:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f944 	bl	80099f0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009768:	e065      	b.n	8009836 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fa0b 	bl	8009b86 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2203      	movs	r2, #3
 8009774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009778:	e05d      	b.n	8009836 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fa03 	bl	8009b86 <USBD_CtlSendStatus>
    break;
 8009780:	e059      	b.n	8009836 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009782:	4b2f      	ldr	r3, [pc, #188]	; (8009840 <USBD_SetConfig+0x144>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d112      	bne.n	80097b0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2202      	movs	r2, #2
 800978e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009792:	4b2b      	ldr	r3, [pc, #172]	; (8009840 <USBD_SetConfig+0x144>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800979c:	4b28      	ldr	r3, [pc, #160]	; (8009840 <USBD_SetConfig+0x144>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff f9b0 	bl	8008b08 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9ec 	bl	8009b86 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80097ae:	e042      	b.n	8009836 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80097b0:	4b23      	ldr	r3, [pc, #140]	; (8009840 <USBD_SetConfig+0x144>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d02a      	beq.n	8009814 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff f99e 	bl	8008b08 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80097cc:	4b1c      	ldr	r3, [pc, #112]	; (8009840 <USBD_SetConfig+0x144>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80097d6:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <USBD_SetConfig+0x144>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff f977 	bl	8008ad0 <USBD_SetClassConfig>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00f      	beq.n	800980c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8fe 	bl	80099f0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7ff f983 	bl	8008b08 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2202      	movs	r2, #2
 8009806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800980a:	e014      	b.n	8009836 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9ba 	bl	8009b86 <USBD_CtlSendStatus>
    break;
 8009812:	e010      	b.n	8009836 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f9b6 	bl	8009b86 <USBD_CtlSendStatus>
    break;
 800981a:	e00c      	b.n	8009836 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f8e6 	bl	80099f0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <USBD_SetConfig+0x144>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff f96c 	bl	8008b08 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009830:	2303      	movs	r3, #3
 8009832:	73fb      	strb	r3, [r7, #15]
    break;
 8009834:	bf00      	nop
  }

  return ret;
 8009836:	7bfb      	ldrb	r3, [r7, #15]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000208 	.word	0x20000208

08009844 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	88db      	ldrh	r3, [r3, #6]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d004      	beq.n	8009860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f8c9 	bl	80099f0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800985e:	e021      	b.n	80098a4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009866:	2b01      	cmp	r3, #1
 8009868:	db17      	blt.n	800989a <USBD_GetConfig+0x56>
 800986a:	2b02      	cmp	r3, #2
 800986c:	dd02      	ble.n	8009874 <USBD_GetConfig+0x30>
 800986e:	2b03      	cmp	r3, #3
 8009870:	d00b      	beq.n	800988a <USBD_GetConfig+0x46>
 8009872:	e012      	b.n	800989a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	3308      	adds	r3, #8
 800987e:	2201      	movs	r2, #1
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f925 	bl	8009ad2 <USBD_CtlSendData>
      break;
 8009888:	e00c      	b.n	80098a4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3304      	adds	r3, #4
 800988e:	2201      	movs	r2, #1
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f91d 	bl	8009ad2 <USBD_CtlSendData>
      break;
 8009898:	e004      	b.n	80098a4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f8a7 	bl	80099f0 <USBD_CtlError>
      break;
 80098a2:	bf00      	nop
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098bc:	3b01      	subs	r3, #1
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d81e      	bhi.n	8009900 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	88db      	ldrh	r3, [r3, #6]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d004      	beq.n	80098d4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f88f 	bl	80099f0 <USBD_CtlError>
      break;
 80098d2:	e01a      	b.n	800990a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f043 0202 	orr.w	r2, r3, #2
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	330c      	adds	r3, #12
 80098f4:	2202      	movs	r2, #2
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f8ea 	bl	8009ad2 <USBD_CtlSendData>
    break;
 80098fe:	e004      	b.n	800990a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f874 	bl	80099f0 <USBD_CtlError>
    break;
 8009908:	bf00      	nop
  }
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d106      	bne.n	8009932 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f92a 	bl	8009b86 <USBD_CtlSendStatus>
  }
}
 8009932:	bf00      	nop
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800994a:	3b01      	subs	r3, #1
 800994c:	2b02      	cmp	r3, #2
 800994e:	d80b      	bhi.n	8009968 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	885b      	ldrh	r3, [r3, #2]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d10c      	bne.n	8009972 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f910 	bl	8009b86 <USBD_CtlSendStatus>
      }
      break;
 8009966:	e004      	b.n	8009972 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f840 	bl	80099f0 <USBD_CtlError>
      break;
 8009970:	e000      	b.n	8009974 <USBD_ClrFeature+0x3a>
      break;
 8009972:	bf00      	nop
  }
}
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	781a      	ldrb	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3301      	adds	r3, #1
 8009996:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff faa8 	bl	8008efc <SWAPBYTE>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3301      	adds	r3, #1
 80099b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3301      	adds	r3, #1
 80099be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff fa9b 	bl	8008efc <SWAPBYTE>
 80099c6:	4603      	mov	r3, r0
 80099c8:	461a      	mov	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7ff fa8e 	bl	8008efc <SWAPBYTE>
 80099e0:	4603      	mov	r3, r0
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	80da      	strh	r2, [r3, #6]
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099fa:	2180      	movs	r1, #128	; 0x80
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fc81 	bl	800a304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a02:	2100      	movs	r1, #0
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fc7d 	bl	800a304 <USBD_LL_StallEP>
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b086      	sub	sp, #24
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d036      	beq.n	8009a96 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009a2c:	6938      	ldr	r0, [r7, #16]
 8009a2e:	f000 f836 	bl	8009a9e <USBD_GetLen>
 8009a32:	4603      	mov	r3, r0
 8009a34:	3301      	adds	r3, #1
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	4413      	add	r3, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	7812      	ldrb	r2, [r2, #0]
 8009a4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	4413      	add	r3, r2
 8009a58:	2203      	movs	r2, #3
 8009a5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a62:	e013      	b.n	8009a8c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	4413      	add	r3, r2
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3301      	adds	r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
    idx++;
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	4413      	add	r3, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e7      	bne.n	8009a64 <USBD_GetString+0x52>
 8009a94:	e000      	b.n	8009a98 <USBD_GetString+0x86>
    return;
 8009a96:	bf00      	nop
  }
}
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009aae:	e005      	b.n	8009abc <USBD_GetLen+0x1e>
  {
    len++;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1f5      	bne.n	8009ab0 <USBD_GetLen+0x12>
  }

  return len;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	2100      	movs	r1, #0
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 fc8d 	bl	800a418 <USBD_LL_Transmit>

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 fc7c 	bl	800a418 <USBD_LL_Transmit>

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2203      	movs	r2, #3
 8009b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	2100      	movs	r1, #0
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 fc80 	bl	800a45a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	2100      	movs	r1, #0
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fc6f 	bl	800a45a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2204      	movs	r2, #4
 8009b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b96:	2300      	movs	r3, #0
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc3b 	bl	800a418 <USBD_LL_Transmit>

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2205      	movs	r2, #5
 8009bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fc49 	bl	800a45a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009bd8:	2200      	movs	r2, #0
 8009bda:	4912      	ldr	r1, [pc, #72]	; (8009c24 <MX_USB_Device_Init+0x50>)
 8009bdc:	4812      	ldr	r0, [pc, #72]	; (8009c28 <MX_USB_Device_Init+0x54>)
 8009bde:	f7fe ff09 	bl	80089f4 <USBD_Init>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009be8:	f7f7 fef0 	bl	80019cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009bec:	490f      	ldr	r1, [pc, #60]	; (8009c2c <MX_USB_Device_Init+0x58>)
 8009bee:	480e      	ldr	r0, [pc, #56]	; (8009c28 <MX_USB_Device_Init+0x54>)
 8009bf0:	f7fe ff30 	bl	8008a54 <USBD_RegisterClass>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009bfa:	f7f7 fee7 	bl	80019cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009bfe:	490c      	ldr	r1, [pc, #48]	; (8009c30 <MX_USB_Device_Init+0x5c>)
 8009c00:	4809      	ldr	r0, [pc, #36]	; (8009c28 <MX_USB_Device_Init+0x54>)
 8009c02:	f7fe fe5b 	bl	80088bc <USBD_CDC_RegisterInterface>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009c0c:	f7f7 fede 	bl	80019cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009c10:	4805      	ldr	r0, [pc, #20]	; (8009c28 <MX_USB_Device_Init+0x54>)
 8009c12:	f7fe ff46 	bl	8008aa2 <USBD_Start>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009c1c:	f7f7 fed6 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009c20:	bf00      	nop
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20000130 	.word	0x20000130
 8009c28:	200006e4 	.word	0x200006e4
 8009c2c:	20000018 	.word	0x20000018
 8009c30:	2000011c 	.word	0x2000011c

08009c34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4905      	ldr	r1, [pc, #20]	; (8009c50 <CDC_Init_FS+0x1c>)
 8009c3c:	4805      	ldr	r0, [pc, #20]	; (8009c54 <CDC_Init_FS+0x20>)
 8009c3e:	f7fe fe52 	bl	80088e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c42:	4905      	ldr	r1, [pc, #20]	; (8009c58 <CDC_Init_FS+0x24>)
 8009c44:	4803      	ldr	r0, [pc, #12]	; (8009c54 <CDC_Init_FS+0x20>)
 8009c46:	f7fe fe67 	bl	8008918 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000d9c 	.word	0x20000d9c
 8009c54:	200006e4 	.word	0x200006e4
 8009c58:	200009b4 	.word	0x200009b4

08009c5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	2b23      	cmp	r3, #35	; 0x23
 8009c80:	d84a      	bhi.n	8009d18 <CDC_Control_FS+0xac>
 8009c82:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <CDC_Control_FS+0x1c>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009d19 	.word	0x08009d19
 8009c8c:	08009d19 	.word	0x08009d19
 8009c90:	08009d19 	.word	0x08009d19
 8009c94:	08009d19 	.word	0x08009d19
 8009c98:	08009d19 	.word	0x08009d19
 8009c9c:	08009d19 	.word	0x08009d19
 8009ca0:	08009d19 	.word	0x08009d19
 8009ca4:	08009d19 	.word	0x08009d19
 8009ca8:	08009d19 	.word	0x08009d19
 8009cac:	08009d19 	.word	0x08009d19
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009d19 	.word	0x08009d19
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009d19 	.word	0x08009d19
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009d19 	.word	0x08009d19
 8009ccc:	08009d19 	.word	0x08009d19
 8009cd0:	08009d19 	.word	0x08009d19
 8009cd4:	08009d19 	.word	0x08009d19
 8009cd8:	08009d19 	.word	0x08009d19
 8009cdc:	08009d19 	.word	0x08009d19
 8009ce0:	08009d19 	.word	0x08009d19
 8009ce4:	08009d19 	.word	0x08009d19
 8009ce8:	08009d19 	.word	0x08009d19
 8009cec:	08009d19 	.word	0x08009d19
 8009cf0:	08009d19 	.word	0x08009d19
 8009cf4:	08009d19 	.word	0x08009d19
 8009cf8:	08009d19 	.word	0x08009d19
 8009cfc:	08009d19 	.word	0x08009d19
 8009d00:	08009d19 	.word	0x08009d19
 8009d04:	08009d19 	.word	0x08009d19
 8009d08:	08009d19 	.word	0x08009d19
 8009d0c:	08009d19 	.word	0x08009d19
 8009d10:	08009d19 	.word	0x08009d19
 8009d14:	08009d19 	.word	0x08009d19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d18:	bf00      	nop
  }

  return (USBD_OK);
 8009d1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7f6 fe5d 	bl	80009f4 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4805      	ldr	r0, [pc, #20]	; (8009d54 <CDC_Receive_FS+0x2c>)
 8009d3e:	f7fe fdeb 	bl	8008918 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d42:	4804      	ldr	r0, [pc, #16]	; (8009d54 <CDC_Receive_FS+0x2c>)
 8009d44:	f7fe fe2c 	bl	80089a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200006e4 	.word	0x200006e4

08009d58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <CDC_Transmit_FS+0x48>)
 8009d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e00b      	b.n	8009d96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d7e:	887b      	ldrh	r3, [r7, #2]
 8009d80:	461a      	mov	r2, r3
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	4806      	ldr	r0, [pc, #24]	; (8009da0 <CDC_Transmit_FS+0x48>)
 8009d86:	f7fe fdae 	bl	80088e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d8a:	4805      	ldr	r0, [pc, #20]	; (8009da0 <CDC_Transmit_FS+0x48>)
 8009d8c:	f7fe fdd8 	bl	8008940 <USBD_CDC_TransmitPacket>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	200006e4 	.word	0x200006e4

08009da4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2212      	movs	r2, #18
 8009dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009dda:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	20000150 	.word	0x20000150

08009dec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	6039      	str	r1, [r7, #0]
 8009df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dfe:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20000164 	.word	0x20000164

08009e10 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d105      	bne.n	8009e2e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	4907      	ldr	r1, [pc, #28]	; (8009e44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009e26:	4808      	ldr	r0, [pc, #32]	; (8009e48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009e28:	f7ff fdf3 	bl	8009a12 <USBD_GetString>
 8009e2c:	e004      	b.n	8009e38 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4904      	ldr	r1, [pc, #16]	; (8009e44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009e32:	4805      	ldr	r0, [pc, #20]	; (8009e48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009e34:	f7ff fded 	bl	8009a12 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e38:	4b02      	ldr	r3, [pc, #8]	; (8009e44 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20001184 	.word	0x20001184
 8009e48:	0800a64c 	.word	0x0800a64c

08009e4c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	4904      	ldr	r1, [pc, #16]	; (8009e6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009e5c:	4804      	ldr	r0, [pc, #16]	; (8009e70 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009e5e:	f7ff fdd8 	bl	8009a12 <USBD_GetString>
  return USBD_StrDesc;
 8009e62:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	20001184 	.word	0x20001184
 8009e70:	0800a664 	.word	0x0800a664

08009e74 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6039      	str	r1, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	221a      	movs	r2, #26
 8009e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e86:	f000 f843 	bl	8009f10 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e8a:	4b02      	ldr	r3, [pc, #8]	; (8009e94 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000168 	.word	0x20000168

08009e98 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ea4:	79fb      	ldrb	r3, [r7, #7]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d105      	bne.n	8009eb6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	4907      	ldr	r1, [pc, #28]	; (8009ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009eae:	4808      	ldr	r0, [pc, #32]	; (8009ed0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009eb0:	f7ff fdaf 	bl	8009a12 <USBD_GetString>
 8009eb4:	e004      	b.n	8009ec0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	4904      	ldr	r1, [pc, #16]	; (8009ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009eba:	4805      	ldr	r0, [pc, #20]	; (8009ed0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009ebc:	f7ff fda9 	bl	8009a12 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ec0:	4b02      	ldr	r3, [pc, #8]	; (8009ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20001184 	.word	0x20001184
 8009ed0:	0800a678 	.word	0x0800a678

08009ed4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4907      	ldr	r1, [pc, #28]	; (8009f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009eea:	4808      	ldr	r0, [pc, #32]	; (8009f0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009eec:	f7ff fd91 	bl	8009a12 <USBD_GetString>
 8009ef0:	e004      	b.n	8009efc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4904      	ldr	r1, [pc, #16]	; (8009f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009ef6:	4805      	ldr	r0, [pc, #20]	; (8009f0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009ef8:	f7ff fd8b 	bl	8009a12 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20001184 	.word	0x20001184
 8009f0c:	0800a684 	.word	0x0800a684

08009f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f16:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <Get_SerialNum+0x44>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f1c:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <Get_SerialNum+0x48>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f22:	4b0e      	ldr	r3, [pc, #56]	; (8009f5c <Get_SerialNum+0x4c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d009      	beq.n	8009f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f36:	2208      	movs	r2, #8
 8009f38:	4909      	ldr	r1, [pc, #36]	; (8009f60 <Get_SerialNum+0x50>)
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 f814 	bl	8009f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f40:	2204      	movs	r2, #4
 8009f42:	4908      	ldr	r1, [pc, #32]	; (8009f64 <Get_SerialNum+0x54>)
 8009f44:	68b8      	ldr	r0, [r7, #8]
 8009f46:	f000 f80f 	bl	8009f68 <IntToUnicode>
  }
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	1fff7590 	.word	0x1fff7590
 8009f58:	1fff7594 	.word	0x1fff7594
 8009f5c:	1fff7598 	.word	0x1fff7598
 8009f60:	2000016a 	.word	0x2000016a
 8009f64:	2000017a 	.word	0x2000017a

08009f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	75fb      	strb	r3, [r7, #23]
 8009f7e:	e027      	b.n	8009fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	0f1b      	lsrs	r3, r3, #28
 8009f84:	2b09      	cmp	r3, #9
 8009f86:	d80b      	bhi.n	8009fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	0f1b      	lsrs	r3, r3, #28
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	4619      	mov	r1, r3
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	440b      	add	r3, r1
 8009f98:	3230      	adds	r2, #48	; 0x30
 8009f9a:	b2d2      	uxtb	r2, r2
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	e00a      	b.n	8009fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	0f1b      	lsrs	r3, r3, #28
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	4619      	mov	r1, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	440b      	add	r3, r1
 8009fb0:	3237      	adds	r2, #55	; 0x37
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	75fb      	strb	r3, [r7, #23]
 8009fd0:	7dfa      	ldrb	r2, [r7, #23]
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d3d3      	bcc.n	8009f80 <IntToUnicode+0x18>
  }
}
 8009fd8:	bf00      	nop
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a0d      	ldr	r2, [pc, #52]	; (800a028 <HAL_PCD_MspInit+0x44>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d113      	bne.n	800a01e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <HAL_PCD_MspInit+0x48>)
 8009ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffa:	4a0c      	ldr	r2, [pc, #48]	; (800a02c <HAL_PCD_MspInit+0x48>)
 8009ffc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a000:	6593      	str	r3, [r2, #88]	; 0x58
 800a002:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <HAL_PCD_MspInit+0x48>)
 800a004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a00e:	2200      	movs	r2, #0
 800a010:	2100      	movs	r1, #0
 800a012:	2014      	movs	r0, #20
 800a014:	f7f8 f913 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a018:	2014      	movs	r0, #20
 800a01a:	f7f8 f92a 	bl	8002272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	40005c00 	.word	0x40005c00
 800a02c:	40021000 	.word	0x40021000

0800a030 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f7fe fd76 	bl	8008b38 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a066:	78fa      	ldrb	r2, [r7, #3]
 800a068:	6879      	ldr	r1, [r7, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	00db      	lsls	r3, r3, #3
 800a072:	440b      	add	r3, r1
 800a074:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	4619      	mov	r1, r3
 800a07e:	f7fe fdae 	bl	8008bde <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	440b      	add	r3, r1
 800a0aa:	333c      	adds	r3, #60	; 0x3c
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f7fe fdf7 	bl	8008ca4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fefb 	bl	8008ec8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d001      	beq.n	800a0f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a0ee:	f7f7 fc6d 	bl	80019cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0f8:	7bfa      	ldrb	r2, [r7, #15]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe fea8 	bl	8008e52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fe61 	bl	8008dd0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fea3 	bl	8008e72 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <HAL_PCD_SuspendCallback+0x30>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a03      	ldr	r2, [pc, #12]	; (800a148 <HAL_PCD_SuspendCallback+0x30>)
 800a13a:	f043 0306 	orr.w	r3, r3, #6
 800a13e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	e000ed00 	.word	0xe000ed00

0800a14c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d007      	beq.n	800a16c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a15c:	4b08      	ldr	r3, [pc, #32]	; (800a180 <HAL_PCD_ResumeCallback+0x34>)
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	4a07      	ldr	r2, [pc, #28]	; (800a180 <HAL_PCD_ResumeCallback+0x34>)
 800a162:	f023 0306 	bic.w	r3, r3, #6
 800a166:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a168:	f000 f9fa 	bl	800a560 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe fe92 	bl	8008e9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	e000ed00 	.word	0xe000ed00

0800a184 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a18c:	4a2b      	ldr	r2, [pc, #172]	; (800a23c <USBD_LL_Init+0xb8>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a29      	ldr	r2, [pc, #164]	; (800a23c <USBD_LL_Init+0xb8>)
 800a198:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a19c:	4b27      	ldr	r3, [pc, #156]	; (800a23c <USBD_LL_Init+0xb8>)
 800a19e:	4a28      	ldr	r2, [pc, #160]	; (800a240 <USBD_LL_Init+0xbc>)
 800a1a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a1a2:	4b26      	ldr	r3, [pc, #152]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1a4:	2208      	movs	r2, #8
 800a1a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a1a8:	4b24      	ldr	r3, [pc, #144]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1ae:	4b23      	ldr	r3, [pc, #140]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a1b4:	4b21      	ldr	r3, [pc, #132]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1ba:	4b20      	ldr	r3, [pc, #128]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1c0:	4b1e      	ldr	r3, [pc, #120]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a1c6:	4b1d      	ldr	r3, [pc, #116]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a1cc:	481b      	ldr	r0, [pc, #108]	; (800a23c <USBD_LL_Init+0xb8>)
 800a1ce:	f7f8 fa37 	bl	8002640 <HAL_PCD_Init>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a1d8:	f7f7 fbf8 	bl	80019cc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1e2:	2318      	movs	r3, #24
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	f7f9 fd25 	bl	8003c36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1f2:	2358      	movs	r3, #88	; 0x58
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2180      	movs	r1, #128	; 0x80
 800a1f8:	f7f9 fd1d 	bl	8003c36 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a202:	23c0      	movs	r3, #192	; 0xc0
 800a204:	2200      	movs	r2, #0
 800a206:	2181      	movs	r1, #129	; 0x81
 800a208:	f7f9 fd15 	bl	8003c36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a212:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a216:	2200      	movs	r2, #0
 800a218:	2101      	movs	r1, #1
 800a21a:	f7f9 fd0c 	bl	8003c36 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a224:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a228:	2200      	movs	r2, #0
 800a22a:	2182      	movs	r1, #130	; 0x82
 800a22c:	f7f9 fd03 	bl	8003c36 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20001384 	.word	0x20001384
 800a240:	40005c00 	.word	0x40005c00

0800a244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7f8 fad5 	bl	800280a <HAL_PCD_Start>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	4618      	mov	r0, r3
 800a268:	f000 f980 	bl	800a56c <USBD_Get_USB_Status>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a270:	7bbb      	ldrb	r3, [r7, #14]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	4608      	mov	r0, r1
 800a284:	4611      	mov	r1, r2
 800a286:	461a      	mov	r2, r3
 800a288:	4603      	mov	r3, r0
 800a28a:	70fb      	strb	r3, [r7, #3]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70bb      	strb	r3, [r7, #2]
 800a290:	4613      	mov	r3, r2
 800a292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2a2:	78bb      	ldrb	r3, [r7, #2]
 800a2a4:	883a      	ldrh	r2, [r7, #0]
 800a2a6:	78f9      	ldrb	r1, [r7, #3]
 800a2a8:	f7f8 fc44 	bl	8002b34 <HAL_PCD_EP_Open>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f95a 	bl	800a56c <USBD_Get_USB_Status>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7f8 fc8b 	bl	8002c00 <HAL_PCD_EP_Close>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f93b 	bl	800a56c <USBD_Get_USB_Status>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7f8 fd4c 	bl	8002dc0 <HAL_PCD_EP_SetStall>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 f91c 	bl	800a56c <USBD_Get_USB_Status>
 800a334:	4603      	mov	r3, r0
 800a336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a338:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7f8 fd8d 	bl	8002e80 <HAL_PCD_EP_ClrStall>
 800a366:	4603      	mov	r3, r0
 800a368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f8fd 	bl	800a56c <USBD_Get_USB_Status>
 800a372:	4603      	mov	r3, r0
 800a374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a376:	7bbb      	ldrb	r3, [r7, #14]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	da0c      	bge.n	800a3b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	00db      	lsls	r3, r3, #3
 800a3ae:	440b      	add	r3, r1
 800a3b0:	3302      	adds	r3, #2
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	e00b      	b.n	800a3ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	440b      	add	r3, r1
 800a3c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a3cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7f8 fb76 	bl	8002aea <HAL_PCD_SetAddress>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 f8b1 	bl	800a56c <USBD_Get_USB_Status>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	607a      	str	r2, [r7, #4]
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	460b      	mov	r3, r1
 800a426:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a436:	7af9      	ldrb	r1, [r7, #11]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	f7f8 fc7d 	bl	8002d3a <HAL_PCD_EP_Transmit>
 800a440:	4603      	mov	r3, r0
 800a442:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	4618      	mov	r0, r3
 800a448:	f000 f890 	bl	800a56c <USBD_Get_USB_Status>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a450:	7dbb      	ldrb	r3, [r7, #22]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b086      	sub	sp, #24
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	603b      	str	r3, [r7, #0]
 800a466:	460b      	mov	r3, r1
 800a468:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a478:	7af9      	ldrb	r1, [r7, #11]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	f7f8 fc07 	bl	8002c90 <HAL_PCD_EP_Receive>
 800a482:	4603      	mov	r3, r0
 800a484:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 f86f 	bl	800a56c <USBD_Get_USB_Status>
 800a48e:	4603      	mov	r3, r0
 800a490:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a492:	7dbb      	ldrb	r3, [r7, #22]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4ae:	78fa      	ldrb	r2, [r7, #3]
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7f8 fc29 	bl	8002d0a <HAL_PCD_EP_GetRxCount>
 800a4b8:	4603      	mov	r3, r0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <HAL_PCDEx_LPM_Callback+0x18>
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d013      	beq.n	800a502 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a4da:	e023      	b.n	800a524 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d007      	beq.n	800a4f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a4e4:	f000 f83c 	bl	800a560 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4e8:	4b10      	ldr	r3, [pc, #64]	; (800a52c <HAL_PCDEx_LPM_Callback+0x68>)
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	4a0f      	ldr	r2, [pc, #60]	; (800a52c <HAL_PCDEx_LPM_Callback+0x68>)
 800a4ee:	f023 0306 	bic.w	r3, r3, #6
 800a4f2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fcce 	bl	8008e9c <USBD_LL_Resume>
    break;
 800a500:	e010      	b.n	800a524 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fcb2 	bl	8008e72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d005      	beq.n	800a522 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <HAL_PCDEx_LPM_Callback+0x68>)
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	4a04      	ldr	r2, [pc, #16]	; (800a52c <HAL_PCDEx_LPM_Callback+0x68>)
 800a51c:	f043 0306 	orr.w	r3, r3, #6
 800a520:	6113      	str	r3, [r2, #16]
    break;
 800a522:	bf00      	nop
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	e000ed00 	.word	0xe000ed00

0800a530 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a538:	4b03      	ldr	r3, [pc, #12]	; (800a548 <USBD_static_malloc+0x18>)
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	2000020c 	.word	0x2000020c

0800a54c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]

}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a564:	f7f6 fc16 	bl	8000d94 <SystemClock_Config>
}
 800a568:	bf00      	nop
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d817      	bhi.n	800a5b0 <USBD_Get_USB_Status+0x44>
 800a580:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <USBD_Get_USB_Status+0x1c>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a599 	.word	0x0800a599
 800a58c:	0800a59f 	.word	0x0800a59f
 800a590:	0800a5a5 	.word	0x0800a5a5
 800a594:	0800a5ab 	.word	0x0800a5ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
    break;
 800a59c:	e00b      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a2:	e008      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e005      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e002      	b.n	800a5b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	bf00      	nop
  }
  return usb_status;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <__libc_init_array>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	4e0d      	ldr	r6, [pc, #52]	; (800a5fc <__libc_init_array+0x38>)
 800a5c8:	4c0d      	ldr	r4, [pc, #52]	; (800a600 <__libc_init_array+0x3c>)
 800a5ca:	1ba4      	subs	r4, r4, r6
 800a5cc:	10a4      	asrs	r4, r4, #2
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	42a5      	cmp	r5, r4
 800a5d2:	d109      	bne.n	800a5e8 <__libc_init_array+0x24>
 800a5d4:	4e0b      	ldr	r6, [pc, #44]	; (800a604 <__libc_init_array+0x40>)
 800a5d6:	4c0c      	ldr	r4, [pc, #48]	; (800a608 <__libc_init_array+0x44>)
 800a5d8:	f000 f82c 	bl	800a634 <_init>
 800a5dc:	1ba4      	subs	r4, r4, r6
 800a5de:	10a4      	asrs	r4, r4, #2
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	42a5      	cmp	r5, r4
 800a5e4:	d105      	bne.n	800a5f2 <__libc_init_array+0x2e>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5ec:	4798      	blx	r3
 800a5ee:	3501      	adds	r5, #1
 800a5f0:	e7ee      	b.n	800a5d0 <__libc_init_array+0xc>
 800a5f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5f6:	4798      	blx	r3
 800a5f8:	3501      	adds	r5, #1
 800a5fa:	e7f2      	b.n	800a5e2 <__libc_init_array+0x1e>
 800a5fc:	0800a6a4 	.word	0x0800a6a4
 800a600:	0800a6a4 	.word	0x0800a6a4
 800a604:	0800a6a4 	.word	0x0800a6a4
 800a608:	0800a6a8 	.word	0x0800a6a8

0800a60c <memcpy>:
 800a60c:	b510      	push	{r4, lr}
 800a60e:	1e43      	subs	r3, r0, #1
 800a610:	440a      	add	r2, r1
 800a612:	4291      	cmp	r1, r2
 800a614:	d100      	bne.n	800a618 <memcpy+0xc>
 800a616:	bd10      	pop	{r4, pc}
 800a618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a61c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a620:	e7f7      	b.n	800a612 <memcpy+0x6>

0800a622 <memset>:
 800a622:	4402      	add	r2, r0
 800a624:	4603      	mov	r3, r0
 800a626:	4293      	cmp	r3, r2
 800a628:	d100      	bne.n	800a62c <memset+0xa>
 800a62a:	4770      	bx	lr
 800a62c:	f803 1b01 	strb.w	r1, [r3], #1
 800a630:	e7f9      	b.n	800a626 <memset+0x4>
	...

0800a634 <_init>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr

0800a640 <_fini>:
 800a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a642:	bf00      	nop
 800a644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a646:	bc08      	pop	{r3}
 800a648:	469e      	mov	lr, r3
 800a64a:	4770      	bx	lr
