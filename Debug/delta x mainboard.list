
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a414  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a644  0800a644  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a644  0800a644  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a644  0800a644  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  20000184  0800a7d0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  0800a7d0  00021730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1f0  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000359f  00000000  00000000  0003c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  00040d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002095e  00000000  00000000  00041f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011fbb  00000000  00000000  000628be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4e9d  00000000  00000000  00074879  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005400  00000000  00000000  00139794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a5d4 	.word	0x0800a5d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a5d4 	.word	0x0800a5d4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <CDC_On_Receive>:
volatile uint8_t command_received = 0;
volatile uint8_t command_received_ticker = 0;

volatile float pGain, iGain, dGain = 0;

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d10c      	bne.n	80006cc <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 80006b2:	2220      	movs	r2, #32
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <CDC_On_Receive+0x34>)
 80006b8:	f009 ff78 	bl	800a5ac <memcpy>

		if (command.delimiter == 0xABCABC) {
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <CDC_On_Receive+0x34>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <CDC_On_Receive+0x38>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d102      	bne.n	80006cc <CDC_On_Receive+0x2c>
			command_received = 1;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <CDC_On_Receive+0x3c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000544 	.word	0x20000544
 80006d8:	00abcabc 	.word	0x00abcabc
 80006dc:	200001a0 	.word	0x200001a0

080006e0 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, int32_t motor_speed) {
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dd15      	ble.n	800071e <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b64      	cmp	r3, #100	; 0x64
 80006f6:	dc0b      	bgt.n	8000710 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000706:	3320      	adds	r3, #32
 8000708:	461a      	mov	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e002      	b.n	8000716 <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 800071c:	e020      	b.n	8000760 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da17      	bge.n	8000754 <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800072a:	db0a      	blt.n	8000742 <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <Set_Motor_Speed+0x8c>)
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000738:	3320      	adds	r3, #32
 800073a:	461a      	mov	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	e004      	b.n	800074c <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	425b      	negs	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	e005      	b.n	8000760 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	fffffe3e 	.word	0xfffffe3e

08000770 <Set_Thrower_Speed>:
		*channel_b = 0;
	}
}

inline void Set_Thrower_Speed(volatile uint32_t *channel_a,
		float thrower_speed) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	ed87 0a00 	vstr	s0, [r7]
	if (thrower_speed > 0) {
 800077c:	edd7 7a00 	vldr	s15, [r7]
 8000780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	dd1a      	ble.n	80007c0 <Set_Thrower_Speed+0x50>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 800078a:	edd7 7a00 	vldr	s15, [r7]
 800078e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80007d4 <Set_Thrower_Speed+0x64>
 8000792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d900      	bls.n	800079e <Set_Thrower_Speed+0x2e>
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 800079c:	e014      	b.n	80007c8 <Set_Thrower_Speed+0x58>
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 800079e:	edd7 7a00 	vldr	s15, [r7]
 80007a2:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80007a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80007d8 <Set_Thrower_Speed+0x68>
 80007ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b6:	ee17 2a90 	vmov	r2, s15
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
}
 80007be:	e003      	b.n	80007c8 <Set_Thrower_Speed+0x58>
		*channel_a = ESC_IDLE_CCR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	42c80000 	.word	0x42c80000
 80007d8:	45834000 	.word	0x45834000

080007dc <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t *channel_a, float servo_speed,
		GPIO_PinState ir_status, int32_t ir_control) {
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80007e8:	460b      	mov	r3, r1
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <Set_Servo_Speed+0x24>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d04b      	beq.n	8000892 <Set_Servo_Speed+0xb6>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d048      	beq.n	8000892 <Set_Servo_Speed+0xb6>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 8000800:	edd7 7a02 	vldr	s15, [r7, #8]
 8000804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080c:	dd1a      	ble.n	8000844 <Set_Servo_Speed+0x68>
 800080e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000812:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80008a0 <Set_Servo_Speed+0xc4>
 8000816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081e:	d811      	bhi.n	8000844 <Set_Servo_Speed+0x68>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <Set_Servo_Speed+0xc8>)
 8000822:	edd3 7a04 	vldr	s15, [r3, #16]
 8000826:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800082a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800082e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80008a8 <Set_Servo_Speed+0xcc>
 8000832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800083a:	ee17 2a90 	vmov	r2, s15
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e026      	b.n	8000892 <Set_Servo_Speed+0xb6>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <Set_Servo_Speed+0xc8>)
 8000846:	edd3 7a04 	vldr	s15, [r3, #16]
 800084a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000852:	d51a      	bpl.n	800088a <Set_Servo_Speed+0xae>
 8000854:	edd7 7a02 	vldr	s15, [r7, #8]
 8000858:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80008ac <Set_Servo_Speed+0xd0>
 800085c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	db11      	blt.n	800088a <Set_Servo_Speed+0xae>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <Set_Servo_Speed+0xc8>)
 8000868:	edd3 7a04 	vldr	s15, [r3, #16]
 800086c:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8000870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000874:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80008b0 <Set_Servo_Speed+0xd4>
 8000878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800087c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000880:	ee17 2a90 	vmov	r2, s15
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e003      	b.n	8000892 <Set_Servo_Speed+0xb6>
		} else {
			*channel_a = 0;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000890:	e7ff      	b.n	8000892 <Set_Servo_Speed+0xb6>
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	42c80000 	.word	0x42c80000
 80008a4:	20000544 	.word	0x20000544
 80008a8:	4592e000 	.word	0x4592e000
 80008ac:	c2c80000 	.word	0xc2c80000
 80008b0:	459c4000 	.word	0x459c4000
 80008b4:	00000000 	.word	0x00000000

080008b8 <Calculate_PID>:

Motor motor1;
Motor motor2;
Motor motor3;

inline void Calculate_PID(Motor *motor) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	// based on "PID Without a PhD" by Tim Wescott
	// https://www.embeddedrelated.com/showarticle/943.php
	if (motor->target_speed > 0.1 || motor->target_speed < -0.1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe0b 	bl	80004e0 <__aeabi_f2d>
 80008ca:	a380      	add	r3, pc, #512	; (adr r3, 8000acc <Calculate_PID+0x214>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	f7ff fedc 	bl	800068c <__aeabi_dcmpgt>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10d      	bne.n	80008f6 <Calculate_PID+0x3e>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fdfe 	bl	80004e0 <__aeabi_f2d>
 80008e4:	a37b      	add	r3, pc, #492	; (adr r3, 8000ad4 <Calculate_PID+0x21c>)
 80008e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ea:	f7ff feb1 	bl	8000650 <__aeabi_dcmplt>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f000 80c7 	beq.w	8000a84 <Calculate_PID+0x1cc>
		float pTerm, iTerm, dTerm;
		if (command.pid_type == 0) {
 80008f6:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <Calculate_PID+0x1e0>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10a      	bne.n	8000914 <Calculate_PID+0x5c>
			pGain = 1;
 80008fe:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <Calculate_PID+0x1e4>)
 8000900:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000904:	601a      	str	r2, [r3, #0]
			iGain = 0.005;
 8000906:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <Calculate_PID+0x1e8>)
 8000908:	4a66      	ldr	r2, [pc, #408]	; (8000aa4 <Calculate_PID+0x1ec>)
 800090a:	601a      	str	r2, [r3, #0]
			dGain = 5;
 800090c:	4b66      	ldr	r3, [pc, #408]	; (8000aa8 <Calculate_PID+0x1f0>)
 800090e:	4a67      	ldr	r2, [pc, #412]	; (8000aac <Calculate_PID+0x1f4>)
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e009      	b.n	8000928 <Calculate_PID+0x70>
		} else {
			pGain = 1;
 8000914:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <Calculate_PID+0x1e4>)
 8000916:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800091a:	601a      	str	r2, [r3, #0]
			iGain = 0.001;
 800091c:	4b60      	ldr	r3, [pc, #384]	; (8000aa0 <Calculate_PID+0x1e8>)
 800091e:	4a64      	ldr	r2, [pc, #400]	; (8000ab0 <Calculate_PID+0x1f8>)
 8000920:	601a      	str	r2, [r3, #0]
			dGain = 10;
 8000922:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <Calculate_PID+0x1f0>)
 8000924:	4a63      	ldr	r2, [pc, #396]	; (8000ab4 <Calculate_PID+0x1fc>)
 8000926:	601a      	str	r2, [r3, #0]
		}

		int error = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
		if (command.pid_type == 0) {
 800092c:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <Calculate_PID+0x1e0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d110      	bne.n	8000956 <Calculate_PID+0x9e>
			error = motor->target_speed - motor->cur_enc_speed;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	ee07 3a90 	vmov	s15, r3
 8000942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800094a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00c      	b.n	8000970 <Calculate_PID+0xb8>
		} else {
			error = motor->target_speed - motor->enc_speed_hist_avg;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800096a:	ee17 3a90 	vmov	r3, s15
 800096e:	617b      	str	r3, [r7, #20]
		}
		pTerm = error * pGain;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	ee07 3a90 	vmov	s15, r3
 8000976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <Calculate_PID+0x1e4>)
 800097c:	edd3 7a00 	vldr	s15, [r3]
 8000980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000984:	edc7 7a04 	vstr	s15, [r7, #16]

		motor->err_sum += error;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	441a      	add	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	645a      	str	r2, [r3, #68]	; 0x44
		motor->err_sum = clamp(-1000, 1000, motor->err_sum);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800099c:	db07      	blt.n	80009ae <Calculate_PID+0xf6>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009a6:	bfa8      	it	ge
 80009a8:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 80009ac:	e000      	b.n	80009b0 <Calculate_PID+0xf8>
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <Calculate_PID+0x200>)
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	6453      	str	r3, [r2, #68]	; 0x44
		iTerm = iGain * motor->err_sum;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b8:	ee07 3a90 	vmov	s15, r3
 80009bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009c0:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <Calculate_PID+0x1e8>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ca:	edc7 7a03 	vstr	s15, [r7, #12]

		dTerm = dGain * (motor->prev_speed - motor->cur_enc_speed);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <Calculate_PID+0x1f0>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ee:	edc7 7a02 	vstr	s15, [r7, #8]
		motor->prev_speed = motor->cur_enc_speed;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		motor->cur_speed = motor->cur_speed + pTerm + iTerm + dTerm;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		motor->cur_speed = clamp(-100, 100, motor->cur_speed);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000a2e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000abc <Calculate_PID+0x204>
 8000a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	dd01      	ble.n	8000a40 <Calculate_PID+0x188>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e00c      	b.n	8000a5a <Calculate_PID+0x1a2>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000a46:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000ac0 <Calculate_PID+0x208>
 8000a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	bf4c      	ite	mi
 8000a54:	2301      	movmi	r3, #1
 8000a56:	2300      	movpl	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <Calculate_PID+0x1aa>
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <Calculate_PID+0x20c>)
 8000a60:	e00d      	b.n	8000a7e <Calculate_PID+0x1c6>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000a68:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000abc <Calculate_PID+0x204>
 8000a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a74:	dd01      	ble.n	8000a7a <Calculate_PID+0x1c2>
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <Calculate_PID+0x210>)
 8000a78:	e001      	b.n	8000a7e <Calculate_PID+0x1c6>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (motor->target_speed > 0.1 || motor->target_speed < -0.1) {
 8000a82:	e003      	b.n	8000a8c <Calculate_PID+0x1d4>
	} else {
		motor->cur_speed = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	f3af 8000 	nop.w
 8000a98:	20000544 	.word	0x20000544
 8000a9c:	200005b0 	.word	0x200005b0
 8000aa0:	20000668 	.word	0x20000668
 8000aa4:	3ba3d70a 	.word	0x3ba3d70a
 8000aa8:	200001a4 	.word	0x200001a4
 8000aac:	40a00000 	.word	0x40a00000
 8000ab0:	3a83126f 	.word	0x3a83126f
 8000ab4:	41200000 	.word	0x41200000
 8000ab8:	fffffc18 	.word	0xfffffc18
 8000abc:	42c80000 	.word	0x42c80000
 8000ac0:	c2c80000 	.word	0xc2c80000
 8000ac4:	c2c80000 	.word	0xc2c80000
 8000ac8:	42c80000 	.word	0x42c80000
 8000acc:	9999999a 	.word	0x9999999a
 8000ad0:	3fb99999 	.word	0x3fb99999
 8000ad4:	9999999a 	.word	0x9999999a
 8000ad8:	bfb99999 	.word	0xbfb99999

08000adc <Calculate_Encoder_Diff>:

inline int Calculate_Encoder_Diff(uint16_t prev_pos, uint16_t cur_pos) {
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	80bb      	strh	r3, [r7, #4]
	int diff = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d90c      	bls.n	8000b14 <Calculate_Encoder_Diff+0x38>
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d807      	bhi.n	8000b14 <Calculate_Encoder_Diff+0x38>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000b0a:	33ff      	adds	r3, #255	; 0xff
 8000b0c:	88ba      	ldrh	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e015      	b.n	8000b40 <Calculate_Encoder_Diff+0x64>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d80c      	bhi.n	8000b38 <Calculate_Encoder_Diff+0x5c>
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d907      	bls.n	8000b38 <Calculate_Encoder_Diff+0x5c>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000b2e:	3bff      	subs	r3, #255	; 0xff
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e003      	b.n	8000b40 <Calculate_Encoder_Diff+0x64>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 8000b38:	88ba      	ldrh	r2, [r7, #4]
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	60fb      	str	r3, [r7, #12]
	}
	return clamp(-200, 200, diff) / 2;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8000b46:	db07      	blt.n	8000b58 <Calculate_Encoder_Diff+0x7c>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2bc8      	cmp	r3, #200	; 0xc8
 8000b4c:	bfa8      	it	ge
 8000b4e:	23c8      	movge	r3, #200	; 0xc8
 8000b50:	0fda      	lsrs	r2, r3, #31
 8000b52:	4413      	add	r3, r2
 8000b54:	105b      	asrs	r3, r3, #1
 8000b56:	e001      	b.n	8000b5c <Calculate_Encoder_Diff+0x80>
 8000b58:	f06f 0363 	mvn.w	r3, #99	; 0x63
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <Handle_Encoder>:

void Handle_Encoder(Motor *motor, uint16_t count) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
	motor->cur_pos = count;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	805a      	strh	r2, [r3, #2]
	motor->cur_enc_speed = Calculate_Encoder_Diff(motor->prev_pos,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	881a      	ldrh	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	885b      	ldrh	r3, [r3, #2]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f7ff ffa9 	bl	8000adc <Calculate_Encoder_Diff>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	605a      	str	r2, [r3, #4]
			motor->cur_pos);
	motor->prev_pos = motor->cur_pos;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	885a      	ldrh	r2, [r3, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	801a      	strh	r2, [r3, #0]

	motor->enc_speed_hist[motor->enc_speed_hist_cnt] = motor->cur_enc_speed;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3202      	adds	r2, #2
 8000ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (motor->enc_speed_hist_cnt >= 9) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	dd03      	ble.n	8000bb8 <Handle_Encoder+0x50>
		motor->enc_speed_hist_cnt = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb6:	e004      	b.n	8000bc2 <Handle_Encoder+0x5a>
	} else {
		motor->enc_speed_hist_cnt += 1;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	631a      	str	r2, [r3, #48]	; 0x30
	}

	int sum = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e00a      	b.n	8000be2 <Handle_Encoder+0x7a>
		sum += motor->enc_speed_hist[i];
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	3202      	adds	r2, #2
 8000bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	4413      	add	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	ddf1      	ble.n	8000bcc <Handle_Encoder+0x64>
	}
	motor->enc_speed_hist_avg = sum / 10;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <Handle_Encoder+0xa4>)
 8000bec:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf0:	1092      	asrs	r2, r2, #2
 8000bf2:	17db      	asrs	r3, r3, #31
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	66666667 	.word	0x66666667

08000c10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	ed2d 8b02 	vpush	{d8}
 8000c16:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c18:	f001 f995 	bl	8001f46 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c1c:	f000 f938 	bl	8000e90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c20:	f000 fd8c 	bl	800173c <MX_GPIO_Init>
	MX_TIM4_Init();
 8000c24:	f000 fb14 	bl	8001250 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000c28:	f000 fb9e 	bl	8001368 <MX_TIM8_Init>
	MX_TIM15_Init();
 8000c2c:	f000 fc0c 	bl	8001448 <MX_TIM15_Init>
	MX_TIM16_Init();
 8000c30:	f000 fc90 	bl	8001554 <MX_TIM16_Init>
	MX_TIM1_Init();
 8000c34:	f000 f994 	bl	8000f60 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000c38:	f000 fa42 	bl	80010c0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000c3c:	f000 fa94 	bl	8001168 <MX_TIM3_Init>
	MX_TIM7_Init();
 8000c40:	f000 fb5c 	bl	80012fc <MX_TIM7_Init>
	MX_TIM17_Init();
 8000c44:	f000 fd00 	bl	8001648 <MX_TIM17_Init>
	MX_USB_Device_Init();
 8000c48:	f008 ff94 	bl	8009b74 <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4876      	ldr	r0, [pc, #472]	; (8000e28 <main+0x218>)
 8000c50:	f004 fa8e 	bl	8005170 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c54:	2104      	movs	r1, #4
 8000c56:	4875      	ldr	r0, [pc, #468]	; (8000e2c <main+0x21c>)
 8000c58:	f004 fa8a 	bl	8005170 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4874      	ldr	r0, [pc, #464]	; (8000e30 <main+0x220>)
 8000c60:	f004 fa86 	bl	8005170 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c64:	2100      	movs	r1, #0
 8000c66:	4873      	ldr	r0, [pc, #460]	; (8000e34 <main+0x224>)
 8000c68:	f004 f8dc 	bl	8004e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4871      	ldr	r0, [pc, #452]	; (8000e34 <main+0x224>)
 8000c70:	f004 f8d8 	bl	8004e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c74:	2108      	movs	r1, #8
 8000c76:	486f      	ldr	r0, [pc, #444]	; (8000e34 <main+0x224>)
 8000c78:	f004 f8d4 	bl	8004e24 <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 0;
 8000c7c:	4b6e      	ldr	r3, [pc, #440]	; (8000e38 <main+0x228>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000c82:	4b6d      	ldr	r3, [pc, #436]	; (8000e38 <main+0x228>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000c88:	4b6b      	ldr	r3, [pc, #428]	; (8000e38 <main+0x228>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	486a      	ldr	r0, [pc, #424]	; (8000e3c <main+0x22c>)
 8000c92:	f004 f8c7 	bl	8004e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c96:	2104      	movs	r1, #4
 8000c98:	4868      	ldr	r0, [pc, #416]	; (8000e3c <main+0x22c>)
 8000c9a:	f004 f8c3 	bl	8004e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4866      	ldr	r0, [pc, #408]	; (8000e3c <main+0x22c>)
 8000ca2:	f004 f8bf 	bl	8004e24 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <main+0x230>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <main+0x230>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8000cb2:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <main+0x230>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4862      	ldr	r0, [pc, #392]	; (8000e44 <main+0x234>)
 8000cbc:	f004 f8b2 	bl	8004e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4861      	ldr	r0, [pc, #388]	; (8000e48 <main+0x238>)
 8000cc4:	f004 f8ae 	bl	8004e24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4860      	ldr	r0, [pc, #384]	; (8000e4c <main+0x23c>)
 8000ccc:	f004 f8aa 	bl	8004e24 <HAL_TIM_PWM_Start>
	TIM15->CCR1 = 0;
 8000cd0:	4b5f      	ldr	r3, [pc, #380]	; (8000e50 <main+0x240>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = ESC_IDLE_CCR;
 8000cd6:	4b5f      	ldr	r3, [pc, #380]	; (8000e54 <main+0x244>)
 8000cd8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = 0;
 8000cde:	4b5e      	ldr	r3, [pc, #376]	; (8000e58 <main+0x248>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Base_Start_IT(&htim7);
 8000ce4:	485d      	ldr	r0, [pc, #372]	; (8000e5c <main+0x24c>)
 8000ce6:	f003 ffdb 	bl	8004ca0 <HAL_TIM_Base_Start_IT>

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cea:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <main+0x250>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	4a5c      	ldr	r2, [pc, #368]	; (8000e60 <main+0x250>)
 8000cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf4:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <main+0x254>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cfc:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <main+0x254>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a58      	ldr	r2, [pc, #352]	; (8000e64 <main+0x254>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (command_received == 1) {
 8000d08:	4b57      	ldr	r3, [pc, #348]	; (8000e68 <main+0x258>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d1fa      	bne.n	8000d08 <main+0xf8>
			command_received = 0;
 8000d12:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <main+0x258>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
			command_received_ticker = 70;
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <main+0x25c>)
 8000d1a:	2246      	movs	r2, #70	; 0x46
 8000d1c:	701a      	strb	r2, [r3, #0]

			// toggle led
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000d1e:	2120      	movs	r1, #32
 8000d20:	4853      	ldr	r0, [pc, #332]	; (8000e70 <main+0x260>)
 8000d22:	f001 fc43 	bl	80025ac <HAL_GPIO_TogglePin>

			feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000d26:	2108      	movs	r1, #8
 8000d28:	4851      	ldr	r0, [pc, #324]	; (8000e70 <main+0x260>)
 8000d2a:	f001 fc0f 	bl	800254c <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <main+0x264>)
 8000d34:	615a      	str	r2, [r3, #20]

			if (fabs(motor1.target_speed - command.motor1) > 0.1) {
 8000d36:	4b50      	ldr	r3, [pc, #320]	; (8000e78 <main+0x268>)
 8000d38:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000d3c:	4b4f      	ldr	r3, [pc, #316]	; (8000e7c <main+0x26c>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d46:	eef0 7ae7 	vabs.f32	s15, s15
 8000d4a:	ee17 0a90 	vmov	r0, s15
 8000d4e:	f7ff fbc7 	bl	80004e0 <__aeabi_f2d>
 8000d52:	a333      	add	r3, pc, #204	; (adr r3, 8000e20 <main+0x210>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fc98 	bl	800068c <__aeabi_dcmpgt>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <main+0x158>
				motor1.err_sum = 0;
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <main+0x268>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	645a      	str	r2, [r3, #68]	; 0x44
			}
			if (fabs(motor2.target_speed - command.motor2) > 0.1) {
 8000d68:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <main+0x270>)
 8000d6a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000d6e:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <main+0x26c>)
 8000d70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d78:	eef0 7ae7 	vabs.f32	s15, s15
 8000d7c:	ee17 0a90 	vmov	r0, s15
 8000d80:	f7ff fbae 	bl	80004e0 <__aeabi_f2d>
 8000d84:	a326      	add	r3, pc, #152	; (adr r3, 8000e20 <main+0x210>)
 8000d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8a:	f7ff fc7f 	bl	800068c <__aeabi_dcmpgt>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <main+0x18a>
				motor2.err_sum = 0;
 8000d94:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <main+0x270>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
			}
			if (fabs(motor3.target_speed - command.motor3) > 0.1) {
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <main+0x274>)
 8000d9c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <main+0x26c>)
 8000da2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000daa:	eef0 7ae7 	vabs.f32	s15, s15
 8000dae:	ee17 0a90 	vmov	r0, s15
 8000db2:	f7ff fb95 	bl	80004e0 <__aeabi_f2d>
 8000db6:	a31a      	add	r3, pc, #104	; (adr r3, 8000e20 <main+0x210>)
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fc66 	bl	800068c <__aeabi_dcmpgt>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <main+0x1bc>
				motor3.err_sum = 0;
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <main+0x274>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	645a      	str	r2, [r3, #68]	; 0x44
			}
			motor1.target_speed = command.motor1;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <main+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <main+0x268>)
 8000dd2:	6393      	str	r3, [r2, #56]	; 0x38
			motor2.target_speed = command.motor2;
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <main+0x26c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <main+0x270>)
 8000dda:	6393      	str	r3, [r2, #56]	; 0x38
			motor3.target_speed = command.motor3;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <main+0x26c>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <main+0x274>)
 8000de2:	6393      	str	r3, [r2, #56]	; 0x38
//			pGain = command.pGain;
//			iGain = command.iGain;
//			dGain = command.dGain;

			Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <main+0x26c>)
 8000de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dea:	eeb0 0a67 	vmov.f32	s0, s15
 8000dee:	4826      	ldr	r0, [pc, #152]	; (8000e88 <main+0x278>)
 8000df0:	f7ff fcbe 	bl	8000770 <Set_Thrower_Speed>

			Set_Servo_Speed(&(TIM17->CCR1), command.servo,
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <main+0x26c>)
 8000df6:	ed93 8a04 	vldr	s16, [r3, #16]
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	481c      	ldr	r0, [pc, #112]	; (8000e70 <main+0x260>)
 8000dfe:	f001 fba5 	bl	800254c <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4619      	mov	r1, r3
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <main+0x26c>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8000e10:	481e      	ldr	r0, [pc, #120]	; (8000e8c <main+0x27c>)
 8000e12:	f7ff fce3 	bl	80007dc <Set_Servo_Speed>
					HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);

			CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000e16:	2120      	movs	r1, #32
 8000e18:	4816      	ldr	r0, [pc, #88]	; (8000e74 <main+0x264>)
 8000e1a:	f008 ff6d 	bl	8009cf8 <CDC_Transmit_FS>
		if (command_received == 1) {
 8000e1e:	e773      	b.n	8000d08 <main+0xf8>
 8000e20:	9999999a 	.word	0x9999999a
 8000e24:	3fb99999 	.word	0x3fb99999
 8000e28:	2000066c 	.word	0x2000066c
 8000e2c:	20000460 	.word	0x20000460
 8000e30:	20000414 	.word	0x20000414
 8000e34:	200005d4 	.word	0x200005d4
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	20000564 	.word	0x20000564
 8000e40:	40000400 	.word	0x40000400
 8000e44:	200004ac 	.word	0x200004ac
 8000e48:	20000700 	.word	0x20000700
 8000e4c:	200004f8 	.word	0x200004f8
 8000e50:	40014000 	.word	0x40014000
 8000e54:	40014400 	.word	0x40014400
 8000e58:	40014800 	.word	0x40014800
 8000e5c:	2000074c 	.word	0x2000074c
 8000e60:	e000edf0 	.word	0xe000edf0
 8000e64:	e0001000 	.word	0xe0001000
 8000e68:	200001a0 	.word	0x200001a0
 8000e6c:	200001a1 	.word	0x200001a1
 8000e70:	48000400 	.word	0x48000400
 8000e74:	200005b4 	.word	0x200005b4
 8000e78:	20000620 	.word	0x20000620
 8000e7c:	20000544 	.word	0x20000544
 8000e80:	200003cc 	.word	0x200003cc
 8000e84:	200006b8 	.word	0x200006b8
 8000e88:	40014434 	.word	0x40014434
 8000e8c:	40014834 	.word	0x40014834

08000e90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0a4      	sub	sp, #144	; 0x90
 8000e94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e9a:	2238      	movs	r2, #56	; 0x38
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f009 fb8f 	bl	800a5c2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ea4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2244      	movs	r2, #68	; 0x44
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f009 fb81 	bl	800a5c2 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f002 fef5 	bl	8003cb0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000ec6:	2322      	movs	r3, #34	; 0x22
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000ee4:	2314      	movs	r3, #20
 8000ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000efc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 ff89 	bl	8003e18 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x80>
		Error_Handler();
 8000f0c:	f000 fd2e 	bl	800196c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2303      	movs	r3, #3
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000f24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fa8c 	bl	8004448 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xaa>
		Error_Handler();
 8000f36:	f000 fd19 	bl	800196c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	603b      	str	r3, [r7, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fc62 	bl	8004810 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xc6>
		Error_Handler();
 8000f52:	f000 fd0b 	bl	800196c <Error_Handler>
	}
}
 8000f56:	bf00      	nop
 8000f58:	3790      	adds	r7, #144	; 0x90
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b098      	sub	sp, #96	; 0x60
 8000f64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2234      	movs	r2, #52	; 0x34
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f009 fb18 	bl	800a5c2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <MX_TIM1_Init+0x15c>)
 8000f96:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000fa4:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000faa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000fbe:	483e      	ldr	r0, [pc, #248]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fc0:	f003 fed8 	bl	8004d74 <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000fca:	f000 fccf 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4835      	ldr	r0, [pc, #212]	; (80010b8 <MX_TIM1_Init+0x158>)
 8000fe2:	f004 ffb5 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000fec:	f000 fcbe 	bl	800196c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800100c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <MX_TIM1_Init+0x158>)
 8001016:	f004 fab7 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001020:	f000 fca4 	bl	800196c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102c:	2204      	movs	r2, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <MX_TIM1_Init+0x158>)
 8001032:	f004 faa9 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 800103c:	f000 fc96 	bl	800196c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001048:	2208      	movs	r2, #8
 800104a:	4619      	mov	r1, r3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <MX_TIM1_Init+0x158>)
 800104e:	f004 fa9b 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8001058:	f000 fc88 	bl	800196c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001074:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <MX_TIM1_Init+0x158>)
 800109a:	f004 ffdb 	bl	8006054 <HAL_TIMEx_ConfigBreakDeadTime>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0x148>
			!= HAL_OK) {
		Error_Handler();
 80010a4:	f000 fc62 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_TIM1_Init+0x158>)
 80010aa:	f000 fde3 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 80010ae:	bf00      	nop
 80010b0:	3760      	adds	r7, #96	; 0x60
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200005d4 	.word	0x200005d4
 80010bc:	40012c00 	.word	0x40012c00

080010c0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fa77 	bl	800a5c2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_TIM2_Init+0xa4>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_TIM2_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_TIM2_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_TIM2_Init+0xa4>)
 80010f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_TIM2_Init+0xa4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_TIM2_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001106:	2303      	movs	r3, #3
 8001108:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800111e:	2301      	movs	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM2_Init+0xa4>)
 8001132:	f003 ff77 	bl	8005024 <HAL_TIM_Encoder_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x80>
		Error_Handler();
 800113c:	f000 fc16 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM2_Init+0xa4>)
 800114e:	f004 feff 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001158:	f000 fc08 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	; 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000066c 	.word	0x2000066c

08001168 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MX_TIM3_Init+0xe0>)
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <MX_TIM3_Init+0xe4>)
 8001190:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_TIM3_Init+0xe0>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <MX_TIM3_Init+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_TIM3_Init+0xe0>)
 80011a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <MX_TIM3_Init+0xe0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <MX_TIM3_Init+0xe0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <MX_TIM3_Init+0xe0>)
 80011b4:	f003 fdde 	bl	8004d74 <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0x5a>
		Error_Handler();
 80011be:	f000 fbd5 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <MX_TIM3_Init+0xe0>)
 80011d2:	f004 febd 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80011dc:	f000 fbc6 	bl	800196c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_TIM3_Init+0xe0>)
 80011f8:	f004 f9c6 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001202:	f000 fbb3 	bl	800196c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800120a:	463b      	mov	r3, r7
 800120c:	2204      	movs	r2, #4
 800120e:	4619      	mov	r1, r3
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_TIM3_Init+0xe0>)
 8001212:	f004 f9b9 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 800121c:	f000 fba6 	bl	800196c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001224:	463b      	mov	r3, r7
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <MX_TIM3_Init+0xe0>)
 800122c:	f004 f9ac 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 8001236:	f000 fb99 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <MX_TIM3_Init+0xe0>)
 800123c:	f000 fd1a 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000564 	.word	0x20000564
 800124c:	40000400 	.word	0x40000400

08001250 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f009 f9af 	bl	800a5c2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_TIM4_Init+0xa4>)
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_TIM4_Init+0xa8>)
 8001272:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_TIM4_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_TIM4_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_TIM4_Init+0xa4>)
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_TIM4_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_TIM4_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001294:	2303      	movs	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_TIM4_Init+0xa4>)
 80012c0:	f003 feb0 	bl	8005024 <HAL_TIM_Encoder_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x7e>
		Error_Handler();
 80012ca:	f000 fb4f 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_TIM4_Init+0xa4>)
 80012dc:	f004 fe38 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80012e6:	f000 fb41 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000460 	.word	0x20000460
 80012f8:	40000800 	.word	0x40000800

080012fc <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_TIM7_Init+0x64>)
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <MX_TIM7_Init+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 40;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_TIM7_Init+0x64>)
 8001314:	2228      	movs	r2, #40	; 0x28
 8001316:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_TIM7_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65044;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_TIM7_Init+0x64>)
 8001320:	f64f 6214 	movw	r2, #65044	; 0xfe14
 8001324:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_TIM7_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_TIM7_Init+0x64>)
 800132e:	f003 fc5f 	bl	8004bf0 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM7_Init+0x40>
		Error_Handler();
 8001338:	f000 fb18 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_TIM7_Init+0x64>)
 800134a:	f004 fe01 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001354:	f000 fb0a 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000074c 	.word	0x2000074c
 8001364:	40001400 	.word	0x40001400

08001368 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b09a      	sub	sp, #104	; 0x68
 800136c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800136e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f009 f923 	bl	800a5c2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800137c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2234      	movs	r2, #52	; 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f009 f917 	bl	800a5c2 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_TIM8_Init+0xd8>)
 8001396:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <MX_TIM8_Init+0xdc>)
 8001398:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_TIM8_Init+0xd8>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_TIM8_Init+0xd8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <MX_TIM8_Init+0xd8>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <MX_TIM8_Init+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <MX_TIM8_Init+0xd8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_TIM8_Init+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c0:	2303      	movs	r3, #3
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	653b      	str	r3, [r7, #80]	; 0x50
	sConfig.IC1Filter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	657b      	str	r3, [r7, #84]	; 0x54
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	663b      	str	r3, [r7, #96]	; 0x60
	sConfig.IC2Filter = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 80013e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013e8:	4619      	mov	r1, r3
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <MX_TIM8_Init+0xd8>)
 80013ec:	f003 fe1a 	bl	8005024 <HAL_TIM_Encoder_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM8_Init+0x92>
		Error_Handler();
 80013f6:	f000 fab9 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001406:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800140a:	4619      	mov	r1, r3
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_TIM8_Init+0xd8>)
 800140e:	f004 fd9f 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM8_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001418:	f000 faa8 	bl	800196c <Error_Handler>
	}
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_TIM8_Init+0xd8>)
 800142a:	f004 fe13 	bl	8006054 <HAL_TIMEx_ConfigBreakDeadTime>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM8_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8001434:	f000 fa9a 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3768      	adds	r7, #104	; 0x68
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000414 	.word	0x20000414
 8001444:	40013400 	.word	0x40013400

08001448 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b098      	sub	sp, #96	; 0x60
 800144c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800144e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800145a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2234      	movs	r2, #52	; 0x34
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f009 f8a4 	bl	800a5c2 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <MX_TIM15_Init+0x104>)
 800147c:	4a34      	ldr	r2, [pc, #208]	; (8001550 <MX_TIM15_Init+0x108>)
 800147e:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_TIM15_Init+0x104>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <MX_TIM15_Init+0x104>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <MX_TIM15_Init+0x104>)
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_TIM15_Init+0x104>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <MX_TIM15_Init+0x104>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <MX_TIM15_Init+0x104>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80014a6:	4829      	ldr	r0, [pc, #164]	; (800154c <MX_TIM15_Init+0x104>)
 80014a8:	f003 fc64 	bl	8004d74 <HAL_TIM_PWM_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM15_Init+0x6e>
		Error_Handler();
 80014b2:	f000 fa5b 	bl	800196c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 80014be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014c2:	4619      	mov	r1, r3
 80014c4:	4821      	ldr	r0, [pc, #132]	; (800154c <MX_TIM15_Init+0x104>)
 80014c6:	f004 fd43 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM15_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80014d0:	f000 fa4c 	bl	800196c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d4:	2360      	movs	r3, #96	; 0x60
 80014d6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014dc:	2300      	movs	r3, #0
 80014de:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e0:	2300      	movs	r3, #0
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 80014f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM15_Init+0x104>)
 80014fa:	f004 f845 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM15_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8001504:	f000 fa32 	bl	800196c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM15_Init+0x104>)
 8001530:	f004 fd90 	bl	8006054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM15_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 800153a:	f000 fa17 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM15_Init+0x104>)
 8001540:	f000 fb98 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3760      	adds	r7, #96	; 0x60
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200004ac 	.word	0x200004ac
 8001550:	40014000 	.word	0x40014000

08001554 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800155a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800156e:	463b      	mov	r3, r7
 8001570:	2234      	movs	r2, #52	; 0x34
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f009 f824 	bl	800a5c2 <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <MX_TIM16_Init+0xec>)
 800157c:	4a31      	ldr	r2, [pc, #196]	; (8001644 <MX_TIM16_Init+0xf0>)
 800157e:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_TIM16_Init+0xec>)
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <MX_TIM16_Init+0xec>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65300;
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_TIM16_Init+0xec>)
 800158e:	f64f 7214 	movw	r2, #65300	; 0xff14
 8001592:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <MX_TIM16_Init+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <MX_TIM16_Init+0xec>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <MX_TIM16_Init+0xec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80015a6:	4826      	ldr	r0, [pc, #152]	; (8001640 <MX_TIM16_Init+0xec>)
 80015a8:	f003 fb22 	bl	8004bf0 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM16_Init+0x62>
		Error_Handler();
 80015b2:	f000 f9db 	bl	800196c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 80015b6:	4822      	ldr	r0, [pc, #136]	; (8001640 <MX_TIM16_Init+0xec>)
 80015b8:	f003 fbdc 	bl	8004d74 <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM16_Init+0x72>
		Error_Handler();
 80015c2:	f000 f9d3 	bl	800196c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c6:	2360      	movs	r3, #96	; 0x60
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 80015e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <MX_TIM16_Init+0xec>)
 80015ec:	f003 ffcc 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM16_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 80015f6:	f000 f9b9 	bl	800196c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800160e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001612:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM16_Init+0xec>)
 8001622:	f004 fd17 	bl	8006054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM16_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 800162c:	f000 f99e 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
	HAL_TIM_MspPostInit(&htim16);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM16_Init+0xec>)
 8001632:	f000 fb1f 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	; 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000700 	.word	0x20000700
 8001644:	40014400 	.word	0x40014400

08001648 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	; 0x50
 800164c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800164e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001662:	463b      	mov	r3, r7
 8001664:	2234      	movs	r2, #52	; 0x34
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f008 ffaa 	bl	800a5c2 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <MX_TIM17_Init+0xec>)
 8001670:	4a31      	ldr	r2, [pc, #196]	; (8001738 <MX_TIM17_Init+0xf0>)
 8001672:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48;
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <MX_TIM17_Init+0xec>)
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <MX_TIM17_Init+0xec>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 65300;
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <MX_TIM17_Init+0xec>)
 8001682:	f64f 7214 	movw	r2, #65300	; 0xff14
 8001686:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <MX_TIM17_Init+0xec>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <MX_TIM17_Init+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <MX_TIM17_Init+0xec>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 800169a:	4826      	ldr	r0, [pc, #152]	; (8001734 <MX_TIM17_Init+0xec>)
 800169c:	f003 faa8 	bl	8004bf0 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM17_Init+0x62>
		Error_Handler();
 80016a6:	f000 f961 	bl	800196c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 80016aa:	4822      	ldr	r0, [pc, #136]	; (8001734 <MX_TIM17_Init+0xec>)
 80016ac:	f003 fb62 	bl	8004d74 <HAL_TIM_PWM_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM17_Init+0x72>
		Error_Handler();
 80016b6:	f000 f959 	bl	800196c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ba:	2360      	movs	r3, #96	; 0x60
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 80016d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <MX_TIM17_Init+0xec>)
 80016e0:	f003 ff52 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM17_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 80016ea:	f000 f93f 	bl	800196c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8001710:	463b      	mov	r3, r7
 8001712:	4619      	mov	r1, r3
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <MX_TIM17_Init+0xec>)
 8001716:	f004 fc9d 	bl	8006054 <HAL_TIMEx_ConfigBreakDeadTime>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM17_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8001720:	f000 f924 	bl	800196c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <MX_TIM17_Init+0xec>)
 8001726:	f000 faa5 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004f8 	.word	0x200004f8
 8001738:	40014800 	.word	0x40014800

0800173c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_GPIO_Init+0x8c>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_GPIO_Init+0x8c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_GPIO_Init+0x8c>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_GPIO_Init+0x8c>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <MX_GPIO_Init+0x8c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_GPIO_Init+0x8c>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <MX_GPIO_Init+0x90>)
 8001788:	f000 fef8 	bl	800257c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800178c:	2308      	movs	r3, #8
 800178e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4619      	mov	r1, r3
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <MX_GPIO_Init+0x90>)
 80017a0:	f000 fd52 	bl	8002248 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017a4:	2320      	movs	r3, #32
 80017a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_GPIO_Init+0x90>)
 80017bc:	f000 fd44 	bl	8002248 <HAL_GPIO_Init>

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400

080017d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
//	unsigned long t1 = DWT->CYCCNT;

	Handle_Encoder(&motor1, TIM2->CNT);
 80017d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	484f      	ldr	r0, [pc, #316]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017e4:	f7ff f9c0 	bl	8000b68 <Handle_Encoder>
	Handle_Encoder(&motor2, TIM4->CNT);
 80017e8:	4b4e      	ldr	r3, [pc, #312]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	484d      	ldr	r0, [pc, #308]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017f2:	f7ff f9b9 	bl	8000b68 <Handle_Encoder>
	Handle_Encoder(&motor3, TIM8->CNT);
 80017f6:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	484c      	ldr	r0, [pc, #304]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001800:	f7ff f9b2 	bl	8000b68 <Handle_Encoder>
	if (command.pid_type == 0) {
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d11b      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x74>
		feedback.motor1 = motor1.cur_enc_speed;
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		feedback.motor2 = motor2.cur_enc_speed;
 800181e:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800182c:	edc3 7a01 	vstr	s15, [r3, #4]
		feedback.motor3 = motor3.cur_enc_speed;
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800183e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001842:	e00b      	b.n	800185c <HAL_TIM_PeriodElapsedCallback+0x8c>
	} else {
		feedback.motor1 = motor1.enc_speed_hist_avg;
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800184a:	6013      	str	r3, [r2, #0]
		feedback.motor2 = motor2.enc_speed_hist_avg;
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	4a39      	ldr	r2, [pc, #228]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001852:	6053      	str	r3, [r2, #4]
		feedback.motor3 = motor3.enc_speed_hist_avg;
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	4a37      	ldr	r2, [pc, #220]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800185a:	6093      	str	r3, [r2, #8]
	}

	Calculate_PID(&motor1);
 800185c:	4830      	ldr	r0, [pc, #192]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800185e:	f7ff f82b 	bl	80008b8 <Calculate_PID>
	Calculate_PID(&motor2);
 8001862:	4831      	ldr	r0, [pc, #196]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001864:	f7ff f828 	bl	80008b8 <Calculate_PID>
	Calculate_PID(&motor3);
 8001868:	4831      	ldr	r0, [pc, #196]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800186a:	f7ff f825 	bl	80008b8 <Calculate_PID>
	Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), motor1.cur_speed);
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001870:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001878:	ee17 2a90 	vmov	r2, s15
 800187c:	492f      	ldr	r1, [pc, #188]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800187e:	4830      	ldr	r0, [pc, #192]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001880:	f7fe ff2e 	bl	80006e0 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), motor2.cur_speed);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001886:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800188a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188e:	ee17 2a90 	vmov	r2, s15
 8001892:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001894:	482c      	ldr	r0, [pc, #176]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001896:	f7fe ff23 	bl	80006e0 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), motor3.cur_speed);
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800189c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80018a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a4:	ee17 2a90 	vmov	r2, s15
 80018a8:	4928      	ldr	r1, [pc, #160]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80018aa:	4829      	ldr	r0, [pc, #164]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80018ac:	f7fe ff18 	bl	80006e0 <Set_Motor_Speed>

	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 80018b0:	2108      	movs	r1, #8
 80018b2:	4828      	ldr	r0, [pc, #160]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018b4:	f000 fe4a 	bl	800254c <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_TIM_PeriodElapsedCallback+0xfc>
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_TIM_PeriodElapsedCallback+0xfc>
		TIM17->CCR1 = 0;
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x116>
		command_received_ticker -= 1;
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018e2:	701a      	strb	r2, [r3, #0]
		// stop servo
		TIM17->CCR1 = 0;
	}
//	unsigned long t2 = DWT->CYCCNT;
//	unsigned long diff = t2 - t1;
}
 80018e4:	e018      	b.n	8001918 <HAL_TIM_PeriodElapsedCallback+0x148>
		TIM1->CCR1 = 0;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001900:	2200      	movs	r2, #0
 8001902:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001906:	2200      	movs	r2, #0
 8001908:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800190c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000620 	.word	0x20000620
 8001924:	40000800 	.word	0x40000800
 8001928:	200003cc 	.word	0x200003cc
 800192c:	40013400 	.word	0x40013400
 8001930:	200006b8 	.word	0x200006b8
 8001934:	20000544 	.word	0x20000544
 8001938:	200005b4 	.word	0x200005b4
 800193c:	40012c3c 	.word	0x40012c3c
 8001940:	40012c38 	.word	0x40012c38
 8001944:	4000043c 	.word	0x4000043c
 8001948:	40012c34 	.word	0x40012c34
 800194c:	40000438 	.word	0x40000438
 8001950:	40000434 	.word	0x40000434
 8001954:	48000400 	.word	0x48000400
 8001958:	40014800 	.word	0x40014800
 800195c:	200001a1 	.word	0x200001a1
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40000400 	.word	0x40000400
 8001968:	40014400 	.word	0x40014400

0800196c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019b2:	f002 fa21 	bl	8003df8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_TIM_PWM_MspInit+0x80>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10c      	bne.n	80019f0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 80019dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e0:	6613      	str	r3, [r2, #96]	; 0x60
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80019ee:	e022      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_TIM_PWM_MspInit+0x88>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10c      	bne.n	8001a14 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
}
 8001a12:	e010      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10b      	bne.n	8001a36 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_TIM_PWM_MspInit+0x84>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40014000 	.word	0x40014000

08001a54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d129      	bne.n	8001aca <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a76:	4b54      	ldr	r3, [pc, #336]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	4a53      	ldr	r2, [pc, #332]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a4d      	ldr	r2, [pc, #308]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac4:	f000 fbc0 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ac8:	e079      	b.n	8001bbe <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3f      	ldr	r2, [pc, #252]	; (8001bcc <HAL_TIM_Encoder_MspInit+0x178>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d128      	bne.n	8001b26 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad4:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a3b      	ldr	r2, [pc, #236]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b04:	23c0      	movs	r3, #192	; 0xc0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b14:	2302      	movs	r3, #2
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001b20:	f000 fb92 	bl	8002248 <HAL_GPIO_Init>
}
 8001b24:	e04b      	b.n	8001bbe <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <HAL_TIM_Encoder_MspInit+0x180>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d146      	bne.n	8001bbe <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b34:	4a24      	ldr	r2, [pc, #144]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x174>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b98:	f000 fb56 	bl	8002248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001bae:	230a      	movs	r3, #10
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001bba:	f000 fb45 	bl	8002248 <HAL_GPIO_Init>
}
 8001bbe:	bf00      	nop
 8001bc0:	3738      	adds	r7, #56	; 0x38
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	48000400 	.word	0x48000400
 8001bd4:	40013400 	.word	0x40013400

08001bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_TIM_Base_MspInit+0x8c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d114      	bne.n	8001c14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001bf0:	f043 0320 	orr.w	r3, r3, #32
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2037      	movs	r0, #55	; 0x37
 8001c08:	f000 fae9 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c0c:	2037      	movs	r0, #55	; 0x37
 8001c0e:	f000 fb00 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c12:	e022      	b.n	8001c5a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_TIM_Base_MspInit+0x94>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10c      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	6613      	str	r3, [r2, #96]	; 0x60
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
}
 8001c36:	e010      	b.n	8001c5a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <HAL_TIM_Base_MspInit+0x98>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10b      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_TIM_Base_MspInit+0x90>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40001400 	.word	0x40001400
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40014400 	.word	0x40014400
 8001c70:	40014800 	.word	0x40014800

08001c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a65      	ldr	r2, [pc, #404]	; (8001e28 <HAL_TIM_MspPostInit+0x1b4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11e      	bne.n	8001cd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b65      	ldr	r3, [pc, #404]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001cae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cc0:	2306      	movs	r3, #6
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cce:	f000 fabb 	bl	8002248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001cd2:	e0a5      	b.n	8001e20 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_TIM_MspPostInit+0x1bc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d139      	bne.n	8001d52 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d0e:	2350      	movs	r3, #80	; 0x50
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f000 fa8c 	bl	8002248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d30:	2301      	movs	r3, #1
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d40:	2302      	movs	r3, #2
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	483a      	ldr	r0, [pc, #232]	; (8001e34 <HAL_TIM_MspPostInit+0x1c0>)
 8001d4c:	f000 fa7c 	bl	8002248 <HAL_GPIO_Init>
}
 8001d50:	e066      	b.n	8001e20 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <HAL_TIM_MspPostInit+0x1c4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d11d      	bne.n	8001d98 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d74:	2304      	movs	r3, #4
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001d84:	2309      	movs	r3, #9
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f000 fa59 	bl	8002248 <HAL_GPIO_Init>
}
 8001d96:	e043      	b.n	8001e20 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <HAL_TIM_MspPostInit+0x1c8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d11c      	bne.n	8001ddc <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dba:	2310      	movs	r3, #16
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4817      	ldr	r0, [pc, #92]	; (8001e34 <HAL_TIM_MspPostInit+0x1c0>)
 8001dd6:	f000 fa37 	bl	8002248 <HAL_GPIO_Init>
}
 8001dda:	e021      	b.n	8001e20 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_TIM_MspPostInit+0x1cc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11c      	bne.n	8001e20 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_TIM_MspPostInit+0x1b8>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1c:	f000 fa14 	bl	8002248 <HAL_GPIO_Init>
}
 8001e20:	bf00      	nop
 8001e22:	3738      	adds	r7, #56	; 0x38
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	48000400 	.word	0x48000400
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	40014400 	.word	0x40014400
 8001e40:	40014800 	.word	0x40014800

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f000 f8a8 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <USB_LP_IRQHandler+0x10>)
 8001ea6:	f000 fca2 	bl	80027ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000143c 	.word	0x2000143c

08001eb4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <TIM7_IRQHandler+0x10>)
 8001eba:	f003 f9e6 	bl	800528a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000074c 	.word	0x2000074c

08001ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <SystemInit+0x28>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <SystemInit+0x28>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <SystemInit+0x28>)
 8001ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ef6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490e      	ldr	r1, [pc, #56]	; (8001f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0b      	ldr	r4, [pc, #44]	; (8001f40 <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f1e:	f7ff ffd3 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f22:	f008 fb1f 	bl	800a564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f26:	f7fe fe73 	bl	8000c10 <main>

08001f2a <LoopForever>:

LoopForever:
    b LoopForever
 8001f2a:	e7fe      	b.n	8001f2a <LoopForever>
  ldr   r0, =_estack
 8001f2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001f38:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 8001f3c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001f40:	20001730 	.word	0x20001730

08001f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC1_2_IRQHandler>

08001f46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f939 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f80e 	bl	8001f78 <HAL_InitTick>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	e001      	b.n	8001f6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f68:	f7ff fd08 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_InitTick+0x68>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d022      	beq.n	8001fd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_InitTick+0x6c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_InitTick+0x68>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f944 	bl	800222e <HAL_SYSTICK_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	d809      	bhi.n	8001fc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fba:	f000 f910 	bl	80021de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_InitTick+0x70>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e007      	b.n	8001fd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	e004      	b.n	8001fd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e001      	b.n	8001fd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_IncTick+0x1c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_IncTick+0x20>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a03      	ldr	r2, [pc, #12]	; (8002008 <HAL_IncTick+0x1c>)
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000798 	.word	0x20000798
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000798 	.word	0x20000798

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff40 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff90 	bl	800211c <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5f 	bl	80020c8 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff33 	bl	800208c <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa4 	bl	8002184 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002256:	e15a      	b.n	800250e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 814c 	beq.w	8002508 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d00b      	beq.n	8002290 <HAL_GPIO_Init+0x48>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d007      	beq.n	8002290 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002284:	2b11      	cmp	r3, #17
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b12      	cmp	r3, #18
 800228e:	d130      	bne.n	80022f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c6:	2201      	movs	r2, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 0201 	and.w	r2, r3, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0xea>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b12      	cmp	r3, #18
 8002330:	d123      	bne.n	800237a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80a6 	beq.w	8002508 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_GPIO_Init+0x2e4>)
 80023be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c0:	4a5a      	ldr	r2, [pc, #360]	; (800252c <HAL_GPIO_Init+0x2e4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6613      	str	r3, [r2, #96]	; 0x60
 80023c8:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_GPIO_Init+0x2e4>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d4:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023fe:	d01f      	beq.n	8002440 <HAL_GPIO_Init+0x1f8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4c      	ldr	r2, [pc, #304]	; (8002534 <HAL_GPIO_Init+0x2ec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d019      	beq.n	800243c <HAL_GPIO_Init+0x1f4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4b      	ldr	r2, [pc, #300]	; (8002538 <HAL_GPIO_Init+0x2f0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_GPIO_Init+0x1f0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a4a      	ldr	r2, [pc, #296]	; (800253c <HAL_GPIO_Init+0x2f4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1ec>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_GPIO_Init+0x2f8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1e8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a48      	ldr	r2, [pc, #288]	; (8002544 <HAL_GPIO_Init+0x2fc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1e4>
 8002428:	2305      	movs	r3, #5
 800242a:	e00a      	b.n	8002442 <HAL_GPIO_Init+0x1fa>
 800242c:	2306      	movs	r3, #6
 800242e:	e008      	b.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002430:	2304      	movs	r3, #4
 8002432:	e006      	b.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002434:	2303      	movs	r3, #3
 8002436:	e004      	b.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002438:	2302      	movs	r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x1fa>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002440:	2300      	movs	r3, #0
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4093      	lsls	r3, r2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002452:	4937      	ldr	r1, [pc, #220]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_GPIO_Init+0x300>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002484:	4a30      	ldr	r2, [pc, #192]	; (8002548 <HAL_GPIO_Init+0x300>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_GPIO_Init+0x300>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ae:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_GPIO_Init+0x300>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_GPIO_Init+0x300>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_GPIO_Init+0x300>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_GPIO_Init+0x300>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002502:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_GPIO_Init+0x300>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f ae9d 	bne.w	8002258 <HAL_GPIO_Init+0x10>
  }
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40010000 	.word	0x40010000
 8002534:	48000400 	.word	0x48000400
 8002538:	48000800 	.word	0x48000800
 800253c:	48000c00 	.word	0x48000c00
 8002540:	48001000 	.word	0x48001000
 8002544:	48001400 	.word	0x48001400
 8002548:	40010400 	.word	0x40010400

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43d9      	mvns	r1, r3
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	400b      	ands	r3, r1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af06      	add	r7, sp, #24
 80025e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0d7      	b.n	80027a2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f007 fcbc 	bl	8009f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fe18 	bl	800624e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e04c      	b.n	80026be <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	3301      	adds	r3, #1
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	b298      	uxth	r0, r3
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	3336      	adds	r3, #54	; 0x36
 8002662:	4602      	mov	r2, r0
 8002664:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3303      	adds	r3, #3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3338      	adds	r3, #56	; 0x38
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	333c      	adds	r3, #60	; 0x3c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3340      	adds	r3, #64	; 0x40
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	3301      	adds	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d3ad      	bcc.n	8002624 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e044      	b.n	8002758 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	440b      	add	r3, r1
 800271e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3301      	adds	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d3b5      	bcc.n	80026ce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	687e      	ldr	r6, [r7, #4]
 800276a:	466d      	mov	r5, sp
 800276c:	f106 0410 	add.w	r4, r6, #16
 8002770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	602b      	str	r3, [r5, #0]
 8002778:	1d33      	adds	r3, r6, #4
 800277a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f003 fd81 	bl	8006284 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f001 fa5e 	bl	8003c5c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_PCD_Start+0x16>
 80027bc:	2302      	movs	r3, #2
 80027be:	e012      	b.n	80027e6 <HAL_PCD_Start+0x3c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fd27 	bl	8006220 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f005 fd13 	bl	8008202 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 fd18 	bl	8008230 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280a:	d102      	bne.n	8002812 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fb5b 	bl	8002ec8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fd0a 	bl	8008230 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d112      	bne.n	800284e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283a:	b292      	uxth	r2, r2
 800283c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f007 fc1a 	bl	800a07a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002846:	2100      	movs	r1, #0
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f91e 	bl	8002a8a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f005 fcec 	bl	8008230 <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002862:	d10b      	bne.n	800287c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002876:	b292      	uxth	r2, r2
 8002878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f005 fcd5 	bl	8008230 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d10b      	bne.n	80028aa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a4:	b292      	uxth	r2, r2
 80028a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 fcbe 	bl	8008230 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028be:	d133      	bne.n	8002928 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	b292      	uxth	r2, r2
 80028d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0208 	bic.w	r2, r2, #8
 80028ea:	b292      	uxth	r2, r2
 80028ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002902:	2100      	movs	r1, #0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f007 fdad 	bl	800a464 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f007 fbee 	bl	800a0ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002922:	b292      	uxth	r2, r2
 8002924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fc7f 	bl	8008230 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	d126      	bne.n	800298c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0208 	orr.w	r2, r2, #8
 8002950:	b292      	uxth	r2, r2
 8002952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002968:	b292      	uxth	r2, r2
 800296a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0204 	orr.w	r2, r2, #4
 8002980:	b292      	uxth	r2, r2
 8002982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f007 fb96 	bl	800a0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f005 fc4d 	bl	8008230 <USB_ReadInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d13f      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b2:	b292      	uxth	r2, r2
 80029b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d12b      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0204 	orr.w	r2, r2, #4
 80029d4:	b292      	uxth	r2, r2
 80029d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0208 	orr.w	r2, r2, #8
 80029ec:	b292      	uxth	r2, r2
 80029ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a10:	2101      	movs	r1, #1
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f007 fd26 	bl	800a464 <HAL_PCDEx_LPM_Callback>
 8002a18:	e002      	b.n	8002a20 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f007 fb4c 	bl	800a0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 fc03 	bl	8008230 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d10e      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f007 fb05 	bl	800a05e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 fbe9 	bl	8008230 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a68:	d10b      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_SetAddress+0x1a>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e013      	b.n	8002acc <HAL_PCD_SetAddress+0x42>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f005 fb8c 	bl	80081da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	70fb      	strb	r3, [r7, #3]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	803b      	strh	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da0e      	bge.n	8002b18 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	705a      	strb	r2, [r3, #1]
 8002b16:	e00e      	b.n	8002b36 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	f003 0207 	and.w	r2, r3, #7
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b42:	883a      	ldrh	r2, [r7, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	78ba      	ldrb	r2, [r7, #2]
 8002b4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b60:	78bb      	ldrb	r3, [r7, #2]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_PCD_EP_Open+0xa6>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e00e      	b.n	8002b98 <HAL_PCD_EP_Open+0xc4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fb9d 	bl	80062c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002b96:	7afb      	ldrb	r3, [r7, #11]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da0e      	bge.n	8002bd2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	705a      	strb	r2, [r3, #1]
 8002bd0:	e00e      	b.n	8002bf0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 0207 	and.w	r2, r3, #7
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_PCD_EP_Close+0x6a>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e00e      	b.n	8002c28 <HAL_PCD_EP_Close+0x88>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 fec3 	bl	80069a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	f003 0207 	and.w	r2, r3, #7
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 f876 	bl	8006d7e <USB_EPStartXfer>
 8002c92:	e005      	b.n	8002ca0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6979      	ldr	r1, [r7, #20]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 f86f 	bl	8006d7e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0207 	and.w	r2, r3, #7
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ccc:	681b      	ldr	r3, [r3, #0]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2201      	movs	r2, #1
 8002d24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d26:	7afb      	ldrb	r3, [r7, #11]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6979      	ldr	r1, [r7, #20]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 f81b 	bl	8006d7e <USB_EPStartXfer>
 8002d48:	e005      	b.n	8002d56 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f004 f814 	bl	8006d7e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 0207 	and.w	r2, r3, #7
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d901      	bls.n	8002d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e04c      	b.n	8002e18 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da0e      	bge.n	8002da4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	705a      	strb	r2, [r3, #1]
 8002da2:	e00c      	b.n	8002dbe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_PCD_EP_SetStall+0x7e>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e01c      	b.n	8002e18 <HAL_PCD_EP_SetStall+0xb8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 f8f5 	bl	8007fdc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d108      	bne.n	8002e0e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f005 fa21 	bl	8008250 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 020f 	and.w	r2, r3, #15
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d901      	bls.n	8002e3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e040      	b.n	8002ec0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	da0e      	bge.n	8002e64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	705a      	strb	r2, [r3, #1]
 8002e62:	e00e      	b.n	8002e82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 0207 	and.w	r2, r3, #7
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_PCD_EP_ClrStall+0x82>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e00e      	b.n	8002ec0 <HAL_PCD_EP_ClrStall+0xa0>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f005 f8e4 	bl	800807e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ed0:	e2d1      	b.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eda:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002edc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002ee8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 8152 	bne.w	8003196 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ef2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d150      	bne.n	8002f9e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	81fb      	strh	r3, [r7, #14]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3328      	adds	r3, #40	; 0x28
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	441a      	add	r2, r3
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f007 f863 	bl	800a02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8282 	beq.w	8003476 <PCD_EP_ISR_Handler+0x5ae>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 827d 	bne.w	8003476 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f9c:	e26b      	b.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d032      	beq.n	800301e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f005 f979 	bl	80082ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003004:	4013      	ands	r3, r2
 8003006:	823b      	strh	r3, [r7, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	8a3a      	ldrh	r2, [r7, #16]
 800300e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003012:	b292      	uxth	r2, r2
 8003014:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 ffda 	bl	8009fd0 <HAL_PCD_SetupStageCallback>
 800301c:	e22b      	b.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800301e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003022:	2b00      	cmp	r3, #0
 8003024:	f280 8227 	bge.w	8003476 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29a      	uxth	r2, r3
 8003030:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003034:	4013      	ands	r3, r2
 8003036:	83bb      	strh	r3, [r7, #28]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	8bba      	ldrh	r2, [r7, #28]
 800303e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003042:	b292      	uxth	r2, r2
 8003044:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	4413      	add	r3, r2
 8003060:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d019      	beq.n	80030aa <PCD_EP_ISR_Handler+0x1e2>
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d015      	beq.n	80030aa <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	6959      	ldr	r1, [r3, #20]
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800308e:	b29b      	uxth	r3, r3
 8003090:	f005 f92b 	bl	80082ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	441a      	add	r2, r3
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030a2:	2100      	movs	r1, #0
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f006 ffa5 	bl	8009ff4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	4413      	add	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d112      	bne.n	80030f8 <PCD_EP_ISR_Handler+0x230>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030dc:	b29a      	uxth	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	801a      	strh	r2, [r3, #0]
 80030f6:	e02f      	b.n	8003158 <PCD_EP_ISR_Handler+0x290>
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b3e      	cmp	r3, #62	; 0x3e
 80030fe:	d813      	bhi.n	8003128 <PCD_EP_ISR_Handler+0x260>
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <PCD_EP_ISR_Handler+0x252>
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	3301      	adds	r3, #1
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	b29b      	uxth	r3, r3
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	b29a      	uxth	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	e017      	b.n	8003158 <PCD_EP_ISR_Handler+0x290>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <PCD_EP_ISR_Handler+0x27a>
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	3b01      	subs	r3, #1
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	b29b      	uxth	r3, r3
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	b29b      	uxth	r3, r3
 800314a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003152:	b29a      	uxth	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	827b      	strh	r3, [r7, #18]
 800316a:	8a7b      	ldrh	r3, [r7, #18]
 800316c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003170:	827b      	strh	r3, [r7, #18]
 8003172:	8a7b      	ldrh	r3, [r7, #18]
 8003174:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003178:	827b      	strh	r3, [r7, #18]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	8a7b      	ldrh	r3, [r7, #18]
 8003180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	b29b      	uxth	r3, r3
 8003192:	8013      	strh	r3, [r2, #0]
 8003194:	e16f      	b.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f280 80e4 	bge.w	800337a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031c8:	4013      	ands	r3, r2
 80031ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031e0:	b292      	uxth	r2, r2
 80031e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	7b1b      	ldrb	r3, [r3, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d120      	bne.n	8003244 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	4413      	add	r3, r2
 800321c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003226:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003228:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8083 	beq.w	8003336 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	6959      	ldr	r1, [r3, #20]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	88da      	ldrh	r2, [r3, #6]
 800323c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800323e:	f005 f854 	bl	80082ea <USB_ReadPMA>
 8003242:	e078      	b.n	8003336 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	78db      	ldrb	r3, [r3, #3]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d108      	bne.n	800325e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800324c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800324e:	461a      	mov	r2, r3
 8003250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f91d 	bl	8003492 <HAL_PCD_EP_DB_Receive>
 8003258:	4603      	mov	r3, r0
 800325a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800325c:	e06b      	b.n	8003336 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003278:	847b      	strh	r3, [r7, #34]	; 0x22
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800328a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800329a:	b29b      	uxth	r3, r3
 800329c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01f      	beq.n	80032f8 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80032de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d028      	beq.n	8003336 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	891a      	ldrh	r2, [r3, #8]
 80032f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032f2:	f004 fffa 	bl	80082ea <USB_ReadPMA>
 80032f6:	e01e      	b.n	8003336 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4413      	add	r3, r2
 8003312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800331e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6959      	ldr	r1, [r3, #20]
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	895a      	ldrh	r2, [r3, #10]
 8003330:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003332:	f004 ffda 	bl	80082ea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800333c:	441a      	add	r2, r3
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003348:	441a      	add	r2, r3
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <PCD_EP_ISR_Handler+0x498>
 8003356:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d206      	bcs.n	800336e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f006 fe44 	bl	8009ff4 <HAL_PCD_DataOutStageCallback>
 800336c:	e005      	b.n	800337a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fd02 	bl	8006d7e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800337a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d078      	beq.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8003384:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	843b      	strh	r3, [r7, #32]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	8c3b      	ldrh	r3, [r7, #32]
 80033c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	78db      	ldrb	r3, [r3, #3]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d108      	bne.n	80033ea <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d144      	bne.n	800346a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80033e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d13f      	bne.n	800346a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	4413      	add	r3, r2
 8003404:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	8bfb      	ldrh	r3, [r7, #30]
 8003416:	429a      	cmp	r2, r3
 8003418:	d906      	bls.n	8003428 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	8bfb      	ldrh	r3, [r7, #30]
 8003420:	1ad2      	subs	r2, r2, r3
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	e002      	b.n	800342e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f006 fdf4 	bl	800a02a <HAL_PCD_DataInStageCallback>
 8003442:	e018      	b.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	8bfb      	ldrh	r3, [r7, #30]
 800344a:	441a      	add	r2, r3
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	8bfb      	ldrh	r3, [r7, #30]
 8003456:	441a      	add	r2, r3
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003462:	4618      	mov	r0, r3
 8003464:	f003 fc8b 	bl	8006d7e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003468:	e005      	b.n	8003476 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800346a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800346c:	461a      	mov	r2, r3
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f917 	bl	80036a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800347e:	b29b      	uxth	r3, r3
 8003480:	b21b      	sxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f6ff ad25 	blt.w	8002ed2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3738      	adds	r7, #56	; 0x38
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	4613      	mov	r3, r2
 800349e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d07c      	beq.n	80035a4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	8b7b      	ldrh	r3, [r7, #26]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d306      	bcc.n	80034e8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	8b7b      	ldrh	r3, [r7, #26]
 80034e0:	1ad2      	subs	r2, r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	619a      	str	r2, [r3, #24]
 80034e6:	e002      	b.n	80034ee <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d123      	bne.n	800353e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003510:	833b      	strh	r3, [r7, #24]
 8003512:	8b3b      	ldrh	r3, [r7, #24]
 8003514:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003518:	833b      	strh	r3, [r7, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	8b3b      	ldrh	r3, [r7, #24]
 800352a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	82fb      	strh	r3, [r7, #22]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	441a      	add	r2, r3
 8003572:	8afb      	ldrh	r3, [r7, #22]
 8003574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003584:	b29b      	uxth	r3, r3
 8003586:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003588:	8b7b      	ldrh	r3, [r7, #26]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8085 	beq.w	800369a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6959      	ldr	r1, [r3, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	891a      	ldrh	r2, [r3, #8]
 800359c:	8b7b      	ldrh	r3, [r7, #26]
 800359e:	f004 fea4 	bl	80082ea <USB_ReadPMA>
 80035a2:	e07a      	b.n	800369a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	8b7b      	ldrh	r3, [r7, #26]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d306      	bcc.n	80035e2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	8b7b      	ldrh	r3, [r7, #26]
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	619a      	str	r2, [r3, #24]
 80035e0:	e002      	b.n	80035e8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d123      	bne.n	8003638 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	83fb      	strh	r3, [r7, #30]
 800360c:	8bfb      	ldrh	r3, [r7, #30]
 800360e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003612:	83fb      	strh	r3, [r7, #30]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	8bfb      	ldrh	r3, [r7, #30]
 8003624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800362c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11f      	bne.n	8003682 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	83bb      	strh	r3, [r7, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	441a      	add	r2, r3
 800366c:	8bbb      	ldrh	r3, [r7, #28]
 800366e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800367e:	b29b      	uxth	r3, r3
 8003680:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003682:	8b7b      	ldrh	r3, [r7, #26]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6959      	ldr	r1, [r3, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	895a      	ldrh	r2, [r3, #10]
 8003694:	8b7b      	ldrh	r3, [r7, #26]
 8003696:	f004 fe28 	bl	80082ea <USB_ReadPMA>
    }
  }

  return count;
 800369a:	8b7b      	ldrh	r3, [r7, #26]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b092      	sub	sp, #72	; 0x48
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8130 	beq.w	800391e <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d906      	bls.n	80036fc <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036f4:	1ad2      	subs	r2, r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	619a      	str	r2, [r3, #24]
 80036fa:	e002      	b.n	8003702 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d12c      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	4619      	mov	r1, r3
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f006 fc8a 	bl	800a02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 822d 	beq.w	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373c:	827b      	strh	r3, [r7, #18]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	8a7b      	ldrh	r3, [r7, #18]
 800374e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800375a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375e:	b29b      	uxth	r3, r3
 8003760:	8013      	strh	r3, [r2, #0]
 8003762:	e20b      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01f      	beq.n	80037ae <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003788:	84bb      	strh	r3, [r7, #36]	; 0x24
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 81e1 	bne.w	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037c0:	441a      	add	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037cc:	441a      	add	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6a1a      	ldr	r2, [r3, #32]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d309      	bcc.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	621a      	str	r2, [r3, #32]
 80037f0:	e014      	b.n	800381c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80037fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037fc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003806:	e009      	b.n	800381c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2200      	movs	r2, #0
 800381a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d155      	bne.n	80038d0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00da      	lsls	r2, r3, #3
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4413      	add	r3, r2
 8003846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	2b00      	cmp	r3, #0
 8003850:	d112      	bne.n	8003878 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800385c:	b29a      	uxth	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003870:	b29a      	uxth	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e047      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x264>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b3e      	cmp	r3, #62	; 0x3e
 800387c:	d811      	bhi.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x1fe>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	3301      	adds	r3, #1
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	b29b      	uxth	r3, r3
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	b29a      	uxth	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e032      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x264>
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HAL_PCD_EP_DB_Transmit+0x214>
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	029b      	lsls	r3, r3, #10
 80038be:	b29b      	uxth	r3, r3
 80038c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	e01b      	b.n	8003908 <HAL_PCD_EP_DB_Transmit+0x264>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d117      	bne.n	8003908 <HAL_PCD_EP_DB_Transmit+0x264>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	4413      	add	r3, r2
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	00da      	lsls	r2, r3, #3
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	4413      	add	r3, r2
 80038fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	b29a      	uxth	r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6959      	ldr	r1, [r3, #20]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	891a      	ldrh	r2, [r3, #8]
 8003914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003916:	b29b      	uxth	r3, r3
 8003918:	f004 fca6 	bl	8008268 <USB_WritePMA>
 800391c:	e12e      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	4413      	add	r3, r2
 8003938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003942:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800394a:	429a      	cmp	r2, r3
 800394c:	d306      	bcc.n	800395c <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	619a      	str	r2, [r3, #24]
 800395a:	e002      	b.n	8003962 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2200      	movs	r2, #0
 8003960:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d12c      	bne.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f006 fb5a 	bl	800a02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 80fd 	bne.w	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8013      	strh	r3, [r2, #0]
 80039c2:	e0db      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11f      	bne.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 80b1 	bne.w	8003b7c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a20:	441a      	add	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6a1a      	ldr	r2, [r3, #32]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d309      	bcc.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	621a      	str	r2, [r3, #32]
 8003a50:	e014      	b.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a66:	e009      	b.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d155      	bne.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x492>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9e:	4413      	add	r3, r2
 8003aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00da      	lsls	r2, r3, #3
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	4413      	add	r3, r2
 8003aac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d112      	bne.n	8003ade <HAL_PCD_EP_DB_Transmit+0x43a>
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	e044      	b.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	2b3e      	cmp	r3, #62	; 0x3e
 8003ae2:	d811      	bhi.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x464>
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_PCD_EP_DB_Transmit+0x456>
 8003af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af6:	3301      	adds	r3, #1
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	e02f      	b.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x47a>
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e018      	b.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d114      	bne.n	8003b68 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	4413      	add	r3, r2
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00da      	lsls	r2, r3, #3
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	4413      	add	r3, r2
 8003b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6959      	ldr	r1, [r3, #20]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	895a      	ldrh	r2, [r3, #10]
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f004 fb76 	bl	8008268 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b96:	823b      	strh	r3, [r7, #16]
 8003b98:	8a3b      	ldrh	r3, [r7, #16]
 8003b9a:	f083 0310 	eor.w	r3, r3, #16
 8003b9e:	823b      	strh	r3, [r7, #16]
 8003ba0:	8a3b      	ldrh	r3, [r7, #16]
 8003ba2:	f083 0320 	eor.w	r3, r3, #32
 8003ba6:	823b      	strh	r3, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	8a3b      	ldrh	r3, [r7, #16]
 8003bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3748      	adds	r7, #72	; 0x48
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b087      	sub	sp, #28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	817b      	strh	r3, [r7, #10]
 8003be4:	4613      	mov	r3, r2
 8003be6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003be8:	897b      	ldrh	r3, [r7, #10]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf4:	897b      	ldrh	r3, [r7, #10]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e009      	b.n	8003c20 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0c:	897a      	ldrh	r2, [r7, #10]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	80da      	strh	r2, [r3, #6]
 8003c34:	e00b      	b.n	8003c4e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f043 0302 	orr.w	r3, r3, #2
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d141      	bne.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cbe:	4b4b      	ldr	r3, [pc, #300]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d131      	bne.n	8003d30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ccc:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd2:	4a46      	ldr	r2, [pc, #280]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cdc:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce4:	4a41      	ldr	r2, [pc, #260]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2232      	movs	r2, #50	; 0x32
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	4a3f      	ldr	r2, [pc, #252]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	0c9b      	lsrs	r3, r3, #18
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d02:	e002      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0a:	4b38      	ldr	r3, [pc, #224]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d102      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f2      	bne.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d1e:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2a:	d158      	bne.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e057      	b.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d30:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d40:	e04d      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d141      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d4a:	4b28      	ldr	r3, [pc, #160]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d56:	d131      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d58:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5e:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d68:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2232      	movs	r2, #50	; 0x32
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	0c9b      	lsrs	r3, r3, #18
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8e:	e002      	b.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da2:	d102      	bne.n	8003daa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f2      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d112      	bne.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e011      	b.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dcc:	e007      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd6:	4a05      	ldr	r2, [pc, #20]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ddc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40007000 	.word	0x40007000
 8003df0:	20000000 	.word	0x20000000
 8003df4:	431bde83 	.word	0x431bde83

08003df8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e06:	6093      	str	r3, [r2, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40007000 	.word	0x40007000

08003e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e308      	b.n	800443c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d075      	beq.n	8003f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4ba3      	ldr	r3, [pc, #652]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4ba0      	ldr	r3, [pc, #640]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d102      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3e>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_OscConfig+0x44>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	4b99      	ldr	r3, [pc, #612]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05b      	beq.n	8003f20 <HAL_RCC_OscConfig+0x108>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d157      	bne.n	8003f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e2e3      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCC_OscConfig+0x74>
 8003e7e:	4b91      	ldr	r3, [pc, #580]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a90      	ldr	r2, [pc, #576]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e01d      	b.n	8003ec8 <HAL_RCC_OscConfig+0xb0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x98>
 8003e96:	4b8b      	ldr	r3, [pc, #556]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a8a      	ldr	r2, [pc, #552]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b88      	ldr	r3, [pc, #544]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a87      	ldr	r2, [pc, #540]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xb0>
 8003eb0:	4b84      	ldr	r3, [pc, #528]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a83      	ldr	r2, [pc, #524]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a80      	ldr	r2, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe f89e 	bl	8002010 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fe f89a 	bl	8002010 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e2a8      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eea:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xc0>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f88a 	bl	8002010 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe f886 	bl	8002010 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e294      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f12:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0xe8>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d075      	beq.n	800401a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2e:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f38:	4b62      	ldr	r3, [pc, #392]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_OscConfig+0x136>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d002      	beq.n	8003f54 <HAL_RCC_OscConfig+0x13c>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d11f      	bne.n	8003f94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f54:	4b5b      	ldr	r3, [pc, #364]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_OscConfig+0x154>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e267      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	4952      	ldr	r1, [pc, #328]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f80:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCC_OscConfig+0x2b0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd fff7 	bl	8001f78 <HAL_InitTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d043      	beq.n	8004018 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e253      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a48      	ldr	r2, [pc, #288]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f832 	bl	8002010 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fe f82e 	bl	8002010 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e23c      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc2:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fce:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	4939      	ldr	r1, [pc, #228]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
 8003fe2:	e01a      	b.n	800401a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe4:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a36      	ldr	r2, [pc, #216]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8003fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fe f80e 	bl	8002010 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fe f80a 	bl	8002010 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e218      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800400a:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1e0>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d03c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01c      	beq.n	8004068 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402e:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004034:	4a23      	ldr	r2, [pc, #140]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fd ffe7 	bl	8002010 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004046:	f7fd ffe3 	bl	8002010 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1f1      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ef      	beq.n	8004046 <HAL_RCC_OscConfig+0x22e>
 8004066:	e01b      	b.n	80040a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004068:	4b16      	ldr	r3, [pc, #88]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406e:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd ffca 	bl	8002010 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004080:	f7fd ffc6 	bl	8002010 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1d4      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ef      	bne.n	8004080 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80ab 	beq.w	8004204 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x2b4>
 80040be:	2301      	movs	r3, #1
 80040c0:	e005      	b.n	80040ce <HAL_RCC_OscConfig+0x2b6>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	20000004 	.word	0x20000004
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00d      	beq.n	80040ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	4baf      	ldr	r3, [pc, #700]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	4aae      	ldr	r2, [pc, #696]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6593      	str	r3, [r2, #88]	; 0x58
 80040de:	4bac      	ldr	r3, [pc, #688]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040ea:	2301      	movs	r3, #1
 80040ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ee:	4ba9      	ldr	r3, [pc, #676]	; (8004394 <HAL_RCC_OscConfig+0x57c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d118      	bne.n	800412c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fa:	4ba6      	ldr	r3, [pc, #664]	; (8004394 <HAL_RCC_OscConfig+0x57c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4aa5      	ldr	r2, [pc, #660]	; (8004394 <HAL_RCC_OscConfig+0x57c>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004106:	f7fd ff83 	bl	8002010 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410e:	f7fd ff7f 	bl	8002010 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e18d      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004120:	4b9c      	ldr	r3, [pc, #624]	; (8004394 <HAL_RCC_OscConfig+0x57c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d108      	bne.n	8004146 <HAL_RCC_OscConfig+0x32e>
 8004134:	4b96      	ldr	r3, [pc, #600]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	4a95      	ldr	r2, [pc, #596]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004144:	e024      	b.n	8004190 <HAL_RCC_OscConfig+0x378>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d110      	bne.n	8004170 <HAL_RCC_OscConfig+0x358>
 800414e:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	4a8e      	ldr	r2, [pc, #568]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004156:	f043 0304 	orr.w	r3, r3, #4
 800415a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800415e:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	4a8a      	ldr	r2, [pc, #552]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800416e:	e00f      	b.n	8004190 <HAL_RCC_OscConfig+0x378>
 8004170:	4b87      	ldr	r3, [pc, #540]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	4a86      	ldr	r2, [pc, #536]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004180:	4b83      	ldr	r3, [pc, #524]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	4a82      	ldr	r2, [pc, #520]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fd ff3a 	bl	8002010 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd ff36 	bl	8002010 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e142      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ed      	beq.n	80041a0 <HAL_RCC_OscConfig+0x388>
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c6:	f7fd ff23 	bl	8002010 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd ff1f 	bl	8002010 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e12b      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ed      	bne.n	80041ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b65      	ldr	r3, [pc, #404]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	4a64      	ldr	r2, [pc, #400]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d03c      	beq.n	800428a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01c      	beq.n	8004252 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004218:	4b5d      	ldr	r3, [pc, #372]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800421a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800421e:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd fef2 	bl	8002010 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004230:	f7fd feee 	bl	8002010 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0fc      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004242:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ef      	beq.n	8004230 <HAL_RCC_OscConfig+0x418>
 8004250:	e01b      	b.n	800428a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004252:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004254:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004258:	4a4d      	ldr	r2, [pc, #308]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004262:	f7fd fed5 	bl	8002010 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426a:	f7fd fed1 	bl	8002010 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0df      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800427c:	4b44      	ldr	r3, [pc, #272]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800427e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ef      	bne.n	800426a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80d3 	beq.w	800443a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004294:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b0c      	cmp	r3, #12
 800429e:	f000 808d 	beq.w	80043bc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d15a      	bne.n	8004360 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a38      	ldr	r2, [pc, #224]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80042b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd feab 	bl	8002010 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042be:	f7fd fea7 	bl	8002010 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0b5      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d0:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042dc:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_OscConfig+0x580>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6a11      	ldr	r1, [r2, #32]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042f6:	0212      	lsls	r2, r2, #8
 80042f8:	4311      	orrs	r1, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042fe:	0852      	lsrs	r2, r2, #1
 8004300:	3a01      	subs	r2, #1
 8004302:	0552      	lsls	r2, r2, #21
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800430a:	0852      	lsrs	r2, r2, #1
 800430c:	3a01      	subs	r2, #1
 800430e:	0652      	lsls	r2, r2, #25
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004316:	06d2      	lsls	r2, r2, #27
 8004318:	430a      	orrs	r2, r1
 800431a:	491d      	ldr	r1, [pc, #116]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800431c:	4313      	orrs	r3, r2
 800431e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a17      	ldr	r2, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004336:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd fe6a 	bl	8002010 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd fe66 	bl	8002010 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e074      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x528>
 800435e:	e06c      	b.n	800443a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 8004372:	f023 0303 	bic.w	r3, r3, #3
 8004376:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <HAL_RCC_OscConfig+0x578>)
 800437e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fe42 	bl	8002010 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438e:	e00e      	b.n	80043ae <HAL_RCC_OscConfig+0x596>
 8004390:	40021000 	.word	0x40021000
 8004394:	40007000 	.word	0x40007000
 8004398:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd fe38 	bl	8002010 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e046      	b.n	800443c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_OscConfig+0x62c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x584>
 80043ba:	e03e      	b.n	800443a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e039      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <HAL_RCC_OscConfig+0x62c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f003 0203 	and.w	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d12c      	bne.n	8004436 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	3b01      	subs	r3, #1
 80043e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d123      	bne.n	8004436 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d11b      	bne.n	8004436 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d113      	bne.n	8004436 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	3b01      	subs	r3, #1
 800441c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d109      	bne.n	8004436 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	085b      	lsrs	r3, r3, #1
 800442e:	3b01      	subs	r3, #1
 8004430:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000

08004448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e11e      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b91      	ldr	r3, [pc, #580]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b8e      	ldr	r3, [pc, #568]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 020f 	bic.w	r2, r3, #15
 8004476:	498c      	ldr	r1, [pc, #560]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b8a      	ldr	r3, [pc, #552]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e106      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d073      	beq.n	8004584 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d129      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a4:	4b81      	ldr	r3, [pc, #516]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0f4      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044b4:	f000 f966 	bl	8004784 <RCC_GetSysClockFreqFromPLLSource>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4a7c      	ldr	r2, [pc, #496]	; (80046b0 <HAL_RCC_ClockConfig+0x268>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d93f      	bls.n	8004542 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044c2:	4b7a      	ldr	r3, [pc, #488]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d033      	beq.n	8004542 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d12f      	bne.n	8004542 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044e2:	4b72      	ldr	r3, [pc, #456]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ea:	4a70      	ldr	r2, [pc, #448]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80044ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e024      	b.n	8004542 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004500:	4b6a      	ldr	r3, [pc, #424]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0c6      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004510:	4b66      	ldr	r3, [pc, #408]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0be      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004520:	f000 f8ce 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8004524:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4a61      	ldr	r2, [pc, #388]	; (80046b0 <HAL_RCC_ClockConfig+0x268>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d909      	bls.n	8004542 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800452e:	4b5f      	ldr	r3, [pc, #380]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004536:	4a5d      	ldr	r2, [pc, #372]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004542:	4b5a      	ldr	r3, [pc, #360]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4957      	ldr	r1, [pc, #348]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004554:	f7fd fd5c 	bl	8002010 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fd fd58 	bl	8002010 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e095      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	4b4e      	ldr	r3, [pc, #312]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 020c 	and.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	429a      	cmp	r2, r3
 8004582:	d1eb      	bne.n	800455c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d023      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800459c:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a42      	ldr	r2, [pc, #264]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045b4:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045bc:	4a3b      	ldr	r2, [pc, #236]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c4:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4936      	ldr	r1, [pc, #216]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
 80045d6:	e008      	b.n	80045ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d105      	bne.n	80045ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a32      	ldr	r2, [pc, #200]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 80045e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ea:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d21d      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 020f 	bic.w	r2, r3, #15
 8004600:	4929      	ldr	r1, [pc, #164]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004608:	f7fd fd02 	bl	8002010 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004610:	f7fd fcfe 	bl	8002010 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	; 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e03b      	b.n	800469e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x260>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d1ed      	bne.n	8004610 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4917      	ldr	r1, [pc, #92]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	490f      	ldr	r1, [pc, #60]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004672:	f000 f825 	bl	80046c0 <HAL_RCC_GetSysClockFreq>
 8004676:	4601      	mov	r1, r0
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <HAL_RCC_ClockConfig+0x264>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <HAL_RCC_ClockConfig+0x26c>)
 8004684:	5cd3      	ldrb	r3, [r2, r3]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	fa21 f303 	lsr.w	r3, r1, r3
 800468e:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <HAL_RCC_ClockConfig+0x270>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x274>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd fc6e 	bl	8001f78 <HAL_InitTick>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40022000 	.word	0x40022000
 80046ac:	40021000 	.word	0x40021000
 80046b0:	04c4b400 	.word	0x04c4b400
 80046b4:	0800a634 	.word	0x0800a634
 80046b8:	20000000 	.word	0x20000000
 80046bc:	20000004 	.word	0x20000004

080046c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046c6:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d102      	bne.n	80046d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_RCC_GetSysClockFreq+0xbc>)
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	e047      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046d8:	4b27      	ldr	r3, [pc, #156]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d102      	bne.n	80046ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	e03e      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046ea:	4b23      	ldr	r3, [pc, #140]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b0c      	cmp	r3, #12
 80046f4:	d136      	bne.n	8004764 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	3301      	adds	r3, #1
 800470c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d10c      	bne.n	800472e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004714:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	0a12      	lsrs	r2, r2, #8
 8004722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	617b      	str	r3, [r7, #20]
      break;
 800472c:	e00c      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	4a10      	ldr	r2, [pc, #64]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004738:	68d2      	ldr	r2, [r2, #12]
 800473a:	0a12      	lsrs	r2, r2, #8
 800473c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
      break;
 8004746:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0e5b      	lsrs	r3, r3, #25
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e001      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004768:	693b      	ldr	r3, [r7, #16]
}
 800476a:	4618      	mov	r0, r3
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	00f42400 	.word	0x00f42400
 8004780:	007a1200 	.word	0x007a1200

08004784 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800478a:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004794:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d10c      	bne.n	80047c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a8:	4a17      	ldr	r2, [pc, #92]	; (8004808 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047b2:	68d2      	ldr	r2, [r2, #12]
 80047b4:	0a12      	lsrs	r2, r2, #8
 80047b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	617b      	str	r3, [r7, #20]
    break;
 80047c0:	e00c      	b.n	80047dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c2:	4a12      	ldr	r2, [pc, #72]	; (800480c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	0a12      	lsrs	r2, r2, #8
 80047d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    break;
 80047da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	0e5b      	lsrs	r3, r3, #25
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047f6:	687b      	ldr	r3, [r7, #4]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40021000 	.word	0x40021000
 8004808:	007a1200 	.word	0x007a1200
 800480c:	00f42400 	.word	0x00f42400

08004810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004818:	2300      	movs	r3, #0
 800481a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800481c:	2300      	movs	r3, #0
 800481e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8098 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004832:	4b43      	ldr	r3, [pc, #268]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483e:	4b40      	ldr	r3, [pc, #256]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	4a3f      	ldr	r2, [pc, #252]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004848:	6593      	str	r3, [r2, #88]	; 0x58
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004856:	2301      	movs	r3, #1
 8004858:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800485a:	4b3a      	ldr	r3, [pc, #232]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a39      	ldr	r2, [pc, #228]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004866:	f7fd fbd3 	bl	8002010 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486c:	e009      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486e:	f7fd fbcf 	bl	8002010 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d902      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	74fb      	strb	r3, [r7, #19]
        break;
 8004880:	e005      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004882:	4b30      	ldr	r3, [pc, #192]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ef      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d159      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004894:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01e      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d019      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d016      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fd fb8f 	bl	8002010 <HAL_GetTick>
 80048f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f4:	e00b      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd fb8b 	bl	8002010 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d902      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	74fb      	strb	r3, [r7, #19]
            break;
 800490c:	e006      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ec      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	4903      	ldr	r1, [pc, #12]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004938:	e008      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	74bb      	strb	r3, [r7, #18]
 800493e:	e005      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494c:	7c7b      	ldrb	r3, [r7, #17]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4ba6      	ldr	r3, [pc, #664]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	4aa5      	ldr	r2, [pc, #660]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496a:	4ba0      	ldr	r3, [pc, #640]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f023 0203 	bic.w	r2, r3, #3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	499c      	ldr	r1, [pc, #624]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800498c:	4b97      	ldr	r3, [pc, #604]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f023 020c 	bic.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4994      	ldr	r1, [pc, #592]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ae:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	498b      	ldr	r1, [pc, #556]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049d0:	4b86      	ldr	r3, [pc, #536]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	4983      	ldr	r1, [pc, #524]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f2:	4b7e      	ldr	r3, [pc, #504]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	497a      	ldr	r1, [pc, #488]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a14:	4b75      	ldr	r3, [pc, #468]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	4972      	ldr	r1, [pc, #456]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a36:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4969      	ldr	r1, [pc, #420]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a58:	4b64      	ldr	r3, [pc, #400]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4961      	ldr	r1, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a7a:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	4958      	ldr	r1, [pc, #352]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d015      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a9c:	4b53      	ldr	r3, [pc, #332]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	4950      	ldr	r1, [pc, #320]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004abc:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ad4:	4b45      	ldr	r3, [pc, #276]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	4942      	ldr	r1, [pc, #264]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af2:	d105      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af4:	4b3d      	ldr	r3, [pc, #244]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4a3c      	ldr	r2, [pc, #240]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b0c:	4b37      	ldr	r3, [pc, #220]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4934      	ldr	r1, [pc, #208]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b2a:	d105      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b2c:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b44:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	4926      	ldr	r1, [pc, #152]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d105      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b21      	ldr	r3, [pc, #132]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d015      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	4918      	ldr	r1, [pc, #96]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d015      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	490a      	ldr	r1, [pc, #40]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004be0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000

08004bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e049      	b.n	8004c96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc ffde 	bl	8001bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f000 fde2 	bl	80057f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e04a      	b.n	8004d4e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <HAL_TIM_Base_Start_IT+0xbc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_TIM_Base_Start_IT+0xc0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d115      	bne.n	8004d38 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d015      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0xaa>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d011      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e008      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	00010007 	.word	0x00010007

08004d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e049      	b.n	8004e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc fe12 	bl	80019c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 fd20 	bl	80057f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x24>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e03c      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x9e>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d109      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x3e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e02f      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x9e>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start+0x58>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e022      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x9e>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d109      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x72>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	bf14      	ite	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	2300      	moveq	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e015      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x9e>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d109      	bne.n	8004eb0 <HAL_TIM_PWM_Start+0x8c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e008      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x9e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e097      	b.n	8004ffa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xb6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	e023      	b.n	8004f22 <HAL_TIM_PWM_Start+0xfe>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_PWM_Start+0xc6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee8:	e01b      	b.n	8004f22 <HAL_TIM_PWM_Start+0xfe>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xd6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	e013      	b.n	8004f22 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xe6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f08:	e00b      	b.n	8004f22 <HAL_TIM_PWM_Start+0xfe>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start+0xf6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f18:	e003      	b.n	8004f22 <HAL_TIM_PWM_Start+0xfe>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2201      	movs	r2, #1
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 ffea 	bl	8005f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a33      	ldr	r2, [pc, #204]	; (8005004 <HAL_TIM_PWM_Start+0x1e0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x13e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a32      	ldr	r2, [pc, #200]	; (8005008 <HAL_TIM_PWM_Start+0x1e4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x13e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a30      	ldr	r2, [pc, #192]	; (800500c <HAL_TIM_PWM_Start+0x1e8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x13e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <HAL_TIM_PWM_Start+0x1ec>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x13e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <HAL_TIM_PWM_Start+0x1f0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_TIM_PWM_Start+0x142>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_PWM_Start+0x144>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a20      	ldr	r2, [pc, #128]	; (8005004 <HAL_TIM_PWM_Start+0x1e0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0x194>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d013      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0x194>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a20      	ldr	r2, [pc, #128]	; (8005018 <HAL_TIM_PWM_Start+0x1f4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0x194>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_TIM_PWM_Start+0x1f8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0x194>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a17      	ldr	r2, [pc, #92]	; (8005008 <HAL_TIM_PWM_Start+0x1e4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIM_PWM_Start+0x194>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <HAL_TIM_PWM_Start+0x1e8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d115      	bne.n	8004fe4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_TIM_PWM_Start+0x1fc>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d015      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x1d2>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d011      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	e008      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e000      	b.n	8004ff8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	00010007 	.word	0x00010007

08005024 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e097      	b.n	8005168 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7fc fd01 	bl	8001a54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005068:	f023 0307 	bic.w	r3, r3, #7
 800506c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 fbbd 	bl	80057f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	4313      	orrs	r3, r2
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050c4:	f023 030c 	bic.w	r3, r3, #12
 80050c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	4313      	orrs	r3, r2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	011a      	lsls	r2, r3, #4
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	031b      	lsls	r3, r3, #12
 80050f4:	4313      	orrs	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4313      	orrs	r3, r2
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005180:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005188:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005190:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005198:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d110      	bne.n	80051c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d102      	bne.n	80051ac <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051a6:	7b7b      	ldrb	r3, [r7, #13]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e068      	b.n	8005282 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c0:	e031      	b.n	8005226 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d110      	bne.n	80051ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d102      	bne.n	80051d4 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ce:	7b3b      	ldrb	r3, [r7, #12]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d001      	beq.n	80051d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e054      	b.n	8005282 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e8:	e01d      	b.n	8005226 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d108      	bne.n	8005202 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f6:	7b7b      	ldrb	r3, [r7, #13]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d102      	bne.n	8005202 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051fc:	7b3b      	ldrb	r3, [r7, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d001      	beq.n	8005206 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e03d      	b.n	8005282 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_TIM_Encoder_Start+0xc2>
 800522c:	2b04      	cmp	r3, #4
 800522e:	d008      	beq.n	8005242 <HAL_TIM_Encoder_Start+0xd2>
 8005230:	e00f      	b.n	8005252 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fe62 	bl	8005f04 <TIM_CCxChannelCmd>
      break;
 8005240:	e016      	b.n	8005270 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	2104      	movs	r1, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fe5a 	bl	8005f04 <TIM_CCxChannelCmd>
      break;
 8005250:	e00e      	b.n	8005270 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fe52 	bl	8005f04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2201      	movs	r2, #1
 8005266:	2104      	movs	r1, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fe4b 	bl	8005f04 <TIM_CCxChannelCmd>
      break;
 800526e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d122      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0202 	mvn.w	r2, #2
 80052b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa75 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 80052d2:	e005      	b.n	80052e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa67 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa78 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d122      	bne.n	800533a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d11b      	bne.n	800533a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0204 	mvn.w	r2, #4
 800530a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa4b 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 8005326:	e005      	b.n	8005334 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa3d 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa4e 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b08      	cmp	r3, #8
 8005346:	d122      	bne.n	800538e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b08      	cmp	r3, #8
 8005354:	d11b      	bne.n	800538e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0208 	mvn.w	r2, #8
 800535e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2204      	movs	r2, #4
 8005364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa21 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 800537a:	e005      	b.n	8005388 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa13 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa24 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d122      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d11b      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0210 	mvn.w	r2, #16
 80053b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2208      	movs	r2, #8
 80053b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f9f7 	bl	80057bc <HAL_TIM_IC_CaptureCallback>
 80053ce:	e005      	b.n	80053dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f9e9 	bl	80057a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f9fa 	bl	80057d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0201 	mvn.w	r2, #1
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fc f9e1 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 feb7 	bl	80061a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	2b80      	cmp	r3, #128	; 0x80
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 feaa 	bl	80061bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9a8 	bl	80057e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0220 	mvn.w	r2, #32
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fe6a 	bl	8006194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ce:	d10f      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fe70 	bl	80061d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054fe:	d10f      	bne.n	8005520 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fe62 	bl	80061e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552e:	d10f      	bne.n	8005550 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe54 	bl	80061f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800555e:	d10f      	bne.n	8005580 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800556a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fe46 	bl	800620c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800559e:	2302      	movs	r3, #2
 80055a0:	e0fd      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x216>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b14      	cmp	r3, #20
 80055ae:	f200 80f0 	bhi.w	8005792 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005793 	.word	0x08005793
 80055c0:	08005793 	.word	0x08005793
 80055c4:	08005793 	.word	0x08005793
 80055c8:	0800564d 	.word	0x0800564d
 80055cc:	08005793 	.word	0x08005793
 80055d0:	08005793 	.word	0x08005793
 80055d4:	08005793 	.word	0x08005793
 80055d8:	0800568f 	.word	0x0800568f
 80055dc:	08005793 	.word	0x08005793
 80055e0:	08005793 	.word	0x08005793
 80055e4:	08005793 	.word	0x08005793
 80055e8:	080056cf 	.word	0x080056cf
 80055ec:	08005793 	.word	0x08005793
 80055f0:	08005793 	.word	0x08005793
 80055f4:	08005793 	.word	0x08005793
 80055f8:	08005711 	.word	0x08005711
 80055fc:	08005793 	.word	0x08005793
 8005600:	08005793 	.word	0x08005793
 8005604:	08005793 	.word	0x08005793
 8005608:	08005751 	.word	0x08005751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f980 	bl	8005918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0208 	orr.w	r2, r2, #8
 8005626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0204 	bic.w	r2, r2, #4
 8005636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	619a      	str	r2, [r3, #24]
      break;
 800564a:	e0a3      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f9f0 	bl	8005a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	619a      	str	r2, [r3, #24]
      break;
 800568c:	e082      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fa59 	bl	8005b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0208 	orr.w	r2, r2, #8
 80056a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0204 	bic.w	r2, r2, #4
 80056b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	61da      	str	r2, [r3, #28]
      break;
 80056cc:	e062      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fac1 	bl	8005c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69d9      	ldr	r1, [r3, #28]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	021a      	lsls	r2, r3, #8
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	61da      	str	r2, [r3, #28]
      break;
 800570e:	e041      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fb2a 	bl	8005d70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800574e:	e021      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fb6e 	bl	8005e38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800576a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	021a      	lsls	r2, r3, #8
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005790:	e000      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005792:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop

080057a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a3c      	ldr	r2, [pc, #240]	; (80058fc <TIM_Base_SetConfig+0x104>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_Base_SetConfig+0x38>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005816:	d00b      	beq.n	8005830 <TIM_Base_SetConfig+0x38>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a39      	ldr	r2, [pc, #228]	; (8005900 <TIM_Base_SetConfig+0x108>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0x38>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a38      	ldr	r2, [pc, #224]	; (8005904 <TIM_Base_SetConfig+0x10c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0x38>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a37      	ldr	r2, [pc, #220]	; (8005908 <TIM_Base_SetConfig+0x110>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2d      	ldr	r2, [pc, #180]	; (80058fc <TIM_Base_SetConfig+0x104>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01b      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005850:	d017      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <TIM_Base_SetConfig+0x108>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a29      	ldr	r2, [pc, #164]	; (8005904 <TIM_Base_SetConfig+0x10c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a28      	ldr	r2, [pc, #160]	; (8005908 <TIM_Base_SetConfig+0x110>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a27      	ldr	r2, [pc, #156]	; (800590c <TIM_Base_SetConfig+0x114>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a26      	ldr	r2, [pc, #152]	; (8005910 <TIM_Base_SetConfig+0x118>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_Base_SetConfig+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a25      	ldr	r2, [pc, #148]	; (8005914 <TIM_Base_SetConfig+0x11c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d108      	bne.n	8005894 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a10      	ldr	r2, [pc, #64]	; (80058fc <TIM_Base_SetConfig+0x104>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0xe8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a11      	ldr	r2, [pc, #68]	; (8005908 <TIM_Base_SetConfig+0x110>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0xe8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <TIM_Base_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0xe8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <TIM_Base_SetConfig+0x118>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0xe8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a0e      	ldr	r2, [pc, #56]	; (8005914 <TIM_Base_SetConfig+0x11c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d103      	bne.n	80058e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40013400 	.word	0x40013400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800

08005918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f023 0201 	bic.w	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 0302 	bic.w	r3, r3, #2
 8005964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <TIM_OC1_SetConfig+0x10c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_OC1_SetConfig+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2b      	ldr	r2, [pc, #172]	; (8005a28 <TIM_OC1_SetConfig+0x110>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_OC1_SetConfig+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2a      	ldr	r2, [pc, #168]	; (8005a2c <TIM_OC1_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_OC1_SetConfig+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a29      	ldr	r2, [pc, #164]	; (8005a30 <TIM_OC1_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC1_SetConfig+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a28      	ldr	r2, [pc, #160]	; (8005a34 <TIM_OC1_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10c      	bne.n	80059b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0308 	bic.w	r3, r3, #8
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1b      	ldr	r2, [pc, #108]	; (8005a24 <TIM_OC1_SetConfig+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00f      	beq.n	80059da <TIM_OC1_SetConfig+0xc2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1a      	ldr	r2, [pc, #104]	; (8005a28 <TIM_OC1_SetConfig+0x110>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00b      	beq.n	80059da <TIM_OC1_SetConfig+0xc2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <TIM_OC1_SetConfig+0x114>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <TIM_OC1_SetConfig+0xc2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <TIM_OC1_SetConfig+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d003      	beq.n	80059da <TIM_OC1_SetConfig+0xc2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <TIM_OC1_SetConfig+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d111      	bne.n	80059fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800

08005a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0210 	bic.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <TIM_OC2_SetConfig+0x100>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC2_SetConfig+0x6c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <TIM_OC2_SetConfig+0x104>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10d      	bne.n	8005ac0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <TIM_OC2_SetConfig+0x100>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_OC2_SetConfig+0xb0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <TIM_OC2_SetConfig+0x104>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_OC2_SetConfig+0xb0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <TIM_OC2_SetConfig+0x108>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_OC2_SetConfig+0xb0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <TIM_OC2_SetConfig+0x10c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC2_SetConfig+0xb0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a19      	ldr	r2, [pc, #100]	; (8005b48 <TIM_OC2_SetConfig+0x110>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d113      	bne.n	8005b10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40013400 	.word	0x40013400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40014400 	.word	0x40014400
 8005b48:	40014800 	.word	0x40014800

08005b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0303 	bic.w	r3, r3, #3
 8005b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <TIM_OC3_SetConfig+0xfc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC3_SetConfig+0x6a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <TIM_OC3_SetConfig+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10d      	bne.n	8005bd2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	; (8005c48 <TIM_OC3_SetConfig+0xfc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <TIM_OC3_SetConfig+0xae>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <TIM_OC3_SetConfig+0x100>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00b      	beq.n	8005bfa <TIM_OC3_SetConfig+0xae>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <TIM_OC3_SetConfig+0x104>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_OC3_SetConfig+0xae>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <TIM_OC3_SetConfig+0x108>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_OC3_SetConfig+0xae>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <TIM_OC3_SetConfig+0x10c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d113      	bne.n	8005c22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40013400 	.word	0x40013400
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a28      	ldr	r2, [pc, #160]	; (8005d5c <TIM_OC4_SetConfig+0x100>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x6c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <TIM_OC4_SetConfig+0x104>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10d      	bne.n	8005ce4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1d      	ldr	r2, [pc, #116]	; (8005d5c <TIM_OC4_SetConfig+0x100>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00f      	beq.n	8005d0c <TIM_OC4_SetConfig+0xb0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1c      	ldr	r2, [pc, #112]	; (8005d60 <TIM_OC4_SetConfig+0x104>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_OC4_SetConfig+0xb0>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <TIM_OC4_SetConfig+0x108>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_OC4_SetConfig+0xb0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	; (8005d68 <TIM_OC4_SetConfig+0x10c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC4_SetConfig+0xb0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a19      	ldr	r2, [pc, #100]	; (8005d6c <TIM_OC4_SetConfig+0x110>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d113      	bne.n	8005d34 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	019b      	lsls	r3, r3, #6
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40013400 	.word	0x40013400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40014400 	.word	0x40014400
 8005d6c:	40014800 	.word	0x40014800

08005d70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	041b      	lsls	r3, r3, #16
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a17      	ldr	r2, [pc, #92]	; (8005e24 <TIM_OC5_SetConfig+0xb4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00f      	beq.n	8005dea <TIM_OC5_SetConfig+0x7a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a16      	ldr	r2, [pc, #88]	; (8005e28 <TIM_OC5_SetConfig+0xb8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <TIM_OC5_SetConfig+0x7a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <TIM_OC5_SetConfig+0xbc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d007      	beq.n	8005dea <TIM_OC5_SetConfig+0x7a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <TIM_OC5_SetConfig+0xc0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC5_SetConfig+0x7a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a13      	ldr	r2, [pc, #76]	; (8005e34 <TIM_OC5_SetConfig+0xc4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d109      	bne.n	8005dfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	051b      	lsls	r3, r3, #20
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <TIM_OC6_SetConfig+0xb8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00f      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x7c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <TIM_OC6_SetConfig+0xbc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x7c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a16      	ldr	r2, [pc, #88]	; (8005ef8 <TIM_OC6_SetConfig+0xc0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x7c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <TIM_OC6_SetConfig+0xc4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x7c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <TIM_OC6_SetConfig+0xc8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d109      	bne.n	8005ec8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800

08005f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2201      	movs	r2, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1a      	ldr	r2, [r3, #32]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	401a      	ands	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e065      	b.n	8006034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2c      	ldr	r2, [pc, #176]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2b      	ldr	r2, [pc, #172]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d108      	bne.n	8005fae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d013      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a13      	ldr	r2, [pc, #76]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10c      	bne.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	4313      	orrs	r3, r2
 8006018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40013400 	.word	0x40013400
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40014000 	.word	0x40014000

08006054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800606c:	2302      	movs	r3, #2
 800606e:	e087      	b.n	8006180 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	041b      	lsls	r3, r3, #16
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a27      	ldr	r2, [pc, #156]	; (800618c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a25      	ldr	r2, [pc, #148]	; (8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d106      	bne.n	800610c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1e      	ldr	r2, [pc, #120]	; (800618c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d126      	bne.n	800616e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	051b      	lsls	r3, r3, #20
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a0d      	ldr	r2, [pc, #52]	; (8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d106      	bne.n	800616e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400

08006194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006230:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006234:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006256:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800625a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	b29b      	uxth	r3, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	b29b      	uxth	r3, r3
 800626c:	4013      	ands	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006284:	b084      	sub	sp, #16
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	f107 0014 	add.w	r0, r7, #20
 8006292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	b004      	add	sp, #16
 80062c4:	4770      	bx	lr
	...

080062c8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b09b      	sub	sp, #108	; 0x6c
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	78db      	ldrb	r3, [r3, #3]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d81f      	bhi.n	800633a <USB_ActivateEndpoint+0x72>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <USB_ActivateEndpoint+0x38>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006311 	.word	0x08006311
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006343 	.word	0x08006343
 800630c:	0800631f 	.word	0x0800631f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006310:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006318:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800631c:	e012      	b.n	8006344 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800631e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006322:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006326:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800632a:	e00b      	b.n	8006344 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800632c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006334:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006338:	e004      	b.n	8006344 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006340:	e000      	b.n	8006344 <USB_ActivateEndpoint+0x7c>
      break;
 8006342:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	b21b      	sxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	b21a      	sxth	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b21b      	sxth	r3, r3
 8006386:	4313      	orrs	r3, r2
 8006388:	b21b      	sxth	r3, r3
 800638a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	441a      	add	r2, r3
 8006398:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	7b1b      	ldrb	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8149 	bne.w	800664c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8084 	beq.w	80064cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	00da      	lsls	r2, r3, #3
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	88db      	ldrh	r3, [r3, #6]
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	81fb      	strh	r3, [r7, #14]
 8006406:	89fb      	ldrh	r3, [r7, #14]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01b      	beq.n	8006448 <USB_ActivateEndpoint+0x180>
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	81bb      	strh	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	441a      	add	r2, r3
 8006432:	89bb      	ldrh	r3, [r7, #12]
 8006434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006440:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006444:	b29b      	uxth	r3, r3
 8006446:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d020      	beq.n	8006492 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006466:	813b      	strh	r3, [r7, #8]
 8006468:	893b      	ldrh	r3, [r7, #8]
 800646a:	f083 0320 	eor.w	r3, r3, #32
 800646e:	813b      	strh	r3, [r7, #8]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	893b      	ldrh	r3, [r7, #8]
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]
 8006490:	e27f      	b.n	8006992 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a8:	817b      	strh	r3, [r7, #10]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	897b      	ldrh	r3, [r7, #10]
 80064b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	8013      	strh	r3, [r2, #0]
 80064ca:	e262      	b.n	8006992 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	4413      	add	r3, r2
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	00da      	lsls	r2, r3, #3
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	88db      	ldrh	r3, [r3, #6]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	4413      	add	r3, r2
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	00da      	lsls	r2, r3, #3
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	4413      	add	r3, r2
 800651e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006522:	623b      	str	r3, [r7, #32]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d112      	bne.n	8006552 <USB_ActivateEndpoint+0x28a>
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006536:	b29a      	uxth	r2, r3
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654a:	b29a      	uxth	r2, r3
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e02f      	b.n	80065b2 <USB_ActivateEndpoint+0x2ea>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b3e      	cmp	r3, #62	; 0x3e
 8006558:	d813      	bhi.n	8006582 <USB_ActivateEndpoint+0x2ba>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	663b      	str	r3, [r7, #96]	; 0x60
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <USB_ActivateEndpoint+0x2ac>
 800656e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006570:	3301      	adds	r3, #1
 8006572:	663b      	str	r3, [r7, #96]	; 0x60
 8006574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29a      	uxth	r2, r3
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e017      	b.n	80065b2 <USB_ActivateEndpoint+0x2ea>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	663b      	str	r3, [r7, #96]	; 0x60
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <USB_ActivateEndpoint+0x2d4>
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	3b01      	subs	r3, #1
 800659a:	663b      	str	r3, [r7, #96]	; 0x60
 800659c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800659e:	b29b      	uxth	r3, r3
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	83fb      	strh	r3, [r7, #30]
 80065c0:	8bfb      	ldrh	r3, [r7, #30]
 80065c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01b      	beq.n	8006602 <USB_ActivateEndpoint+0x33a>
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	83bb      	strh	r3, [r7, #28]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	8bbb      	ldrh	r3, [r7, #28]
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	837b      	strh	r3, [r7, #26]
 800661a:	8b7b      	ldrh	r3, [r7, #26]
 800661c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006620:	837b      	strh	r3, [r7, #26]
 8006622:	8b7b      	ldrh	r3, [r7, #26]
 8006624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006628:	837b      	strh	r3, [r7, #26]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	8b7b      	ldrh	r3, [r7, #26]
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]
 800664a:	e1a2      	b.n	8006992 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	441a      	add	r2, r3
 8006670:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006684:	b29b      	uxth	r3, r3
 8006686:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	65bb      	str	r3, [r7, #88]	; 0x58
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006698:	4413      	add	r3, r2
 800669a:	65bb      	str	r3, [r7, #88]	; 0x58
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	00da      	lsls	r2, r3, #3
 80066a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066aa:	657b      	str	r3, [r7, #84]	; 0x54
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	891b      	ldrh	r3, [r3, #8]
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	653b      	str	r3, [r7, #80]	; 0x50
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066cc:	4413      	add	r3, r2
 80066ce:	653b      	str	r3, [r7, #80]	; 0x50
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	00da      	lsls	r2, r3, #3
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	4413      	add	r3, r2
 80066da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	895b      	ldrh	r3, [r3, #10]
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 8091 	bne.w	800681c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006708:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800670a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <USB_ActivateEndpoint+0x482>
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	877b      	strh	r3, [r7, #58]	; 0x3a
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	873b      	strh	r3, [r7, #56]	; 0x38
 8006758:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01b      	beq.n	800679a <USB_ActivateEndpoint+0x4d2>
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	86fb      	strh	r3, [r7, #54]	; 0x36
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006792:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006796:	b29b      	uxth	r3, r3
 8006798:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006816:	b29b      	uxth	r3, r3
 8006818:	8013      	strh	r3, [r2, #0]
 800681a:	e0ba      	b.n	8006992 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800682c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01d      	beq.n	8006874 <USB_ActivateEndpoint+0x5ac>
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006884:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01d      	beq.n	80068cc <USB_ActivateEndpoint+0x604>
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	441a      	add	r2, r3
 80068b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	78db      	ldrb	r3, [r3, #3]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d024      	beq.n	800691e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80068ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80068f2:	f083 0320 	eor.w	r3, r3, #32
 80068f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
 800691c:	e01d      	b.n	800695a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006934:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006992:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006996:	4618      	mov	r0, r3
 8006998:	376c      	adds	r7, #108	; 0x6c
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop

080069a4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b08d      	sub	sp, #52	; 0x34
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	7b1b      	ldrb	r3, [r3, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 808e 	bne.w	8006ad4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d044      	beq.n	8006a4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	81bb      	strh	r3, [r7, #12]
 80069ce:	89bb      	ldrh	r3, [r7, #12]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <USB_DeactivateEndpoint+0x6c>
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	817b      	strh	r3, [r7, #10]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	897b      	ldrh	r3, [r7, #10]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a26:	813b      	strh	r3, [r7, #8]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	893b      	ldrh	r3, [r7, #8]
 8006a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8013      	strh	r3, [r2, #0]
 8006a48:	e192      	b.n	8006d70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	827b      	strh	r3, [r7, #18]
 8006a58:	8a7b      	ldrh	r3, [r7, #18]
 8006a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01b      	beq.n	8006a9a <USB_DeactivateEndpoint+0xf6>
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	823b      	strh	r3, [r7, #16]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8a3b      	ldrh	r3, [r7, #16]
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	81fb      	strh	r3, [r7, #14]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	89fb      	ldrh	r3, [r7, #14]
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
 8006ad2:	e14d      	b.n	8006d70 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 80a5 	bne.w	8006c28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	843b      	strh	r3, [r7, #32]
 8006aec:	8c3b      	ldrh	r3, [r7, #32]
 8006aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01b      	beq.n	8006b2e <USB_DeactivateEndpoint+0x18a>
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0c:	83fb      	strh	r3, [r7, #30]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	8bfb      	ldrh	r3, [r7, #30]
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	83bb      	strh	r3, [r7, #28]
 8006b3c:	8bbb      	ldrh	r3, [r7, #28]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01b      	beq.n	8006b7e <USB_DeactivateEndpoint+0x1da>
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	837b      	strh	r3, [r7, #26]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	8b7b      	ldrh	r3, [r7, #26]
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b94:	833b      	strh	r3, [r7, #24]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	8b3b      	ldrh	r3, [r7, #24]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bcc:	82fb      	strh	r3, [r7, #22]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	441a      	add	r2, r3
 8006bd8:	8afb      	ldrh	r3, [r7, #22]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c04:	82bb      	strh	r3, [r7, #20]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	8abb      	ldrh	r3, [r7, #20]
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
 8006c26:	e0a3      	b.n	8006d70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <USB_DeactivateEndpoint+0x2d4>
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01b      	beq.n	8006cc8 <USB_DeactivateEndpoint+0x324>
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	441a      	add	r2, r3
 8006d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3734      	adds	r7, #52	; 0x34
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b0c4      	sub	sp, #272	; 0x110
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	1d3b      	adds	r3, r7, #4
 8006d86:	6018      	str	r0, [r3, #0]
 8006d88:	463b      	mov	r3, r7
 8006d8a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	f040 8566 	bne.w	8007864 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	463b      	mov	r3, r7
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d905      	bls.n	8006db4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006db2:	e004      	b.n	8006dbe <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	7b1b      	ldrb	r3, [r3, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d12c      	bne.n	8006e22 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6959      	ldr	r1, [r3, #20]
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	88da      	ldrh	r2, [r3, #6]
 8006dd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	1d38      	adds	r0, r7, #4
 8006ddc:	6800      	ldr	r0, [r0, #0]
 8006dde:	f001 fa43 	bl	8008268 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006de2:	1d3b      	adds	r3, r7, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	1d3b      	adds	r3, r7, #4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	4413      	add	r3, r2
 8006e06:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f107 0310 	add.w	r3, r7, #16
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	f000 bcec 	b.w	80077fa <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e22:	463b      	mov	r3, r7
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	78db      	ldrb	r3, [r3, #3]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	f040 8356 	bne.w	80074da <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e2e:	463b      	mov	r3, r7
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	f240 82fa 	bls.w	8007434 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006e40:	1d3b      	adds	r3, r7, #4
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	463b      	mov	r3, r7
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006e5e:	1d3b      	adds	r3, r7, #4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	441a      	add	r2, r3
 8006e6c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006e84:	463b      	mov	r3, r7
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e8e:	463b      	mov	r3, r7
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6a1a      	ldr	r2, [r3, #32]
 8006e94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e98:	1ad2      	subs	r2, r2, r3
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ea0:	1d3b      	adds	r3, r7, #4
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 815e 	beq.w	8007178 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ebc:	1d3b      	adds	r3, r7, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d164      	bne.n	8006f96 <USB_EPStartXfer+0x218>
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	4413      	add	r3, r2
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	00da      	lsls	r2, r3, #3
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d112      	bne.n	8006f24 <USB_EPStartXfer+0x1a6>
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e054      	b.n	8006fce <USB_EPStartXfer+0x250>
 8006f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f28:	2b3e      	cmp	r3, #62	; 0x3e
 8006f2a:	d817      	bhi.n	8006f5c <USB_EPStartXfer+0x1de>
 8006f2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <USB_EPStartXfer+0x1ce>
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	3301      	adds	r3, #1
 8006f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	e038      	b.n	8006fce <USB_EPStartXfer+0x250>
 8006f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <USB_EPStartXfer+0x1fe>
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f76:	3b01      	subs	r3, #1
 8006f78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	029b      	lsls	r3, r3, #10
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	e01b      	b.n	8006fce <USB_EPStartXfer+0x250>
 8006f96:	463b      	mov	r3, r7
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d116      	bne.n	8006fce <USB_EPStartXfer+0x250>
 8006fa0:	1d3b      	adds	r3, r7, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	4413      	add	r3, r2
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	00da      	lsls	r2, r3, #3
 8006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	895b      	ldrh	r3, [r3, #10]
 8006fd4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fd8:	463b      	mov	r3, r7
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6959      	ldr	r1, [r3, #20]
 8006fde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006fe8:	1d38      	adds	r0, r7, #4
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	f001 f93c 	bl	8008268 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ffa:	441a      	add	r2, r3
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007002:	463b      	mov	r3, r7
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6a1a      	ldr	r2, [r3, #32]
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d90e      	bls.n	8007030 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8007012:	463b      	mov	r3, r7
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800701c:	463b      	mov	r3, r7
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a1a      	ldr	r2, [r3, #32]
 8007022:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	621a      	str	r2, [r3, #32]
 800702e:	e008      	b.n	8007042 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007030:	463b      	mov	r3, r7
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800703a:	463b      	mov	r3, r7
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d164      	bne.n	8007116 <USB_EPStartXfer+0x398>
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	463b      	mov	r3, r7
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800707a:	2b00      	cmp	r3, #0
 800707c:	d112      	bne.n	80070a4 <USB_EPStartXfer+0x326>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007088:	b29a      	uxth	r2, r3
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709c:	b29a      	uxth	r2, r3
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	e057      	b.n	8007154 <USB_EPStartXfer+0x3d6>
 80070a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070a8:	2b3e      	cmp	r3, #62	; 0x3e
 80070aa:	d817      	bhi.n	80070dc <USB_EPStartXfer+0x35e>
 80070ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <USB_EPStartXfer+0x34e>
 80070c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070c6:	3301      	adds	r3, #1
 80070c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e03b      	b.n	8007154 <USB_EPStartXfer+0x3d6>
 80070dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <USB_EPStartXfer+0x37e>
 80070f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070f6:	3b01      	subs	r3, #1
 80070f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710e:	b29a      	uxth	r2, r3
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	e01e      	b.n	8007154 <USB_EPStartXfer+0x3d6>
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d119      	bne.n	8007154 <USB_EPStartXfer+0x3d6>
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	4413      	add	r3, r2
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	00da      	lsls	r2, r3, #3
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	4413      	add	r3, r2
 8007144:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007148:	623b      	str	r3, [r7, #32]
 800714a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800714e:	b29a      	uxth	r2, r3
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	891b      	ldrh	r3, [r3, #8]
 800715a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6959      	ldr	r1, [r3, #20]
 8007164:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007168:	b29b      	uxth	r3, r3
 800716a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800716e:	1d38      	adds	r0, r7, #4
 8007170:	6800      	ldr	r0, [r0, #0]
 8007172:	f001 f879 	bl	8008268 <USB_WritePMA>
 8007176:	e340      	b.n	80077fa <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d164      	bne.n	800724c <USB_EPStartXfer+0x4ce>
 8007182:	1d3b      	adds	r3, r7, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007196:	4413      	add	r3, r2
 8007198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719a:	463b      	mov	r3, r7
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	00da      	lsls	r2, r3, #3
 80071a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d112      	bne.n	80071da <USB_EPStartXfer+0x45c>
 80071b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e057      	b.n	800728a <USB_EPStartXfer+0x50c>
 80071da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071de:	2b3e      	cmp	r3, #62	; 0x3e
 80071e0:	d817      	bhi.n	8007212 <USB_EPStartXfer+0x494>
 80071e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <USB_EPStartXfer+0x484>
 80071f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fc:	3301      	adds	r3, #1
 80071fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007206:	b29b      	uxth	r3, r3
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	b29a      	uxth	r2, r3
 800720c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e03b      	b.n	800728a <USB_EPStartXfer+0x50c>
 8007212:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800721c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <USB_EPStartXfer+0x4b4>
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722c:	3b01      	subs	r3, #1
 800722e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	b29b      	uxth	r3, r3
 8007238:	029b      	lsls	r3, r3, #10
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007244:	b29a      	uxth	r2, r3
 8007246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e01e      	b.n	800728a <USB_EPStartXfer+0x50c>
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d119      	bne.n	800728a <USB_EPStartXfer+0x50c>
 8007256:	1d3b      	adds	r3, r7, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	657b      	str	r3, [r7, #84]	; 0x54
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007264:	b29b      	uxth	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800726a:	4413      	add	r3, r2
 800726c:	657b      	str	r3, [r7, #84]	; 0x54
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00da      	lsls	r2, r3, #3
 8007276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007278:	4413      	add	r3, r2
 800727a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800727e:	653b      	str	r3, [r7, #80]	; 0x50
 8007280:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007284:	b29a      	uxth	r2, r3
 8007286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	891b      	ldrh	r3, [r3, #8]
 8007290:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007294:	463b      	mov	r3, r7
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6959      	ldr	r1, [r3, #20]
 800729a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80072a4:	1d38      	adds	r0, r7, #4
 80072a6:	6800      	ldr	r0, [r0, #0]
 80072a8:	f000 ffde 	bl	8008268 <USB_WritePMA>
            ep->xfer_buff += len;
 80072ac:	463b      	mov	r3, r7
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072b6:	441a      	add	r2, r3
 80072b8:	463b      	mov	r3, r7
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072be:	463b      	mov	r3, r7
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	463b      	mov	r3, r7
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d90e      	bls.n	80072ec <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80072d8:	463b      	mov	r3, r7
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a1a      	ldr	r2, [r3, #32]
 80072de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	463b      	mov	r3, r7
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	621a      	str	r2, [r3, #32]
 80072ea:	e008      	b.n	80072fe <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	647b      	str	r3, [r7, #68]	; 0x44
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d164      	bne.n	80073d8 <USB_EPStartXfer+0x65a>
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	4413      	add	r3, r2
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	00da      	lsls	r2, r3, #3
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	4413      	add	r3, r2
 8007332:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007336:	63bb      	str	r3, [r7, #56]	; 0x38
 8007338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800733c:	2b00      	cmp	r3, #0
 800733e:	d112      	bne.n	8007366 <USB_EPStartXfer+0x5e8>
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800734a:	b29a      	uxth	r2, r3
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735e:	b29a      	uxth	r2, r3
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	e054      	b.n	8007410 <USB_EPStartXfer+0x692>
 8007366:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800736a:	2b3e      	cmp	r3, #62	; 0x3e
 800736c:	d817      	bhi.n	800739e <USB_EPStartXfer+0x620>
 800736e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007378:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <USB_EPStartXfer+0x610>
 8007384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007388:	3301      	adds	r3, #1
 800738a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800738e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007392:	b29b      	uxth	r3, r3
 8007394:	029b      	lsls	r3, r3, #10
 8007396:	b29a      	uxth	r2, r3
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e038      	b.n	8007410 <USB_EPStartXfer+0x692>
 800739e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <USB_EPStartXfer+0x640>
 80073b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	029b      	lsls	r3, r3, #10
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e01b      	b.n	8007410 <USB_EPStartXfer+0x692>
 80073d8:	463b      	mov	r3, r7
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d116      	bne.n	8007410 <USB_EPStartXfer+0x692>
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	461a      	mov	r2, r3
 80073ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f0:	4413      	add	r3, r2
 80073f2:	647b      	str	r3, [r7, #68]	; 0x44
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	00da      	lsls	r2, r3, #3
 80073fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fe:	4413      	add	r3, r2
 8007400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
 8007406:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800740a:	b29a      	uxth	r2, r3
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	895b      	ldrh	r3, [r3, #10]
 8007416:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6959      	ldr	r1, [r3, #20]
 8007420:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007424:	b29b      	uxth	r3, r3
 8007426:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800742a:	1d38      	adds	r0, r7, #4
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f000 ff1b 	bl	8008268 <USB_WritePMA>
 8007432:	e1e2      	b.n	80077fa <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8007434:	463b      	mov	r3, r7
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	463b      	mov	r3, r7
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007458:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800745c:	1d3b      	adds	r3, r7, #4
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	463b      	mov	r3, r7
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	441a      	add	r2, r3
 800746a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800746e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747e:	b29b      	uxth	r3, r3
 8007480:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007482:	1d3b      	adds	r3, r7, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	663b      	str	r3, [r7, #96]	; 0x60
 8007488:	1d3b      	adds	r3, r7, #4
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007490:	b29b      	uxth	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007496:	4413      	add	r3, r2
 8007498:	663b      	str	r3, [r7, #96]	; 0x60
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	00da      	lsls	r2, r3, #3
 80074a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074b6:	463b      	mov	r3, r7
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	891b      	ldrh	r3, [r3, #8]
 80074bc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6959      	ldr	r1, [r3, #20]
 80074c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80074d0:	1d38      	adds	r0, r7, #4
 80074d2:	6800      	ldr	r0, [r0, #0]
 80074d4:	f000 fec8 	bl	8008268 <USB_WritePMA>
 80074d8:	e18f      	b.n	80077fa <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 808f 	beq.w	8007614 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80074fc:	463b      	mov	r3, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d164      	bne.n	80075d0 <USB_EPStartXfer+0x852>
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	673b      	str	r3, [r7, #112]	; 0x70
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800751a:	4413      	add	r3, r2
 800751c:	673b      	str	r3, [r7, #112]	; 0x70
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	00da      	lsls	r2, r3, #3
 8007526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007528:	4413      	add	r3, r2
 800752a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800752e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007530:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007534:	2b00      	cmp	r3, #0
 8007536:	d112      	bne.n	800755e <USB_EPStartXfer+0x7e0>
 8007538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007542:	b29a      	uxth	r2, r3
 8007544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007556:	b29a      	uxth	r2, r3
 8007558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e054      	b.n	8007608 <USB_EPStartXfer+0x88a>
 800755e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007562:	2b3e      	cmp	r3, #62	; 0x3e
 8007564:	d817      	bhi.n	8007596 <USB_EPStartXfer+0x818>
 8007566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <USB_EPStartXfer+0x808>
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	3301      	adds	r3, #1
 8007582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758a:	b29b      	uxth	r3, r3
 800758c:	029b      	lsls	r3, r3, #10
 800758e:	b29a      	uxth	r2, r3
 8007590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	e038      	b.n	8007608 <USB_EPStartXfer+0x88a>
 8007596:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <USB_EPStartXfer+0x838>
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b0:	3b01      	subs	r3, #1
 80075b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	e01b      	b.n	8007608 <USB_EPStartXfer+0x88a>
 80075d0:	463b      	mov	r3, r7
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d116      	bne.n	8007608 <USB_EPStartXfer+0x88a>
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075e8:	4413      	add	r3, r2
 80075ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075fc:	677b      	str	r3, [r7, #116]	; 0x74
 80075fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007602:	b29a      	uxth	r2, r3
 8007604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007606:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007608:	463b      	mov	r3, r7
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	895b      	ldrh	r3, [r3, #10]
 800760e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8007612:	e097      	b.n	8007744 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d168      	bne.n	80076f0 <USB_EPStartXfer+0x972>
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762e:	b29b      	uxth	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007636:	4413      	add	r3, r2
 8007638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	00da      	lsls	r2, r3, #3
 8007644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007648:	4413      	add	r3, r2
 800764a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800764e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007654:	2b00      	cmp	r3, #0
 8007656:	d112      	bne.n	800767e <USB_EPStartXfer+0x900>
 8007658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007662:	b29a      	uxth	r2, r3
 8007664:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007676:	b29a      	uxth	r2, r3
 8007678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	e05d      	b.n	800773a <USB_EPStartXfer+0x9bc>
 800767e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007682:	2b3e      	cmp	r3, #62	; 0x3e
 8007684:	d817      	bhi.n	80076b6 <USB_EPStartXfer+0x938>
 8007686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800768a:	085b      	lsrs	r3, r3, #1
 800768c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007690:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <USB_EPStartXfer+0x928>
 800769c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076a0:	3301      	adds	r3, #1
 80076a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e041      	b.n	800773a <USB_EPStartXfer+0x9bc>
 80076b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <USB_EPStartXfer+0x958>
 80076cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076d0:	3b01      	subs	r3, #1
 80076d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076da:	b29b      	uxth	r3, r3
 80076dc:	029b      	lsls	r3, r3, #10
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e024      	b.n	800773a <USB_EPStartXfer+0x9bc>
 80076f0:	463b      	mov	r3, r7
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	785b      	ldrb	r3, [r3, #1]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d11f      	bne.n	800773a <USB_EPStartXfer+0x9bc>
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007702:	1d3b      	adds	r3, r7, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007712:	4413      	add	r3, r2
 8007714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	00da      	lsls	r2, r3, #3
 8007720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007724:	4413      	add	r3, r2
 8007726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800772a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800772e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007732:	b29a      	uxth	r2, r3
 8007734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007738:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800773a:	463b      	mov	r3, r7
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	891b      	ldrh	r3, [r3, #8]
 8007740:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007744:	463b      	mov	r3, r7
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6959      	ldr	r1, [r3, #20]
 800774a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800774e:	b29b      	uxth	r3, r3
 8007750:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007754:	1d38      	adds	r0, r7, #4
 8007756:	6800      	ldr	r0, [r0, #0]
 8007758:	f000 fd86 	bl	8008268 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800775c:	463b      	mov	r3, r7
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d122      	bne.n	80077ac <USB_EPStartXfer+0xa2e>
 8007766:	1d3b      	adds	r3, r7, #4
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	463b      	mov	r3, r7
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007780:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007784:	1d3b      	adds	r3, r7, #4
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	463b      	mov	r3, r7
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8013      	strh	r3, [r2, #0]
 80077aa:	e026      	b.n	80077fa <USB_EPStartXfer+0xa7c>
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d121      	bne.n	80077fa <USB_EPStartXfer+0xa7c>
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	463b      	mov	r3, r7
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	463b      	mov	r3, r7
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	441a      	add	r2, r3
 80077e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80077e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077fa:	1d3b      	adds	r3, r7, #4
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	463b      	mov	r3, r7
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f107 020e 	add.w	r2, r7, #14
 8007810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007818:	8013      	strh	r3, [r2, #0]
 800781a:	f107 030e 	add.w	r3, r7, #14
 800781e:	f107 020e 	add.w	r2, r7, #14
 8007822:	8812      	ldrh	r2, [r2, #0]
 8007824:	f082 0210 	eor.w	r2, r2, #16
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	f107 030e 	add.w	r3, r7, #14
 800782e:	f107 020e 	add.w	r2, r7, #14
 8007832:	8812      	ldrh	r2, [r2, #0]
 8007834:	f082 0220 	eor.w	r2, r2, #32
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	1d3b      	adds	r3, r7, #4
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	463b      	mov	r3, r7
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	441a      	add	r2, r3
 8007848:	f107 030e 	add.w	r3, r7, #14
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785e:	b29b      	uxth	r3, r3
 8007860:	8013      	strh	r3, [r2, #0]
 8007862:	e3b5      	b.n	8007fd0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	7b1b      	ldrb	r3, [r3, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 8090 	bne.w	8007990 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8007870:	463b      	mov	r3, r7
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	463b      	mov	r3, r7
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	d90e      	bls.n	800789e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8007880:	463b      	mov	r3, r7
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800788a:	463b      	mov	r3, r7
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	463b      	mov	r3, r7
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	619a      	str	r2, [r3, #24]
 800789c:	e008      	b.n	80078b0 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800789e:	463b      	mov	r3, r7
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80078a8:	463b      	mov	r3, r7
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80078b0:	1d3b      	adds	r3, r7, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078b8:	1d3b      	adds	r3, r7, #4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078c8:	4413      	add	r3, r2
 80078ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ce:	463b      	mov	r3, r7
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	00da      	lsls	r2, r3, #3
 80078d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078da:	4413      	add	r3, r2
 80078dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d116      	bne.n	800791a <USB_EPStartXfer+0xb9c>
 80078ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007910:	b29a      	uxth	r2, r3
 8007912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e32c      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
 800791a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800791e:	2b3e      	cmp	r3, #62	; 0x3e
 8007920:	d818      	bhi.n	8007954 <USB_EPStartXfer+0xbd6>
 8007922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800792c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USB_EPStartXfer+0xbc4>
 8007938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007942:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29a      	uxth	r2, r3
 800794c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	e30f      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
 8007954:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800795e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <USB_EPStartXfer+0xbf6>
 800796a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800796e:	3b01      	subs	r3, #1
 8007970:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007978:	b29b      	uxth	r3, r3
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	b29b      	uxth	r3, r3
 800797e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007986:	b29a      	uxth	r2, r3
 8007988:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	e2f1      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	78db      	ldrb	r3, [r3, #3]
 8007996:	2b02      	cmp	r3, #2
 8007998:	f040 818f 	bne.w	8007cba <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800799c:	463b      	mov	r3, r7
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d175      	bne.n	8007a92 <USB_EPStartXfer+0xd14>
 80079a6:	1d3b      	adds	r3, r7, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079ae:	1d3b      	adds	r3, r7, #4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079be:	4413      	add	r3, r2
 80079c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	00da      	lsls	r2, r3, #3
 80079cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80079d0:	4413      	add	r3, r2
 80079d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079da:	463b      	mov	r3, r7
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d116      	bne.n	8007a12 <USB_EPStartXfer+0xc94>
 80079e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079f6:	801a      	strh	r2, [r3, #0]
 80079f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e065      	b.n	8007ade <USB_EPStartXfer+0xd60>
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b3e      	cmp	r3, #62	; 0x3e
 8007a1a:	d81a      	bhi.n	8007a52 <USB_EPStartXfer+0xcd4>
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a28:	463b      	mov	r3, r7
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d004      	beq.n	8007a40 <USB_EPStartXfer+0xcc2>
 8007a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	029b      	lsls	r3, r3, #10
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e045      	b.n	8007ade <USB_EPStartXfer+0xd60>
 8007a52:	463b      	mov	r3, r7
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a5e:	463b      	mov	r3, r7
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USB_EPStartXfer+0xcf8>
 8007a6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e025      	b.n	8007ade <USB_EPStartXfer+0xd60>
 8007a92:	463b      	mov	r3, r7
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d120      	bne.n	8007ade <USB_EPStartXfer+0xd60>
 8007a9c:	1d3b      	adds	r3, r7, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aba:	463b      	mov	r3, r7
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	00da      	lsls	r2, r3, #3
 8007ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d175      	bne.n	8007bdc <USB_EPStartXfer+0xe5e>
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b08:	4413      	add	r3, r2
 8007b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b0e:	463b      	mov	r3, r7
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	00da      	lsls	r2, r3, #3
 8007b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d116      	bne.n	8007b5c <USB_EPStartXfer+0xdde>
 8007b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e061      	b.n	8007c20 <USB_EPStartXfer+0xea2>
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b3e      	cmp	r3, #62	; 0x3e
 8007b64:	d81a      	bhi.n	8007b9c <USB_EPStartXfer+0xe1e>
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <USB_EPStartXfer+0xe0c>
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b84:	3301      	adds	r3, #1
 8007b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b98:	801a      	strh	r2, [r3, #0]
 8007b9a:	e041      	b.n	8007c20 <USB_EPStartXfer+0xea2>
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <USB_EPStartXfer+0xe42>
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	029b      	lsls	r3, r3, #10
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e021      	b.n	8007c20 <USB_EPStartXfer+0xea2>
 8007bdc:	463b      	mov	r3, r7
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d11c      	bne.n	8007c20 <USB_EPStartXfer+0xea2>
 8007be6:	1d3b      	adds	r3, r7, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	00da      	lsls	r2, r3, #3
 8007c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c08:	4413      	add	r3, r2
 8007c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c12:	463b      	mov	r3, r7
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c1e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007c20:	463b      	mov	r3, r7
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 81a4 	beq.w	8007f74 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c2c:	1d3b      	adds	r3, r7, #4
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	463b      	mov	r3, r7
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c40:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <USB_EPStartXfer+0xeda>
 8007c4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10d      	bne.n	8007c74 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8187 	bne.w	8007f74 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f040 8180 	bne.w	8007f74 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c74:	1d3b      	adds	r3, r7, #4
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	463b      	mov	r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	463b      	mov	r3, r7
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	441a      	add	r2, r3
 8007ca0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	8013      	strh	r3, [r2, #0]
 8007cb8:	e15c      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	78db      	ldrb	r3, [r3, #3]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	f040 8155 	bne.w	8007f70 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699a      	ldr	r2, [r3, #24]
 8007ccc:	463b      	mov	r3, r7
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d90e      	bls.n	8007cf4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699a      	ldr	r2, [r3, #24]
 8007ce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	463b      	mov	r3, r7
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	619a      	str	r2, [r3, #24]
 8007cf2:	e008      	b.n	8007d06 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d06:	463b      	mov	r3, r7
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d16f      	bne.n	8007df0 <USB_EPStartXfer+0x1072>
 8007d10:	1d3b      	adds	r3, r7, #4
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d18:	1d3b      	adds	r3, r7, #4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d28:	4413      	add	r3, r2
 8007d2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d2e:	463b      	mov	r3, r7
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	00da      	lsls	r2, r3, #3
 8007d36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d116      	bne.n	8007d7a <USB_EPStartXfer+0xffc>
 8007d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e05f      	b.n	8007e3a <USB_EPStartXfer+0x10bc>
 8007d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d80:	d818      	bhi.n	8007db4 <USB_EPStartXfer+0x1036>
 8007d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <USB_EPStartXfer+0x1024>
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e042      	b.n	8007e3a <USB_EPStartXfer+0x10bc>
 8007db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <USB_EPStartXfer+0x1056>
 8007dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e024      	b.n	8007e3a <USB_EPStartXfer+0x10bc>
 8007df0:	463b      	mov	r3, r7
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d11f      	bne.n	8007e3a <USB_EPStartXfer+0x10bc>
 8007dfa:	1d3b      	adds	r3, r7, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e12:	4413      	add	r3, r2
 8007e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e18:	463b      	mov	r3, r7
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	00da      	lsls	r2, r3, #3
 8007e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e24:	4413      	add	r3, r2
 8007e26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	1d3b      	adds	r3, r7, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d16f      	bne.n	8007f2c <USB_EPStartXfer+0x11ae>
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e64:	4413      	add	r3, r2
 8007e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	00da      	lsls	r2, r3, #3
 8007e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e76:	4413      	add	r3, r2
 8007e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d116      	bne.n	8007eb6 <USB_EPStartXfer+0x1138>
 8007e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e05e      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
 8007eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007eba:	2b3e      	cmp	r3, #62	; 0x3e
 8007ebc:	d818      	bhi.n	8007ef0 <USB_EPStartXfer+0x1172>
 8007ebe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ec2:	085b      	lsrs	r3, r3, #1
 8007ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <USB_EPStartXfer+0x1160>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed8:	3301      	adds	r3, #1
 8007eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	029b      	lsls	r3, r3, #10
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007eec:	801a      	strh	r2, [r3, #0]
 8007eee:	e041      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
 8007ef0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ef4:	095b      	lsrs	r3, r3, #5
 8007ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007efa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007efe:	f003 031f 	and.w	r3, r3, #31
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d104      	bne.n	8007f10 <USB_EPStartXfer+0x1192>
 8007f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	029b      	lsls	r3, r3, #10
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	e023      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	785b      	ldrb	r3, [r3, #1]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d11e      	bne.n	8007f74 <USB_EPStartXfer+0x11f6>
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f46:	4413      	add	r3, r2
 8007f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	00da      	lsls	r2, r3, #3
 8007f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	e001      	b.n	8007f74 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e02e      	b.n	8007fd2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f74:	1d3b      	adds	r3, r7, #4
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	463b      	mov	r3, r7
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f9a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007fa2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fa6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	463b      	mov	r3, r7
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d020      	beq.n	8008030 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008004:	81bb      	strh	r3, [r7, #12]
 8008006:	89bb      	ldrh	r3, [r7, #12]
 8008008:	f083 0310 	eor.w	r3, r3, #16
 800800c:	81bb      	strh	r3, [r7, #12]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	89bb      	ldrh	r3, [r7, #12]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
 800802e:	e01f      	b.n	8008070 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	81fb      	strh	r3, [r7, #14]
 8008048:	89fb      	ldrh	r3, [r7, #14]
 800804a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800804e:	81fb      	strh	r3, [r7, #14]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	89fb      	ldrh	r3, [r7, #14]
 800805c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806c:	b29b      	uxth	r3, r3
 800806e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800807e:	b480      	push	{r7}
 8008080:	b087      	sub	sp, #28
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	7b1b      	ldrb	r3, [r3, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 809d 	bne.w	80081cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04c      	beq.n	8008134 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	823b      	strh	r3, [r7, #16]
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01b      	beq.n	80080ea <USB_EPClearStall+0x6c>
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c8:	81fb      	strh	r3, [r7, #14]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	441a      	add	r2, r3
 80080d4:	89fb      	ldrh	r3, [r7, #14]
 80080d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	78db      	ldrb	r3, [r3, #3]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d06c      	beq.n	80081cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008108:	81bb      	strh	r3, [r7, #12]
 800810a:	89bb      	ldrh	r3, [r7, #12]
 800810c:	f083 0320 	eor.w	r3, r3, #32
 8008110:	81bb      	strh	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	441a      	add	r2, r3
 800811c:	89bb      	ldrh	r3, [r7, #12]
 800811e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812e:	b29b      	uxth	r3, r3
 8008130:	8013      	strh	r3, [r2, #0]
 8008132:	e04b      	b.n	80081cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	82fb      	strh	r3, [r7, #22]
 8008142:	8afb      	ldrh	r3, [r7, #22]
 8008144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01b      	beq.n	8008184 <USB_EPClearStall+0x106>
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008162:	82bb      	strh	r3, [r7, #20]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	441a      	add	r2, r3
 800816e:	8abb      	ldrh	r3, [r7, #20]
 8008170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800817c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008180:	b29b      	uxth	r3, r3
 8008182:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	827b      	strh	r3, [r7, #18]
 800819c:	8a7b      	ldrh	r3, [r7, #18]
 800819e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081a2:	827b      	strh	r3, [r7, #18]
 80081a4:	8a7b      	ldrh	r3, [r7, #18]
 80081a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081aa:	827b      	strh	r3, [r7, #18]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	441a      	add	r2, r3
 80081b6:	8a7b      	ldrh	r3, [r7, #18]
 80081b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081e6:	78fb      	ldrb	r3, [r7, #3]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2280      	movs	r2, #128	; 0x80
 80081f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800823e:	b29b      	uxth	r3, r3
 8008240:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008242:	68fb      	ldr	r3, [r7, #12]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008268:	b480      	push	{r7}
 800826a:	b08d      	sub	sp, #52	; 0x34
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4611      	mov	r1, r2
 8008274:	461a      	mov	r2, r3
 8008276:	460b      	mov	r3, r1
 8008278:	80fb      	strh	r3, [r7, #6]
 800827a:	4613      	mov	r3, r2
 800827c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800827e:	88bb      	ldrh	r3, [r7, #4]
 8008280:	3301      	adds	r3, #1
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800829e:	e01b      	b.n	80082d8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	3301      	adds	r3, #1
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	3302      	adds	r3, #2
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	3301      	adds	r3, #1
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	3b01      	subs	r3, #1
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e0      	bne.n	80082a0 <USB_WritePMA+0x38>
  }
}
 80082de:	bf00      	nop
 80082e0:	3734      	adds	r7, #52	; 0x34
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b08b      	sub	sp, #44	; 0x2c
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	460b      	mov	r3, r1
 80082fa:	80fb      	strh	r3, [r7, #6]
 80082fc:	4613      	mov	r3, r2
 80082fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008300:	88bb      	ldrh	r3, [r7, #4]
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	b29b      	uxth	r3, r3
 8008306:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800831a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
 8008320:	e018      	b.n	8008354 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	3302      	adds	r3, #2
 800832e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	b2da      	uxtb	r2, r3
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	b2da      	uxtb	r2, r3
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	3301      	adds	r3, #1
 800834c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	3b01      	subs	r3, #1
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e3      	bne.n	8008322 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800835a:	88bb      	ldrh	r3, [r7, #4]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	701a      	strb	r2, [r3, #0]
  }
}
 8008376:	bf00      	nop
 8008378:	372c      	adds	r7, #44	; 0x2c
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800838e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008392:	f002 f89d 	bl	800a4d0 <USBD_static_malloc>
 8008396:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80083a6:	2302      	movs	r3, #2
 80083a8:	e066      	b.n	8008478 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7c1b      	ldrb	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d119      	bne.n	80083ee <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083be:	2202      	movs	r2, #2
 80083c0:	2181      	movs	r1, #129	; 0x81
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 ff29 	bl	800a21a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d2:	2202      	movs	r2, #2
 80083d4:	2101      	movs	r1, #1
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 ff1f 	bl	800a21a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2210      	movs	r2, #16
 80083e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80083ec:	e016      	b.n	800841c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083ee:	2340      	movs	r3, #64	; 0x40
 80083f0:	2202      	movs	r2, #2
 80083f2:	2181      	movs	r1, #129	; 0x81
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 ff10 	bl	800a21a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008400:	2340      	movs	r3, #64	; 0x40
 8008402:	2202      	movs	r2, #2
 8008404:	2101      	movs	r1, #1
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 ff07 	bl	800a21a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2210      	movs	r2, #16
 8008418:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800841c:	2308      	movs	r3, #8
 800841e:	2203      	movs	r2, #3
 8008420:	2182      	movs	r1, #130	; 0x82
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fef9 	bl	800a21a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7c1b      	ldrb	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800845c:	2101      	movs	r1, #1
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 ffcb 	bl	800a3fa <USBD_LL_PrepareReceive>
 8008464:	e007      	b.n	8008476 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	2101      	movs	r1, #1
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 ffc2 	bl	800a3fa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800848c:	2181      	movs	r1, #129	; 0x81
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fee9 	bl	800a266 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800849a:	2101      	movs	r1, #1
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 fee2 	bl	800a266 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80084aa:	2182      	movs	r1, #130	; 0x82
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 feda 	bl	800a266 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00e      	beq.n	80084ea <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084dc:	4618      	mov	r0, r3
 80084de:	f002 f805 	bl	800a4ec <USBD_static_free>
    pdev->pClassData = NULL;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008504:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800851a:	2b00      	cmp	r3, #0
 800851c:	d03a      	beq.n	8008594 <USBD_CDC_Setup+0xa0>
 800851e:	2b20      	cmp	r3, #32
 8008520:	f040 8097 	bne.w	8008652 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	88db      	ldrh	r3, [r3, #6]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d029      	beq.n	8008580 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b25b      	sxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	da11      	bge.n	800855a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008542:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	88d2      	ldrh	r2, [r2, #6]
 8008548:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800854a:	6939      	ldr	r1, [r7, #16]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	88db      	ldrh	r3, [r3, #6]
 8008550:	461a      	mov	r2, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fa8d 	bl	8009a72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008558:	e082      	b.n	8008660 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	785a      	ldrb	r2, [r3, #1]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	88db      	ldrh	r3, [r3, #6]
 8008568:	b2da      	uxtb	r2, r3
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008570:	6939      	ldr	r1, [r7, #16]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	88db      	ldrh	r3, [r3, #6]
 8008576:	461a      	mov	r2, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 faa6 	bl	8009aca <USBD_CtlPrepareRx>
      break;
 800857e:	e06f      	b.n	8008660 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	7850      	ldrb	r0, [r2, #1]
 800858c:	2200      	movs	r2, #0
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	4798      	blx	r3
      break;
 8008592:	e065      	b.n	8008660 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b0b      	cmp	r3, #11
 800859a:	d84f      	bhi.n	800863c <USBD_CDC_Setup+0x148>
 800859c:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <USBD_CDC_Setup+0xb0>)
 800859e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a2:	bf00      	nop
 80085a4:	080085d5 	.word	0x080085d5
 80085a8:	0800864b 	.word	0x0800864b
 80085ac:	0800863d 	.word	0x0800863d
 80085b0:	0800863d 	.word	0x0800863d
 80085b4:	0800863d 	.word	0x0800863d
 80085b8:	0800863d 	.word	0x0800863d
 80085bc:	0800863d 	.word	0x0800863d
 80085c0:	0800863d 	.word	0x0800863d
 80085c4:	0800863d 	.word	0x0800863d
 80085c8:	0800863d 	.word	0x0800863d
 80085cc:	080085fd 	.word	0x080085fd
 80085d0:	08008625 	.word	0x08008625
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d107      	bne.n	80085ee <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	2202      	movs	r2, #2
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fa43 	bl	8009a72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ec:	e030      	b.n	8008650 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f9cd 	bl	8009990 <USBD_CtlError>
            ret = USBD_FAIL;
 80085f6:	2303      	movs	r3, #3
 80085f8:	75fb      	strb	r3, [r7, #23]
          break;
 80085fa:	e029      	b.n	8008650 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008602:	2b03      	cmp	r3, #3
 8008604:	d107      	bne.n	8008616 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008606:	f107 030f 	add.w	r3, r7, #15
 800860a:	2201      	movs	r2, #1
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fa2f 	bl	8009a72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008614:	e01c      	b.n	8008650 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f9b9 	bl	8009990 <USBD_CtlError>
            ret = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	75fb      	strb	r3, [r7, #23]
          break;
 8008622:	e015      	b.n	8008650 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862a:	2b03      	cmp	r3, #3
 800862c:	d00f      	beq.n	800864e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f9ad 	bl	8009990 <USBD_CtlError>
            ret = USBD_FAIL;
 8008636:	2303      	movs	r3, #3
 8008638:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800863a:	e008      	b.n	800864e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 f9a6 	bl	8009990 <USBD_CtlError>
          ret = USBD_FAIL;
 8008644:	2303      	movs	r3, #3
 8008646:	75fb      	strb	r3, [r7, #23]
          break;
 8008648:	e002      	b.n	8008650 <USBD_CDC_Setup+0x15c>
          break;
 800864a:	bf00      	nop
 800864c:	e008      	b.n	8008660 <USBD_CDC_Setup+0x16c>
          break;
 800864e:	bf00      	nop
      }
      break;
 8008650:	e006      	b.n	8008660 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f99b 	bl	8009990 <USBD_CtlError>
      ret = USBD_FAIL;
 800865a:	2303      	movs	r3, #3
 800865c:	75fb      	strb	r3, [r7, #23]
      break;
 800865e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop

0800866c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800867e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800868a:	2303      	movs	r3, #3
 800868c:	e04f      	b.n	800872e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008694:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3318      	adds	r3, #24
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d029      	beq.n	8008700 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	3318      	adds	r3, #24
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	78f9      	ldrb	r1, [r7, #3]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	460b      	mov	r3, r1
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	440b      	add	r3, r1
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	4403      	add	r3, r0
 80086cc:	3338      	adds	r3, #56	; 0x38
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80086d4:	fb03 f301 	mul.w	r3, r3, r1
 80086d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d110      	bne.n	8008700 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	3318      	adds	r3, #24
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086f2:	78f9      	ldrb	r1, [r7, #3]
 80086f4:	2300      	movs	r3, #0
 80086f6:	2200      	movs	r2, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 fe5d 	bl	800a3b8 <USBD_LL_Transmit>
 80086fe:	e015      	b.n	800872c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008748:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008754:	2303      	movs	r3, #3
 8008756:	e015      	b.n	8008784 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fe6d 	bl	800a43c <USBD_LL_GetRxDataSize>
 8008762:	4602      	mov	r2, r0
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800877e:	4611      	mov	r1, r2
 8008780:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800879a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d015      	beq.n	80087d2 <USBD_CDC_EP0_RxReady+0x46>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087ac:	2bff      	cmp	r3, #255	; 0xff
 80087ae:	d010      	beq.n	80087d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80087be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087c6:	b292      	uxth	r2, r2
 80087c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	22ff      	movs	r2, #255	; 0xff
 80087ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2243      	movs	r2, #67	; 0x43
 80087e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80087ea:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	20000094 	.word	0x20000094

080087fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2243      	movs	r2, #67	; 0x43
 8008808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800880a:	4b03      	ldr	r3, [pc, #12]	; (8008818 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	20000050 	.word	0x20000050

0800881c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2243      	movs	r2, #67	; 0x43
 8008828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800882a:	4b03      	ldr	r3, [pc, #12]	; (8008838 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	200000d8 	.word	0x200000d8

0800883c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	220a      	movs	r2, #10
 8008848:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	2000000c 	.word	0x2000000c

0800885c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800886c:	2303      	movs	r3, #3
 800886e:	e004      	b.n	800887a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008898:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088fe:	2303      	movs	r3, #3
 8008900:	e01a      	b.n	8008938 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008908:	2b00      	cmp	r3, #0
 800890a:	d114      	bne.n	8008936 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2201      	movs	r2, #1
 8008910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800892a:	2181      	movs	r1, #129	; 0x81
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fd43 	bl	800a3b8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800894e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800895a:	2303      	movs	r3, #3
 800895c:	e016      	b.n	800898c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7c1b      	ldrb	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d109      	bne.n	800897a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800896c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008970:	2101      	movs	r1, #1
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 fd41 	bl	800a3fa <USBD_LL_PrepareReceive>
 8008978:	e007      	b.n	800898a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008980:	2340      	movs	r3, #64	; 0x40
 8008982:	2101      	movs	r1, #1
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fd38 	bl	800a3fa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e01f      	b.n	80089ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	79fa      	ldrb	r2, [r7, #7]
 80089de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f001 fb9f 	bl	800a124 <USBD_LL_Init>
 80089e6:	4603      	mov	r3, r0
 80089e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e016      	b.n	8008a3a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	f107 020e 	add.w	r2, r7, #14
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4798      	blx	r3
 8008a30:	4602      	mov	r2, r0
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f001 fbca 	bl	800a1e4 <USBD_LL_Start>
 8008a50:	4603      	mov	r3, r0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	4611      	mov	r1, r2
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
  }

  return USBD_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 ff16 	bl	800991c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b0c:	f003 031f 	and.w	r3, r3, #31
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d00e      	beq.n	8008b32 <USBD_LL_SetupStage+0x5a>
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d302      	bcc.n	8008b1e <USBD_LL_SetupStage+0x46>
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d014      	beq.n	8008b46 <USBD_LL_SetupStage+0x6e>
 8008b1c:	e01d      	b.n	8008b5a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f9d6 	bl	8008ed8 <USBD_StdDevReq>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b30:	e020      	b.n	8008b74 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa3a 	bl	8008fb4 <USBD_StdItfReq>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
      break;
 8008b44:	e016      	b.n	8008b74 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa76 	bl	8009040 <USBD_StdEPReq>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]
      break;
 8008b58:	e00c      	b.n	8008b74 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 fb9b 	bl	800a2a4 <USBD_LL_StallEP>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
      break;
 8008b72:	bf00      	nop
  }

  return ret;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	460b      	mov	r3, r1
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d137      	bne.n	8008c02 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d14a      	bne.n	8008c3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d913      	bls.n	8008bd8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	1ad2      	subs	r2, r2, r3
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	bf28      	it	cs
 8008bca:	4613      	movcs	r3, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 ff97 	bl	8009b04 <USBD_CtlContinueRx>
 8008bd6:	e030      	b.n	8008c3a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d105      	bne.n	8008bfa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 ff93 	bl	8009b26 <USBD_CtlSendStatus>
 8008c00:	e01b      	b.n	8008c3a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d013      	beq.n	8008c36 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d10e      	bne.n	8008c36 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	7afa      	ldrb	r2, [r7, #11]
 8008c22:	4611      	mov	r1, r2
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	4798      	blx	r3
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	e002      	b.n	8008c3c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e000      	b.n	8008c3c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d16a      	bne.n	8008d2e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3314      	adds	r3, #20
 8008c5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d155      	bne.n	8008d14 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d914      	bls.n	8008c9e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	1ad2      	subs	r2, r2, r3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	461a      	mov	r2, r3
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 ff0c 	bl	8009aa8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f001 fbaf 	bl	800a3fa <USBD_LL_PrepareReceive>
 8008c9c:	e03a      	b.n	8008d14 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d11c      	bne.n	8008ce4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d316      	bcc.n	8008ce4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d20f      	bcs.n	8008ce4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 feed 	bl	8009aa8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f001 fb8c 	bl	800a3fa <USBD_LL_PrepareReceive>
 8008ce2:	e017      	b.n	8008d14 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d105      	bne.n	8008d06 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d06:	2180      	movs	r1, #128	; 0x80
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f001 facb 	bl	800a2a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 ff1c 	bl	8009b4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d123      	bne.n	8008d66 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff fe9b 	bl	8008a5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d2c:	e01b      	b.n	8008d66 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d013      	beq.n	8008d62 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d10e      	bne.n	8008d62 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	7afa      	ldrb	r2, [r7, #11]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	4798      	blx	r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	e002      	b.n	8008d68 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e000      	b.n	8008d68 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6852      	ldr	r2, [r2, #4]
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	4611      	mov	r1, r2
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	2200      	movs	r2, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fa2d 	bl	800a21a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2240      	movs	r2, #64	; 0x40
 8008dcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 fa1f 	bl	800a21a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2240      	movs	r2, #64	; 0x40
 8008de6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	78fa      	ldrb	r2, [r7, #3]
 8008e02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2204      	movs	r2, #4
 8008e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	d105      	bne.n	8008e5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d10b      	bne.n	8008e92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008eba:	8a3b      	ldrh	r3, [r7, #16]
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	b21a      	sxth	r2, r3
 8008ec0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	b21b      	sxth	r3, r3
 8008ec8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008eca:	89fb      	ldrh	r3, [r7, #14]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d004      	beq.n	8008efc <USBD_StdDevReq+0x24>
 8008ef2:	2b40      	cmp	r3, #64	; 0x40
 8008ef4:	d002      	beq.n	8008efc <USBD_StdDevReq+0x24>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <USBD_StdDevReq+0x38>
 8008efa:	e050      	b.n	8008f9e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0e:	e04b      	b.n	8008fa8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	d83c      	bhi.n	8008f92 <USBD_StdDevReq+0xba>
 8008f18:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <USBD_StdDevReq+0x48>)
 8008f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1e:	bf00      	nop
 8008f20:	08008f75 	.word	0x08008f75
 8008f24:	08008f89 	.word	0x08008f89
 8008f28:	08008f93 	.word	0x08008f93
 8008f2c:	08008f7f 	.word	0x08008f7f
 8008f30:	08008f93 	.word	0x08008f93
 8008f34:	08008f53 	.word	0x08008f53
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f93 	.word	0x08008f93
 8008f40:	08008f6b 	.word	0x08008f6b
 8008f44:	08008f5d 	.word	0x08008f5d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9d0 	bl	80092f0 <USBD_GetDescriptor>
      break;
 8008f50:	e024      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fb5f 	bl	8009618 <USBD_SetAddress>
      break;
 8008f5a:	e01f      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fb9c 	bl	800969c <USBD_SetConfig>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]
      break;
 8008f68:	e018      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fc39 	bl	80097e4 <USBD_GetConfig>
      break;
 8008f72:	e013      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fc68 	bl	800984c <USBD_GetStatus>
      break;
 8008f7c:	e00e      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fc96 	bl	80098b2 <USBD_SetFeature>
      break;
 8008f86:	e009      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fca5 	bl	80098da <USBD_ClrFeature>
      break;
 8008f90:	e004      	b.n	8008f9c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fcfb 	bl	8009990 <USBD_CtlError>
      break;
 8008f9a:	bf00      	nop
    }
    break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fcf5 	bl	8009990 <USBD_CtlError>
    break;
 8008fa6:	bf00      	nop
  }

  return ret;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop

08008fb4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d003      	beq.n	8008fd6 <USBD_StdItfReq+0x22>
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d001      	beq.n	8008fd6 <USBD_StdItfReq+0x22>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d12a      	bne.n	800902c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d81d      	bhi.n	800901e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	889b      	ldrh	r3, [r3, #4]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d813      	bhi.n	8009014 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	88db      	ldrh	r3, [r3, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d110      	bne.n	8009028 <USBD_StdItfReq+0x74>
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10d      	bne.n	8009028 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fd8a 	bl	8009b26 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009012:	e009      	b.n	8009028 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fcba 	bl	8009990 <USBD_CtlError>
      break;
 800901c:	e004      	b.n	8009028 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fcb5 	bl	8009990 <USBD_CtlError>
      break;
 8009026:	e000      	b.n	800902a <USBD_StdItfReq+0x76>
      break;
 8009028:	bf00      	nop
    }
    break;
 800902a:	e004      	b.n	8009036 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fcae 	bl	8009990 <USBD_CtlError>
    break;
 8009034:	bf00      	nop
  }

  return ret;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	889b      	ldrh	r3, [r3, #4]
 8009052:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800905c:	2b20      	cmp	r3, #32
 800905e:	d004      	beq.n	800906a <USBD_StdEPReq+0x2a>
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d002      	beq.n	800906a <USBD_StdEPReq+0x2a>
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <USBD_StdEPReq+0x3e>
 8009068:	e137      	b.n	80092da <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	4798      	blx	r3
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]
    break;
 800907c:	e132      	b.n	80092e4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d03e      	beq.n	8009104 <USBD_StdEPReq+0xc4>
 8009086:	2b03      	cmp	r3, #3
 8009088:	d002      	beq.n	8009090 <USBD_StdEPReq+0x50>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d079      	beq.n	8009182 <USBD_StdEPReq+0x142>
 800908e:	e11e      	b.n	80092ce <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009096:	2b02      	cmp	r3, #2
 8009098:	d002      	beq.n	80090a0 <USBD_StdEPReq+0x60>
 800909a:	2b03      	cmp	r3, #3
 800909c:	d015      	beq.n	80090ca <USBD_StdEPReq+0x8a>
 800909e:	e02b      	b.n	80090f8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00c      	beq.n	80090c0 <USBD_StdEPReq+0x80>
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b80      	cmp	r3, #128	; 0x80
 80090aa:	d009      	beq.n	80090c0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f8f7 	bl	800a2a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f8f3 	bl	800a2a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80090be:	e020      	b.n	8009102 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fc64 	bl	8009990 <USBD_CtlError>
        break;
 80090c8:	e01b      	b.n	8009102 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	885b      	ldrh	r3, [r3, #2]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10e      	bne.n	80090f0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <USBD_StdEPReq+0xb0>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b80      	cmp	r3, #128	; 0x80
 80090dc:	d008      	beq.n	80090f0 <USBD_StdEPReq+0xb0>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f8da 	bl	800a2a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fd18 	bl	8009b26 <USBD_CtlSendStatus>

        break;
 80090f6:	e004      	b.n	8009102 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fc48 	bl	8009990 <USBD_CtlError>
        break;
 8009100:	bf00      	nop
      }
      break;
 8009102:	e0e9      	b.n	80092d8 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910a:	2b02      	cmp	r3, #2
 800910c:	d002      	beq.n	8009114 <USBD_StdEPReq+0xd4>
 800910e:	2b03      	cmp	r3, #3
 8009110:	d015      	beq.n	800913e <USBD_StdEPReq+0xfe>
 8009112:	e02f      	b.n	8009174 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00c      	beq.n	8009134 <USBD_StdEPReq+0xf4>
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b80      	cmp	r3, #128	; 0x80
 800911e:	d009      	beq.n	8009134 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009120:	7bbb      	ldrb	r3, [r7, #14]
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 f8bd 	bl	800a2a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800912a:	2180      	movs	r1, #128	; 0x80
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f8b9 	bl	800a2a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009132:	e025      	b.n	8009180 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fc2a 	bl	8009990 <USBD_CtlError>
        break;
 800913c:	e020      	b.n	8009180 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d11b      	bne.n	800917e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f8c4 	bl	800a2e2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fce3 	bl	8009b26 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009172:	e004      	b.n	800917e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fc0a 	bl	8009990 <USBD_CtlError>
        break;
 800917c:	e000      	b.n	8009180 <USBD_StdEPReq+0x140>
        break;
 800917e:	bf00      	nop
      }
      break;
 8009180:	e0aa      	b.n	80092d8 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	2b02      	cmp	r3, #2
 800918a:	d002      	beq.n	8009192 <USBD_StdEPReq+0x152>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d032      	beq.n	80091f6 <USBD_StdEPReq+0x1b6>
 8009190:	e097      	b.n	80092c2 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <USBD_StdEPReq+0x168>
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b80      	cmp	r3, #128	; 0x80
 800919c:	d004      	beq.n	80091a8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fbf5 	bl	8009990 <USBD_CtlError>
          break;
 80091a6:	e091      	b.n	80092cc <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da0b      	bge.n	80091c8 <USBD_StdEPReq+0x188>
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	3310      	adds	r3, #16
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	3304      	adds	r3, #4
 80091c6:	e00b      	b.n	80091e0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	4413      	add	r3, r2
 80091de:	3304      	adds	r3, #4
 80091e0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2202      	movs	r2, #2
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fc3f 	bl	8009a72 <USBD_CtlSendData>
        break;
 80091f4:	e06a      	b.n	80092cc <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80091f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da11      	bge.n	8009222 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	f003 020f 	and.w	r2, r3, #15
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	3324      	adds	r3, #36	; 0x24
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d117      	bne.n	8009248 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fbb8 	bl	8009990 <USBD_CtlError>
            break;
 8009220:	e054      	b.n	80092cc <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	f003 020f 	and.w	r2, r3, #15
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fba5 	bl	8009990 <USBD_CtlError>
            break;
 8009246:	e041      	b.n	80092cc <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	da0b      	bge.n	8009268 <USBD_StdEPReq+0x228>
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	3310      	adds	r3, #16
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	3304      	adds	r3, #4
 8009266:	e00b      	b.n	8009280 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	3304      	adds	r3, #4
 8009280:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <USBD_StdEPReq+0x24e>
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b80      	cmp	r3, #128	; 0x80
 800928c:	d103      	bne.n	8009296 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e00e      	b.n	80092b4 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f840 	bl	800a320 <USBD_LL_IsStallEP>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e002      	b.n	80092b4 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2202      	movs	r2, #2
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fbd9 	bl	8009a72 <USBD_CtlSendData>
          break;
 80092c0:	e004      	b.n	80092cc <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fb63 	bl	8009990 <USBD_CtlError>
        break;
 80092ca:	bf00      	nop
      }
      break;
 80092cc:	e004      	b.n	80092d8 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fb5d 	bl	8009990 <USBD_CtlError>
      break;
 80092d6:	bf00      	nop
    }
    break;
 80092d8:	e004      	b.n	80092e4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fb57 	bl	8009990 <USBD_CtlError>
    break;
 80092e2:	bf00      	nop
  }

  return ret;
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	885b      	ldrh	r3, [r3, #2]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	2b0e      	cmp	r3, #14
 8009312:	f200 8152 	bhi.w	80095ba <USBD_GetDescriptor+0x2ca>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <USBD_GetDescriptor+0x2c>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	0800938d 	.word	0x0800938d
 8009320:	080093a5 	.word	0x080093a5
 8009324:	080093e5 	.word	0x080093e5
 8009328:	080095bb 	.word	0x080095bb
 800932c:	080095bb 	.word	0x080095bb
 8009330:	0800955b 	.word	0x0800955b
 8009334:	08009587 	.word	0x08009587
 8009338:	080095bb 	.word	0x080095bb
 800933c:	080095bb 	.word	0x080095bb
 8009340:	080095bb 	.word	0x080095bb
 8009344:	080095bb 	.word	0x080095bb
 8009348:	080095bb 	.word	0x080095bb
 800934c:	080095bb 	.word	0x080095bb
 8009350:	080095bb 	.word	0x080095bb
 8009354:	08009359 	.word	0x08009359
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800937a:	e126      	b.n	80095ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fb06 	bl	8009990 <USBD_CtlError>
      err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
    break;
 800938a:	e11e      	b.n	80095ca <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
    break;
 80093a2:	e112      	b.n	80095ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7c1b      	ldrb	r3, [r3, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10d      	bne.n	80093c8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b4:	f107 0208 	add.w	r2, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80093c6:	e100      	b.n	80095ca <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	f107 0208 	add.w	r2, r7, #8
 80093d4:	4610      	mov	r0, r2
 80093d6:	4798      	blx	r3
 80093d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	2202      	movs	r2, #2
 80093e0:	701a      	strb	r2, [r3, #0]
    break;
 80093e2:	e0f2      	b.n	80095ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	885b      	ldrh	r3, [r3, #2]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b05      	cmp	r3, #5
 80093ec:	f200 80ac 	bhi.w	8009548 <USBD_GetDescriptor+0x258>
 80093f0:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <USBD_GetDescriptor+0x108>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	08009411 	.word	0x08009411
 80093fc:	08009445 	.word	0x08009445
 8009400:	08009479 	.word	0x08009479
 8009404:	080094ad 	.word	0x080094ad
 8009408:	080094e1 	.word	0x080094e1
 800940c:	08009515 	.word	0x08009515
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	7c12      	ldrb	r2, [r2, #16]
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009432:	e091      	b.n	8009558 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 faaa 	bl	8009990 <USBD_CtlError>
        err++;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	3301      	adds	r3, #1
 8009440:	72fb      	strb	r3, [r7, #11]
      break;
 8009442:	e089      	b.n	8009558 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	7c12      	ldrb	r2, [r2, #16]
 800945c:	f107 0108 	add.w	r1, r7, #8
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009466:	e077      	b.n	8009558 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa90 	bl	8009990 <USBD_CtlError>
        err++;
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	3301      	adds	r3, #1
 8009474:	72fb      	strb	r3, [r7, #11]
      break;
 8009476:	e06f      	b.n	8009558 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	7c12      	ldrb	r2, [r2, #16]
 8009490:	f107 0108 	add.w	r1, r7, #8
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
 8009498:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800949a:	e05d      	b.n	8009558 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa76 	bl	8009990 <USBD_CtlError>
        err++;
 80094a4:	7afb      	ldrb	r3, [r7, #11]
 80094a6:	3301      	adds	r3, #1
 80094a8:	72fb      	strb	r3, [r7, #11]
      break;
 80094aa:	e055      	b.n	8009558 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	7c12      	ldrb	r2, [r2, #16]
 80094c4:	f107 0108 	add.w	r1, r7, #8
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ce:	e043      	b.n	8009558 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa5c 	bl	8009990 <USBD_CtlError>
        err++;
 80094d8:	7afb      	ldrb	r3, [r7, #11]
 80094da:	3301      	adds	r3, #1
 80094dc:	72fb      	strb	r3, [r7, #11]
      break;
 80094de:	e03b      	b.n	8009558 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	7c12      	ldrb	r2, [r2, #16]
 80094f8:	f107 0108 	add.w	r1, r7, #8
 80094fc:	4610      	mov	r0, r2
 80094fe:	4798      	blx	r3
 8009500:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009502:	e029      	b.n	8009558 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa42 	bl	8009990 <USBD_CtlError>
        err++;
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	3301      	adds	r3, #1
 8009510:	72fb      	strb	r3, [r7, #11]
      break;
 8009512:	e021      	b.n	8009558 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00b      	beq.n	8009538 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	7c12      	ldrb	r2, [r2, #16]
 800952c:	f107 0108 	add.w	r1, r7, #8
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
 8009534:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009536:	e00f      	b.n	8009558 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa28 	bl	8009990 <USBD_CtlError>
        err++;
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	3301      	adds	r3, #1
 8009544:	72fb      	strb	r3, [r7, #11]
      break;
 8009546:	e007      	b.n	8009558 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fa20 	bl	8009990 <USBD_CtlError>
      err++;
 8009550:	7afb      	ldrb	r3, [r7, #11]
 8009552:	3301      	adds	r3, #1
 8009554:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009556:	bf00      	nop
    }
    break;
 8009558:	e037      	b.n	80095ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	7c1b      	ldrb	r3, [r3, #16]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d109      	bne.n	8009576 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956a:	f107 0208 	add.w	r2, r7, #8
 800956e:	4610      	mov	r0, r2
 8009570:	4798      	blx	r3
 8009572:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009574:	e029      	b.n	80095ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa09 	bl	8009990 <USBD_CtlError>
      err++;
 800957e:	7afb      	ldrb	r3, [r7, #11]
 8009580:	3301      	adds	r3, #1
 8009582:	72fb      	strb	r3, [r7, #11]
    break;
 8009584:	e021      	b.n	80095ca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	7c1b      	ldrb	r3, [r3, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10d      	bne.n	80095aa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f107 0208 	add.w	r2, r7, #8
 800959a:	4610      	mov	r0, r2
 800959c:	4798      	blx	r3
 800959e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	2207      	movs	r2, #7
 80095a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80095a8:	e00f      	b.n	80095ca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f9ef 	bl	8009990 <USBD_CtlError>
      err++;
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	3301      	adds	r3, #1
 80095b6:	72fb      	strb	r3, [r7, #11]
    break;
 80095b8:	e007      	b.n	80095ca <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f9e7 	bl	8009990 <USBD_CtlError>
    err++;
 80095c2:	7afb      	ldrb	r3, [r7, #11]
 80095c4:	3301      	adds	r3, #1
 80095c6:	72fb      	strb	r3, [r7, #11]
    break;
 80095c8:	bf00      	nop
  }

  if (err != 0U)
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d11e      	bne.n	800960e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	88db      	ldrh	r3, [r3, #6]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d016      	beq.n	8009606 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80095d8:	893b      	ldrh	r3, [r7, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00e      	beq.n	80095fc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	88da      	ldrh	r2, [r3, #6]
 80095e2:	893b      	ldrh	r3, [r7, #8]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bf28      	it	cs
 80095e8:	4613      	movcs	r3, r2
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80095ee:	893b      	ldrh	r3, [r7, #8]
 80095f0:	461a      	mov	r2, r3
 80095f2:	68f9      	ldr	r1, [r7, #12]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fa3c 	bl	8009a72 <USBD_CtlSendData>
 80095fa:	e009      	b.n	8009610 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9c6 	bl	8009990 <USBD_CtlError>
 8009604:	e004      	b.n	8009610 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa8d 	bl	8009b26 <USBD_CtlSendStatus>
 800960c:	e000      	b.n	8009610 <USBD_GetDescriptor+0x320>
    return;
 800960e:	bf00      	nop
    }
  }
}
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop

08009618 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	889b      	ldrh	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d130      	bne.n	800968c <USBD_SetAddress+0x74>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d12c      	bne.n	800968c <USBD_SetAddress+0x74>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	2b7f      	cmp	r3, #127	; 0x7f
 8009638:	d828      	bhi.n	800968c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009644:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964c:	2b03      	cmp	r3, #3
 800964e:	d104      	bne.n	800965a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f99c 	bl	8009990 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009658:	e01c      	b.n	8009694 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7bfa      	ldrb	r2, [r7, #15]
 800965e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fe87 	bl	800a37a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fa5a 	bl	8009b26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009680:	e008      	b.n	8009694 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968a:	e003      	b.n	8009694 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f97e 	bl	8009990 <USBD_CtlError>
  }
}
 8009694:	bf00      	nop
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	885b      	ldrh	r3, [r3, #2]
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	4b4b      	ldr	r3, [pc, #300]	; (80097e0 <USBD_SetConfig+0x144>)
 80096b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096b4:	4b4a      	ldr	r3, [pc, #296]	; (80097e0 <USBD_SetConfig+0x144>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d905      	bls.n	80096c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f966 	bl	8009990 <USBD_CtlError>
    return USBD_FAIL;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e087      	b.n	80097d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d002      	beq.n	80096d8 <USBD_SetConfig+0x3c>
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d025      	beq.n	8009722 <USBD_SetConfig+0x86>
 80096d6:	e071      	b.n	80097bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80096d8:	4b41      	ldr	r3, [pc, #260]	; (80097e0 <USBD_SetConfig+0x144>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01c      	beq.n	800971a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80096e0:	4b3f      	ldr	r3, [pc, #252]	; (80097e0 <USBD_SetConfig+0x144>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80096ea:	4b3d      	ldr	r3, [pc, #244]	; (80097e0 <USBD_SetConfig+0x144>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff f9bd 	bl	8008a70 <USBD_SetClassConfig>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d004      	beq.n	800970a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f944 	bl	8009990 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009708:	e065      	b.n	80097d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa0b 	bl	8009b26 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2203      	movs	r2, #3
 8009714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009718:	e05d      	b.n	80097d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa03 	bl	8009b26 <USBD_CtlSendStatus>
    break;
 8009720:	e059      	b.n	80097d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009722:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <USBD_SetConfig+0x144>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d112      	bne.n	8009750 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2202      	movs	r2, #2
 800972e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009732:	4b2b      	ldr	r3, [pc, #172]	; (80097e0 <USBD_SetConfig+0x144>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800973c:	4b28      	ldr	r3, [pc, #160]	; (80097e0 <USBD_SetConfig+0x144>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff f9b0 	bl	8008aa8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f9ec 	bl	8009b26 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800974e:	e042      	b.n	80097d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009750:	4b23      	ldr	r3, [pc, #140]	; (80097e0 <USBD_SetConfig+0x144>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	429a      	cmp	r2, r3
 800975c:	d02a      	beq.n	80097b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff f99e 	bl	8008aa8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800976c:	4b1c      	ldr	r3, [pc, #112]	; (80097e0 <USBD_SetConfig+0x144>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009776:	4b1a      	ldr	r3, [pc, #104]	; (80097e0 <USBD_SetConfig+0x144>)
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff f977 	bl	8008a70 <USBD_SetClassConfig>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00f      	beq.n	80097ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f8fe 	bl	8009990 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	b2db      	uxtb	r3, r3
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff f983 	bl	8008aa8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2202      	movs	r2, #2
 80097a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80097aa:	e014      	b.n	80097d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f9ba 	bl	8009b26 <USBD_CtlSendStatus>
    break;
 80097b2:	e010      	b.n	80097d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9b6 	bl	8009b26 <USBD_CtlSendStatus>
    break;
 80097ba:	e00c      	b.n	80097d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f8e6 	bl	8009990 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097c4:	4b06      	ldr	r3, [pc, #24]	; (80097e0 <USBD_SetConfig+0x144>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff f96c 	bl	8008aa8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80097d0:	2303      	movs	r3, #3
 80097d2:	73fb      	strb	r3, [r7, #15]
    break;
 80097d4:	bf00      	nop
  }

  return ret;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	200001a8 	.word	0x200001a8

080097e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	88db      	ldrh	r3, [r3, #6]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d004      	beq.n	8009800 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f8c9 	bl	8009990 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80097fe:	e021      	b.n	8009844 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009806:	2b01      	cmp	r3, #1
 8009808:	db17      	blt.n	800983a <USBD_GetConfig+0x56>
 800980a:	2b02      	cmp	r3, #2
 800980c:	dd02      	ble.n	8009814 <USBD_GetConfig+0x30>
 800980e:	2b03      	cmp	r3, #3
 8009810:	d00b      	beq.n	800982a <USBD_GetConfig+0x46>
 8009812:	e012      	b.n	800983a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3308      	adds	r3, #8
 800981e:	2201      	movs	r2, #1
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f925 	bl	8009a72 <USBD_CtlSendData>
      break;
 8009828:	e00c      	b.n	8009844 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	3304      	adds	r3, #4
 800982e:	2201      	movs	r2, #1
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f91d 	bl	8009a72 <USBD_CtlSendData>
      break;
 8009838:	e004      	b.n	8009844 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f8a7 	bl	8009990 <USBD_CtlError>
      break;
 8009842:	bf00      	nop
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985c:	3b01      	subs	r3, #1
 800985e:	2b02      	cmp	r3, #2
 8009860:	d81e      	bhi.n	80098a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	88db      	ldrh	r3, [r3, #6]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d004      	beq.n	8009874 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f88f 	bl	8009990 <USBD_CtlError>
      break;
 8009872:	e01a      	b.n	80098aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d005      	beq.n	8009890 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f043 0202 	orr.w	r2, r3, #2
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	330c      	adds	r3, #12
 8009894:	2202      	movs	r2, #2
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f8ea 	bl	8009a72 <USBD_CtlSendData>
    break;
 800989e:	e004      	b.n	80098aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f874 	bl	8009990 <USBD_CtlError>
    break;
 80098a8:	bf00      	nop
  }
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	885b      	ldrh	r3, [r3, #2]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d106      	bne.n	80098d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f92a 	bl	8009b26 <USBD_CtlSendStatus>
  }
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ea:	3b01      	subs	r3, #1
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d80b      	bhi.n	8009908 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	885b      	ldrh	r3, [r3, #2]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d10c      	bne.n	8009912 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f910 	bl	8009b26 <USBD_CtlSendStatus>
      }
      break;
 8009906:	e004      	b.n	8009912 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f840 	bl	8009990 <USBD_CtlError>
      break;
 8009910:	e000      	b.n	8009914 <USBD_ClrFeature+0x3a>
      break;
 8009912:	bf00      	nop
  }
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3301      	adds	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	781a      	ldrb	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3301      	adds	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff faa8 	bl	8008e9c <SWAPBYTE>
 800994c:	4603      	mov	r3, r0
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff fa9b 	bl	8008e9c <SWAPBYTE>
 8009966:	4603      	mov	r3, r0
 8009968:	461a      	mov	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fa8e 	bl	8008e9c <SWAPBYTE>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	80da      	strh	r2, [r3, #6]
}
 8009988:	bf00      	nop
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800999a:	2180      	movs	r1, #128	; 0x80
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fc81 	bl	800a2a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099a2:	2100      	movs	r1, #0
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc7d 	bl	800a2a4 <USBD_LL_StallEP>
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b086      	sub	sp, #24
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d036      	beq.n	8009a36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099cc:	6938      	ldr	r0, [r7, #16]
 80099ce:	f000 f836 	bl	8009a3e <USBD_GetLen>
 80099d2:	4603      	mov	r3, r0
 80099d4:	3301      	adds	r3, #1
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	4413      	add	r3, r2
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	7812      	ldrb	r2, [r2, #0]
 80099ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	3301      	adds	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	4413      	add	r3, r2
 80099f8:	2203      	movs	r2, #3
 80099fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80099fc:	7dfb      	ldrb	r3, [r7, #23]
 80099fe:	3301      	adds	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a02:	e013      	b.n	8009a2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	4413      	add	r3, r2
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	7812      	ldrb	r2, [r2, #0]
 8009a0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	3301      	adds	r3, #1
 8009a14:	613b      	str	r3, [r7, #16]
    idx++;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e7      	bne.n	8009a04 <USBD_GetString+0x52>
 8009a34:	e000      	b.n	8009a38 <USBD_GetString+0x86>
    return;
 8009a36:	bf00      	nop
  }
}
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a4e:	e005      	b.n	8009a5c <USBD_GetLen+0x1e>
  {
    len++;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	3301      	adds	r3, #1
 8009a54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1f5      	bne.n	8009a50 <USBD_GetLen+0x12>
  }

  return len;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2202      	movs	r2, #2
 8009a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	2100      	movs	r1, #0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fc8d 	bl	800a3b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fc7c 	bl	800a3b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2203      	movs	r2, #3
 8009ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	2100      	movs	r1, #0
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 fc80 	bl	800a3fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	2100      	movs	r1, #0
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 fc6f 	bl	800a3fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2204      	movs	r2, #4
 8009b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b36:	2300      	movs	r3, #0
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fc3b 	bl	800a3b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2205      	movs	r2, #5
 8009b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2100      	movs	r1, #0
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fc49 	bl	800a3fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4912      	ldr	r1, [pc, #72]	; (8009bc4 <MX_USB_Device_Init+0x50>)
 8009b7c:	4812      	ldr	r0, [pc, #72]	; (8009bc8 <MX_USB_Device_Init+0x54>)
 8009b7e:	f7fe ff09 	bl	8008994 <USBD_Init>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b88:	f7f7 fef0 	bl	800196c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b8c:	490f      	ldr	r1, [pc, #60]	; (8009bcc <MX_USB_Device_Init+0x58>)
 8009b8e:	480e      	ldr	r0, [pc, #56]	; (8009bc8 <MX_USB_Device_Init+0x54>)
 8009b90:	f7fe ff30 	bl	80089f4 <USBD_RegisterClass>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b9a:	f7f7 fee7 	bl	800196c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b9e:	490c      	ldr	r1, [pc, #48]	; (8009bd0 <MX_USB_Device_Init+0x5c>)
 8009ba0:	4809      	ldr	r0, [pc, #36]	; (8009bc8 <MX_USB_Device_Init+0x54>)
 8009ba2:	f7fe fe5b 	bl	800885c <USBD_CDC_RegisterInterface>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009bac:	f7f7 fede 	bl	800196c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009bb0:	4805      	ldr	r0, [pc, #20]	; (8009bc8 <MX_USB_Device_Init+0x54>)
 8009bb2:	f7fe ff46 	bl	8008a42 <USBD_Start>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009bbc:	f7f7 fed6 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009bc0:	bf00      	nop
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000130 	.word	0x20000130
 8009bc8:	2000079c 	.word	0x2000079c
 8009bcc:	20000018 	.word	0x20000018
 8009bd0:	2000011c 	.word	0x2000011c

08009bd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bd8:	2200      	movs	r2, #0
 8009bda:	4905      	ldr	r1, [pc, #20]	; (8009bf0 <CDC_Init_FS+0x1c>)
 8009bdc:	4805      	ldr	r0, [pc, #20]	; (8009bf4 <CDC_Init_FS+0x20>)
 8009bde:	f7fe fe52 	bl	8008886 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009be2:	4905      	ldr	r1, [pc, #20]	; (8009bf8 <CDC_Init_FS+0x24>)
 8009be4:	4803      	ldr	r0, [pc, #12]	; (8009bf4 <CDC_Init_FS+0x20>)
 8009be6:	f7fe fe67 	bl	80088b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20000e54 	.word	0x20000e54
 8009bf4:	2000079c 	.word	0x2000079c
 8009bf8:	20000a6c 	.word	0x20000a6c

08009bfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b23      	cmp	r3, #35	; 0x23
 8009c20:	d84a      	bhi.n	8009cb8 <CDC_Control_FS+0xac>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <CDC_Control_FS+0x1c>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009cb9 	.word	0x08009cb9
 8009c2c:	08009cb9 	.word	0x08009cb9
 8009c30:	08009cb9 	.word	0x08009cb9
 8009c34:	08009cb9 	.word	0x08009cb9
 8009c38:	08009cb9 	.word	0x08009cb9
 8009c3c:	08009cb9 	.word	0x08009cb9
 8009c40:	08009cb9 	.word	0x08009cb9
 8009c44:	08009cb9 	.word	0x08009cb9
 8009c48:	08009cb9 	.word	0x08009cb9
 8009c4c:	08009cb9 	.word	0x08009cb9
 8009c50:	08009cb9 	.word	0x08009cb9
 8009c54:	08009cb9 	.word	0x08009cb9
 8009c58:	08009cb9 	.word	0x08009cb9
 8009c5c:	08009cb9 	.word	0x08009cb9
 8009c60:	08009cb9 	.word	0x08009cb9
 8009c64:	08009cb9 	.word	0x08009cb9
 8009c68:	08009cb9 	.word	0x08009cb9
 8009c6c:	08009cb9 	.word	0x08009cb9
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cb9 	.word	0x08009cb9
 8009c7c:	08009cb9 	.word	0x08009cb9
 8009c80:	08009cb9 	.word	0x08009cb9
 8009c84:	08009cb9 	.word	0x08009cb9
 8009c88:	08009cb9 	.word	0x08009cb9
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cb9 	.word	0x08009cb9
 8009c9c:	08009cb9 	.word	0x08009cb9
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009cb9 	.word	0x08009cb9
 8009ca8:	08009cb9 	.word	0x08009cb9
 8009cac:	08009cb9 	.word	0x08009cb9
 8009cb0:	08009cb9 	.word	0x08009cb9
 8009cb4:	08009cb9 	.word	0x08009cb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cb8:	bf00      	nop
  }

  return (USBD_OK);
 8009cba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7f6 fce3 	bl	80006a0 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	4805      	ldr	r0, [pc, #20]	; (8009cf4 <CDC_Receive_FS+0x2c>)
 8009cde:	f7fe fdeb 	bl	80088b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ce2:	4804      	ldr	r0, [pc, #16]	; (8009cf4 <CDC_Receive_FS+0x2c>)
 8009ce4:	f7fe fe2c 	bl	8008940 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ce8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	2000079c 	.word	0x2000079c

08009cf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d08:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <CDC_Transmit_FS+0x48>)
 8009d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e00b      	b.n	8009d36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d1e:	887b      	ldrh	r3, [r7, #2]
 8009d20:	461a      	mov	r2, r3
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4806      	ldr	r0, [pc, #24]	; (8009d40 <CDC_Transmit_FS+0x48>)
 8009d26:	f7fe fdae 	bl	8008886 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d2a:	4805      	ldr	r0, [pc, #20]	; (8009d40 <CDC_Transmit_FS+0x48>)
 8009d2c:	f7fe fdd8 	bl	80088e0 <USBD_CDC_TransmitPacket>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	2000079c 	.word	0x2000079c

08009d44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
	...

08009d68 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	4603      	mov	r3, r0
 8009d70:	6039      	str	r1, [r7, #0]
 8009d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2212      	movs	r2, #18
 8009d78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d7a:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20000150 	.word	0x20000150

08009d8c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2204      	movs	r2, #4
 8009d9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d9e:	4b03      	ldr	r3, [pc, #12]	; (8009dac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	20000164 	.word	0x20000164

08009db0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d105      	bne.n	8009dce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	4907      	ldr	r1, [pc, #28]	; (8009de4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009dc6:	4808      	ldr	r0, [pc, #32]	; (8009de8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009dc8:	f7ff fdf3 	bl	80099b2 <USBD_GetString>
 8009dcc:	e004      	b.n	8009dd8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4904      	ldr	r1, [pc, #16]	; (8009de4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009dd2:	4805      	ldr	r0, [pc, #20]	; (8009de8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009dd4:	f7ff fded 	bl	80099b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dd8:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	2000123c 	.word	0x2000123c
 8009de8:	0800a5ec 	.word	0x0800a5ec

08009dec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	6039      	str	r1, [r7, #0]
 8009df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	4904      	ldr	r1, [pc, #16]	; (8009e0c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009dfc:	4804      	ldr	r0, [pc, #16]	; (8009e10 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009dfe:	f7ff fdd8 	bl	80099b2 <USBD_GetString>
  return USBD_StrDesc;
 8009e02:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	2000123c 	.word	0x2000123c
 8009e10:	0800a604 	.word	0x0800a604

08009e14 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	6039      	str	r1, [r7, #0]
 8009e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	221a      	movs	r2, #26
 8009e24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e26:	f000 f843 	bl	8009eb0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e2a:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	20000168 	.word	0x20000168

08009e38 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	6039      	str	r1, [r7, #0]
 8009e42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d105      	bne.n	8009e56 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	4907      	ldr	r1, [pc, #28]	; (8009e6c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e4e:	4808      	ldr	r0, [pc, #32]	; (8009e70 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e50:	f7ff fdaf 	bl	80099b2 <USBD_GetString>
 8009e54:	e004      	b.n	8009e60 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	4904      	ldr	r1, [pc, #16]	; (8009e6c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e5a:	4805      	ldr	r0, [pc, #20]	; (8009e70 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e5c:	f7ff fda9 	bl	80099b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	2000123c 	.word	0x2000123c
 8009e70:	0800a618 	.word	0x0800a618

08009e74 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6039      	str	r1, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d105      	bne.n	8009e92 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	4907      	ldr	r1, [pc, #28]	; (8009ea8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e8a:	4808      	ldr	r0, [pc, #32]	; (8009eac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e8c:	f7ff fd91 	bl	80099b2 <USBD_GetString>
 8009e90:	e004      	b.n	8009e9c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	4904      	ldr	r1, [pc, #16]	; (8009ea8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e96:	4805      	ldr	r0, [pc, #20]	; (8009eac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e98:	f7ff fd8b 	bl	80099b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e9c:	4b02      	ldr	r3, [pc, #8]	; (8009ea8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000123c 	.word	0x2000123c
 8009eac:	0800a624 	.word	0x0800a624

08009eb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <Get_SerialNum+0x44>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ebc:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <Get_SerialNum+0x48>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	; (8009efc <Get_SerialNum+0x4c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ed6:	2208      	movs	r2, #8
 8009ed8:	4909      	ldr	r1, [pc, #36]	; (8009f00 <Get_SerialNum+0x50>)
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 f814 	bl	8009f08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	4908      	ldr	r1, [pc, #32]	; (8009f04 <Get_SerialNum+0x54>)
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f000 f80f 	bl	8009f08 <IntToUnicode>
  }
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	1fff7590 	.word	0x1fff7590
 8009ef8:	1fff7594 	.word	0x1fff7594
 8009efc:	1fff7598 	.word	0x1fff7598
 8009f00:	2000016a 	.word	0x2000016a
 8009f04:	2000017a 	.word	0x2000017a

08009f08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	4613      	mov	r3, r2
 8009f14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75fb      	strb	r3, [r7, #23]
 8009f1e:	e027      	b.n	8009f70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	0f1b      	lsrs	r3, r3, #28
 8009f24:	2b09      	cmp	r3, #9
 8009f26:	d80b      	bhi.n	8009f40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	0f1b      	lsrs	r3, r3, #28
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	4619      	mov	r1, r3
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	440b      	add	r3, r1
 8009f38:	3230      	adds	r2, #48	; 0x30
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	701a      	strb	r2, [r3, #0]
 8009f3e:	e00a      	b.n	8009f56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	0f1b      	lsrs	r3, r3, #28
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	440b      	add	r3, r1
 8009f50:	3237      	adds	r2, #55	; 0x37
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	3301      	adds	r3, #1
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	4413      	add	r3, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	75fb      	strb	r3, [r7, #23]
 8009f70:	7dfa      	ldrb	r2, [r7, #23]
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d3d3      	bcc.n	8009f20 <IntToUnicode+0x18>
  }
}
 8009f78:	bf00      	nop
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <HAL_PCD_MspInit+0x44>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d113      	bne.n	8009fbe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f96:	4b0d      	ldr	r3, [pc, #52]	; (8009fcc <HAL_PCD_MspInit+0x48>)
 8009f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9a:	4a0c      	ldr	r2, [pc, #48]	; (8009fcc <HAL_PCD_MspInit+0x48>)
 8009f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8009fa2:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <HAL_PCD_MspInit+0x48>)
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	2014      	movs	r0, #20
 8009fb4:	f7f8 f913 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fb8:	2014      	movs	r0, #20
 8009fba:	f7f8 f92a 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	40005c00 	.word	0x40005c00
 8009fcc:	40021000 	.word	0x40021000

08009fd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fe fd76 	bl	8008ad8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	440b      	add	r3, r1
 800a014:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f7fe fdae 	bl	8008b7e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a03c:	78fa      	ldrb	r2, [r7, #3]
 800a03e:	6879      	ldr	r1, [r7, #4]
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	440b      	add	r3, r1
 800a04a:	333c      	adds	r3, #60	; 0x3c
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	4619      	mov	r1, r3
 800a052:	f7fe fdf7 	bl	8008c44 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fe fefb 	bl	8008e68 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a082:	2301      	movs	r3, #1
 800a084:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d001      	beq.n	800a092 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a08e:	f7f7 fc6d 	bl	800196c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a098:	7bfa      	ldrb	r2, [r7, #15]
 800a09a:	4611      	mov	r1, r2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe fea8 	bl	8008df2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fe61 	bl	8008d70 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fea3 	bl	8008e12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0d4:	4b04      	ldr	r3, [pc, #16]	; (800a0e8 <HAL_PCD_SuspendCallback+0x30>)
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	4a03      	ldr	r2, [pc, #12]	; (800a0e8 <HAL_PCD_SuspendCallback+0x30>)
 800a0da:	f043 0306 	orr.w	r3, r3, #6
 800a0de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed00 	.word	0xe000ed00

0800a0ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d007      	beq.n	800a10c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0fc:	4b08      	ldr	r3, [pc, #32]	; (800a120 <HAL_PCD_ResumeCallback+0x34>)
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	4a07      	ldr	r2, [pc, #28]	; (800a120 <HAL_PCD_ResumeCallback+0x34>)
 800a102:	f023 0306 	bic.w	r3, r3, #6
 800a106:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a108:	f000 f9fa 	bl	800a500 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fe92 	bl	8008e3c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	e000ed00 	.word	0xe000ed00

0800a124 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a12c:	4a2b      	ldr	r2, [pc, #172]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a29      	ldr	r2, [pc, #164]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a138:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a13c:	4b27      	ldr	r3, [pc, #156]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a13e:	4a28      	ldr	r2, [pc, #160]	; (800a1e0 <USBD_LL_Init+0xbc>)
 800a140:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a142:	4b26      	ldr	r3, [pc, #152]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a144:	2208      	movs	r2, #8
 800a146:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a148:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a14a:	2202      	movs	r2, #2
 800a14c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a14e:	4b23      	ldr	r3, [pc, #140]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a150:	2202      	movs	r2, #2
 800a152:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a154:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a156:	2200      	movs	r2, #0
 800a158:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a15a:	4b20      	ldr	r3, [pc, #128]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a160:	4b1e      	ldr	r3, [pc, #120]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a162:	2200      	movs	r2, #0
 800a164:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a166:	4b1d      	ldr	r3, [pc, #116]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a168:	2200      	movs	r2, #0
 800a16a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a16c:	481b      	ldr	r0, [pc, #108]	; (800a1dc <USBD_LL_Init+0xb8>)
 800a16e:	f7f8 fa37 	bl	80025e0 <HAL_PCD_Init>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a178:	f7f7 fbf8 	bl	800196c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a182:	2318      	movs	r3, #24
 800a184:	2200      	movs	r2, #0
 800a186:	2100      	movs	r1, #0
 800a188:	f7f9 fd25 	bl	8003bd6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a192:	2358      	movs	r3, #88	; 0x58
 800a194:	2200      	movs	r2, #0
 800a196:	2180      	movs	r1, #128	; 0x80
 800a198:	f7f9 fd1d 	bl	8003bd6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1a2:	23c0      	movs	r3, #192	; 0xc0
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2181      	movs	r1, #129	; 0x81
 800a1a8:	f7f9 fd15 	bl	8003bd6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	f7f9 fd0c 	bl	8003bd6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2182      	movs	r1, #130	; 0x82
 800a1cc:	f7f9 fd03 	bl	8003bd6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	2000143c 	.word	0x2000143c
 800a1e0:	40005c00 	.word	0x40005c00

0800a1e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7f8 fad5 	bl	80027aa <HAL_PCD_Start>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f980 	bl	800a50c <USBD_Get_USB_Status>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a210:	7bbb      	ldrb	r3, [r7, #14]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	4608      	mov	r0, r1
 800a224:	4611      	mov	r1, r2
 800a226:	461a      	mov	r2, r3
 800a228:	4603      	mov	r3, r0
 800a22a:	70fb      	strb	r3, [r7, #3]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70bb      	strb	r3, [r7, #2]
 800a230:	4613      	mov	r3, r2
 800a232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a242:	78bb      	ldrb	r3, [r7, #2]
 800a244:	883a      	ldrh	r2, [r7, #0]
 800a246:	78f9      	ldrb	r1, [r7, #3]
 800a248:	f7f8 fc44 	bl	8002ad4 <HAL_PCD_EP_Open>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	4618      	mov	r0, r3
 800a254:	f000 f95a 	bl	800a50c <USBD_Get_USB_Status>
 800a258:	4603      	mov	r3, r0
 800a25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a280:	78fa      	ldrb	r2, [r7, #3]
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f7f8 fc8b 	bl	8002ba0 <HAL_PCD_EP_Close>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	4618      	mov	r0, r3
 800a292:	f000 f93b 	bl	800a50c <USBD_Get_USB_Status>
 800a296:	4603      	mov	r3, r0
 800a298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2be:	78fa      	ldrb	r2, [r7, #3]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7f8 fd4c 	bl	8002d60 <HAL_PCD_EP_SetStall>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 f91c 	bl	800a50c <USBD_Get_USB_Status>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2fc:	78fa      	ldrb	r2, [r7, #3]
 800a2fe:	4611      	mov	r1, r2
 800a300:	4618      	mov	r0, r3
 800a302:	f7f8 fd8d 	bl	8002e20 <HAL_PCD_EP_ClrStall>
 800a306:	4603      	mov	r3, r0
 800a308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 f8fd 	bl	800a50c <USBD_Get_USB_Status>
 800a312:	4603      	mov	r3, r0
 800a314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a316:	7bbb      	ldrb	r3, [r7, #14]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	da0c      	bge.n	800a356 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	440b      	add	r3, r1
 800a350:	3302      	adds	r3, #2
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	e00b      	b.n	800a36e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a35c:	68f9      	ldr	r1, [r7, #12]
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	440b      	add	r3, r1
 800a368:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a36c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a394:	78fa      	ldrb	r2, [r7, #3]
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7f8 fb76 	bl	8002a8a <HAL_PCD_SetAddress>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f8b1 	bl	800a50c <USBD_Get_USB_Status>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3d6:	7af9      	ldrb	r1, [r7, #11]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	f7f8 fc7d 	bl	8002cda <HAL_PCD_EP_Transmit>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f890 	bl	800a50c <USBD_Get_USB_Status>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	460b      	mov	r3, r1
 800a408:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a418:	7af9      	ldrb	r1, [r7, #11]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	f7f8 fc07 	bl	8002c30 <HAL_PCD_EP_Receive>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 f86f 	bl	800a50c <USBD_Get_USB_Status>
 800a42e:	4603      	mov	r3, r0
 800a430:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a432:	7dbb      	ldrb	r3, [r7, #22]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f7f8 fc29 	bl	8002caa <HAL_PCD_EP_GetRxCount>
 800a458:	4603      	mov	r3, r0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_PCDEx_LPM_Callback+0x18>
 800a476:	2b01      	cmp	r3, #1
 800a478:	d013      	beq.n	800a4a2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a47a:	e023      	b.n	800a4c4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d007      	beq.n	800a494 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a484:	f000 f83c 	bl	800a500 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a488:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <HAL_PCDEx_LPM_Callback+0x68>)
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	4a0f      	ldr	r2, [pc, #60]	; (800a4cc <HAL_PCDEx_LPM_Callback+0x68>)
 800a48e:	f023 0306 	bic.w	r3, r3, #6
 800a492:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fcce 	bl	8008e3c <USBD_LL_Resume>
    break;
 800a4a0:	e010      	b.n	800a4c4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fcb2 	bl	8008e12 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <HAL_PCDEx_LPM_Callback+0x68>)
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	4a04      	ldr	r2, [pc, #16]	; (800a4cc <HAL_PCDEx_LPM_Callback+0x68>)
 800a4bc:	f043 0306 	orr.w	r3, r3, #6
 800a4c0:	6113      	str	r3, [r2, #16]
    break;
 800a4c2:	bf00      	nop
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	e000ed00 	.word	0xe000ed00

0800a4d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4d8:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <USBD_static_malloc+0x18>)
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	200001ac 	.word	0x200001ac

0800a4ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a504:	f7f6 fcc4 	bl	8000e90 <SystemClock_Config>
}
 800a508:	bf00      	nop
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d817      	bhi.n	800a550 <USBD_Get_USB_Status+0x44>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <USBD_Get_USB_Status+0x1c>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a539 	.word	0x0800a539
 800a52c:	0800a53f 	.word	0x0800a53f
 800a530:	0800a545 	.word	0x0800a545
 800a534:	0800a54b 	.word	0x0800a54b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
    break;
 800a53c:	e00b      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a53e:	2303      	movs	r3, #3
 800a540:	73fb      	strb	r3, [r7, #15]
    break;
 800a542:	e008      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a544:	2301      	movs	r3, #1
 800a546:	73fb      	strb	r3, [r7, #15]
    break;
 800a548:	e005      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a54a:	2303      	movs	r3, #3
 800a54c:	73fb      	strb	r3, [r7, #15]
    break;
 800a54e:	e002      	b.n	800a556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a550:	2303      	movs	r3, #3
 800a552:	73fb      	strb	r3, [r7, #15]
    break;
 800a554:	bf00      	nop
  }
  return usb_status;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <__libc_init_array>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	4e0d      	ldr	r6, [pc, #52]	; (800a59c <__libc_init_array+0x38>)
 800a568:	4c0d      	ldr	r4, [pc, #52]	; (800a5a0 <__libc_init_array+0x3c>)
 800a56a:	1ba4      	subs	r4, r4, r6
 800a56c:	10a4      	asrs	r4, r4, #2
 800a56e:	2500      	movs	r5, #0
 800a570:	42a5      	cmp	r5, r4
 800a572:	d109      	bne.n	800a588 <__libc_init_array+0x24>
 800a574:	4e0b      	ldr	r6, [pc, #44]	; (800a5a4 <__libc_init_array+0x40>)
 800a576:	4c0c      	ldr	r4, [pc, #48]	; (800a5a8 <__libc_init_array+0x44>)
 800a578:	f000 f82c 	bl	800a5d4 <_init>
 800a57c:	1ba4      	subs	r4, r4, r6
 800a57e:	10a4      	asrs	r4, r4, #2
 800a580:	2500      	movs	r5, #0
 800a582:	42a5      	cmp	r5, r4
 800a584:	d105      	bne.n	800a592 <__libc_init_array+0x2e>
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a58c:	4798      	blx	r3
 800a58e:	3501      	adds	r5, #1
 800a590:	e7ee      	b.n	800a570 <__libc_init_array+0xc>
 800a592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a596:	4798      	blx	r3
 800a598:	3501      	adds	r5, #1
 800a59a:	e7f2      	b.n	800a582 <__libc_init_array+0x1e>
 800a59c:	0800a644 	.word	0x0800a644
 800a5a0:	0800a644 	.word	0x0800a644
 800a5a4:	0800a644 	.word	0x0800a644
 800a5a8:	0800a648 	.word	0x0800a648

0800a5ac <memcpy>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	1e43      	subs	r3, r0, #1
 800a5b0:	440a      	add	r2, r1
 800a5b2:	4291      	cmp	r1, r2
 800a5b4:	d100      	bne.n	800a5b8 <memcpy+0xc>
 800a5b6:	bd10      	pop	{r4, pc}
 800a5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5c0:	e7f7      	b.n	800a5b2 <memcpy+0x6>

0800a5c2 <memset>:
 800a5c2:	4402      	add	r2, r0
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d100      	bne.n	800a5cc <memset+0xa>
 800a5ca:	4770      	bx	lr
 800a5cc:	f803 1b01 	strb.w	r1, [r3], #1
 800a5d0:	e7f9      	b.n	800a5c6 <memset+0x4>
	...

0800a5d4 <_init>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr

0800a5e0 <_fini>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr
