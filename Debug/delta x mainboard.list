
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009be4  08009be4  00019be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c3c  08009c3c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009c3c  08009c3c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c3c  08009c3c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c3c  08009c3c  00019c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c40  08009c40  00019c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000184  08009dc8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  08009dc8  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad35  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003465  00000000  00000000  0003aee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  000408f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011be0  00000000  00000000  00060e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4312  00000000  00000000  00072a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  00136df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009bcc 	.word	0x08009bcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009bcc 	.word	0x08009bcc

08000218 <CDC_On_Receive>:
volatile uint8_t motor1_target_rpm = 0;
volatile uint8_t motor2_target_rpm = 0;
volatile uint8_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fcb8 	bl	8009ba4 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001c8 	.word	0x200001c8

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f001 f986 	bl	800156e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f963 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 fdb7 	bl	8000dd8 <MX_GPIO_Init>
  MX_TIM4_Init();
 800026a:	f000 fb3f 	bl	80008ec <MX_TIM4_Init>
  MX_TIM8_Init();
 800026e:	f000 fbc9 	bl	8000a04 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000272:	f000 fc37 	bl	8000ae4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000276:	f000 fcbb 	bl	8000bf0 <MX_TIM16_Init>
  MX_TIM1_Init();
 800027a:	f000 f9bf 	bl	80005fc <MX_TIM1_Init>
  MX_TIM2_Init();
 800027e:	f000 fa6d 	bl	800075c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000282:	f000 fabf 	bl	8000804 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000286:	f000 fb87 	bl	8000998 <MX_TIM7_Init>
  MX_TIM17_Init();
 800028a:	f000 fd2b 	bl	8000ce4 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800028e:	f008 ff6d 	bl	800916c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000292:	2104      	movs	r1, #4
 8000294:	4891      	ldr	r0, [pc, #580]	; (80004dc <main+0x284>)
 8000296:	f004 fa67 	bl	8004768 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800029a:	2104      	movs	r1, #4
 800029c:	4890      	ldr	r0, [pc, #576]	; (80004e0 <main+0x288>)
 800029e:	f004 fa63 	bl	8004768 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80002a2:	2104      	movs	r1, #4
 80002a4:	488f      	ldr	r0, [pc, #572]	; (80004e4 <main+0x28c>)
 80002a6:	f004 fa5f 	bl	8004768 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002aa:	2100      	movs	r1, #0
 80002ac:	488e      	ldr	r0, [pc, #568]	; (80004e8 <main+0x290>)
 80002ae:	f004 f8b5 	bl	800441c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002b2:	2104      	movs	r1, #4
 80002b4:	488c      	ldr	r0, [pc, #560]	; (80004e8 <main+0x290>)
 80002b6:	f004 f8b1 	bl	800441c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002ba:	2108      	movs	r1, #8
 80002bc:	488a      	ldr	r0, [pc, #552]	; (80004e8 <main+0x290>)
 80002be:	f004 f8ad 	bl	800441c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 80002c2:	4b8a      	ldr	r3, [pc, #552]	; (80004ec <main+0x294>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 80002c8:	4b88      	ldr	r3, [pc, #544]	; (80004ec <main+0x294>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80002ce:	4b87      	ldr	r3, [pc, #540]	; (80004ec <main+0x294>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d4:	2100      	movs	r1, #0
 80002d6:	4886      	ldr	r0, [pc, #536]	; (80004f0 <main+0x298>)
 80002d8:	f004 f8a0 	bl	800441c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002dc:	2104      	movs	r1, #4
 80002de:	4884      	ldr	r0, [pc, #528]	; (80004f0 <main+0x298>)
 80002e0:	f004 f89c 	bl	800441c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80002e4:	2108      	movs	r1, #8
 80002e6:	4882      	ldr	r0, [pc, #520]	; (80004f0 <main+0x298>)
 80002e8:	f004 f898 	bl	800441c <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 80002ec:	4b81      	ldr	r3, [pc, #516]	; (80004f4 <main+0x29c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80002f2:	4b80      	ldr	r3, [pc, #512]	; (80004f4 <main+0x29c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80002f8:	4b7e      	ldr	r3, [pc, #504]	; (80004f4 <main+0x29c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80002fe:	2100      	movs	r1, #0
 8000300:	487d      	ldr	r0, [pc, #500]	; (80004f8 <main+0x2a0>)
 8000302:	f004 f88b 	bl	800441c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000306:	2100      	movs	r1, #0
 8000308:	487c      	ldr	r0, [pc, #496]	; (80004fc <main+0x2a4>)
 800030a:	f004 f887 	bl	800441c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800030e:	2100      	movs	r1, #0
 8000310:	487b      	ldr	r0, [pc, #492]	; (8000500 <main+0x2a8>)
 8000312:	f004 f883 	bl	800441c <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 8000316:	4b7b      	ldr	r3, [pc, #492]	; (8000504 <main+0x2ac>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 800031c:	4b7a      	ldr	r3, [pc, #488]	; (8000508 <main+0x2b0>)
 800031e:	2200      	movs	r2, #0
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 8000322:	4b7a      	ldr	r3, [pc, #488]	; (800050c <main+0x2b4>)
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000328:	4879      	ldr	r0, [pc, #484]	; (8000510 <main+0x2b8>)
 800032a:	f003 ffb5 	bl	8004298 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 800032e:	4b79      	ldr	r3, [pc, #484]	; (8000514 <main+0x2bc>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b01      	cmp	r3, #1
 8000336:	d1fa      	bne.n	800032e <main+0xd6>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000338:	2120      	movs	r1, #32
 800033a:	4877      	ldr	r0, [pc, #476]	; (8000518 <main+0x2c0>)
 800033c:	f001 fc32 	bl	8001ba4 <HAL_GPIO_TogglePin>
		command_received = 0;
 8000340:	4b74      	ldr	r3, [pc, #464]	; (8000514 <main+0x2bc>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]

		feedback.thrower = 666;
 8000346:	4b75      	ldr	r3, [pc, #468]	; (800051c <main+0x2c4>)
 8000348:	f240 229a 	movw	r2, #666	; 0x29a
 800034c:	60da      	str	r2, [r3, #12]

		int min_duty = 20000;
 800034e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000352:	617b      	str	r3, [r7, #20]
		int max_duty = 65000;
 8000354:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8000358:	613b      	str	r3, [r7, #16]
		int max_speed = 100;
 800035a:	2364      	movs	r3, #100	; 0x64
 800035c:	60fb      	str	r3, [r7, #12]
		int speed_cof = (max_duty - min_duty) / max_speed;
 800035e:	693a      	ldr	r2, [r7, #16]
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	1ad2      	subs	r2, r2, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	fb92 f3f3 	sdiv	r3, r2, r3
 800036a:	60bb      	str	r3, [r7, #8]
		int speed_cof_n = speed_cof * -1;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	425b      	negs	r3, r3
 8000370:	607b      	str	r3, [r7, #4]

		if (command.motor1 > 0) {
 8000372:	4b6b      	ldr	r3, [pc, #428]	; (8000520 <main+0x2c8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	dd15      	ble.n	80003a6 <main+0x14e>
			if (command.motor1 <= 100) {
 800037a:	4b69      	ldr	r3, [pc, #420]	; (8000520 <main+0x2c8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b64      	cmp	r3, #100	; 0x64
 8000380:	dc09      	bgt.n	8000396 <main+0x13e>
				TIM1->CCR3 = command.motor1 * speed_cof + min_duty;
 8000382:	4b67      	ldr	r3, [pc, #412]	; (8000520 <main+0x2c8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68ba      	ldr	r2, [r7, #8]
 8000388:	fb02 f203 	mul.w	r2, r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	441a      	add	r2, r3
 8000390:	4b56      	ldr	r3, [pc, #344]	; (80004ec <main+0x294>)
 8000392:	63da      	str	r2, [r3, #60]	; 0x3c
 8000394:	e003      	b.n	800039e <main+0x146>
			} else {
				TIM1->CCR3 = command.motor1;
 8000396:	4b62      	ldr	r3, [pc, #392]	; (8000520 <main+0x2c8>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b54      	ldr	r3, [pc, #336]	; (80004ec <main+0x294>)
 800039c:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			TIM1->CCR2 = 0;
 800039e:	4b53      	ldr	r3, [pc, #332]	; (80004ec <main+0x294>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	639a      	str	r2, [r3, #56]	; 0x38
 80003a4:	e01e      	b.n	80003e4 <main+0x18c>
		} else if (command.motor1 < 0) {
 80003a6:	4b5e      	ldr	r3, [pc, #376]	; (8000520 <main+0x2c8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	da14      	bge.n	80003d8 <main+0x180>
			if (command.motor1 >= -100) {
 80003ae:	4b5c      	ldr	r3, [pc, #368]	; (8000520 <main+0x2c8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80003b6:	db07      	blt.n	80003c8 <main+0x170>
				TIM1->CCR2 = command.motor1 * speed_cof_n;
 80003b8:	4b59      	ldr	r3, [pc, #356]	; (8000520 <main+0x2c8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	fb02 f203 	mul.w	r2, r2, r3
 80003c2:	4b4a      	ldr	r3, [pc, #296]	; (80004ec <main+0x294>)
 80003c4:	639a      	str	r2, [r3, #56]	; 0x38
 80003c6:	e003      	b.n	80003d0 <main+0x178>
			} else {
				TIM1->CCR2 = command.motor1;
 80003c8:	4b55      	ldr	r3, [pc, #340]	; (8000520 <main+0x2c8>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b47      	ldr	r3, [pc, #284]	; (80004ec <main+0x294>)
 80003ce:	639a      	str	r2, [r3, #56]	; 0x38
			}
			TIM1->CCR3 = 0;
 80003d0:	4b46      	ldr	r3, [pc, #280]	; (80004ec <main+0x294>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80003d6:	e005      	b.n	80003e4 <main+0x18c>
		} else {
			TIM1->CCR3 = 0;
 80003d8:	4b44      	ldr	r3, [pc, #272]	; (80004ec <main+0x294>)
 80003da:	2200      	movs	r2, #0
 80003dc:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR3 = 0;
 80003de:	4b43      	ldr	r3, [pc, #268]	; (80004ec <main+0x294>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		if (command.motor2 > 0) {
 80003e4:	4b4e      	ldr	r3, [pc, #312]	; (8000520 <main+0x2c8>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	dd15      	ble.n	8000418 <main+0x1c0>
			if (command.motor2 <= 100) {
 80003ec:	4b4c      	ldr	r3, [pc, #304]	; (8000520 <main+0x2c8>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	2b64      	cmp	r3, #100	; 0x64
 80003f2:	dc09      	bgt.n	8000408 <main+0x1b0>
				TIM1->CCR1 = command.motor2 * speed_cof + min_duty;
 80003f4:	4b4a      	ldr	r3, [pc, #296]	; (8000520 <main+0x2c8>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	fb02 f203 	mul.w	r2, r2, r3
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	441a      	add	r2, r3
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <main+0x294>)
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
 8000406:	e003      	b.n	8000410 <main+0x1b8>
			} else {
				TIM1->CCR1 = command.motor2;
 8000408:	4b45      	ldr	r3, [pc, #276]	; (8000520 <main+0x2c8>)
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	4b37      	ldr	r3, [pc, #220]	; (80004ec <main+0x294>)
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
			}
			TIM3->CCR3 = 0;
 8000410:	4b38      	ldr	r3, [pc, #224]	; (80004f4 <main+0x29c>)
 8000412:	2200      	movs	r2, #0
 8000414:	63da      	str	r2, [r3, #60]	; 0x3c
 8000416:	e01e      	b.n	8000456 <main+0x1fe>
		} else if (command.motor2 < 0) {
 8000418:	4b41      	ldr	r3, [pc, #260]	; (8000520 <main+0x2c8>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	2b00      	cmp	r3, #0
 800041e:	da14      	bge.n	800044a <main+0x1f2>
			if (command.motor2 >= -100) {
 8000420:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <main+0x2c8>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000428:	db07      	blt.n	800043a <main+0x1e2>
				TIM3->CCR3 = command.motor2 * speed_cof_n;
 800042a:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <main+0x2c8>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	fb02 f203 	mul.w	r2, r2, r3
 8000434:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <main+0x29c>)
 8000436:	63da      	str	r2, [r3, #60]	; 0x3c
 8000438:	e003      	b.n	8000442 <main+0x1ea>
			} else {
				TIM3->CCR3 = command.motor2;
 800043a:	4b39      	ldr	r3, [pc, #228]	; (8000520 <main+0x2c8>)
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <main+0x29c>)
 8000440:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			TIM1->CCR1 = 0;
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <main+0x294>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
 8000448:	e005      	b.n	8000456 <main+0x1fe>
		} else {
			TIM3->CCR3 = 0;
 800044a:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <main+0x29c>)
 800044c:	2200      	movs	r2, #0
 800044e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <main+0x294>)
 8000452:	2200      	movs	r2, #0
 8000454:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if (command.motor3 > 0) {
 8000456:	4b32      	ldr	r3, [pc, #200]	; (8000520 <main+0x2c8>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	2b00      	cmp	r3, #0
 800045c:	dd15      	ble.n	800048a <main+0x232>
			if (command.motor3 <= 100) {
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <main+0x2c8>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	2b64      	cmp	r3, #100	; 0x64
 8000464:	dc09      	bgt.n	800047a <main+0x222>
				TIM3->CCR1 = command.motor3 * speed_cof + min_duty;
 8000466:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <main+0x2c8>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	fb02 f203 	mul.w	r2, r2, r3
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	441a      	add	r2, r3
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <main+0x29c>)
 8000476:	635a      	str	r2, [r3, #52]	; 0x34
 8000478:	e003      	b.n	8000482 <main+0x22a>
			} else {
				TIM3->CCR1 = command.motor3;
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <main+0x2c8>)
 800047c:	689a      	ldr	r2, [r3, #8]
 800047e:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <main+0x29c>)
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
			}
			TIM3->CCR2 = 0;
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <main+0x29c>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	; 0x38
 8000488:	e01e      	b.n	80004c8 <main+0x270>
		} else if (command.motor3 < 0) {
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <main+0x2c8>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da14      	bge.n	80004bc <main+0x264>
			if (command.motor3 >= -100) {
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x2c8>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800049a:	db07      	blt.n	80004ac <main+0x254>
				TIM3->CCR2 = command.motor3 * speed_cof_n;
 800049c:	4b20      	ldr	r3, [pc, #128]	; (8000520 <main+0x2c8>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	fb02 f203 	mul.w	r2, r2, r3
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <main+0x29c>)
 80004a8:	639a      	str	r2, [r3, #56]	; 0x38
 80004aa:	e003      	b.n	80004b4 <main+0x25c>
			} else {
				TIM3->CCR2 = command.motor3;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <main+0x2c8>)
 80004ae:	689a      	ldr	r2, [r3, #8]
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <main+0x29c>)
 80004b2:	639a      	str	r2, [r3, #56]	; 0x38
			}
			TIM3->CCR1 = 0;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <main+0x29c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ba:	e005      	b.n	80004c8 <main+0x270>
		} else {
			TIM3->CCR1 = 0;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <main+0x29c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <main+0x29c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	639a      	str	r2, [r3, #56]	; 0x38
		}
		command_received_period = current_period;
 80004c8:	4b16      	ldr	r3, [pc, #88]	; (8000524 <main+0x2cc>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <main+0x2d0>)
 80004d0:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80004d2:	2114      	movs	r1, #20
 80004d4:	4811      	ldr	r0, [pc, #68]	; (800051c <main+0x2c4>)
 80004d6:	f008 ff0b 	bl	80092f0 <CDC_Transmit_FS>
	if (command_received == 1) {
 80004da:	e728      	b.n	800032e <main+0xd6>
 80004dc:	200005bc 	.word	0x200005bc
 80004e0:	20000440 	.word	0x20000440
 80004e4:	200003f4 	.word	0x200003f4
 80004e8:	20000570 	.word	0x20000570
 80004ec:	40012c00 	.word	0x40012c00
 80004f0:	20000524 	.word	0x20000524
 80004f4:	40000400 	.word	0x40000400
 80004f8:	2000048c 	.word	0x2000048c
 80004fc:	20000608 	.word	0x20000608
 8000500:	200004d8 	.word	0x200004d8
 8000504:	40014000 	.word	0x40014000
 8000508:	40014400 	.word	0x40014400
 800050c:	40014800 	.word	0x40014800
 8000510:	20000654 	.word	0x20000654
 8000514:	200001c8 	.word	0x200001c8
 8000518:	48000400 	.word	0x48000400
 800051c:	200001b4 	.word	0x200001b4
 8000520:	200001a0 	.word	0x200001a0
 8000524:	200001c9 	.word	0x200001c9
 8000528:	200001ca 	.word	0x200001ca

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0a4      	sub	sp, #144	; 0x90
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000536:	2238      	movs	r2, #56	; 0x38
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f009 fb3d 	bl	8009bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f009 fb2f 	bl	8009bba <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800055c:	2000      	movs	r0, #0
 800055e:	f002 fea3 	bl	80032a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000562:	2322      	movs	r3, #34	; 0x22
 8000564:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800057c:	2301      	movs	r3, #1
 800057e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000580:	2314      	movs	r3, #20
 8000582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059c:	4618      	mov	r0, r3
 800059e:	f002 ff37 	bl	8003410 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a8:	f000 fcf4 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2303      	movs	r3, #3
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fa3a 	bl	8003a40 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d2:	f000 fcdf 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005dc:	2300      	movs	r3, #0
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fc10 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ee:	f000 fcd1 	bl	8000f94 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3790      	adds	r7, #144	; 0x90
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b098      	sub	sp, #96	; 0x60
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000602:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2234      	movs	r2, #52	; 0x34
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f009 fac6 	bl	8009bba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800062e:	4b49      	ldr	r3, [pc, #292]	; (8000754 <MX_TIM1_Init+0x158>)
 8000630:	4a49      	ldr	r2, [pc, #292]	; (8000758 <MX_TIM1_Init+0x15c>)
 8000632:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000634:	4b47      	ldr	r3, [pc, #284]	; (8000754 <MX_TIM1_Init+0x158>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b46      	ldr	r3, [pc, #280]	; (8000754 <MX_TIM1_Init+0x158>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000640:	4b44      	ldr	r3, [pc, #272]	; (8000754 <MX_TIM1_Init+0x158>)
 8000642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b42      	ldr	r3, [pc, #264]	; (8000754 <MX_TIM1_Init+0x158>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <MX_TIM1_Init+0x158>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <MX_TIM1_Init+0x158>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800065a:	483e      	ldr	r0, [pc, #248]	; (8000754 <MX_TIM1_Init+0x158>)
 800065c:	f003 fe86 	bl	800436c <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 fc95 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800067a:	4619      	mov	r1, r3
 800067c:	4835      	ldr	r0, [pc, #212]	; (8000754 <MX_TIM1_Init+0x158>)
 800067e:	f004 ff63 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 fc84 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000694:	2300      	movs	r3, #0
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000698:	2300      	movs	r3, #0
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	4828      	ldr	r0, [pc, #160]	; (8000754 <MX_TIM1_Init+0x158>)
 80006b2:	f004 fa65 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006bc:	f000 fc6a 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c8:	2204      	movs	r2, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <MX_TIM1_Init+0x158>)
 80006ce:	f004 fa57 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80006d8:	f000 fc5c 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e4:	2208      	movs	r2, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	481a      	ldr	r0, [pc, #104]	; (8000754 <MX_TIM1_Init+0x158>)
 80006ea:	f004 fa49 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80006f4:	f000 fc4e 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <MX_TIM1_Init+0x158>)
 8000736:	f004 ff89 	bl	800564c <HAL_TIMEx_ConfigBreakDeadTime>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000740:	f000 fc28 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <MX_TIM1_Init+0x158>)
 8000746:	f000 fda9 	bl	800129c <HAL_TIM_MspPostInit>

}
 800074a:	bf00      	nop
 800074c:	3760      	adds	r7, #96	; 0x60
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000570 	.word	0x20000570
 8000758:	40012c00 	.word	0x40012c00

0800075c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2224      	movs	r2, #36	; 0x24
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f009 fa25 	bl	8009bba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_TIM2_Init+0xa4>)
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_TIM2_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_TIM2_Init+0xa4>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_TIM2_Init+0xa4>)
 8000790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_TIM2_Init+0xa4>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_TIM2_Init+0xa4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007ba:	2301      	movs	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_TIM2_Init+0xa4>)
 80007ce:	f003 ff25 	bl	800461c <HAL_TIM_Encoder_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80007d8:	f000 fbdc 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_TIM2_Init+0xa4>)
 80007ea:	f004 fead 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80007f4:	f000 fbce 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3730      	adds	r7, #48	; 0x30
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200005bc 	.word	0x200005bc

08000804 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_TIM3_Init+0xe0>)
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <MX_TIM3_Init+0xe4>)
 800082c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MX_TIM3_Init+0xe0>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_TIM3_Init+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_TIM3_Init+0xe0>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_TIM3_Init+0xe0>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_TIM3_Init+0xe0>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084e:	4825      	ldr	r0, [pc, #148]	; (80008e4 <MX_TIM3_Init+0xe0>)
 8000850:	f003 fd8c 	bl	800436c <HAL_TIM_PWM_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800085a:	f000 fb9b 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	481d      	ldr	r0, [pc, #116]	; (80008e4 <MX_TIM3_Init+0xe0>)
 800086e:	f004 fe6b 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000878:	f000 fb8c 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087c:	2360      	movs	r3, #96	; 0x60
 800087e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM3_Init+0xe0>)
 8000894:	f004 f974 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800089e:	f000 fb79 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2204      	movs	r2, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_TIM3_Init+0xe0>)
 80008ae:	f004 f967 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80008b8:	f000 fb6c 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	2208      	movs	r2, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM3_Init+0xe0>)
 80008c8:	f004 f95a 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80008d2:	f000 fb5f 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM3_Init+0xe0>)
 80008d8:	f000 fce0 	bl	800129c <HAL_TIM_MspPostInit>

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000524 	.word	0x20000524
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2224      	movs	r2, #36	; 0x24
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f009 f95d 	bl	8009bba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_TIM4_Init+0xa4>)
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <MX_TIM4_Init+0xa8>)
 800090e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_TIM4_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_TIM4_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_TIM4_Init+0xa4>)
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_TIM4_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_TIM4_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000930:	2303      	movs	r3, #3
 8000932:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_TIM4_Init+0xa4>)
 800095c:	f003 fe5e 	bl	800461c <HAL_TIM_Encoder_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000966:	f000 fb15 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM4_Init+0xa4>)
 8000978:	f004 fde6 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000982:	f000 fb07 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000440 	.word	0x20000440
 8000994:	40000800 	.word	0x40000800

08000998 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_TIM7_Init+0x64>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_TIM7_Init+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_TIM7_Init+0x64>)
 80009b0:	2228      	movs	r2, #40	; 0x28
 80009b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_TIM7_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_TIM7_Init+0x64>)
 80009bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_TIM7_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_TIM7_Init+0x64>)
 80009ca:	f003 fc0d 	bl	80041e8 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80009d4:	f000 fade 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_TIM7_Init+0x64>)
 80009e6:	f004 fdaf 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fad0 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000654 	.word	0x20000654
 8000a00:	40001400 	.word	0x40001400

08000a04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09a      	sub	sp, #104	; 0x68
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0e:	2224      	movs	r2, #36	; 0x24
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f009 f8d1 	bl	8009bba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2234      	movs	r2, #52	; 0x34
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f009 f8c5 	bl	8009bba <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a32:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <MX_TIM8_Init+0xdc>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a60:	2300      	movs	r3, #0
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a64:	2301      	movs	r3, #1
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a70:	2300      	movs	r3, #0
 8000a72:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a74:	2301      	movs	r3, #1
 8000a76:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a84:	4619      	mov	r1, r3
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000a88:	f003 fdc8 	bl	800461c <HAL_TIM_Encoder_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000a92:	f000 fa7f 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000aaa:	f004 fd4d 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000ab4:	f000 fa6e 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM8_Init+0xd8>)
 8000ac6:	f004 fdc1 	bl	800564c <HAL_TIMEx_ConfigBreakDeadTime>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000ad0:	f000 fa60 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3768      	adds	r7, #104	; 0x68
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200003f4 	.word	0x200003f4
 8000ae0:	40013400 	.word	0x40013400

08000ae4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b098      	sub	sp, #96	; 0x60
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f009 f852 	bl	8009bba <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b16:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b18:	4a34      	ldr	r2, [pc, #208]	; (8000bec <MX_TIM15_Init+0x108>)
 8000b1a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b42:	4829      	ldr	r0, [pc, #164]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b44:	f003 fc12 	bl	800436c <HAL_TIM_PWM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fa21 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4821      	ldr	r0, [pc, #132]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b62:	f004 fcf1 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 fa12 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000b96:	f003 fff3 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ba0:	f000 f9f8 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000bcc:	f004 fd3e 	bl	800564c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000bd6:	f000 f9dd 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MX_TIM15_Init+0x104>)
 8000bdc:	f000 fb5e 	bl	800129c <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3760      	adds	r7, #96	; 0x60
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000048c 	.word	0x2000048c
 8000bec:	40014000 	.word	0x40014000

08000bf0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	; 0x50
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2234      	movs	r2, #52	; 0x34
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f008 ffd2 	bl	8009bba <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c16:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c18:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <MX_TIM16_Init+0xf0>)
 8000c1a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c42:	4826      	ldr	r0, [pc, #152]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c44:	f003 fad0 	bl	80041e8 <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c4e:	f000 f9a1 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c52:	4822      	ldr	r0, [pc, #136]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c54:	f003 fb8a 	bl	800436c <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c5e:	f000 f999 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000c88:	f003 ff7a 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000c92:	f000 f97f 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000cbe:	f004 fcc5 	bl	800564c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000cc8:	f000 f964 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM16_Init+0xec>)
 8000cce:	f000 fae5 	bl	800129c <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000608 	.word	0x20000608
 8000ce0:	40014400 	.word	0x40014400

08000ce4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2234      	movs	r2, #52	; 0x34
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 ff58 	bl	8009bba <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <MX_TIM17_Init+0xf0>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d36:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d38:	f003 fa56 	bl	80041e8 <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d42:	f000 f927 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d46:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d48:	f003 fb10 	bl	800436c <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d52:	f000 f91f 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d56:	2360      	movs	r3, #96	; 0x60
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000d7c:	f003 ff00 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000d86:	f000 f905 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000db2:	f004 fc4b 	bl	800564c <HAL_TIMEx_ConfigBreakDeadTime>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000dbc:	f000 f8ea 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM17_Init+0xec>)
 8000dc2:	f000 fa6b 	bl	800129c <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	; 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200004d8 	.word	0x200004d8
 8000dd4:	40014800 	.word	0x40014800

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_GPIO_Init+0x8c>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2120      	movs	r1, #32
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_GPIO_Init+0x90>)
 8000e24:	f000 fea6 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <MX_GPIO_Init+0x90>)
 8000e3c:	f000 fd18 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e40:	2320      	movs	r3, #32
 8000e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_GPIO_Init+0x90>)
 8000e58:	f000 fd0a 	bl	8001870 <HAL_GPIO_Init>

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400

08000e6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000e88:	8bfb      	ldrh	r3, [r7, #30]
 8000e8a:	4a39      	ldr	r2, [pc, #228]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e8c:	8812      	ldrh	r2, [r2, #0]
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000e94:	8bbb      	ldrh	r3, [r7, #28]
 8000e96:	4a37      	ldr	r2, [pc, #220]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e98:	8812      	ldrh	r2, [r2, #0]
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	1a9b      	subs	r3, r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000ea0:	8b7b      	ldrh	r3, [r7, #26]
 8000ea2:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000eac:	4a30      	ldr	r2, [pc, #192]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000eae:	8bfb      	ldrh	r3, [r7, #30]
 8000eb0:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000eb2:	4a30      	ldr	r2, [pc, #192]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000eb4:	8bbb      	ldrh	r3, [r7, #28]
 8000eb6:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000eba:	8b7b      	ldrh	r3, [r7, #26]
 8000ebc:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	1252      	asrs	r2, r2, #9
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ed6:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee8:	1252      	asrs	r2, r2, #9
 8000eea:	17db      	asrs	r3, r3, #31
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ef0:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000efe:	fb82 1203 	smull	r1, r2, r2, r3
 8000f02:	1252      	asrs	r2, r2, #9
 8000f04:	17db      	asrs	r3, r3, #31
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f0a:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f0e:	f240 229a 	movw	r2, #666	; 0x29a
 8000f12:	60da      	str	r2, [r3, #12]

	// pwm pid


	// timeout
	current_period += 1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f20:	701a      	strb	r2, [r3, #0]
	if (current_period - command_received_period  > 60) {
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b3c      	cmp	r3, #60	; 0x3c
 8000f34:	dd11      	ble.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0xee>
		TIM1->CCR1 = 0;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40000800 	.word	0x40000800
 8000f6c:	40013400 	.word	0x40013400
 8000f70:	200001cc 	.word	0x200001cc
 8000f74:	200001ce 	.word	0x200001ce
 8000f78:	200001d0 	.word	0x200001d0
 8000f7c:	6bca1af3 	.word	0x6bca1af3
 8000f80:	200001b4 	.word	0x200001b4
 8000f84:	200001c9 	.word	0x200001c9
 8000f88:	200001ca 	.word	0x200001ca
 8000f8c:	40012c00 	.word	0x40012c00
 8000f90:	40000400 	.word	0x40000400

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fda:	f002 fa09 	bl	80033f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_TIM_PWM_MspInit+0x80>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10c      	bne.n	8001018 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001008:	6613      	str	r3, [r2, #96]	; 0x60
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001016:	e022      	b.n	800105e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_TIM_PWM_MspInit+0x88>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10c      	bne.n	800103c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
}
 800103a:	e010      	b.n	800105e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_TIM_PWM_MspInit+0x8c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10b      	bne.n	800105e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_TIM_PWM_MspInit+0x84>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
}
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40012c00 	.word	0x40012c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40000400 	.word	0x40000400
 8001078:	40014000 	.word	0x40014000

0800107c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800109c:	d129      	bne.n	80010f2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6593      	str	r3, [r2, #88]	; 0x58
 80010aa:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ce:	2303      	movs	r3, #3
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010de:	2301      	movs	r3, #1
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 fbc0 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80010f0:	e079      	b.n	80011e6 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <HAL_TIM_Encoder_MspInit+0x178>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d128      	bne.n	800114e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4a3b      	ldr	r2, [pc, #236]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
 8001108:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a35      	ldr	r2, [pc, #212]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800112c:	23c0      	movs	r3, #192	; 0xc0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800113c:	2302      	movs	r3, #2
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	482c      	ldr	r0, [pc, #176]	; (80011f8 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001148:	f000 fb92 	bl	8001870 <HAL_GPIO_Init>
}
 800114c:	e04b      	b.n	80011e6 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <HAL_TIM_Encoder_MspInit+0x180>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d146      	bne.n	80011e6 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800115e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001162:	6613      	str	r3, [r2, #96]	; 0x60
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_TIM_Encoder_MspInit+0x174>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80011b2:	2302      	movs	r3, #2
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f000 fb56 	bl	8001870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80011d6:	230a      	movs	r3, #10
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_TIM_Encoder_MspInit+0x17c>)
 80011e2:	f000 fb45 	bl	8001870 <HAL_GPIO_Init>
}
 80011e6:	bf00      	nop
 80011e8:	3738      	adds	r7, #56	; 0x38
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40000800 	.word	0x40000800
 80011f8:	48000400 	.word	0x48000400
 80011fc:	40013400 	.word	0x40013400

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_TIM_Base_MspInit+0x8c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d114      	bne.n	800123c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2037      	movs	r0, #55	; 0x37
 8001230:	f000 fae9 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001234:	2037      	movs	r0, #55	; 0x37
 8001236:	f000 fb00 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800123a:	e022      	b.n	8001282 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_TIM_Base_MspInit+0x94>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10c      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
}
 800125e:	e010      	b.n	8001282 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_TIM_Base_MspInit+0x98>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10b      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_TIM_Base_MspInit+0x90>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40001400 	.word	0x40001400
 8001290:	40021000 	.word	0x40021000
 8001294:	40014400 	.word	0x40014400
 8001298:	40014800 	.word	0x40014800

0800129c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_TIM_MspPostInit+0x1b4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d11e      	bne.n	80012fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b65      	ldr	r3, [pc, #404]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a64      	ldr	r2, [pc, #400]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80012d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012e8:	2306      	movs	r3, #6
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f000 fabb 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80012fa:	e0a5      	b.n	8001448 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_TIM_MspPostInit+0x1bc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d139      	bne.n	800137a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001336:	2350      	movs	r3, #80	; 0x50
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001346:	2302      	movs	r3, #2
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001354:	f000 fa8c 	bl	8001870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001358:	2301      	movs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001368:	2302      	movs	r3, #2
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	483a      	ldr	r0, [pc, #232]	; (800145c <HAL_TIM_MspPostInit+0x1c0>)
 8001374:	f000 fa7c 	bl	8001870 <HAL_GPIO_Init>
}
 8001378:	e066      	b.n	8001448 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a38      	ldr	r2, [pc, #224]	; (8001460 <HAL_TIM_MspPostInit+0x1c4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d11d      	bne.n	80013c0 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013ac:	2309      	movs	r3, #9
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f000 fa59 	bl	8001870 <HAL_GPIO_Init>
}
 80013be:	e043      	b.n	8001448 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_TIM_MspPostInit+0x1c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d11c      	bne.n	8001404 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e2:	2310      	movs	r3, #16
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80013f2:	2301      	movs	r3, #1
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <HAL_TIM_MspPostInit+0x1c0>)
 80013fe:	f000 fa37 	bl	8001870 <HAL_GPIO_Init>
}
 8001402:	e021      	b.n	8001448 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d11c      	bne.n	8001448 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_TIM_MspPostInit+0x1b8>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001436:	2301      	movs	r3, #1
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f000 fa14 	bl	8001870 <HAL_GPIO_Init>
}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40000400 	.word	0x40000400
 800145c:	48000400 	.word	0x48000400
 8001460:	40014000 	.word	0x40014000
 8001464:	40014400 	.word	0x40014400
 8001468:	40014800 	.word	0x40014800

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 f8a8 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USB_LP_IRQHandler+0x10>)
 80014ce:	f000 fc8a 	bl	8001de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20001344 	.word	0x20001344

080014dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM7_IRQHandler+0x10>)
 80014e2:	f003 f9ce 	bl	8004882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000654 	.word	0x20000654

080014f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <SystemInit+0x28>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <SystemInit+0x28>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SystemInit+0x28>)
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	609a      	str	r2, [r3, #8]
#endif
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800151e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopForever+0x6>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <LoopForever+0xe>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	; (8001568 <LoopForever+0x16>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001546:	f7ff ffd3 	bl	80014f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f008 fb07 	bl	8009b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154e:	f7fe fe83 	bl	8000258 <main>

08001552 <LoopForever>:

LoopForever:
    b LoopForever
 8001552:	e7fe      	b.n	8001552 <LoopForever>
  ldr   r0, =_estack
 8001554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001560:	08009c44 	.word	0x08009c44
  ldr r2, =_sbss
 8001564:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001568:	20001638 	.word	0x20001638

0800156c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_2_IRQHandler>

0800156e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f939 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f80e 	bl	80015a0 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e001      	b.n	8001594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001590:	f7ff fd08 	bl	8000fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001594:	79fb      	ldrb	r3, [r7, #7]

}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_InitTick+0x68>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_InitTick+0x6c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_InitTick+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f944 	bl	8001856 <HAL_SYSTICK_Config>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10f      	bne.n	80015f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	d809      	bhi.n	80015ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015da:	2200      	movs	r2, #0
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	f04f 30ff 	mov.w	r0, #4294967295
 80015e2:	f000 f910 	bl	8001806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_InitTick+0x70>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e007      	b.n	80015fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e004      	b.n	80015fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e001      	b.n	80015fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000008 	.word	0x20000008
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x1c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x20>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4413      	add	r3, r2
 8001622:	4a03      	ldr	r2, [pc, #12]	; (8001630 <HAL_IncTick+0x1c>)
 8001624:	6013      	str	r3, [r2, #0]
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	200006a0 	.word	0x200006a0
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200006a0 	.word	0x200006a0

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff40 	bl	8001698 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff90 	bl	8001744 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5f 	bl	80016f0 <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff33 	bl	80016b4 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa4 	bl	80017ac <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800187e:	e15a      	b.n	8001b36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2101      	movs	r1, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 814c 	beq.w	8001b30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d00b      	beq.n	80018b8 <HAL_GPIO_Init+0x48>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ac:	2b11      	cmp	r3, #17
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b12      	cmp	r3, #18
 80018b6:	d130      	bne.n	800191a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ee:	2201      	movs	r2, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 0201 	and.w	r2, r3, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0xea>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b12      	cmp	r3, #18
 8001958:	d123      	bne.n	80019a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	6939      	ldr	r1, [r7, #16]
 800199e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0203 	and.w	r2, r3, #3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a6 	beq.w	8001b30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e4:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e8:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6613      	str	r3, [r2, #96]	; 0x60
 80019f0:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a26:	d01f      	beq.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d019      	beq.n	8001a64 <HAL_GPIO_Init+0x1f4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x2f0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_GPIO_Init+0x1f0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x2f4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_GPIO_Init+0x1ec>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0x1e8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_GPIO_Init+0x2fc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_GPIO_Init+0x1e4>
 8001a50:	2305      	movs	r3, #5
 8001a52:	e00a      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a54:	2306      	movs	r3, #6
 8001a56:	e008      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7a:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f ae9d 	bne.w	8001880 <HAL_GPIO_Init+0x10>
  }
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	48001000 	.word	0x48001000
 8001b6c:	48001400 	.word	0x48001400
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43d9      	mvns	r1, r3
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b08b      	sub	sp, #44	; 0x2c
 8001bdc:	af06      	add	r7, sp, #24
 8001bde:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0d7      	b.n	8001d9a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f007 fcbc 	bl	800957c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fe18 	bl	8005846 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e04c      	b.n	8001cb6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	b298      	uxth	r0, r3
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	3336      	adds	r3, #54	; 0x36
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3303      	adds	r3, #3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	3338      	adds	r3, #56	; 0x38
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	333c      	adds	r3, #60	; 0x3c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	3340      	adds	r3, #64	; 0x40
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d3ad      	bcc.n	8001c1c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e044      	b.n	8001d50 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3b5      	bcc.n	8001cc6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	687e      	ldr	r6, [r7, #4]
 8001d62:	466d      	mov	r5, sp
 8001d64:	f106 0410 	add.w	r4, r6, #16
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	602b      	str	r3, [r5, #0]
 8001d70:	1d33      	adds	r3, r6, #4
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	6838      	ldr	r0, [r7, #0]
 8001d76:	f003 fd81 	bl	800587c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f001 fa5e 	bl	8003254 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001da2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_Start+0x16>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e012      	b.n	8001dde <HAL_PCD_Start+0x3c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fd27 	bl	8005818 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fd13 	bl	80077fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 fd18 	bl	8007828 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e02:	d102      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fb5b 	bl	80024c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 fd0a 	bl	8007828 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1e:	d112      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e32:	b292      	uxth	r2, r2
 8001e34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f007 fc1a 	bl	8009672 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f91e 	bl	8002082 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 fcec 	bl	8007828 <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e5a:	d10b      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f005 fcd5 	bl	8007828 <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e88:	d10b      	bne.n	8001ea2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fcbe 	bl	8007828 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb6:	d133      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001efa:	2100      	movs	r1, #0
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f007 fdad 	bl	8009a5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f007 fbee 	bl	80096e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f005 fc7f 	bl	8007828 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f34:	d126      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0208 	orr.w	r2, r2, #8
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f60:	b292      	uxth	r2, r2
 8001f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0204 	orr.w	r2, r2, #4
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f007 fb96 	bl	80096b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 fc4d 	bl	8007828 <USB_ReadInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d13f      	bne.n	8002018 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d12b      	bne.n	8002012 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0204 	orr.w	r2, r2, #4
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0208 	orr.w	r2, r2, #8
 8001fe4:	b292      	uxth	r2, r2
 8001fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002008:	2101      	movs	r1, #1
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f007 fd26 	bl	8009a5c <HAL_PCDEx_LPM_Callback>
 8002010:	e002      	b.n	8002018 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f007 fb4c 	bl	80096b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f005 fc03 	bl	8007828 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202c:	d10e      	bne.n	800204c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002040:	b292      	uxth	r2, r2
 8002042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f007 fb05 	bl	8009656 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f005 fbe9 	bl	8007828 <USB_ReadInterrupts>
 8002056:	4603      	mov	r3, r0
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002060:	d10b      	bne.n	800207a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	b292      	uxth	r2, r2
 8002076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_PCD_SetAddress+0x1a>
 8002098:	2302      	movs	r3, #2
 800209a:	e013      	b.n	80020c4 <HAL_PCD_SetAddress+0x42>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 fb8c 	bl	80077d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	70fb      	strb	r3, [r7, #3]
 80020de:	460b      	mov	r3, r1
 80020e0:	803b      	strh	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0e      	bge.n	8002110 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	705a      	strb	r2, [r3, #1]
 800210e:	e00e      	b.n	800212e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0207 	and.w	r2, r3, #7
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800213a:	883a      	ldrh	r2, [r7, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	78ba      	ldrb	r2, [r7, #2]
 8002144:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002158:	78bb      	ldrb	r3, [r7, #2]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d102      	bne.n	8002164 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_PCD_EP_Open+0xa6>
 800216e:	2302      	movs	r3, #2
 8002170:	e00e      	b.n	8002190 <HAL_PCD_EP_Open+0xc4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fb9d 	bl	80058c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800218e:	7afb      	ldrb	r3, [r7, #11]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da0e      	bge.n	80021ca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	705a      	strb	r2, [r3, #1]
 80021c8:	e00e      	b.n	80021e8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0207 	and.w	r2, r3, #7
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_PCD_EP_Close+0x6a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e00e      	b.n	8002220 <HAL_PCD_EP_Close+0x88>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fec3 	bl	8005f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	460b      	mov	r3, r1
 8002236:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2200      	movs	r2, #0
 8002266:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	b2da      	uxtb	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6979      	ldr	r1, [r7, #20]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f876 	bl	8006376 <USB_EPStartXfer>
 800228a:	e005      	b.n	8002298 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6979      	ldr	r1, [r7, #20]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 f86f 	bl	8006376 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 0207 	and.w	r2, r3, #7
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80022c4:	681b      	ldr	r3, [r3, #0]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	460b      	mov	r3, r1
 80022e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2201      	movs	r2, #1
 800231c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	b2da      	uxtb	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 f81b 	bl	8006376 <USB_EPStartXfer>
 8002340:	e005      	b.n	800234e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 f814 	bl	8006376 <USB_EPStartXfer>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	f003 0207 	and.w	r2, r3, #7
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d901      	bls.n	8002376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e04c      	b.n	8002410 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237a:	2b00      	cmp	r3, #0
 800237c:	da0e      	bge.n	800239c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	705a      	strb	r2, [r3, #1]
 800239a:	e00c      	b.n	80023b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_PCD_EP_SetStall+0x7e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e01c      	b.n	8002410 <HAL_PCD_EP_SetStall+0xb8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68f9      	ldr	r1, [r7, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f005 f8f5 	bl	80075d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f005 fa21 	bl	8007848 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d901      	bls.n	8002436 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e040      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da0e      	bge.n	800245c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	705a      	strb	r2, [r3, #1]
 800245a:	e00e      	b.n	800247a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 0207 	and.w	r2, r3, #7
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_PCD_EP_ClrStall+0x82>
 8002496:	2302      	movs	r3, #2
 8002498:	e00e      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0xa0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f005 f8e4 	bl	8007676 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	; 0x38
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024c8:	e2d1      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80024e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 8152 	bne.w	800278e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d150      	bne.n	8002596 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	81fb      	strh	r3, [r7, #14]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002514:	b29b      	uxth	r3, r3
 8002516:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3328      	adds	r3, #40	; 0x28
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	441a      	add	r2, r3
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002554:	2100      	movs	r1, #0
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f007 f863 	bl	8009622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8282 	beq.w	8002a6e <PCD_EP_ISR_Handler+0x5ae>
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 827d 	bne.w	8002a6e <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002580:	b2da      	uxtb	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b292      	uxth	r2, r2
 8002588:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002594:	e26b      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d032      	beq.n	8002616 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f005 f979 	bl	80078e2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025fc:	4013      	ands	r3, r2
 80025fe:	823b      	strh	r3, [r7, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	8a3a      	ldrh	r2, [r7, #16]
 8002606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800260a:	b292      	uxth	r2, r2
 800260c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f006 ffda 	bl	80095c8 <HAL_PCD_SetupStageCallback>
 8002614:	e22b      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002616:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800261a:	2b00      	cmp	r3, #0
 800261c:	f280 8227 	bge.w	8002a6e <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29a      	uxth	r2, r3
 8002628:	f640 738f 	movw	r3, #3983	; 0xf8f
 800262c:	4013      	ands	r3, r2
 800262e:	83bb      	strh	r3, [r7, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	8bba      	ldrh	r2, [r7, #28]
 8002636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800263a:	b292      	uxth	r2, r2
 800263c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d019      	beq.n	80026a2 <PCD_EP_ISR_Handler+0x1e2>
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d015      	beq.n	80026a2 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6959      	ldr	r1, [r3, #20]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002686:	b29b      	uxth	r3, r3
 8002688:	f005 f92b 	bl	80078e2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	441a      	add	r2, r3
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800269a:	2100      	movs	r1, #0
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f006 ffa5 	bl	80095ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d112      	bne.n	80026f0 <PCD_EP_ISR_Handler+0x230>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e02f      	b.n	8002750 <PCD_EP_ISR_Handler+0x290>
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b3e      	cmp	r3, #62	; 0x3e
 80026f6:	d813      	bhi.n	8002720 <PCD_EP_ISR_Handler+0x260>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <PCD_EP_ISR_Handler+0x252>
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	3301      	adds	r3, #1
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	b29b      	uxth	r3, r3
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	b29a      	uxth	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e017      	b.n	8002750 <PCD_EP_ISR_Handler+0x290>
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <PCD_EP_ISR_Handler+0x27a>
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	3b01      	subs	r3, #1
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	b29b      	uxth	r3, r3
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	b29b      	uxth	r3, r3
 8002742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274a:	b29a      	uxth	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	827b      	strh	r3, [r7, #18]
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002768:	827b      	strh	r3, [r7, #18]
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002770:	827b      	strh	r3, [r7, #18]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]
 800278c:	e16f      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f280 80e4 	bge.w	8002972 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c0:	4013      	ands	r3, r2
 80027c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d8:	b292      	uxth	r2, r2
 80027da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	7b1b      	ldrb	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d120      	bne.n	800283c <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	4413      	add	r3, r2
 8002814:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8083 	beq.w	800292e <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	6959      	ldr	r1, [r3, #20]
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	88da      	ldrh	r2, [r3, #6]
 8002834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002836:	f005 f854 	bl	80078e2 <USB_ReadPMA>
 800283a:	e078      	b.n	800292e <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d108      	bne.n	8002856 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002844:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002846:	461a      	mov	r2, r3
 8002848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f91d 	bl	8002a8a <HAL_PCD_EP_DB_Receive>
 8002850:	4603      	mov	r3, r0
 8002852:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002854:	e06b      	b.n	800292e <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002870:	847b      	strh	r3, [r7, #34]	; 0x22
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	441a      	add	r2, r3
 8002880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800288a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002892:	b29b      	uxth	r3, r3
 8002894:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01f      	beq.n	80028f0 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d028      	beq.n	800292e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	6959      	ldr	r1, [r3, #20]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	891a      	ldrh	r2, [r3, #8]
 80028e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ea:	f004 fffa 	bl	80078e2 <USB_ReadPMA>
 80028ee:	e01e      	b.n	800292e <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	4413      	add	r3, r2
 800290a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002914:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	895a      	ldrh	r2, [r3, #10]
 8002928:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800292a:	f004 ffda 	bl	80078e2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002934:	441a      	add	r2, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002940:	441a      	add	r2, r3
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <PCD_EP_ISR_Handler+0x498>
 800294e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d206      	bcs.n	8002966 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f006 fe44 	bl	80095ec <HAL_PCD_DataOutStageCallback>
 8002964:	e005      	b.n	8002972 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fd02 	bl	8006376 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d078      	beq.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800297c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	843b      	strh	r3, [r7, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	8c3b      	ldrh	r3, [r7, #32]
 80029bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	78db      	ldrb	r3, [r3, #3]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d108      	bne.n	80029e2 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d144      	bne.n	8002a62 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d13f      	bne.n	8002a62 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a06:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	8bfb      	ldrh	r3, [r7, #30]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d906      	bls.n	8002a20 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	1ad2      	subs	r2, r2, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	619a      	str	r2, [r3, #24]
 8002a1e:	e002      	b.n	8002a26 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f006 fdf4 	bl	8009622 <HAL_PCD_DataInStageCallback>
 8002a3a:	e018      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	8bfb      	ldrh	r3, [r7, #30]
 8002a42:	441a      	add	r2, r3
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	8bfb      	ldrh	r3, [r7, #30]
 8002a4e:	441a      	add	r2, r3
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fc8b 	bl	8006376 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a60:	e005      	b.n	8002a6e <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a64:	461a      	mov	r2, r3
 8002a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f917 	bl	8002c9c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f6ff ad25 	blt.w	80024ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3738      	adds	r7, #56	; 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07c      	beq.n	8002b9c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	8b7b      	ldrh	r3, [r7, #26]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d306      	bcc.n	8002ae0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	8b7b      	ldrh	r3, [r7, #26]
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	619a      	str	r2, [r3, #24]
 8002ade:	e002      	b.n	8002ae6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d123      	bne.n	8002b36 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	833b      	strh	r3, [r7, #24]
 8002b0a:	8b3b      	ldrh	r3, [r7, #24]
 8002b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b10:	833b      	strh	r3, [r7, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	8b3b      	ldrh	r3, [r7, #24]
 8002b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01f      	beq.n	8002b80 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	82fb      	strh	r3, [r7, #22]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	441a      	add	r2, r3
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8085 	beq.w	8002c92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6959      	ldr	r1, [r3, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	891a      	ldrh	r2, [r3, #8]
 8002b94:	8b7b      	ldrh	r3, [r7, #26]
 8002b96:	f004 fea4 	bl	80078e2 <USB_ReadPMA>
 8002b9a:	e07a      	b.n	8002c92 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d306      	bcc.n	8002bda <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	619a      	str	r2, [r3, #24]
 8002bd8:	e002      	b.n	8002be0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d123      	bne.n	8002c30 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	83fb      	strh	r3, [r7, #30]
 8002c04:	8bfb      	ldrh	r3, [r7, #30]
 8002c06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c0a:	83fb      	strh	r3, [r7, #30]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	8bfb      	ldrh	r3, [r7, #30]
 8002c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11f      	bne.n	8002c7a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	83bb      	strh	r3, [r7, #28]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	8bbb      	ldrh	r3, [r7, #28]
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c7a:	8b7b      	ldrh	r3, [r7, #26]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6959      	ldr	r1, [r3, #20]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	895a      	ldrh	r2, [r3, #10]
 8002c8c:	8b7b      	ldrh	r3, [r7, #26]
 8002c8e:	f004 fe28 	bl	80078e2 <USB_ReadPMA>
    }
  }

  return count;
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b092      	sub	sp, #72	; 0x48
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8130 	beq.w	8002f16 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cda:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d906      	bls.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	619a      	str	r2, [r3, #24]
 8002cf2:	e002      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d12c      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f006 fc8a 	bl	8009622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 822d 	beq.w	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	827b      	strh	r3, [r7, #18]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	8a7b      	ldrh	r3, [r7, #18]
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
 8002d5a:	e20b      	b.n	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01f      	beq.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	441a      	add	r2, r3
 8002d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 81e1 	bne.w	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002db8:	441a      	add	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc4:	441a      	add	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	6a1a      	ldr	r2, [r3, #32]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d309      	bcc.n	8002dea <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	621a      	str	r2, [r3, #32]
 8002de8:	e014      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dfe:	e009      	b.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d155      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	00da      	lsls	r2, r3, #3
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d112      	bne.n	8002e70 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	e047      	b.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	2b3e      	cmp	r3, #62	; 0x3e
 8002e74:	d811      	bhi.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	3301      	adds	r3, #1
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	029b      	lsls	r3, r3, #10
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	e032      	b.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x214>
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	029b      	lsls	r3, r3, #10
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	e01b      	b.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d117      	bne.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00da      	lsls	r2, r3, #3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6959      	ldr	r1, [r3, #20]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	891a      	ldrh	r2, [r3, #8]
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f004 fca6 	bl	8007860 <USB_WritePMA>
 8002f14:	e12e      	b.n	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d306      	bcc.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f4c:	1ad2      	subs	r2, r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	619a      	str	r2, [r3, #24]
 8002f52:	e002      	b.n	8002f5a <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12c      	bne.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f006 fb5a 	bl	8009622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f040 80fd 	bne.w	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]
 8002fba:	e0db      	b.n	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11f      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	441a      	add	r2, r3
 8002ff0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003002:	b29b      	uxth	r3, r3
 8003004:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300c:	2b01      	cmp	r3, #1
 800300e:	f040 80b1 	bne.w	8003174 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003018:	441a      	add	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003024:	441a      	add	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d309      	bcc.n	800304a <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	1ad2      	subs	r2, r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	621a      	str	r2, [r3, #32]
 8003048:	e014      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800305e:	e009      	b.n	8003074 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2200      	movs	r2, #0
 800306a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d155      	bne.n	800312e <HAL_PCD_EP_DB_Transmit+0x492>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	647b      	str	r3, [r7, #68]	; 0x44
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003096:	4413      	add	r3, r2
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	00da      	lsls	r2, r3, #3
 80030a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a2:	4413      	add	r3, r2
 80030a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030a8:	643b      	str	r3, [r7, #64]	; 0x40
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d112      	bne.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x43a>
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	e044      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2b3e      	cmp	r3, #62	; 0x3e
 80030da:	d811      	bhi.n	8003100 <HAL_PCD_EP_DB_Transmit+0x464>
 80030dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x456>
 80030ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ee:	3301      	adds	r3, #1
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	e02f      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	3b01      	subs	r3, #1
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	b29b      	uxth	r3, r3
 800311a:	029b      	lsls	r3, r3, #10
 800311c:	b29b      	uxth	r3, r3
 800311e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003126:	b29a      	uxth	r2, r3
 8003128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312a:	801a      	strh	r2, [r3, #0]
 800312c:	e018      	b.n	8003160 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d114      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	4413      	add	r3, r2
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	00da      	lsls	r2, r3, #3
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	4413      	add	r3, r2
 8003152:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	b29a      	uxth	r2, r3
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6959      	ldr	r1, [r3, #20]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	895a      	ldrh	r2, [r3, #10]
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	b29b      	uxth	r3, r3
 8003170:	f004 fb76 	bl	8007860 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318e:	823b      	strh	r3, [r7, #16]
 8003190:	8a3b      	ldrh	r3, [r7, #16]
 8003192:	f083 0310 	eor.w	r3, r3, #16
 8003196:	823b      	strh	r3, [r7, #16]
 8003198:	8a3b      	ldrh	r3, [r7, #16]
 800319a:	f083 0320 	eor.w	r3, r3, #32
 800319e:	823b      	strh	r3, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	8a3b      	ldrh	r3, [r7, #16]
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3748      	adds	r7, #72	; 0x48
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	817b      	strh	r3, [r7, #10]
 80031dc:	4613      	mov	r3, r2
 80031de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	e009      	b.n	8003218 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003204:	897a      	ldrh	r2, [r7, #10]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4413      	add	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003218:	893b      	ldrh	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	b29a      	uxth	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	80da      	strh	r2, [r3, #6]
 800322c:	e00b      	b.n	8003246 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2201      	movs	r2, #1
 8003232:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	b29a      	uxth	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	b29a      	uxth	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003278:	b29b      	uxth	r3, r3
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800328c:	b29b      	uxth	r3, r3
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d141      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b6:	4b4b      	ldr	r3, [pc, #300]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d131      	bne.n	8003328 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c4:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ca:	4a46      	ldr	r2, [pc, #280]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032dc:	4a41      	ldr	r2, [pc, #260]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e4:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2232      	movs	r2, #50	; 0x32
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	0c9b      	lsrs	r3, r3, #18
 80032f6:	3301      	adds	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fa:	e002      	b.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3b01      	subs	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	d102      	bne.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f2      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003316:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d158      	bne.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e057      	b.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003328:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003338:	e04d      	b.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003340:	d141      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d131      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003356:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003360:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800336e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2232      	movs	r2, #50	; 0x32
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	0c9b      	lsrs	r3, r3, #18
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003386:	e002      	b.n	800338e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3b01      	subs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339a:	d102      	bne.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f2      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d112      	bne.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e011      	b.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033c4:	e007      	b.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40007000 	.word	0x40007000
 80033e8:	20000000 	.word	0x20000000
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fe:	6093      	str	r3, [r2, #8]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40007000 	.word	0x40007000

08003410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e308      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d075      	beq.n	800351a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342e:	4ba3      	ldr	r3, [pc, #652]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003438:	4ba0      	ldr	r3, [pc, #640]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d102      	bne.n	800344e <HAL_RCC_OscConfig+0x3e>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d002      	beq.n	8003454 <HAL_RCC_OscConfig+0x44>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b99      	ldr	r3, [pc, #612]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05b      	beq.n	8003518 <HAL_RCC_OscConfig+0x108>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d157      	bne.n	8003518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e2e3      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x74>
 8003476:	4b91      	ldr	r3, [pc, #580]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a90      	ldr	r2, [pc, #576]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x98>
 800348e:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a8a      	ldr	r2, [pc, #552]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a87      	ldr	r2, [pc, #540]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 80034a8:	4b84      	ldr	r3, [pc, #528]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a83      	ldr	r2, [pc, #524]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b81      	ldr	r3, [pc, #516]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a80      	ldr	r2, [pc, #512]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f8b6 	bl	8001638 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe f8b2 	bl	8001638 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e2a8      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e2:	4b76      	ldr	r3, [pc, #472]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xc0>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe f8a2 	bl	8001638 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe f89e 	bl	8001638 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e294      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800350a:	4b6c      	ldr	r3, [pc, #432]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0xe8>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d075      	beq.n	8003612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003526:	4b65      	ldr	r3, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003530:	4b62      	ldr	r3, [pc, #392]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d102      	bne.n	8003546 <HAL_RCC_OscConfig+0x136>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d002      	beq.n	800354c <HAL_RCC_OscConfig+0x13c>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d11f      	bne.n	800358c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800354c:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_OscConfig+0x154>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e267      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003564:	4b55      	ldr	r3, [pc, #340]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	4952      	ldr	r1, [pc, #328]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003578:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCC_OscConfig+0x2b0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe f80f 	bl	80015a0 <HAL_InitTick>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d043      	beq.n	8003610 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e253      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d023      	beq.n	80035dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003594:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a48      	ldr	r2, [pc, #288]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f84a 	bl	8001638 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe f846 	bl	8001638 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e23c      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	4939      	ldr	r1, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
 80035da:	e01a      	b.n	8003612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035dc:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a36      	ldr	r2, [pc, #216]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80035e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f826 	bl	8001638 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe f822 	bl	8001638 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e218      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003602:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1e0>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03c      	beq.n	8003698 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01c      	beq.n	8003660 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003626:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fd ffff 	bl	8001638 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363e:	f7fd fffb 	bl	8001638 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1f1      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ef      	beq.n	800363e <HAL_RCC_OscConfig+0x22e>
 800365e:	e01b      	b.n	8003698 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fd ffe2 	bl	8001638 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003678:	f7fd ffde 	bl	8001638 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1d4      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 800368c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ef      	bne.n	8003678 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80ab 	beq.w	80037fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2b4>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e005      	b.n	80036c6 <HAL_RCC_OscConfig+0x2b6>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	20000004 	.word	0x20000004
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4baf      	ldr	r3, [pc, #700]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	4aae      	ldr	r2, [pc, #696]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
 80036d6:	4bac      	ldr	r3, [pc, #688]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e6:	4ba9      	ldr	r3, [pc, #676]	; (800398c <HAL_RCC_OscConfig+0x57c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f2:	4ba6      	ldr	r3, [pc, #664]	; (800398c <HAL_RCC_OscConfig+0x57c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4aa5      	ldr	r2, [pc, #660]	; (800398c <HAL_RCC_OscConfig+0x57c>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd ff9b 	bl	8001638 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fd ff97 	bl	8001638 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e18d      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003718:	4b9c      	ldr	r3, [pc, #624]	; (800398c <HAL_RCC_OscConfig+0x57c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d108      	bne.n	800373e <HAL_RCC_OscConfig+0x32e>
 800372c:	4b96      	ldr	r3, [pc, #600]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	4a95      	ldr	r2, [pc, #596]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800373c:	e024      	b.n	8003788 <HAL_RCC_OscConfig+0x378>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d110      	bne.n	8003768 <HAL_RCC_OscConfig+0x358>
 8003746:	4b90      	ldr	r3, [pc, #576]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	4a8e      	ldr	r2, [pc, #568]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003756:	4b8c      	ldr	r3, [pc, #560]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	4a8a      	ldr	r2, [pc, #552]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003766:	e00f      	b.n	8003788 <HAL_RCC_OscConfig+0x378>
 8003768:	4b87      	ldr	r3, [pc, #540]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	4a86      	ldr	r2, [pc, #536]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003770:	f023 0301 	bic.w	r3, r3, #1
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003778:	4b83      	ldr	r3, [pc, #524]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	4a82      	ldr	r2, [pc, #520]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d016      	beq.n	80037be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd ff52 	bl	8001638 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003796:	e00a      	b.n	80037ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fd ff4e 	bl	8001638 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e142      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ae:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ed      	beq.n	8003798 <HAL_RCC_OscConfig+0x388>
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd ff3b 	bl	8001638 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd ff37 	bl	8001638 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e12b      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037dc:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ed      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	4a64      	ldr	r2, [pc, #400]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d03c      	beq.n	8003882 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01c      	beq.n	800384a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003810:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003816:	4a5c      	ldr	r2, [pc, #368]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd ff0a 	bl	8001638 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003828:	f7fd ff06 	bl	8001638 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0fc      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383a:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800383c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ef      	beq.n	8003828 <HAL_RCC_OscConfig+0x418>
 8003848:	e01b      	b.n	8003882 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800384c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003850:	4a4d      	ldr	r2, [pc, #308]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd feed 	bl	8001638 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003862:	f7fd fee9 	bl	8001638 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0df      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003874:	4b44      	ldr	r3, [pc, #272]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ef      	bne.n	8003862 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80d3 	beq.w	8003a32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388c:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b0c      	cmp	r3, #12
 8003896:	f000 808d 	beq.w	80039b4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d15a      	bne.n	8003958 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80038a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fd fec3 	bl	8001638 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd febf 	bl	8001638 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0b5      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c8:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d4:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCC_OscConfig+0x580>)
 80038da:	4013      	ands	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6a11      	ldr	r1, [r2, #32]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e4:	3a01      	subs	r2, #1
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038ee:	0212      	lsls	r2, r2, #8
 80038f0:	4311      	orrs	r1, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038f6:	0852      	lsrs	r2, r2, #1
 80038f8:	3a01      	subs	r2, #1
 80038fa:	0552      	lsls	r2, r2, #21
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003902:	0852      	lsrs	r2, r2, #1
 8003904:	3a01      	subs	r2, #1
 8003906:	0652      	lsls	r2, r2, #25
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800390e:	06d2      	lsls	r2, r2, #27
 8003910:	430a      	orrs	r2, r1
 8003912:	491d      	ldr	r1, [pc, #116]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003914:	4313      	orrs	r3, r2
 8003916:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800391e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003922:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4a17      	ldr	r2, [pc, #92]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800392a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fe82 	bl	8001638 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd fe7e 	bl	8001638 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e074      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x528>
 8003956:	e06c      	b.n	8003a32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_RCC_OscConfig+0x578>)
 8003976:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fe5a 	bl	8001638 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003986:	e00e      	b.n	80039a6 <HAL_RCC_OscConfig+0x596>
 8003988:	40021000 	.word	0x40021000
 800398c:	40007000 	.word	0x40007000
 8003990:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7fd fe50 	bl	8001638 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e046      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a6:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x62c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x584>
 80039b2:	e03e      	b.n	8003a32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e039      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCC_OscConfig+0x62c>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d12c      	bne.n	8003a2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	3b01      	subs	r3, #1
 80039e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d123      	bne.n	8003a2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d11b      	bne.n	8003a2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d113      	bne.n	8003a2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d109      	bne.n	8003a2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e11e      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b91      	ldr	r3, [pc, #580]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b8e      	ldr	r3, [pc, #568]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 020f 	bic.w	r2, r3, #15
 8003a6e:	498c      	ldr	r1, [pc, #560]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b8a      	ldr	r3, [pc, #552]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e106      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d073      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d129      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9c:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0f4      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003aac:	f000 f966 	bl	8003d7c <RCC_GetSysClockFreqFromPLLSource>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4a7c      	ldr	r2, [pc, #496]	; (8003ca8 <HAL_RCC_ClockConfig+0x268>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d93f      	bls.n	8003b3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aba:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d033      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d12f      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ada:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae2:	4a70      	ldr	r2, [pc, #448]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e024      	b.n	8003b3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0c6      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b08:	4b66      	ldr	r3, [pc, #408]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0be      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b18:	f000 f8ce 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4a61      	ldr	r2, [pc, #388]	; (8003ca8 <HAL_RCC_ClockConfig+0x268>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d909      	bls.n	8003b3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4957      	ldr	r1, [pc, #348]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fd fd74 	bl	8001638 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b54:	f7fd fd70 	bl	8001638 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e095      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 020c 	and.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1eb      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d023      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a42      	ldr	r2, [pc, #264]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bac:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bb4:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b39      	ldr	r3, [pc, #228]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4936      	ldr	r1, [pc, #216]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be2:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d21d      	bcs.n	8003c2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 020f 	bic.w	r2, r3, #15
 8003bf8:	4929      	ldr	r1, [pc, #164]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c00:	f7fd fd1a 	bl	8001638 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fd fd16 	bl	8001638 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e03b      	b.n	8003c96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_ClockConfig+0x260>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1ed      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4917      	ldr	r1, [pc, #92]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	490f      	ldr	r1, [pc, #60]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c6a:	f000 f825 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003c6e:	4601      	mov	r1, r0
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_ClockConfig+0x264>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <HAL_RCC_ClockConfig+0x26c>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	fa21 f303 	lsr.w	r3, r1, r3
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x270>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x274>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fc86 	bl	80015a0 <HAL_InitTick>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	04c4b400 	.word	0x04c4b400
 8003cac:	08009c2c 	.word	0x08009c2c
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	20000004 	.word	0x20000004

08003cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cca:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	e047      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d102      	bne.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cdc:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e03e      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ce2:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d136      	bne.n	8003d5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3301      	adds	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d10c      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	0a12      	lsrs	r2, r2, #8
 8003d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	617b      	str	r3, [r7, #20]
      break;
 8003d24:	e00c      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d30:	68d2      	ldr	r2, [r2, #12]
 8003d32:	0a12      	lsrs	r2, r2, #8
 8003d34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
      break;
 8003d3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0e5b      	lsrs	r3, r3, #25
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	e001      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d60:	693b      	ldr	r3, [r7, #16]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	007a1200 	.word	0x007a1200

08003d7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d10c      	bne.n	8003dba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003daa:	68d2      	ldr	r2, [r2, #12]
 8003dac:	0a12      	lsrs	r2, r2, #8
 8003dae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	617b      	str	r3, [r7, #20]
    break;
 8003db8:	e00c      	b.n	8003dd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	0a12      	lsrs	r2, r2, #8
 8003dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    break;
 8003dd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0e5b      	lsrs	r3, r3, #25
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dee:	687b      	ldr	r3, [r7, #4]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e14:	2300      	movs	r3, #0
 8003e16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8098 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4b40      	ldr	r3, [pc, #256]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a3f      	ldr	r2, [pc, #252]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
 8003e42:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e52:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fbeb 	bl	8001638 <HAL_GetTick>
 8003e62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e64:	e009      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fd fbe7 	bl	8001638 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d902      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	74fb      	strb	r3, [r7, #19]
        break;
 8003e78:	e005      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ef      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d159      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01e      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d019      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ed4:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd fba7 	bl	8001638 <HAL_GetTick>
 8003eea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eec:	e00b      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fba3 	bl	8001638 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d902      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	74fb      	strb	r3, [r7, #19]
            break;
 8003f04:	e006      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ec      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	4903      	ldr	r1, [pc, #12]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f30:	e008      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	74bb      	strb	r3, [r7, #18]
 8003f36:	e005      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f44:	7c7b      	ldrb	r3, [r7, #17]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4ba6      	ldr	r3, [pc, #664]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	4aa5      	ldr	r2, [pc, #660]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f62:	4ba0      	ldr	r3, [pc, #640]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f023 0203 	bic.w	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	499c      	ldr	r1, [pc, #624]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f84:	4b97      	ldr	r3, [pc, #604]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f023 020c 	bic.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4994      	ldr	r1, [pc, #592]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa6:	4b8f      	ldr	r3, [pc, #572]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	498b      	ldr	r1, [pc, #556]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc8:	4b86      	ldr	r3, [pc, #536]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	4983      	ldr	r1, [pc, #524]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fea:	4b7e      	ldr	r3, [pc, #504]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	497a      	ldr	r1, [pc, #488]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400c:	4b75      	ldr	r3, [pc, #468]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4972      	ldr	r1, [pc, #456]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402e:	4b6d      	ldr	r3, [pc, #436]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4969      	ldr	r1, [pc, #420]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004050:	4b64      	ldr	r3, [pc, #400]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4961      	ldr	r1, [pc, #388]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004072:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4958      	ldr	r1, [pc, #352]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	4950      	ldr	r1, [pc, #320]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b4:	4b4b      	ldr	r3, [pc, #300]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a4a      	ldr	r2, [pc, #296]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040cc:	4b45      	ldr	r3, [pc, #276]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4942      	ldr	r1, [pc, #264]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ea:	d105      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ec:	4b3d      	ldr	r3, [pc, #244]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a3c      	ldr	r2, [pc, #240]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004104:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4934      	ldr	r1, [pc, #208]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004122:	d105      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a2e      	ldr	r2, [pc, #184]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800413c:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	4926      	ldr	r1, [pc, #152]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	4918      	ldr	r1, [pc, #96]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041ac:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	490a      	ldr	r1, [pc, #40]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ca:	d105      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000

080041e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e049      	b.n	800428e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc fff6 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fde2 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d001      	beq.n	80042b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e04a      	b.n	8004346 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a21      	ldr	r2, [pc, #132]	; (8004354 <HAL_TIM_Base_Start_IT+0xbc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x6c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d013      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x6c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_TIM_Base_Start_IT+0xc0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x6c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <HAL_TIM_Base_Start_IT+0xc4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x6c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_TIM_Base_Start_IT+0xc8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x6c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_TIM_Base_Start_IT+0xcc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d115      	bne.n	8004330 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_TIM_Base_Start_IT+0xd0>)
 800430c:	4013      	ands	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b06      	cmp	r3, #6
 8004314:	d015      	beq.n	8004342 <HAL_TIM_Base_Start_IT+0xaa>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d011      	beq.n	8004342 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	e008      	b.n	8004342 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	e000      	b.n	8004344 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004342:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40013400 	.word	0x40013400
 8004364:	40014000 	.word	0x40014000
 8004368:	00010007 	.word	0x00010007

0800436c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e049      	b.n	8004412 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fe2a 	bl	8000fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fd20 	bl	8004df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_TIM_PWM_Start+0x24>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e03c      	b.n	80044ba <HAL_TIM_PWM_Start+0x9e>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d109      	bne.n	800445a <HAL_TIM_PWM_Start+0x3e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e02f      	b.n	80044ba <HAL_TIM_PWM_Start+0x9e>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start+0x58>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e022      	b.n	80044ba <HAL_TIM_PWM_Start+0x9e>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start+0x72>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e015      	b.n	80044ba <HAL_TIM_PWM_Start+0x9e>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start+0x8c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e008      	b.n	80044ba <HAL_TIM_PWM_Start+0x9e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e097      	b.n	80045f2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0xb6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	e023      	b.n	800451a <HAL_TIM_PWM_Start+0xfe>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0xc6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	e01b      	b.n	800451a <HAL_TIM_PWM_Start+0xfe>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start+0xd6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	e013      	b.n	800451a <HAL_TIM_PWM_Start+0xfe>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Start+0xe6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004500:	e00b      	b.n	800451a <HAL_TIM_PWM_Start+0xfe>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b10      	cmp	r3, #16
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Start+0xf6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004510:	e003      	b.n	800451a <HAL_TIM_PWM_Start+0xfe>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 ffea 	bl	80054fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a33      	ldr	r2, [pc, #204]	; (80045fc <HAL_TIM_PWM_Start+0x1e0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_TIM_PWM_Start+0x13e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a32      	ldr	r2, [pc, #200]	; (8004600 <HAL_TIM_PWM_Start+0x1e4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_TIM_PWM_Start+0x13e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a30      	ldr	r2, [pc, #192]	; (8004604 <HAL_TIM_PWM_Start+0x1e8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_TIM_PWM_Start+0x13e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <HAL_TIM_PWM_Start+0x1ec>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_TIM_PWM_Start+0x13e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2d      	ldr	r2, [pc, #180]	; (800460c <HAL_TIM_PWM_Start+0x1f0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <HAL_TIM_PWM_Start+0x142>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_TIM_PWM_Start+0x144>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a20      	ldr	r2, [pc, #128]	; (80045fc <HAL_TIM_PWM_Start+0x1e0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d018      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x194>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d013      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x194>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a20      	ldr	r2, [pc, #128]	; (8004610 <HAL_TIM_PWM_Start+0x1f4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00e      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x194>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <HAL_TIM_PWM_Start+0x1f8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x194>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_TIM_PWM_Start+0x1e4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x194>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a16      	ldr	r2, [pc, #88]	; (8004604 <HAL_TIM_PWM_Start+0x1e8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d115      	bne.n	80045dc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_TIM_PWM_Start+0x1fc>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d015      	beq.n	80045ee <HAL_TIM_PWM_Start+0x1d2>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d011      	beq.n	80045ee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045da:	e008      	b.n	80045ee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e000      	b.n	80045f0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	00010007 	.word	0x00010007

0800461c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e097      	b.n	8004760 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fc fd19 	bl	800107c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004660:	f023 0307 	bic.w	r3, r3, #7
 8004664:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fbbd 	bl	8004df0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	4313      	orrs	r3, r2
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046bc:	f023 030c 	bic.w	r3, r3, #12
 80046c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4313      	orrs	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	011a      	lsls	r2, r3, #4
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	031b      	lsls	r3, r3, #12
 80046ec:	4313      	orrs	r3, r2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004702:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4313      	orrs	r3, r2
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004778:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004780:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004788:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004790:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d110      	bne.n	80047ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d102      	bne.n	80047a4 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800479e:	7b7b      	ldrb	r3, [r7, #13]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e068      	b.n	800487a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b8:	e031      	b.n	800481e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d110      	bne.n	80047e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047c0:	7bbb      	ldrb	r3, [r7, #14]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d102      	bne.n	80047cc <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047c6:	7b3b      	ldrb	r3, [r7, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d001      	beq.n	80047d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e054      	b.n	800487a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	e01d      	b.n	800481e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d108      	bne.n	80047fa <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e8:	7bbb      	ldrb	r3, [r7, #14]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ee:	7b7b      	ldrb	r3, [r7, #13]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d102      	bne.n	80047fa <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047f4:	7b3b      	ldrb	r3, [r7, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d001      	beq.n	80047fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e03d      	b.n	800487a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_TIM_Encoder_Start+0xc2>
 8004824:	2b04      	cmp	r3, #4
 8004826:	d008      	beq.n	800483a <HAL_TIM_Encoder_Start+0xd2>
 8004828:	e00f      	b.n	800484a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fe62 	bl	80054fc <TIM_CCxChannelCmd>
      break;
 8004838:	e016      	b.n	8004868 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	2104      	movs	r1, #4
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fe5a 	bl	80054fc <TIM_CCxChannelCmd>
      break;
 8004848:	e00e      	b.n	8004868 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fe52 	bl	80054fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	2104      	movs	r1, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fe4b 	bl	80054fc <TIM_CCxChannelCmd>
      break;
 8004866:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d122      	bne.n	80048de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0202 	mvn.w	r2, #2
 80048ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa75 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa67 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa78 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d122      	bne.n	8004932 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d11b      	bne.n	8004932 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0204 	mvn.w	r2, #4
 8004902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa4b 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 800491e:	e005      	b.n	800492c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fa3d 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa4e 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d122      	bne.n	8004986 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d11b      	bne.n	8004986 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0208 	mvn.w	r2, #8
 8004956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2204      	movs	r2, #4
 800495c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa21 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 8004972:	e005      	b.n	8004980 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa13 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa24 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d122      	bne.n	80049da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0210 	mvn.w	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2208      	movs	r2, #8
 80049b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9f7 	bl	8004db4 <HAL_TIM_IC_CaptureCallback>
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f9e9 	bl	8004da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9fa 	bl	8004dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10e      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0201 	mvn.w	r2, #1
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fc fa33 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d10e      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d107      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 feb7 	bl	80057a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b80      	cmp	r3, #128	; 0x80
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 feaa 	bl	80057b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d10e      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9a8 	bl	8004ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0220 	mvn.w	r2, #32
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fe6a 	bl	800578c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fe70 	bl	80057c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af6:	d10f      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b06:	d107      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fe62 	bl	80057dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b26:	d10f      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b36:	d107      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fe54 	bl	80057f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b56:	d10f      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fe46 	bl	8005804 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0fd      	b.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b14      	cmp	r3, #20
 8004ba6:	f200 80f0 	bhi.w	8004d8a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004d8b 	.word	0x08004d8b
 8004bb8:	08004d8b 	.word	0x08004d8b
 8004bbc:	08004d8b 	.word	0x08004d8b
 8004bc0:	08004c45 	.word	0x08004c45
 8004bc4:	08004d8b 	.word	0x08004d8b
 8004bc8:	08004d8b 	.word	0x08004d8b
 8004bcc:	08004d8b 	.word	0x08004d8b
 8004bd0:	08004c87 	.word	0x08004c87
 8004bd4:	08004d8b 	.word	0x08004d8b
 8004bd8:	08004d8b 	.word	0x08004d8b
 8004bdc:	08004d8b 	.word	0x08004d8b
 8004be0:	08004cc7 	.word	0x08004cc7
 8004be4:	08004d8b 	.word	0x08004d8b
 8004be8:	08004d8b 	.word	0x08004d8b
 8004bec:	08004d8b 	.word	0x08004d8b
 8004bf0:	08004d09 	.word	0x08004d09
 8004bf4:	08004d8b 	.word	0x08004d8b
 8004bf8:	08004d8b 	.word	0x08004d8b
 8004bfc:	08004d8b 	.word	0x08004d8b
 8004c00:	08004d49 	.word	0x08004d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f980 	bl	8004f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0208 	orr.w	r2, r2, #8
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	619a      	str	r2, [r3, #24]
      break;
 8004c42:	e0a3      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f9f0 	bl	8005030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	619a      	str	r2, [r3, #24]
      break;
 8004c84:	e082      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fa59 	bl	8005144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0208 	orr.w	r2, r2, #8
 8004ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0204 	bic.w	r2, r2, #4
 8004cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	61da      	str	r2, [r3, #28]
      break;
 8004cc4:	e062      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fac1 	bl	8005254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	021a      	lsls	r2, r3, #8
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	61da      	str	r2, [r3, #28]
      break;
 8004d06:	e041      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fb2a 	bl	8005368 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d46:	e021      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb6e 	bl	8005430 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop

08004da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <TIM_Base_SetConfig+0x104>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00f      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d00b      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a39      	ldr	r2, [pc, #228]	; (8004ef8 <TIM_Base_SetConfig+0x108>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a38      	ldr	r2, [pc, #224]	; (8004efc <TIM_Base_SetConfig+0x10c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_Base_SetConfig+0x38>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a37      	ldr	r2, [pc, #220]	; (8004f00 <TIM_Base_SetConfig+0x110>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d108      	bne.n	8004e3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <TIM_Base_SetConfig+0x104>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01b      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d017      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <TIM_Base_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a29      	ldr	r2, [pc, #164]	; (8004efc <TIM_Base_SetConfig+0x10c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00f      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <TIM_Base_SetConfig+0x110>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <TIM_Base_SetConfig+0x118>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0x11c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d108      	bne.n	8004e8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <TIM_Base_SetConfig+0x104>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00f      	beq.n	8004ed8 <TIM_Base_SetConfig+0xe8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a11      	ldr	r2, [pc, #68]	; (8004f00 <TIM_Base_SetConfig+0x110>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <TIM_Base_SetConfig+0xe8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <TIM_Base_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_Base_SetConfig+0xe8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <TIM_Base_SetConfig+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_Base_SetConfig+0xe8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <TIM_Base_SetConfig+0x11c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d103      	bne.n	8004ee0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	615a      	str	r2, [r3, #20]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40013400 	.word	0x40013400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2c      	ldr	r2, [pc, #176]	; (800501c <TIM_OC1_SetConfig+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00f      	beq.n	8004f90 <TIM_OC1_SetConfig+0x80>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2b      	ldr	r2, [pc, #172]	; (8005020 <TIM_OC1_SetConfig+0x110>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <TIM_OC1_SetConfig+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <TIM_OC1_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <TIM_OC1_SetConfig+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a29      	ldr	r2, [pc, #164]	; (8005028 <TIM_OC1_SetConfig+0x118>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC1_SetConfig+0x80>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a28      	ldr	r2, [pc, #160]	; (800502c <TIM_OC1_SetConfig+0x11c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0308 	bic.w	r3, r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <TIM_OC1_SetConfig+0x10c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xc2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1a      	ldr	r2, [pc, #104]	; (8005020 <TIM_OC1_SetConfig+0x110>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xc2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a19      	ldr	r2, [pc, #100]	; (8005024 <TIM_OC1_SetConfig+0x114>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xc2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	; (8005028 <TIM_OC1_SetConfig+0x118>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xc2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <TIM_OC1_SetConfig+0x11c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	621a      	str	r2, [r3, #32]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40013400 	.word	0x40013400
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800

08005030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0210 	bic.w	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0320 	bic.w	r3, r3, #32
 800507e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a28      	ldr	r2, [pc, #160]	; (8005130 <TIM_OC2_SetConfig+0x100>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC2_SetConfig+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a27      	ldr	r2, [pc, #156]	; (8005134 <TIM_OC2_SetConfig+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d10d      	bne.n	80050b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <TIM_OC2_SetConfig+0x100>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_OC2_SetConfig+0xb0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <TIM_OC2_SetConfig+0x104>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_OC2_SetConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <TIM_OC2_SetConfig+0x108>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC2_SetConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1a      	ldr	r2, [pc, #104]	; (800513c <TIM_OC2_SetConfig+0x10c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC2_SetConfig+0xb0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a19      	ldr	r2, [pc, #100]	; (8005140 <TIM_OC2_SetConfig+0x110>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d113      	bne.n	8005108 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40013400 	.word	0x40013400
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800

08005144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a27      	ldr	r2, [pc, #156]	; (8005240 <TIM_OC3_SetConfig+0xfc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC3_SetConfig+0x6a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a26      	ldr	r2, [pc, #152]	; (8005244 <TIM_OC3_SetConfig+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10d      	bne.n	80051ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <TIM_OC3_SetConfig+0xfc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00f      	beq.n	80051f2 <TIM_OC3_SetConfig+0xae>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <TIM_OC3_SetConfig+0x100>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_OC3_SetConfig+0xae>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <TIM_OC3_SetConfig+0x104>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_OC3_SetConfig+0xae>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <TIM_OC3_SetConfig+0x108>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC3_SetConfig+0xae>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <TIM_OC3_SetConfig+0x10c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d113      	bne.n	800521a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800

08005254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_OC4_SetConfig+0x100>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC4_SetConfig+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_OC4_SetConfig+0x104>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10d      	bne.n	80052dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <TIM_OC4_SetConfig+0x100>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00f      	beq.n	8005304 <TIM_OC4_SetConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <TIM_OC4_SetConfig+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_OC4_SetConfig+0xb0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	; (800535c <TIM_OC4_SetConfig+0x108>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC4_SetConfig+0xb0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <TIM_OC4_SetConfig+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC4_SetConfig+0xb0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a19      	ldr	r2, [pc, #100]	; (8005364 <TIM_OC4_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d113      	bne.n	800532c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005312:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40013400 	.word	0x40013400
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800

08005368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a17      	ldr	r2, [pc, #92]	; (800541c <TIM_OC5_SetConfig+0xb4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00f      	beq.n	80053e2 <TIM_OC5_SetConfig+0x7a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <TIM_OC5_SetConfig+0xb8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00b      	beq.n	80053e2 <TIM_OC5_SetConfig+0x7a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC5_SetConfig+0xbc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d007      	beq.n	80053e2 <TIM_OC5_SetConfig+0x7a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC5_SetConfig+0xc0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <TIM_OC5_SetConfig+0x7a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a13      	ldr	r2, [pc, #76]	; (800542c <TIM_OC5_SetConfig+0xc4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d109      	bne.n	80053f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	621a      	str	r2, [r3, #32]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800

08005430 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	051b      	lsls	r3, r3, #20
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <TIM_OC6_SetConfig+0xb8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00f      	beq.n	80054ac <TIM_OC6_SetConfig+0x7c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a17      	ldr	r2, [pc, #92]	; (80054ec <TIM_OC6_SetConfig+0xbc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_OC6_SetConfig+0x7c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <TIM_OC6_SetConfig+0xc0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_OC6_SetConfig+0x7c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <TIM_OC6_SetConfig+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC6_SetConfig+0x7c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a14      	ldr	r2, [pc, #80]	; (80054f8 <TIM_OC6_SetConfig+0xc8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d109      	bne.n	80054c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	029b      	lsls	r3, r3, #10
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	2201      	movs	r2, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800555c:	2302      	movs	r3, #2
 800555e:	e065      	b.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2b      	ldr	r2, [pc, #172]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800559a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d018      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d013      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00e      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a17      	ldr	r2, [pc, #92]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a12      	ldr	r2, [pc, #72]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10c      	bne.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40013400 	.word	0x40013400
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40014000 	.word	0x40014000

0800564c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005664:	2302      	movs	r3, #2
 8005666:	e087      	b.n	8005778 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a27      	ldr	r2, [pc, #156]	; (8005784 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a25      	ldr	r2, [pc, #148]	; (8005788 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d106      	bne.n	8005704 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d126      	bne.n	8005766 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	051b      	lsls	r3, r3, #20
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d106      	bne.n	8005766 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40013400 	.word	0x40013400

0800578c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005828:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800582c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800584e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005852:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	b29b      	uxth	r3, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	4013      	ands	r3, r2
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800587c:	b084      	sub	sp, #16
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	f107 0014 	add.w	r0, r7, #20
 800588a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	b004      	add	sp, #16
 80058bc:	4770      	bx	lr
	...

080058c0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b09b      	sub	sp, #108	; 0x6c
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	78db      	ldrb	r3, [r3, #3]
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d81f      	bhi.n	8005932 <USB_ActivateEndpoint+0x72>
 80058f2:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <USB_ActivateEndpoint+0x38>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005909 	.word	0x08005909
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800593b 	.word	0x0800593b
 8005904:	08005917 	.word	0x08005917
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005908:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800590c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005910:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005914:	e012      	b.n	800593c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005916:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800591a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800591e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005922:	e00b      	b.n	800593c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005924:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800592c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005930:	e004      	b.n	800593c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005938:	e000      	b.n	800593c <USB_ActivateEndpoint+0x7c>
      break;
 800593a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	b21b      	sxth	r3, r3
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	b21a      	sxth	r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b21b      	sxth	r3, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	b21b      	sxth	r3, r3
 8005982:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	7b1b      	ldrb	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 8149 	bne.w	8005c44 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8084 	beq.w	8005ac4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4413      	add	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	00da      	lsls	r2, r3, #3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	88db      	ldrh	r3, [r3, #6]
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	81fb      	strh	r3, [r7, #14]
 80059fe:	89fb      	ldrh	r3, [r7, #14]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <USB_ActivateEndpoint+0x180>
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	81bb      	strh	r3, [r7, #12]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	89bb      	ldrh	r3, [r7, #12]
 8005a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	78db      	ldrb	r3, [r3, #3]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d020      	beq.n	8005a8a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	813b      	strh	r3, [r7, #8]
 8005a60:	893b      	ldrh	r3, [r7, #8]
 8005a62:	f083 0320 	eor.w	r3, r3, #32
 8005a66:	813b      	strh	r3, [r7, #8]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	893b      	ldrh	r3, [r7, #8]
 8005a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]
 8005a88:	e27f      	b.n	8005f8a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	817b      	strh	r3, [r7, #10]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	897b      	ldrh	r3, [r7, #10]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
 8005ac2:	e262      	b.n	8005f8a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad4:	4413      	add	r3, r2
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	00da      	lsls	r2, r3, #3
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	88db      	ldrh	r3, [r3, #6]
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	4413      	add	r3, r2
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	00da      	lsls	r2, r3, #3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d112      	bne.n	8005b4a <USB_ActivateEndpoint+0x28a>
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e02f      	b.n	8005baa <USB_ActivateEndpoint+0x2ea>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b50:	d813      	bhi.n	8005b7a <USB_ActivateEndpoint+0x2ba>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <USB_ActivateEndpoint+0x2ac>
 8005b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b68:	3301      	adds	r3, #1
 8005b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e017      	b.n	8005baa <USB_ActivateEndpoint+0x2ea>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	663b      	str	r3, [r7, #96]	; 0x60
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <USB_ActivateEndpoint+0x2d4>
 8005b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b90:	3b01      	subs	r3, #1
 8005b92:	663b      	str	r3, [r7, #96]	; 0x60
 8005b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	83fb      	strh	r3, [r7, #30]
 8005bb8:	8bfb      	ldrh	r3, [r7, #30]
 8005bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01b      	beq.n	8005bfa <USB_ActivateEndpoint+0x33a>
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd8:	83bb      	strh	r3, [r7, #28]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	8bbb      	ldrh	r3, [r7, #28]
 8005be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c10:	837b      	strh	r3, [r7, #26]
 8005c12:	8b7b      	ldrh	r3, [r7, #26]
 8005c14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c18:	837b      	strh	r3, [r7, #26]
 8005c1a:	8b7b      	ldrh	r3, [r7, #26]
 8005c1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c20:	837b      	strh	r3, [r7, #26]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	8b7b      	ldrh	r3, [r7, #26]
 8005c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	8013      	strh	r3, [r2, #0]
 8005c42:	e1a2      	b.n	8005f8a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c90:	4413      	add	r3, r2
 8005c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	00da      	lsls	r2, r3, #3
 8005c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	891b      	ldrh	r3, [r3, #8]
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc4:	4413      	add	r3, r2
 8005cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	00da      	lsls	r2, r3, #3
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	895b      	ldrh	r3, [r3, #10]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f040 8091 	bne.w	8005e14 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01b      	beq.n	8005d42 <USB_ActivateEndpoint+0x482>
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01b      	beq.n	8005d92 <USB_ActivateEndpoint+0x4d2>
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d70:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	441a      	add	r2, r3
 8005d7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005daa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005db0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005db2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005db4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005db8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	441a      	add	r2, r3
 8005dc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df0:	867b      	strh	r3, [r7, #50]	; 0x32
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
 8005e12:	e0ba      	b.n	8005f8a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01d      	beq.n	8005e6c <USB_ActivateEndpoint+0x5ac>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01d      	beq.n	8005ec4 <USB_ActivateEndpoint+0x604>
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d024      	beq.n	8005f16 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ee6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eea:	f083 0320 	eor.w	r3, r3, #32
 8005eee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]
 8005f14:	e01d      	b.n	8005f52 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	376c      	adds	r7, #108	; 0x6c
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop

08005f9c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b08d      	sub	sp, #52	; 0x34
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	7b1b      	ldrb	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 808e 	bne.w	80060cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d044      	beq.n	8006042 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	81bb      	strh	r3, [r7, #12]
 8005fc6:	89bb      	ldrh	r3, [r7, #12]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <USB_DeactivateEndpoint+0x6c>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	817b      	strh	r3, [r7, #10]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	897b      	ldrh	r3, [r7, #10]
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	813b      	strh	r3, [r7, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	441a      	add	r2, r3
 800602a:	893b      	ldrh	r3, [r7, #8]
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
 8006040:	e192      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	827b      	strh	r3, [r7, #18]
 8006050:	8a7b      	ldrh	r3, [r7, #18]
 8006052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <USB_DeactivateEndpoint+0xf6>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	823b      	strh	r3, [r7, #16]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8a3b      	ldrh	r3, [r7, #16]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	81fb      	strh	r3, [r7, #14]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
 80060ca:	e14d      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 80a5 	bne.w	8006220 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	843b      	strh	r3, [r7, #32]
 80060e4:	8c3b      	ldrh	r3, [r7, #32]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01b      	beq.n	8006126 <USB_DeactivateEndpoint+0x18a>
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	83fb      	strh	r3, [r7, #30]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	83bb      	strh	r3, [r7, #28]
 8006134:	8bbb      	ldrh	r3, [r7, #28]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <USB_DeactivateEndpoint+0x1da>
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006154:	837b      	strh	r3, [r7, #26]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8b7b      	ldrh	r3, [r7, #26]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	833b      	strh	r3, [r7, #24]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	8b3b      	ldrh	r3, [r7, #24]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	82fb      	strh	r3, [r7, #22]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	8afb      	ldrh	r3, [r7, #22]
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	82bb      	strh	r3, [r7, #20]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	8abb      	ldrh	r3, [r7, #20]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
 800621e:	e0a3      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800622e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01b      	beq.n	8006270 <USB_DeactivateEndpoint+0x2d4>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800627e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <USB_DeactivateEndpoint+0x324>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	853b      	strh	r3, [r7, #40]	; 0x28
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	847b      	strh	r3, [r7, #34]	; 0x22
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3734      	adds	r7, #52	; 0x34
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b0c4      	sub	sp, #272	; 0x110
 800637a:	af00      	add	r7, sp, #0
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	6018      	str	r0, [r3, #0]
 8006380:	463b      	mov	r3, r7
 8006382:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b01      	cmp	r3, #1
 800638c:	f040 8566 	bne.w	8006e5c <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	429a      	cmp	r2, r3
 800639e:	d905      	bls.n	80063ac <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063aa:	e004      	b.n	80063b6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80063ac:	463b      	mov	r3, r7
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063b6:	463b      	mov	r3, r7
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	7b1b      	ldrb	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d12c      	bne.n	800641a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063c0:	463b      	mov	r3, r7
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6959      	ldr	r1, [r3, #20]
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	88da      	ldrh	r2, [r3, #6]
 80063cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	1d38      	adds	r0, r7, #4
 80063d4:	6800      	ldr	r0, [r0, #0]
 80063d6:	f001 fa43 	bl	8007860 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4413      	add	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	00da      	lsls	r2, r3, #3
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	4413      	add	r3, r2
 80063fe:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006402:	f107 0310 	add.w	r3, r7, #16
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800640c:	b29a      	uxth	r2, r3
 800640e:	f107 0310 	add.w	r3, r7, #16
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	f000 bcec 	b.w	8006df2 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800641a:	463b      	mov	r3, r7
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b02      	cmp	r3, #2
 8006422:	f040 8356 	bne.w	8006ad2 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	429a      	cmp	r2, r3
 8006434:	f240 82fa 	bls.w	8006a2c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	463b      	mov	r3, r7
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800647c:	463b      	mov	r3, r7
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006486:	463b      	mov	r3, r7
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006490:	1ad2      	subs	r2, r2, r3
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006498:	1d3b      	adds	r3, r7, #4
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 815e 	beq.w	8006770 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d164      	bne.n	800658e <USB_EPStartXfer+0x218>
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	4413      	add	r3, r2
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	00da      	lsls	r2, r3, #3
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	4413      	add	r3, r2
 80064e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d112      	bne.n	800651c <USB_EPStartXfer+0x1a6>
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006500:	b29a      	uxth	r2, r3
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006514:	b29a      	uxth	r2, r3
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	e054      	b.n	80065c6 <USB_EPStartXfer+0x250>
 800651c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006520:	2b3e      	cmp	r3, #62	; 0x3e
 8006522:	d817      	bhi.n	8006554 <USB_EPStartXfer+0x1de>
 8006524:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800652e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <USB_EPStartXfer+0x1ce>
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	3301      	adds	r3, #1
 8006540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006548:	b29b      	uxth	r3, r3
 800654a:	029b      	lsls	r3, r3, #10
 800654c:	b29a      	uxth	r2, r3
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e038      	b.n	80065c6 <USB_EPStartXfer+0x250>
 8006554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800655e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2b00      	cmp	r3, #0
 8006568:	d104      	bne.n	8006574 <USB_EPStartXfer+0x1fe>
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656e:	3b01      	subs	r3, #1
 8006570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006578:	b29b      	uxth	r3, r3
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006586:	b29a      	uxth	r2, r3
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	e01b      	b.n	80065c6 <USB_EPStartXfer+0x250>
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d116      	bne.n	80065c6 <USB_EPStartXfer+0x250>
 8006598:	1d3b      	adds	r3, r7, #4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	4413      	add	r3, r2
 80065a8:	637b      	str	r3, [r7, #52]	; 0x34
 80065aa:	463b      	mov	r3, r7
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	00da      	lsls	r2, r3, #3
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	4413      	add	r3, r2
 80065b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ba:	633b      	str	r3, [r7, #48]	; 0x30
 80065bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	895b      	ldrh	r3, [r3, #10]
 80065cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6959      	ldr	r1, [r3, #20]
 80065d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80065e0:	1d38      	adds	r0, r7, #4
 80065e2:	6800      	ldr	r0, [r0, #0]
 80065e4:	f001 f93c 	bl	8007860 <USB_WritePMA>
            ep->xfer_buff += len;
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065f2:	441a      	add	r2, r3
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d90e      	bls.n	8006628 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	621a      	str	r2, [r3, #32]
 8006626:	e008      	b.n	800663a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006632:	463b      	mov	r3, r7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800663a:	463b      	mov	r3, r7
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d164      	bne.n	800670e <USB_EPStartXfer+0x398>
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	1d3b      	adds	r3, r7, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006652:	b29b      	uxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	00da      	lsls	r2, r3, #3
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006672:	2b00      	cmp	r3, #0
 8006674:	d112      	bne.n	800669c <USB_EPStartXfer+0x326>
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006680:	b29a      	uxth	r2, r3
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006694:	b29a      	uxth	r2, r3
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	e057      	b.n	800674c <USB_EPStartXfer+0x3d6>
 800669c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a0:	2b3e      	cmp	r3, #62	; 0x3e
 80066a2:	d817      	bhi.n	80066d4 <USB_EPStartXfer+0x35e>
 80066a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <USB_EPStartXfer+0x34e>
 80066ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066be:	3301      	adds	r3, #1
 80066c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e03b      	b.n	800674c <USB_EPStartXfer+0x3d6>
 80066d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <USB_EPStartXfer+0x37e>
 80066ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066ee:	3b01      	subs	r3, #1
 80066f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006706:	b29a      	uxth	r2, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e01e      	b.n	800674c <USB_EPStartXfer+0x3d6>
 800670e:	463b      	mov	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d119      	bne.n	800674c <USB_EPStartXfer+0x3d6>
 8006718:	1d3b      	adds	r3, r7, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006726:	b29b      	uxth	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	4413      	add	r3, r2
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	00da      	lsls	r2, r3, #3
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	4413      	add	r3, r2
 800673c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006740:	623b      	str	r3, [r7, #32]
 8006742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006746:	b29a      	uxth	r2, r3
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800674c:	463b      	mov	r3, r7
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	891b      	ldrh	r3, [r3, #8]
 8006752:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006756:	463b      	mov	r3, r7
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6959      	ldr	r1, [r3, #20]
 800675c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006760:	b29b      	uxth	r3, r3
 8006762:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006766:	1d38      	adds	r0, r7, #4
 8006768:	6800      	ldr	r0, [r0, #0]
 800676a:	f001 f879 	bl	8007860 <USB_WritePMA>
 800676e:	e340      	b.n	8006df2 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d164      	bne.n	8006844 <USB_EPStartXfer+0x4ce>
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006788:	b29b      	uxth	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	4413      	add	r3, r2
 8006790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006792:	463b      	mov	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	00da      	lsls	r2, r3, #3
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	4413      	add	r3, r2
 800679e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d112      	bne.n	80067d2 <USB_EPStartXfer+0x45c>
 80067ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	e057      	b.n	8006882 <USB_EPStartXfer+0x50c>
 80067d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067d6:	2b3e      	cmp	r3, #62	; 0x3e
 80067d8:	d817      	bhi.n	800680a <USB_EPStartXfer+0x494>
 80067da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <USB_EPStartXfer+0x484>
 80067f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fe:	b29b      	uxth	r3, r3
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	b29a      	uxth	r2, r3
 8006804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e03b      	b.n	8006882 <USB_EPStartXfer+0x50c>
 800680a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006814:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <USB_EPStartXfer+0x4b4>
 8006820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006824:	3b01      	subs	r3, #1
 8006826:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800682a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e01e      	b.n	8006882 <USB_EPStartXfer+0x50c>
 8006844:	463b      	mov	r3, r7
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d119      	bne.n	8006882 <USB_EPStartXfer+0x50c>
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	657b      	str	r3, [r7, #84]	; 0x54
 8006854:	1d3b      	adds	r3, r7, #4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006862:	4413      	add	r3, r2
 8006864:	657b      	str	r3, [r7, #84]	; 0x54
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006870:	4413      	add	r3, r2
 8006872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006876:	653b      	str	r3, [r7, #80]	; 0x50
 8006878:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687c:	b29a      	uxth	r2, r3
 800687e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006880:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006882:	463b      	mov	r3, r7
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	891b      	ldrh	r3, [r3, #8]
 8006888:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6959      	ldr	r1, [r3, #20]
 8006892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006896:	b29b      	uxth	r3, r3
 8006898:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800689c:	1d38      	adds	r0, r7, #4
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	f000 ffde 	bl	8007860 <USB_WritePMA>
            ep->xfer_buff += len;
 80068a4:	463b      	mov	r3, r7
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ae:	441a      	add	r2, r3
 80068b0:	463b      	mov	r3, r7
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068b6:	463b      	mov	r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d90e      	bls.n	80068e4 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 80068c6:	463b      	mov	r3, r7
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6a1a      	ldr	r2, [r3, #32]
 80068d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	621a      	str	r2, [r3, #32]
 80068e2:	e008      	b.n	80068f6 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80068ee:	463b      	mov	r3, r7
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	647b      	str	r3, [r7, #68]	; 0x44
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d164      	bne.n	80069d0 <USB_EPStartXfer+0x65a>
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690c:	1d3b      	adds	r3, r7, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006914:	b29b      	uxth	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691a:	4413      	add	r3, r2
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	00da      	lsls	r2, r3, #3
 8006926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006928:	4413      	add	r3, r2
 800692a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800692e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006930:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006934:	2b00      	cmp	r3, #0
 8006936:	d112      	bne.n	800695e <USB_EPStartXfer+0x5e8>
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006942:	b29a      	uxth	r2, r3
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006956:	b29a      	uxth	r2, r3
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	e054      	b.n	8006a08 <USB_EPStartXfer+0x692>
 800695e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006962:	2b3e      	cmp	r3, #62	; 0x3e
 8006964:	d817      	bhi.n	8006996 <USB_EPStartXfer+0x620>
 8006966:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006970:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d004      	beq.n	8006986 <USB_EPStartXfer+0x610>
 800697c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006980:	3301      	adds	r3, #1
 8006982:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800698a:	b29b      	uxth	r3, r3
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	b29a      	uxth	r2, r3
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	801a      	strh	r2, [r3, #0]
 8006994:	e038      	b.n	8006a08 <USB_EPStartXfer+0x692>
 8006996:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <USB_EPStartXfer+0x640>
 80069ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069b0:	3b01      	subs	r3, #1
 80069b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	029b      	lsls	r3, r3, #10
 80069be:	b29b      	uxth	r3, r3
 80069c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	e01b      	b.n	8006a08 <USB_EPStartXfer+0x692>
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d116      	bne.n	8006a08 <USB_EPStartXfer+0x692>
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	4413      	add	r3, r2
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
 80069ec:	463b      	mov	r3, r7
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	00da      	lsls	r2, r3, #3
 80069f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f6:	4413      	add	r3, r2
 80069f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069fc:	643b      	str	r3, [r7, #64]	; 0x40
 80069fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	895b      	ldrh	r3, [r3, #10]
 8006a0e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6959      	ldr	r1, [r3, #20]
 8006a18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a22:	1d38      	adds	r0, r7, #4
 8006a24:	6800      	ldr	r0, [r0, #0]
 8006a26:	f000 ff1b 	bl	8007860 <USB_WritePMA>
 8006a2a:	e1e2      	b.n	8006df2 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006a54:	1d3b      	adds	r3, r7, #4
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a80:	1d3b      	adds	r3, r7, #4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a8e:	4413      	add	r3, r2
 8006a90:	663b      	str	r3, [r7, #96]	; 0x60
 8006a92:	463b      	mov	r3, r7
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	00da      	lsls	r2, r3, #3
 8006a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006aae:	463b      	mov	r3, r7
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	891b      	ldrh	r3, [r3, #8]
 8006ab4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6959      	ldr	r1, [r3, #20]
 8006abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006ac8:	1d38      	adds	r0, r7, #4
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	f000 fec8 	bl	8007860 <USB_WritePMA>
 8006ad0:	e18f      	b.n	8006df2 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 808f 	beq.w	8006c0c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aee:	1d3b      	adds	r3, r7, #4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006af4:	463b      	mov	r3, r7
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d164      	bne.n	8006bc8 <USB_EPStartXfer+0x852>
 8006afe:	1d3b      	adds	r3, r7, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	673b      	str	r3, [r7, #112]	; 0x70
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b12:	4413      	add	r3, r2
 8006b14:	673b      	str	r3, [r7, #112]	; 0x70
 8006b16:	463b      	mov	r3, r7
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	00da      	lsls	r2, r3, #3
 8006b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b20:	4413      	add	r3, r2
 8006b22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d112      	bne.n	8006b56 <USB_EPStartXfer+0x7e0>
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e054      	b.n	8006c00 <USB_EPStartXfer+0x88a>
 8006b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5c:	d817      	bhi.n	8006b8e <USB_EPStartXfer+0x818>
 8006b5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <USB_EPStartXfer+0x808>
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b78:	3301      	adds	r3, #1
 8006b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	029b      	lsls	r3, r3, #10
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8a:	801a      	strh	r2, [r3, #0]
 8006b8c:	e038      	b.n	8006c00 <USB_EPStartXfer+0x88a>
 8006b8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <USB_EPStartXfer+0x838>
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	029b      	lsls	r3, r3, #10
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	e01b      	b.n	8006c00 <USB_EPStartXfer+0x88a>
 8006bc8:	463b      	mov	r3, r7
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d116      	bne.n	8006c00 <USB_EPStartXfer+0x88a>
 8006bd2:	1d3b      	adds	r3, r7, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be0:	4413      	add	r3, r2
 8006be2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	00da      	lsls	r2, r3, #3
 8006bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bee:	4413      	add	r3, r2
 8006bf0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bf4:	677b      	str	r3, [r7, #116]	; 0x74
 8006bf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c00:	463b      	mov	r3, r7
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	895b      	ldrh	r3, [r3, #10]
 8006c06:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006c0a:	e097      	b.n	8006d3c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c0c:	463b      	mov	r3, r7
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d168      	bne.n	8006ce8 <USB_EPStartXfer+0x972>
 8006c16:	1d3b      	adds	r3, r7, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c1e:	1d3b      	adds	r3, r7, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c2e:	4413      	add	r3, r2
 8006c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c34:	463b      	mov	r3, r7
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	00da      	lsls	r2, r3, #3
 8006c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d112      	bne.n	8006c76 <USB_EPStartXfer+0x900>
 8006c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e05d      	b.n	8006d32 <USB_EPStartXfer+0x9bc>
 8006c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c7c:	d817      	bhi.n	8006cae <USB_EPStartXfer+0x938>
 8006c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <USB_EPStartXfer+0x928>
 8006c94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	029b      	lsls	r3, r3, #10
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e041      	b.n	8006d32 <USB_EPStartXfer+0x9bc>
 8006cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USB_EPStartXfer+0x958>
 8006cc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	e024      	b.n	8006d32 <USB_EPStartXfer+0x9bc>
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d11f      	bne.n	8006d32 <USB_EPStartXfer+0x9bc>
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d10:	463b      	mov	r3, r7
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	00da      	lsls	r2, r3, #3
 8006d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	891b      	ldrh	r3, [r3, #8]
 8006d38:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6959      	ldr	r1, [r3, #20]
 8006d42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006d4c:	1d38      	adds	r0, r7, #4
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	f000 fd86 	bl	8007860 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006d54:	463b      	mov	r3, r7
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d122      	bne.n	8006da4 <USB_EPStartXfer+0xa2e>
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d78:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	463b      	mov	r3, r7
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	8013      	strh	r3, [r2, #0]
 8006da2:	e026      	b.n	8006df2 <USB_EPStartXfer+0xa7c>
 8006da4:	463b      	mov	r3, r7
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d121      	bne.n	8006df2 <USB_EPStartXfer+0xa7c>
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006dcc:	1d3b      	adds	r3, r7, #4
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	441a      	add	r2, r3
 8006dda:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f107 020e 	add.w	r2, r7, #14
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e10:	8013      	strh	r3, [r2, #0]
 8006e12:	f107 030e 	add.w	r3, r7, #14
 8006e16:	f107 020e 	add.w	r2, r7, #14
 8006e1a:	8812      	ldrh	r2, [r2, #0]
 8006e1c:	f082 0210 	eor.w	r2, r2, #16
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	f107 030e 	add.w	r3, r7, #14
 8006e26:	f107 020e 	add.w	r2, r7, #14
 8006e2a:	8812      	ldrh	r2, [r2, #0]
 8006e2c:	f082 0220 	eor.w	r2, r2, #32
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	1d3b      	adds	r3, r7, #4
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	441a      	add	r2, r3
 8006e40:	f107 030e 	add.w	r3, r7, #14
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	8013      	strh	r3, [r2, #0]
 8006e5a:	e3b5      	b.n	80075c8 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	7b1b      	ldrb	r3, [r3, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f040 8090 	bne.w	8006f88 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d90e      	bls.n	8006e96 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	463b      	mov	r3, r7
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	619a      	str	r2, [r3, #24]
 8006e94:	e008      	b.n	8006ea8 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e96:	463b      	mov	r3, r7
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ea8:	1d3b      	adds	r3, r7, #4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eb0:	1d3b      	adds	r3, r7, #4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	00da      	lsls	r2, r3, #3
 8006ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d116      	bne.n	8006f12 <USB_EPStartXfer+0xb9c>
 8006ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	e32c      	b.n	800756c <USB_EPStartXfer+0x11f6>
 8006f12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f16:	2b3e      	cmp	r3, #62	; 0x3e
 8006f18:	d818      	bhi.n	8006f4c <USB_EPStartXfer+0xbd6>
 8006f1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <USB_EPStartXfer+0xbc4>
 8006f30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f34:	3301      	adds	r3, #1
 8006f36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	029b      	lsls	r3, r3, #10
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e30f      	b.n	800756c <USB_EPStartXfer+0x11f6>
 8006f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <USB_EPStartXfer+0xbf6>
 8006f62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	029b      	lsls	r3, r3, #10
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e2f1      	b.n	800756c <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f88:	463b      	mov	r3, r7
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	f040 818f 	bne.w	80072b2 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d175      	bne.n	800708a <USB_EPStartXfer+0xd14>
 8006f9e:	1d3b      	adds	r3, r7, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa6:	1d3b      	adds	r3, r7, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fbc:	463b      	mov	r3, r7
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	00da      	lsls	r2, r3, #3
 8006fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d116      	bne.n	800700a <USB_EPStartXfer+0xc94>
 8006fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007000:	b29a      	uxth	r2, r3
 8007002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007006:	801a      	strh	r2, [r3, #0]
 8007008:	e065      	b.n	80070d6 <USB_EPStartXfer+0xd60>
 800700a:	463b      	mov	r3, r7
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b3e      	cmp	r3, #62	; 0x3e
 8007012:	d81a      	bhi.n	800704a <USB_EPStartXfer+0xcd4>
 8007014:	463b      	mov	r3, r7
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007020:	463b      	mov	r3, r7
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <USB_EPStartXfer+0xcc2>
 800702e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007032:	3301      	adds	r3, #1
 8007034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800703c:	b29b      	uxth	r3, r3
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	b29a      	uxth	r2, r3
 8007042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007046:	801a      	strh	r2, [r3, #0]
 8007048:	e045      	b.n	80070d6 <USB_EPStartXfer+0xd60>
 800704a:	463b      	mov	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <USB_EPStartXfer+0xcf8>
 8007064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007068:	3b01      	subs	r3, #1
 800706a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800706e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007072:	b29b      	uxth	r3, r3
 8007074:	029b      	lsls	r3, r3, #10
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007080:	b29a      	uxth	r2, r3
 8007082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	e025      	b.n	80070d6 <USB_EPStartXfer+0xd60>
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d120      	bne.n	80070d6 <USB_EPStartXfer+0xd60>
 8007094:	1d3b      	adds	r3, r7, #4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709c:	1d3b      	adds	r3, r7, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070ac:	4413      	add	r3, r2
 80070ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070b2:	463b      	mov	r3, r7
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	00da      	lsls	r2, r3, #3
 80070ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070be:	4413      	add	r3, r2
 80070c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070de:	463b      	mov	r3, r7
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d175      	bne.n	80071d4 <USB_EPStartXfer+0xe5e>
 80070e8:	1d3b      	adds	r3, r7, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070f0:	1d3b      	adds	r3, r7, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007100:	4413      	add	r3, r2
 8007102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	00da      	lsls	r2, r3, #3
 800710e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007112:	4413      	add	r3, r2
 8007114:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d116      	bne.n	8007154 <USB_EPStartXfer+0xdde>
 8007126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007132:	b29a      	uxth	r2, r3
 8007134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	e061      	b.n	8007218 <USB_EPStartXfer+0xea2>
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b3e      	cmp	r3, #62	; 0x3e
 800715c:	d81a      	bhi.n	8007194 <USB_EPStartXfer+0xe1e>
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800716a:	463b      	mov	r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <USB_EPStartXfer+0xe0c>
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	3301      	adds	r3, #1
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007186:	b29b      	uxth	r3, r3
 8007188:	029b      	lsls	r3, r3, #10
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e041      	b.n	8007218 <USB_EPStartXfer+0xea2>
 8007194:	463b      	mov	r3, r7
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <USB_EPStartXfer+0xe42>
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b2:	3b01      	subs	r3, #1
 80071b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	b29b      	uxth	r3, r3
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e021      	b.n	8007218 <USB_EPStartXfer+0xea2>
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d11c      	bne.n	8007218 <USB_EPStartXfer+0xea2>
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ee:	4413      	add	r3, r2
 80071f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	00da      	lsls	r2, r3, #3
 80071fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007200:	4413      	add	r3, r2
 8007202:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800720a:	463b      	mov	r3, r7
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	b29a      	uxth	r2, r3
 8007212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007216:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007218:	463b      	mov	r3, r7
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 81a4 	beq.w	800756c <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007238:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800723c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <USB_EPStartXfer+0xeda>
 8007244:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10d      	bne.n	800726c <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007250:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8187 	bne.w	800756c <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800725e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	f040 8180 	bne.w	800756c <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800726c:	1d3b      	adds	r3, r7, #4
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	463b      	mov	r3, r7
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800729c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	8013      	strh	r3, [r2, #0]
 80072b0:	e15c      	b.n	800756c <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80072b2:	463b      	mov	r3, r7
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	78db      	ldrb	r3, [r3, #3]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	f040 8155 	bne.w	8007568 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80072be:	463b      	mov	r3, r7
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	463b      	mov	r3, r7
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d90e      	bls.n	80072ec <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80072d8:	463b      	mov	r3, r7
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	463b      	mov	r3, r7
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	619a      	str	r2, [r3, #24]
 80072ea:	e008      	b.n	80072fe <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80072f6:	463b      	mov	r3, r7
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072fe:	463b      	mov	r3, r7
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d16f      	bne.n	80073e8 <USB_EPStartXfer+0x1072>
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007310:	1d3b      	adds	r3, r7, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007318:	b29b      	uxth	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007320:	4413      	add	r3, r2
 8007322:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	00da      	lsls	r2, r3, #3
 800732e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007332:	4413      	add	r3, r2
 8007334:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800733c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007340:	2b00      	cmp	r3, #0
 8007342:	d116      	bne.n	8007372 <USB_EPStartXfer+0xffc>
 8007344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e05f      	b.n	8007432 <USB_EPStartXfer+0x10bc>
 8007372:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007376:	2b3e      	cmp	r3, #62	; 0x3e
 8007378:	d818      	bhi.n	80073ac <USB_EPStartXfer+0x1036>
 800737a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d004      	beq.n	800739a <USB_EPStartXfer+0x1024>
 8007390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007394:	3301      	adds	r3, #1
 8007396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	e042      	b.n	8007432 <USB_EPStartXfer+0x10bc>
 80073ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <USB_EPStartXfer+0x1056>
 80073c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	029b      	lsls	r3, r3, #10
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	e024      	b.n	8007432 <USB_EPStartXfer+0x10bc>
 80073e8:	463b      	mov	r3, r7
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d11f      	bne.n	8007432 <USB_EPStartXfer+0x10bc>
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007402:	b29b      	uxth	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800740a:	4413      	add	r3, r2
 800740c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	00da      	lsls	r2, r3, #3
 8007418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800741c:	4413      	add	r3, r2
 800741e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800742a:	b29a      	uxth	r2, r3
 800742c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	1d3b      	adds	r3, r7, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800743a:	463b      	mov	r3, r7
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d16f      	bne.n	8007524 <USB_EPStartXfer+0x11ae>
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800744c:	1d3b      	adds	r3, r7, #4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007454:	b29b      	uxth	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800745c:	4413      	add	r3, r2
 800745e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007462:	463b      	mov	r3, r7
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	00da      	lsls	r2, r3, #3
 800746a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800746e:	4413      	add	r3, r2
 8007470:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007478:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800747c:	2b00      	cmp	r3, #0
 800747e:	d116      	bne.n	80074ae <USB_EPStartXfer+0x1138>
 8007480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007492:	801a      	strh	r2, [r3, #0]
 8007494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	e05e      	b.n	800756c <USB_EPStartXfer+0x11f6>
 80074ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074b2:	2b3e      	cmp	r3, #62	; 0x3e
 80074b4:	d818      	bhi.n	80074e8 <USB_EPStartXfer+0x1172>
 80074b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <USB_EPStartXfer+0x1160>
 80074cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d0:	3301      	adds	r3, #1
 80074d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074da:	b29b      	uxth	r3, r3
 80074dc:	029b      	lsls	r3, r3, #10
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e041      	b.n	800756c <USB_EPStartXfer+0x11f6>
 80074e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USB_EPStartXfer+0x1192>
 80074fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007502:	3b01      	subs	r3, #1
 8007504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800750c:	b29b      	uxth	r3, r3
 800750e:	029b      	lsls	r3, r3, #10
 8007510:	b29b      	uxth	r3, r3
 8007512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	e023      	b.n	800756c <USB_EPStartXfer+0x11f6>
 8007524:	463b      	mov	r3, r7
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	785b      	ldrb	r3, [r3, #1]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d11e      	bne.n	800756c <USB_EPStartXfer+0x11f6>
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007536:	b29b      	uxth	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800753e:	4413      	add	r3, r2
 8007540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007544:	463b      	mov	r3, r7
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00da      	lsls	r2, r3, #3
 800754c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007550:	4413      	add	r3, r2
 8007552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800755a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e001      	b.n	800756c <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e02e      	b.n	80075ca <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	463b      	mov	r3, r7
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800758a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800758e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007592:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007596:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800759a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800759e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	463b      	mov	r3, r7
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80075b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d020      	beq.n	8007628 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fc:	81bb      	strh	r3, [r7, #12]
 80075fe:	89bb      	ldrh	r3, [r7, #12]
 8007600:	f083 0310 	eor.w	r3, r3, #16
 8007604:	81bb      	strh	r3, [r7, #12]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	89bb      	ldrh	r3, [r7, #12]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
 8007626:	e01f      	b.n	8007668 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	81fb      	strh	r3, [r7, #14]
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007646:	81fb      	strh	r3, [r7, #14]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	441a      	add	r2, r3
 8007652:	89fb      	ldrh	r3, [r7, #14]
 8007654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007664:	b29b      	uxth	r3, r3
 8007666:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	7b1b      	ldrb	r3, [r3, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 809d 	bne.w	80077c4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d04c      	beq.n	800772c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	823b      	strh	r3, [r7, #16]
 80076a0:	8a3b      	ldrh	r3, [r7, #16]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01b      	beq.n	80076e2 <USB_EPClearStall+0x6c>
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c0:	81fb      	strh	r3, [r7, #14]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	89fb      	ldrh	r3, [r7, #14]
 80076ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	78db      	ldrb	r3, [r3, #3]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d06c      	beq.n	80077c4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007700:	81bb      	strh	r3, [r7, #12]
 8007702:	89bb      	ldrh	r3, [r7, #12]
 8007704:	f083 0320 	eor.w	r3, r3, #32
 8007708:	81bb      	strh	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	441a      	add	r2, r3
 8007714:	89bb      	ldrh	r3, [r7, #12]
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]
 800772a:	e04b      	b.n	80077c4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	82fb      	strh	r3, [r7, #22]
 800773a:	8afb      	ldrh	r3, [r7, #22]
 800773c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01b      	beq.n	800777c <USB_EPClearStall+0x106>
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775a:	82bb      	strh	r3, [r7, #20]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	8abb      	ldrh	r3, [r7, #20]
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	827b      	strh	r3, [r7, #18]
 8007794:	8a7b      	ldrh	r3, [r7, #18]
 8007796:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800779a:	827b      	strh	r3, [r7, #18]
 800779c:	8a7b      	ldrh	r3, [r7, #18]
 800779e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077a2:	827b      	strh	r3, [r7, #18]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	441a      	add	r2, r3
 80077ae:	8a7b      	ldrh	r3, [r7, #18]
 80077b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2280      	movs	r2, #128	; 0x80
 80077e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007836:	b29b      	uxth	r3, r3
 8007838:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800783a:	68fb      	ldr	r3, [r7, #12]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007860:	b480      	push	{r7}
 8007862:	b08d      	sub	sp, #52	; 0x34
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4611      	mov	r1, r2
 800786c:	461a      	mov	r2, r3
 800786e:	460b      	mov	r3, r1
 8007870:	80fb      	strh	r3, [r7, #6]
 8007872:	4613      	mov	r3, r2
 8007874:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007876:	88bb      	ldrh	r3, [r7, #4]
 8007878:	3301      	adds	r3, #1
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007890:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007896:	e01b      	b.n	80078d0 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	3301      	adds	r3, #1
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	3302      	adds	r3, #2
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	3301      	adds	r3, #1
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	3b01      	subs	r3, #1
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e0      	bne.n	8007898 <USB_WritePMA+0x38>
  }
}
 80078d6:	bf00      	nop
 80078d8:	3734      	adds	r7, #52	; 0x34
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b08b      	sub	sp, #44	; 0x2c
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	4611      	mov	r1, r2
 80078ee:	461a      	mov	r2, r3
 80078f0:	460b      	mov	r3, r1
 80078f2:	80fb      	strh	r3, [r7, #6]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078f8:	88bb      	ldrh	r3, [r7, #4]
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007912:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
 8007918:	e018      	b.n	800794c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	3302      	adds	r3, #2
 8007926:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	b2da      	uxtb	r2, r3
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	3b01      	subs	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e3      	bne.n	800791a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007952:	88bb      	ldrh	r3, [r7, #4]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	701a      	strb	r2, [r3, #0]
  }
}
 800796e:	bf00      	nop
 8007970:	372c      	adds	r7, #44	; 0x2c
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007986:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800798a:	f002 f89d 	bl	8009ac8 <USBD_static_malloc>
 800798e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800799e:	2302      	movs	r3, #2
 80079a0:	e066      	b.n	8007a70 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7c1b      	ldrb	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d119      	bne.n	80079e6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079b6:	2202      	movs	r2, #2
 80079b8:	2181      	movs	r1, #129	; 0x81
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 ff29 	bl	8009812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ca:	2202      	movs	r2, #2
 80079cc:	2101      	movs	r1, #1
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 ff1f 	bl	8009812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2210      	movs	r2, #16
 80079e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80079e4:	e016      	b.n	8007a14 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	2202      	movs	r2, #2
 80079ea:	2181      	movs	r1, #129	; 0x81
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 ff10 	bl	8009812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	2202      	movs	r2, #2
 80079fc:	2101      	movs	r1, #1
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 ff07 	bl	8009812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a14:	2308      	movs	r3, #8
 8007a16:	2203      	movs	r2, #3
 8007a18:	2182      	movs	r1, #130	; 0x82
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f001 fef9 	bl	8009812 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	7c1b      	ldrb	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a54:	2101      	movs	r1, #1
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 ffcb 	bl	80099f2 <USBD_LL_PrepareReceive>
 8007a5c:	e007      	b.n	8007a6e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a64:	2340      	movs	r3, #64	; 0x40
 8007a66:	2101      	movs	r1, #1
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 ffc2 	bl	80099f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a84:	2181      	movs	r1, #129	; 0x81
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fee9 	bl	800985e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a92:	2101      	movs	r1, #1
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fee2 	bl	800985e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007aa2:	2182      	movs	r1, #130	; 0x82
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 feda 	bl	800985e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00e      	beq.n	8007ae2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f002 f805 	bl	8009ae4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007afc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d03a      	beq.n	8007b8c <USBD_CDC_Setup+0xa0>
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	f040 8097 	bne.w	8007c4a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d029      	beq.n	8007b78 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	b25b      	sxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da11      	bge.n	8007b52 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007b3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	88d2      	ldrh	r2, [r2, #6]
 8007b40:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b42:	6939      	ldr	r1, [r7, #16]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	88db      	ldrh	r3, [r3, #6]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fa8d 	bl	800906a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007b50:	e082      	b.n	8007c58 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	785a      	ldrb	r2, [r3, #1]
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b68:	6939      	ldr	r1, [r7, #16]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	88db      	ldrh	r3, [r3, #6]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 faa6 	bl	80090c2 <USBD_CtlPrepareRx>
      break;
 8007b76:	e06f      	b.n	8007c58 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	7850      	ldrb	r0, [r2, #1]
 8007b84:	2200      	movs	r2, #0
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	4798      	blx	r3
      break;
 8007b8a:	e065      	b.n	8007c58 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b0b      	cmp	r3, #11
 8007b92:	d84f      	bhi.n	8007c34 <USBD_CDC_Setup+0x148>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_CDC_Setup+0xb0>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007c43 	.word	0x08007c43
 8007ba4:	08007c35 	.word	0x08007c35
 8007ba8:	08007c35 	.word	0x08007c35
 8007bac:	08007c35 	.word	0x08007c35
 8007bb0:	08007c35 	.word	0x08007c35
 8007bb4:	08007c35 	.word	0x08007c35
 8007bb8:	08007c35 	.word	0x08007c35
 8007bbc:	08007c35 	.word	0x08007c35
 8007bc0:	08007c35 	.word	0x08007c35
 8007bc4:	08007bf5 	.word	0x08007bf5
 8007bc8:	08007c1d 	.word	0x08007c1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d107      	bne.n	8007be6 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fa43 	bl	800906a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007be4:	e030      	b.n	8007c48 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f9cd 	bl	8008f88 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf2:	e029      	b.n	8007c48 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d107      	bne.n	8007c0e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bfe:	f107 030f 	add.w	r3, r7, #15
 8007c02:	2201      	movs	r2, #1
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fa2f 	bl	800906a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c0c:	e01c      	b.n	8007c48 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f9b9 	bl	8008f88 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c16:	2303      	movs	r3, #3
 8007c18:	75fb      	strb	r3, [r7, #23]
          break;
 8007c1a:	e015      	b.n	8007c48 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d00f      	beq.n	8007c46 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f9ad 	bl	8008f88 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c32:	e008      	b.n	8007c46 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 f9a6 	bl	8008f88 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c40:	e002      	b.n	8007c48 <USBD_CDC_Setup+0x15c>
          break;
 8007c42:	bf00      	nop
 8007c44:	e008      	b.n	8007c58 <USBD_CDC_Setup+0x16c>
          break;
 8007c46:	bf00      	nop
      }
      break;
 8007c48:	e006      	b.n	8007c58 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f99b 	bl	8008f88 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	75fb      	strb	r3, [r7, #23]
      break;
 8007c56:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e04f      	b.n	8007d26 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	3318      	adds	r3, #24
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d029      	beq.n	8007cf8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	3318      	adds	r3, #24
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	78f9      	ldrb	r1, [r7, #3]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	4403      	add	r3, r0
 8007cc4:	3338      	adds	r3, #56	; 0x38
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ccc:	fb03 f301 	mul.w	r3, r3, r1
 8007cd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d110      	bne.n	8007cf8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cea:	78f9      	ldrb	r1, [r7, #3]
 8007cec:	2300      	movs	r3, #0
 8007cee:	2200      	movs	r2, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fe5d 	bl	80099b0 <USBD_LL_Transmit>
 8007cf6:	e015      	b.n	8007d24 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e015      	b.n	8007d7c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fe6d 	bl	8009a34 <USBD_LL_GetRxDataSize>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d76:	4611      	mov	r1, r2
 8007d78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d92:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <USBD_CDC_EP0_RxReady+0x46>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007da4:	2bff      	cmp	r3, #255	; 0xff
 8007da6:	d010      	beq.n	8007dca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007db6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dbe:	b292      	uxth	r2, r2
 8007dc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	22ff      	movs	r2, #255	; 0xff
 8007dc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2243      	movs	r2, #67	; 0x43
 8007de0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20000094 	.word	0x20000094

08007df4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2243      	movs	r2, #67	; 0x43
 8007e00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20000050 	.word	0x20000050

08007e14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2243      	movs	r2, #67	; 0x43
 8007e20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007e22:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	200000d8 	.word	0x200000d8

08007e34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	220a      	movs	r2, #10
 8007e40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e42:	4b03      	ldr	r3, [pc, #12]	; (8007e50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	2000000c 	.word	0x2000000c

08007e54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e004      	b.n	8007e72 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b087      	sub	sp, #28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e90:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e01a      	b.n	8007f30 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d114      	bne.n	8007f2e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f22:	2181      	movs	r1, #129	; 0x81
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fd43 	bl	80099b0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e016      	b.n	8007f84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7c1b      	ldrb	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f68:	2101      	movs	r1, #1
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 fd41 	bl	80099f2 <USBD_LL_PrepareReceive>
 8007f70:	e007      	b.n	8007f82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f78:	2340      	movs	r3, #64	; 0x40
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 fd38 	bl	80099f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e01f      	b.n	8007fe4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	79fa      	ldrb	r2, [r7, #7]
 8007fd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 fb9f 	bl	800971c <USBD_LL_Init>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008000:	2303      	movs	r3, #3
 8008002:	e016      	b.n	8008032 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	f107 020e 	add.w	r2, r7, #14
 8008024:	4610      	mov	r0, r2
 8008026:	4798      	blx	r3
 8008028:	4602      	mov	r2, r0
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fbca 	bl	80097dc <USBD_LL_Start>
 8008048:	4603      	mov	r3, r0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	4611      	mov	r1, r2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	4611      	mov	r1, r2
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
  }

  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 ff16 	bl	8008f14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	2b01      	cmp	r3, #1
 800810a:	d00e      	beq.n	800812a <USBD_LL_SetupStage+0x5a>
 800810c:	2b01      	cmp	r3, #1
 800810e:	d302      	bcc.n	8008116 <USBD_LL_SetupStage+0x46>
 8008110:	2b02      	cmp	r3, #2
 8008112:	d014      	beq.n	800813e <USBD_LL_SetupStage+0x6e>
 8008114:	e01d      	b.n	8008152 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9d6 	bl	80084d0 <USBD_StdDevReq>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
      break;
 8008128:	e020      	b.n	800816c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa3a 	bl	80085ac <USBD_StdItfReq>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]
      break;
 800813c:	e016      	b.n	800816c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa76 	bl	8008638 <USBD_StdEPReq>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]
      break;
 8008150:	e00c      	b.n	800816c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800815c:	b2db      	uxtb	r3, r3
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 fb9b 	bl	800989c <USBD_LL_StallEP>
 8008166:	4603      	mov	r3, r0
 8008168:	73fb      	strb	r3, [r7, #15]
      break;
 800816a:	bf00      	nop
  }

  return ret;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	460b      	mov	r3, r1
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d137      	bne.n	80081fa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008190:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008198:	2b03      	cmp	r3, #3
 800819a:	d14a      	bne.n	8008232 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d913      	bls.n	80081d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	1ad2      	subs	r2, r2, r3
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	4293      	cmp	r3, r2
 80081c0:	bf28      	it	cs
 80081c2:	4613      	movcs	r3, r2
 80081c4:	461a      	mov	r2, r3
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 ff97 	bl	80090fc <USBD_CtlContinueRx>
 80081ce:	e030      	b.n	8008232 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d105      	bne.n	80081f2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 ff93 	bl	800911e <USBD_CtlSendStatus>
 80081f8:	e01b      	b.n	8008232 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d013      	beq.n	800822e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800820c:	2b03      	cmp	r3, #3
 800820e:	d10e      	bne.n	800822e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	7afa      	ldrb	r2, [r7, #11]
 800821a:	4611      	mov	r1, r2
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	4798      	blx	r3
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	e002      	b.n	8008234 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800822e:	2303      	movs	r3, #3
 8008230:	e000      	b.n	8008234 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	460b      	mov	r3, r1
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800824a:	7afb      	ldrb	r3, [r7, #11]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d16a      	bne.n	8008326 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3314      	adds	r3, #20
 8008254:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800825c:	2b02      	cmp	r3, #2
 800825e:	d155      	bne.n	800830c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	429a      	cmp	r2, r3
 800826a:	d914      	bls.n	8008296 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	1ad2      	subs	r2, r2, r3
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	461a      	mov	r2, r3
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 ff0c 	bl	80090a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008288:	2300      	movs	r3, #0
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f001 fbaf 	bl	80099f2 <USBD_LL_PrepareReceive>
 8008294:	e03a      	b.n	800830c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d11c      	bne.n	80082dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d316      	bcc.n	80082dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d20f      	bcs.n	80082dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082bc:	2200      	movs	r2, #0
 80082be:	2100      	movs	r1, #0
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 feed 	bl	80090a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ce:	2300      	movs	r3, #0
 80082d0:	2200      	movs	r2, #0
 80082d2:	2100      	movs	r1, #0
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f001 fb8c 	bl	80099f2 <USBD_LL_PrepareReceive>
 80082da:	e017      	b.n	800830c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d105      	bne.n	80082fe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f001 facb 	bl	800989c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 ff1c 	bl	8009144 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008312:	2b01      	cmp	r3, #1
 8008314:	d123      	bne.n	800835e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff fe9b 	bl	8008052 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008324:	e01b      	b.n	800835e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d013      	beq.n	800835a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008338:	2b03      	cmp	r3, #3
 800833a:	d10e      	bne.n	800835a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	7afa      	ldrb	r2, [r7, #11]
 8008346:	4611      	mov	r1, r2
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	4798      	blx	r3
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	e002      	b.n	8008360 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800835a:	2303      	movs	r3, #3
 800835c:	e000      	b.n	8008360 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6852      	ldr	r2, [r2, #4]
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	4611      	mov	r1, r2
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083ac:	2340      	movs	r3, #64	; 0x40
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fa2d 	bl	8009812 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2240      	movs	r2, #64	; 0x40
 80083c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	2200      	movs	r2, #0
 80083cc:	2180      	movs	r1, #128	; 0x80
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fa1f 	bl	8009812 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2240      	movs	r2, #64	; 0x40
 80083de:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2204      	movs	r2, #4
 8008422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008442:	2b04      	cmp	r3, #4
 8008444:	d105      	bne.n	8008452 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846e:	2b03      	cmp	r3, #3
 8008470:	d10b      	bne.n	800848a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	3301      	adds	r3, #1
 80084aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084b2:	8a3b      	ldrh	r3, [r7, #16]
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	b21a      	sxth	r2, r3
 80084b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084bc:	4313      	orrs	r3, r2
 80084be:	b21b      	sxth	r3, r3
 80084c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084c2:	89fb      	ldrh	r3, [r7, #14]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	371c      	adds	r7, #28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d004      	beq.n	80084f4 <USBD_StdDevReq+0x24>
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d002      	beq.n	80084f4 <USBD_StdDevReq+0x24>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <USBD_StdDevReq+0x38>
 80084f2:	e050      	b.n	8008596 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
    break;
 8008506:	e04b      	b.n	80085a0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b09      	cmp	r3, #9
 800850e:	d83c      	bhi.n	800858a <USBD_StdDevReq+0xba>
 8008510:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <USBD_StdDevReq+0x48>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	0800856d 	.word	0x0800856d
 800851c:	08008581 	.word	0x08008581
 8008520:	0800858b 	.word	0x0800858b
 8008524:	08008577 	.word	0x08008577
 8008528:	0800858b 	.word	0x0800858b
 800852c:	0800854b 	.word	0x0800854b
 8008530:	08008541 	.word	0x08008541
 8008534:	0800858b 	.word	0x0800858b
 8008538:	08008563 	.word	0x08008563
 800853c:	08008555 	.word	0x08008555
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f9d0 	bl	80088e8 <USBD_GetDescriptor>
      break;
 8008548:	e024      	b.n	8008594 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb5f 	bl	8008c10 <USBD_SetAddress>
      break;
 8008552:	e01f      	b.n	8008594 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fb9c 	bl	8008c94 <USBD_SetConfig>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
      break;
 8008560:	e018      	b.n	8008594 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc39 	bl	8008ddc <USBD_GetConfig>
      break;
 800856a:	e013      	b.n	8008594 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fc68 	bl	8008e44 <USBD_GetStatus>
      break;
 8008574:	e00e      	b.n	8008594 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc96 	bl	8008eaa <USBD_SetFeature>
      break;
 800857e:	e009      	b.n	8008594 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fca5 	bl	8008ed2 <USBD_ClrFeature>
      break;
 8008588:	e004      	b.n	8008594 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fcfb 	bl	8008f88 <USBD_CtlError>
      break;
 8008592:	bf00      	nop
    }
    break;
 8008594:	e004      	b.n	80085a0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fcf5 	bl	8008f88 <USBD_CtlError>
    break;
 800859e:	bf00      	nop
  }

  return ret;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop

080085ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d003      	beq.n	80085ce <USBD_StdItfReq+0x22>
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d001      	beq.n	80085ce <USBD_StdItfReq+0x22>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d12a      	bne.n	8008624 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d4:	3b01      	subs	r3, #1
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d81d      	bhi.n	8008616 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	889b      	ldrh	r3, [r3, #4]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d813      	bhi.n	800860c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d110      	bne.n	8008620 <USBD_StdItfReq+0x74>
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10d      	bne.n	8008620 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fd8a 	bl	800911e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800860a:	e009      	b.n	8008620 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fcba 	bl	8008f88 <USBD_CtlError>
      break;
 8008614:	e004      	b.n	8008620 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fcb5 	bl	8008f88 <USBD_CtlError>
      break;
 800861e:	e000      	b.n	8008622 <USBD_StdItfReq+0x76>
      break;
 8008620:	bf00      	nop
    }
    break;
 8008622:	e004      	b.n	800862e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fcae 	bl	8008f88 <USBD_CtlError>
    break;
 800862c:	bf00      	nop
  }

  return ret;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	889b      	ldrh	r3, [r3, #4]
 800864a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008654:	2b20      	cmp	r3, #32
 8008656:	d004      	beq.n	8008662 <USBD_StdEPReq+0x2a>
 8008658:	2b40      	cmp	r3, #64	; 0x40
 800865a:	d002      	beq.n	8008662 <USBD_StdEPReq+0x2a>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00a      	beq.n	8008676 <USBD_StdEPReq+0x3e>
 8008660:	e137      	b.n	80088d2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
    break;
 8008674:	e132      	b.n	80088dc <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d03e      	beq.n	80086fc <USBD_StdEPReq+0xc4>
 800867e:	2b03      	cmp	r3, #3
 8008680:	d002      	beq.n	8008688 <USBD_StdEPReq+0x50>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d079      	beq.n	800877a <USBD_StdEPReq+0x142>
 8008686:	e11e      	b.n	80088c6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868e:	2b02      	cmp	r3, #2
 8008690:	d002      	beq.n	8008698 <USBD_StdEPReq+0x60>
 8008692:	2b03      	cmp	r3, #3
 8008694:	d015      	beq.n	80086c2 <USBD_StdEPReq+0x8a>
 8008696:	e02b      	b.n	80086f0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00c      	beq.n	80086b8 <USBD_StdEPReq+0x80>
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b80      	cmp	r3, #128	; 0x80
 80086a2:	d009      	beq.n	80086b8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f8f7 	bl	800989c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ae:	2180      	movs	r1, #128	; 0x80
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f8f3 	bl	800989c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086b6:	e020      	b.n	80086fa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc64 	bl	8008f88 <USBD_CtlError>
        break;
 80086c0:	e01b      	b.n	80086fa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	885b      	ldrh	r3, [r3, #2]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10e      	bne.n	80086e8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <USBD_StdEPReq+0xb0>
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b80      	cmp	r3, #128	; 0x80
 80086d4:	d008      	beq.n	80086e8 <USBD_StdEPReq+0xb0>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	88db      	ldrh	r3, [r3, #6]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 f8da 	bl	800989c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fd18 	bl	800911e <USBD_CtlSendStatus>

        break;
 80086ee:	e004      	b.n	80086fa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fc48 	bl	8008f88 <USBD_CtlError>
        break;
 80086f8:	bf00      	nop
      }
      break;
 80086fa:	e0e9      	b.n	80088d0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008702:	2b02      	cmp	r3, #2
 8008704:	d002      	beq.n	800870c <USBD_StdEPReq+0xd4>
 8008706:	2b03      	cmp	r3, #3
 8008708:	d015      	beq.n	8008736 <USBD_StdEPReq+0xfe>
 800870a:	e02f      	b.n	800876c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00c      	beq.n	800872c <USBD_StdEPReq+0xf4>
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b80      	cmp	r3, #128	; 0x80
 8008716:	d009      	beq.n	800872c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 f8bd 	bl	800989c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008722:	2180      	movs	r1, #128	; 0x80
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 f8b9 	bl	800989c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800872a:	e025      	b.n	8008778 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc2a 	bl	8008f88 <USBD_CtlError>
        break;
 8008734:	e020      	b.n	8008778 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d11b      	bne.n	8008776 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 f8c4 	bl	80098da <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fce3 	bl	800911e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
 8008766:	4603      	mov	r3, r0
 8008768:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800876a:	e004      	b.n	8008776 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fc0a 	bl	8008f88 <USBD_CtlError>
        break;
 8008774:	e000      	b.n	8008778 <USBD_StdEPReq+0x140>
        break;
 8008776:	bf00      	nop
      }
      break;
 8008778:	e0aa      	b.n	80088d0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008780:	2b02      	cmp	r3, #2
 8008782:	d002      	beq.n	800878a <USBD_StdEPReq+0x152>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d032      	beq.n	80087ee <USBD_StdEPReq+0x1b6>
 8008788:	e097      	b.n	80088ba <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <USBD_StdEPReq+0x168>
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d004      	beq.n	80087a0 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fbf5 	bl	8008f88 <USBD_CtlError>
          break;
 800879e:	e091      	b.n	80088c4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	da0b      	bge.n	80087c0 <USBD_StdEPReq+0x188>
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	3310      	adds	r3, #16
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4413      	add	r3, r2
 80087bc:	3304      	adds	r3, #4
 80087be:	e00b      	b.n	80087d8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4413      	add	r3, r2
 80087d6:	3304      	adds	r3, #4
 80087d8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2202      	movs	r2, #2
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fc3f 	bl	800906a <USBD_CtlSendData>
        break;
 80087ec:	e06a      	b.n	80088c4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80087ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da11      	bge.n	800881a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	f003 020f 	and.w	r2, r3, #15
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	3324      	adds	r3, #36	; 0x24
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d117      	bne.n	8008840 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fbb8 	bl	8008f88 <USBD_CtlError>
            break;
 8008818:	e054      	b.n	80088c4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d104      	bne.n	8008840 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fba5 	bl	8008f88 <USBD_CtlError>
            break;
 800883e:	e041      	b.n	80088c4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008844:	2b00      	cmp	r3, #0
 8008846:	da0b      	bge.n	8008860 <USBD_StdEPReq+0x228>
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	3310      	adds	r3, #16
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	4413      	add	r3, r2
 800885c:	3304      	adds	r3, #4
 800885e:	e00b      	b.n	8008878 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	3304      	adds	r3, #4
 8008878:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <USBD_StdEPReq+0x24e>
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	2b80      	cmp	r3, #128	; 0x80
 8008884:	d103      	bne.n	800888e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e00e      	b.n	80088ac <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 f840 	bl	8009918 <USBD_LL_IsStallEP>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2201      	movs	r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e002      	b.n	80088ac <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2202      	movs	r2, #2
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fbd9 	bl	800906a <USBD_CtlSendData>
          break;
 80088b8:	e004      	b.n	80088c4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fb63 	bl	8008f88 <USBD_CtlError>
        break;
 80088c2:	bf00      	nop
      }
      break;
 80088c4:	e004      	b.n	80088d0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fb5d 	bl	8008f88 <USBD_CtlError>
      break;
 80088ce:	bf00      	nop
    }
    break;
 80088d0:	e004      	b.n	80088dc <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fb57 	bl	8008f88 <USBD_CtlError>
    break;
 80088da:	bf00      	nop
  }

  return ret;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b01      	subs	r3, #1
 8008908:	2b0e      	cmp	r3, #14
 800890a:	f200 8152 	bhi.w	8008bb2 <USBD_GetDescriptor+0x2ca>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <USBD_GetDescriptor+0x2c>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008985 	.word	0x08008985
 8008918:	0800899d 	.word	0x0800899d
 800891c:	080089dd 	.word	0x080089dd
 8008920:	08008bb3 	.word	0x08008bb3
 8008924:	08008bb3 	.word	0x08008bb3
 8008928:	08008b53 	.word	0x08008b53
 800892c:	08008b7f 	.word	0x08008b7f
 8008930:	08008bb3 	.word	0x08008bb3
 8008934:	08008bb3 	.word	0x08008bb3
 8008938:	08008bb3 	.word	0x08008bb3
 800893c:	08008bb3 	.word	0x08008bb3
 8008940:	08008bb3 	.word	0x08008bb3
 8008944:	08008bb3 	.word	0x08008bb3
 8008948:	08008bb3 	.word	0x08008bb3
 800894c:	08008951 	.word	0x08008951
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008972:	e126      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fb06 	bl	8008f88 <USBD_CtlError>
      err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
    break;
 8008982:	e11e      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	7c12      	ldrb	r2, [r2, #16]
 8008990:	f107 0108 	add.w	r1, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
    break;
 800899a:	e112      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7c1b      	ldrb	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10d      	bne.n	80089c0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f107 0208 	add.w	r2, r7, #8
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80089be:	e100      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	f107 0208 	add.w	r2, r7, #8
 80089cc:	4610      	mov	r0, r2
 80089ce:	4798      	blx	r3
 80089d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	2202      	movs	r2, #2
 80089d8:	701a      	strb	r2, [r3, #0]
    break;
 80089da:	e0f2      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	885b      	ldrh	r3, [r3, #2]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	f200 80ac 	bhi.w	8008b40 <USBD_GetDescriptor+0x258>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <USBD_GetDescriptor+0x108>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a09 	.word	0x08008a09
 80089f4:	08008a3d 	.word	0x08008a3d
 80089f8:	08008a71 	.word	0x08008a71
 80089fc:	08008aa5 	.word	0x08008aa5
 8008a00:	08008ad9 	.word	0x08008ad9
 8008a04:	08008b0d 	.word	0x08008b0d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2a:	e091      	b.n	8008b50 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 faaa 	bl	8008f88 <USBD_CtlError>
        err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3a:	e089      	b.n	8008b50 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a5e:	e077      	b.n	8008b50 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa90 	bl	8008f88 <USBD_CtlError>
        err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6e:	e06f      	b.n	8008b50 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a92:	e05d      	b.n	8008b50 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa76 	bl	8008f88 <USBD_CtlError>
        err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa2:	e055      	b.n	8008b50 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	7c12      	ldrb	r2, [r2, #16]
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
 8008ac4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac6:	e043      	b.n	8008b50 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa5c 	bl	8008f88 <USBD_CtlError>
        err++;
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad6:	e03b      	b.n	8008b50 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7c12      	ldrb	r2, [r2, #16]
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008afa:	e029      	b.n	8008b50 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa42 	bl	8008f88 <USBD_CtlError>
        err++;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	3301      	adds	r3, #1
 8008b08:	72fb      	strb	r3, [r7, #11]
      break;
 8008b0a:	e021      	b.n	8008b50 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	7c12      	ldrb	r2, [r2, #16]
 8008b24:	f107 0108 	add.w	r1, r7, #8
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b2e:	e00f      	b.n	8008b50 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa28 	bl	8008f88 <USBD_CtlError>
        err++;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3e:	e007      	b.n	8008b50 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa20 	bl	8008f88 <USBD_CtlError>
      err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008b4e:	bf00      	nop
    }
    break;
 8008b50:	e037      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7c1b      	ldrb	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b62:	f107 0208 	add.w	r2, r7, #8
 8008b66:	4610      	mov	r0, r2
 8008b68:	4798      	blx	r3
 8008b6a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b6c:	e029      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fa09 	bl	8008f88 <USBD_CtlError>
      err++;
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	72fb      	strb	r3, [r7, #11]
    break;
 8008b7c:	e021      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7c1b      	ldrb	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10d      	bne.n	8008ba2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	f107 0208 	add.w	r2, r7, #8
 8008b92:	4610      	mov	r0, r2
 8008b94:	4798      	blx	r3
 8008b96:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	2207      	movs	r2, #7
 8008b9e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ba0:	e00f      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f9ef 	bl	8008f88 <USBD_CtlError>
      err++;
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	3301      	adds	r3, #1
 8008bae:	72fb      	strb	r3, [r7, #11]
    break;
 8008bb0:	e007      	b.n	8008bc2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f9e7 	bl	8008f88 <USBD_CtlError>
    err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
    break;
 8008bc0:	bf00      	nop
  }

  if (err != 0U)
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11e      	bne.n	8008c06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	88db      	ldrh	r3, [r3, #6]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d016      	beq.n	8008bfe <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008bd0:	893b      	ldrh	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00e      	beq.n	8008bf4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	88da      	ldrh	r2, [r3, #6]
 8008bda:	893b      	ldrh	r3, [r7, #8]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bf28      	it	cs
 8008be0:	4613      	movcs	r3, r2
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008be6:	893b      	ldrh	r3, [r7, #8]
 8008be8:	461a      	mov	r2, r3
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fa3c 	bl	800906a <USBD_CtlSendData>
 8008bf2:	e009      	b.n	8008c08 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9c6 	bl	8008f88 <USBD_CtlError>
 8008bfc:	e004      	b.n	8008c08 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa8d 	bl	800911e <USBD_CtlSendStatus>
 8008c04:	e000      	b.n	8008c08 <USBD_GetDescriptor+0x320>
    return;
 8008c06:	bf00      	nop
    }
  }
}
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop

08008c10 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	889b      	ldrh	r3, [r3, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d130      	bne.n	8008c84 <USBD_SetAddress+0x74>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	88db      	ldrh	r3, [r3, #6]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d12c      	bne.n	8008c84 <USBD_SetAddress+0x74>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c30:	d828      	bhi.n	8008c84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d104      	bne.n	8008c52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f99c 	bl	8008f88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	e01c      	b.n	8008c8c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	7bfa      	ldrb	r2, [r7, #15]
 8008c56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fe87 	bl	8009972 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fa5a 	bl	800911e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c78:	e008      	b.n	8008c8c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	e003      	b.n	8008c8c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f97e 	bl	8008f88 <USBD_CtlError>
  }
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	4b4b      	ldr	r3, [pc, #300]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cac:	4b4a      	ldr	r3, [pc, #296]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d905      	bls.n	8008cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f966 	bl	8008f88 <USBD_CtlError>
    return USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e087      	b.n	8008dd0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d002      	beq.n	8008cd0 <USBD_SetConfig+0x3c>
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d025      	beq.n	8008d1a <USBD_SetConfig+0x86>
 8008cce:	e071      	b.n	8008db4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008cd0:	4b41      	ldr	r3, [pc, #260]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01c      	beq.n	8008d12 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008cd8:	4b3f      	ldr	r3, [pc, #252]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce2:	4b3d      	ldr	r3, [pc, #244]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff f9bd 	bl	8008068 <USBD_SetClassConfig>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f944 	bl	8008f88 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d00:	e065      	b.n	8008dce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa0b 	bl	800911e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d10:	e05d      	b.n	8008dce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa03 	bl	800911e <USBD_CtlSendStatus>
    break;
 8008d18:	e059      	b.n	8008dce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008d1a:	4b2f      	ldr	r3, [pc, #188]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d112      	bne.n	8008d48 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008d2a:	4b2b      	ldr	r3, [pc, #172]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f7ff f9b0 	bl	80080a0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9ec 	bl	800911e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d46:	e042      	b.n	8008dce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008d48:	4b23      	ldr	r3, [pc, #140]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d02a      	beq.n	8008dac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff f99e 	bl	80080a0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d64:	4b1c      	ldr	r3, [pc, #112]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff f977 	bl	8008068 <USBD_SetClassConfig>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00f      	beq.n	8008da4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f8fe 	bl	8008f88 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f983 	bl	80080a0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008da2:	e014      	b.n	8008dce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f9ba 	bl	800911e <USBD_CtlSendStatus>
    break;
 8008daa:	e010      	b.n	8008dce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9b6 	bl	800911e <USBD_CtlSendStatus>
    break;
 8008db2:	e00c      	b.n	8008dce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8e6 	bl	8008f88 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <USBD_SetConfig+0x144>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff f96c 	bl	80080a0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	73fb      	strb	r3, [r7, #15]
    break;
 8008dcc:	bf00      	nop
  }

  return ret;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	200001d2 	.word	0x200001d2

08008ddc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d004      	beq.n	8008df8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f8c9 	bl	8008f88 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008df6:	e021      	b.n	8008e3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	db17      	blt.n	8008e32 <USBD_GetConfig+0x56>
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	dd02      	ble.n	8008e0c <USBD_GetConfig+0x30>
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d00b      	beq.n	8008e22 <USBD_GetConfig+0x46>
 8008e0a:	e012      	b.n	8008e32 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3308      	adds	r3, #8
 8008e16:	2201      	movs	r2, #1
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f925 	bl	800906a <USBD_CtlSendData>
      break;
 8008e20:	e00c      	b.n	8008e3c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	2201      	movs	r2, #1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f91d 	bl	800906a <USBD_CtlSendData>
      break;
 8008e30:	e004      	b.n	8008e3c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f8a7 	bl	8008f88 <USBD_CtlError>
      break;
 8008e3a:	bf00      	nop
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e54:	3b01      	subs	r3, #1
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d81e      	bhi.n	8008e98 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d004      	beq.n	8008e6c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f88f 	bl	8008f88 <USBD_CtlError>
      break;
 8008e6a:	e01a      	b.n	8008ea2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f043 0202 	orr.w	r2, r3, #2
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	330c      	adds	r3, #12
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f8ea 	bl	800906a <USBD_CtlSendData>
    break;
 8008e96:	e004      	b.n	8008ea2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f874 	bl	8008f88 <USBD_CtlError>
    break;
 8008ea0:	bf00      	nop
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	885b      	ldrh	r3, [r3, #2]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d106      	bne.n	8008eca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f92a 	bl	800911e <USBD_CtlSendStatus>
  }
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d80b      	bhi.n	8008f00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	885b      	ldrh	r3, [r3, #2]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d10c      	bne.n	8008f0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f910 	bl	800911e <USBD_CtlSendStatus>
      }
      break;
 8008efe:	e004      	b.n	8008f0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f840 	bl	8008f88 <USBD_CtlError>
      break;
 8008f08:	e000      	b.n	8008f0c <USBD_ClrFeature+0x3a>
      break;
 8008f0a:	bf00      	nop
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781a      	ldrb	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff faa8 	bl	8008494 <SWAPBYTE>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3301      	adds	r3, #1
 8008f56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff fa9b 	bl	8008494 <SWAPBYTE>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	461a      	mov	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff fa8e 	bl	8008494 <SWAPBYTE>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	80da      	strh	r2, [r3, #6]
}
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f92:	2180      	movs	r1, #128	; 0x80
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc81 	bl	800989c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fc7d 	bl	800989c <USBD_LL_StallEP>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b086      	sub	sp, #24
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d036      	beq.n	800902e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fc4:	6938      	ldr	r0, [r7, #16]
 8008fc6:	f000 f836 	bl	8009036 <USBD_GetLen>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	3301      	adds	r3, #1
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	4413      	add	r3, r2
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ffa:	e013      	b.n	8009024 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	4413      	add	r3, r2
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3301      	adds	r3, #1
 800900c:	613b      	str	r3, [r7, #16]
    idx++;
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	3301      	adds	r3, #1
 8009012:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	4413      	add	r3, r2
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
    idx++;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	3301      	adds	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e7      	bne.n	8008ffc <USBD_GetString+0x52>
 800902c:	e000      	b.n	8009030 <USBD_GetString+0x86>
    return;
 800902e:	bf00      	nop
  }
}
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009036:	b480      	push	{r7}
 8009038:	b085      	sub	sp, #20
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009046:	e005      	b.n	8009054 <USBD_GetLen+0x1e>
  {
    len++;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	3301      	adds	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	3301      	adds	r3, #1
 8009052:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1f5      	bne.n	8009048 <USBD_GetLen+0x12>
  }

  return len;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2202      	movs	r2, #2
 800907a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	2100      	movs	r1, #0
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fc8d 	bl	80099b0 <USBD_LL_Transmit>

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	2100      	movs	r1, #0
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fc7c 	bl	80099b0 <USBD_LL_Transmit>

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2203      	movs	r2, #3
 80090d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	2100      	movs	r1, #0
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 fc80 	bl	80099f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	2100      	movs	r1, #0
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fc6f 	bl	80099f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2204      	movs	r2, #4
 800912a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800912e:	2300      	movs	r3, #0
 8009130:	2200      	movs	r2, #0
 8009132:	2100      	movs	r1, #0
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc3b 	bl	80099b0 <USBD_LL_Transmit>

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2205      	movs	r2, #5
 8009150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009154:	2300      	movs	r3, #0
 8009156:	2200      	movs	r2, #0
 8009158:	2100      	movs	r1, #0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc49 	bl	80099f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009170:	2200      	movs	r2, #0
 8009172:	4912      	ldr	r1, [pc, #72]	; (80091bc <MX_USB_Device_Init+0x50>)
 8009174:	4812      	ldr	r0, [pc, #72]	; (80091c0 <MX_USB_Device_Init+0x54>)
 8009176:	f7fe ff09 	bl	8007f8c <USBD_Init>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009180:	f7f7 ff08 	bl	8000f94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009184:	490f      	ldr	r1, [pc, #60]	; (80091c4 <MX_USB_Device_Init+0x58>)
 8009186:	480e      	ldr	r0, [pc, #56]	; (80091c0 <MX_USB_Device_Init+0x54>)
 8009188:	f7fe ff30 	bl	8007fec <USBD_RegisterClass>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009192:	f7f7 feff 	bl	8000f94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009196:	490c      	ldr	r1, [pc, #48]	; (80091c8 <MX_USB_Device_Init+0x5c>)
 8009198:	4809      	ldr	r0, [pc, #36]	; (80091c0 <MX_USB_Device_Init+0x54>)
 800919a:	f7fe fe5b 	bl	8007e54 <USBD_CDC_RegisterInterface>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80091a4:	f7f7 fef6 	bl	8000f94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80091a8:	4805      	ldr	r0, [pc, #20]	; (80091c0 <MX_USB_Device_Init+0x54>)
 80091aa:	f7fe ff46 	bl	800803a <USBD_Start>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80091b4:	f7f7 feee 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80091b8:	bf00      	nop
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	20000130 	.word	0x20000130
 80091c0:	200006a4 	.word	0x200006a4
 80091c4:	20000018 	.word	0x20000018
 80091c8:	2000011c 	.word	0x2000011c

080091cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091d0:	2200      	movs	r2, #0
 80091d2:	4905      	ldr	r1, [pc, #20]	; (80091e8 <CDC_Init_FS+0x1c>)
 80091d4:	4805      	ldr	r0, [pc, #20]	; (80091ec <CDC_Init_FS+0x20>)
 80091d6:	f7fe fe52 	bl	8007e7e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091da:	4905      	ldr	r1, [pc, #20]	; (80091f0 <CDC_Init_FS+0x24>)
 80091dc:	4803      	ldr	r0, [pc, #12]	; (80091ec <CDC_Init_FS+0x20>)
 80091de:	f7fe fe67 	bl	8007eb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20000d5c 	.word	0x20000d5c
 80091ec:	200006a4 	.word	0x200006a4
 80091f0:	20000974 	.word	0x20000974

080091f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
 8009210:	4613      	mov	r3, r2
 8009212:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b23      	cmp	r3, #35	; 0x23
 8009218:	d84a      	bhi.n	80092b0 <CDC_Control_FS+0xac>
 800921a:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <CDC_Control_FS+0x1c>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	080092b1 	.word	0x080092b1
 8009224:	080092b1 	.word	0x080092b1
 8009228:	080092b1 	.word	0x080092b1
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080092b1 	.word	0x080092b1
 8009234:	080092b1 	.word	0x080092b1
 8009238:	080092b1 	.word	0x080092b1
 800923c:	080092b1 	.word	0x080092b1
 8009240:	080092b1 	.word	0x080092b1
 8009244:	080092b1 	.word	0x080092b1
 8009248:	080092b1 	.word	0x080092b1
 800924c:	080092b1 	.word	0x080092b1
 8009250:	080092b1 	.word	0x080092b1
 8009254:	080092b1 	.word	0x080092b1
 8009258:	080092b1 	.word	0x080092b1
 800925c:	080092b1 	.word	0x080092b1
 8009260:	080092b1 	.word	0x080092b1
 8009264:	080092b1 	.word	0x080092b1
 8009268:	080092b1 	.word	0x080092b1
 800926c:	080092b1 	.word	0x080092b1
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
 8009278:	080092b1 	.word	0x080092b1
 800927c:	080092b1 	.word	0x080092b1
 8009280:	080092b1 	.word	0x080092b1
 8009284:	080092b1 	.word	0x080092b1
 8009288:	080092b1 	.word	0x080092b1
 800928c:	080092b1 	.word	0x080092b1
 8009290:	080092b1 	.word	0x080092b1
 8009294:	080092b1 	.word	0x080092b1
 8009298:	080092b1 	.word	0x080092b1
 800929c:	080092b1 	.word	0x080092b1
 80092a0:	080092b1 	.word	0x080092b1
 80092a4:	080092b1 	.word	0x080092b1
 80092a8:	080092b1 	.word	0x080092b1
 80092ac:	080092b1 	.word	0x080092b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092b0:	bf00      	nop
  }

  return (USBD_OK);
 80092b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7f6 ffa3 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4805      	ldr	r0, [pc, #20]	; (80092ec <CDC_Receive_FS+0x2c>)
 80092d6:	f7fe fdeb 	bl	8007eb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092da:	4804      	ldr	r0, [pc, #16]	; (80092ec <CDC_Receive_FS+0x2c>)
 80092dc:	f7fe fe2c 	bl	8007f38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200006a4 	.word	0x200006a4

080092f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009300:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <CDC_Transmit_FS+0x48>)
 8009302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009306:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009312:	2301      	movs	r3, #1
 8009314:	e00b      	b.n	800932e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009316:	887b      	ldrh	r3, [r7, #2]
 8009318:	461a      	mov	r2, r3
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4806      	ldr	r0, [pc, #24]	; (8009338 <CDC_Transmit_FS+0x48>)
 800931e:	f7fe fdae 	bl	8007e7e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009322:	4805      	ldr	r0, [pc, #20]	; (8009338 <CDC_Transmit_FS+0x48>)
 8009324:	f7fe fdd8 	bl	8007ed8 <USBD_CDC_TransmitPacket>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200006a4 	.word	0x200006a4

0800933c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4613      	mov	r3, r2
 8009348:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800934e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009352:	4618      	mov	r0, r3
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
	...

08009360 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2212      	movs	r2, #18
 8009370:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009372:	4b03      	ldr	r3, [pc, #12]	; (8009380 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000150 	.word	0x20000150

08009384 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2204      	movs	r2, #4
 8009394:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009396:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	20000164 	.word	0x20000164

080093a8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d105      	bne.n	80093c6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4907      	ldr	r1, [pc, #28]	; (80093dc <USBD_CDC_ProductStrDescriptor+0x34>)
 80093be:	4808      	ldr	r0, [pc, #32]	; (80093e0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80093c0:	f7ff fdf3 	bl	8008faa <USBD_GetString>
 80093c4:	e004      	b.n	80093d0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4904      	ldr	r1, [pc, #16]	; (80093dc <USBD_CDC_ProductStrDescriptor+0x34>)
 80093ca:	4805      	ldr	r0, [pc, #20]	; (80093e0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80093cc:	f7ff fded 	bl	8008faa <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20001144 	.word	0x20001144
 80093e0:	08009be4 	.word	0x08009be4

080093e4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	4904      	ldr	r1, [pc, #16]	; (8009404 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80093f4:	4804      	ldr	r0, [pc, #16]	; (8009408 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80093f6:	f7ff fdd8 	bl	8008faa <USBD_GetString>
  return USBD_StrDesc;
 80093fa:	4b02      	ldr	r3, [pc, #8]	; (8009404 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20001144 	.word	0x20001144
 8009408:	08009bfc 	.word	0x08009bfc

0800940c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	221a      	movs	r2, #26
 800941c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800941e:	f000 f843 	bl	80094a8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009422:	4b02      	ldr	r3, [pc, #8]	; (800942c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20000168 	.word	0x20000168

08009430 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4907      	ldr	r1, [pc, #28]	; (8009464 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009446:	4808      	ldr	r0, [pc, #32]	; (8009468 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009448:	f7ff fdaf 	bl	8008faa <USBD_GetString>
 800944c:	e004      	b.n	8009458 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4904      	ldr	r1, [pc, #16]	; (8009464 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009452:	4805      	ldr	r0, [pc, #20]	; (8009468 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009454:	f7ff fda9 	bl	8008faa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009458:	4b02      	ldr	r3, [pc, #8]	; (8009464 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20001144 	.word	0x20001144
 8009468:	08009c10 	.word	0x08009c10

0800946c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d105      	bne.n	800948a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	4907      	ldr	r1, [pc, #28]	; (80094a0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009482:	4808      	ldr	r0, [pc, #32]	; (80094a4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009484:	f7ff fd91 	bl	8008faa <USBD_GetString>
 8009488:	e004      	b.n	8009494 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	4904      	ldr	r1, [pc, #16]	; (80094a0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800948e:	4805      	ldr	r0, [pc, #20]	; (80094a4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009490:	f7ff fd8b 	bl	8008faa <USBD_GetString>
  }
  return USBD_StrDesc;
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20001144 	.word	0x20001144
 80094a4:	08009c1c 	.word	0x08009c1c

080094a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <Get_SerialNum+0x44>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094b4:	4b0e      	ldr	r3, [pc, #56]	; (80094f0 <Get_SerialNum+0x48>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094ba:	4b0e      	ldr	r3, [pc, #56]	; (80094f4 <Get_SerialNum+0x4c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4413      	add	r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d009      	beq.n	80094e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094ce:	2208      	movs	r2, #8
 80094d0:	4909      	ldr	r1, [pc, #36]	; (80094f8 <Get_SerialNum+0x50>)
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 f814 	bl	8009500 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094d8:	2204      	movs	r2, #4
 80094da:	4908      	ldr	r1, [pc, #32]	; (80094fc <Get_SerialNum+0x54>)
 80094dc:	68b8      	ldr	r0, [r7, #8]
 80094de:	f000 f80f 	bl	8009500 <IntToUnicode>
  }
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	1fff7590 	.word	0x1fff7590
 80094f0:	1fff7594 	.word	0x1fff7594
 80094f4:	1fff7598 	.word	0x1fff7598
 80094f8:	2000016a 	.word	0x2000016a
 80094fc:	2000017a 	.word	0x2000017a

08009500 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009512:	2300      	movs	r3, #0
 8009514:	75fb      	strb	r3, [r7, #23]
 8009516:	e027      	b.n	8009568 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	0f1b      	lsrs	r3, r3, #28
 800951c:	2b09      	cmp	r3, #9
 800951e:	d80b      	bhi.n	8009538 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	0f1b      	lsrs	r3, r3, #28
 8009524:	b2da      	uxtb	r2, r3
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	4619      	mov	r1, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	440b      	add	r3, r1
 8009530:	3230      	adds	r2, #48	; 0x30
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
 8009536:	e00a      	b.n	800954e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	0f1b      	lsrs	r3, r3, #28
 800953c:	b2da      	uxtb	r2, r3
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	4619      	mov	r1, r3
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	440b      	add	r3, r1
 8009548:	3237      	adds	r2, #55	; 0x37
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	3301      	adds	r3, #1
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	4413      	add	r3, r2
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	3301      	adds	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
 8009568:	7dfa      	ldrb	r2, [r7, #23]
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	429a      	cmp	r2, r3
 800956e:	d3d3      	bcc.n	8009518 <IntToUnicode+0x18>
  }
}
 8009570:	bf00      	nop
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a0d      	ldr	r2, [pc, #52]	; (80095c0 <HAL_PCD_MspInit+0x44>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d113      	bne.n	80095b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800958e:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <HAL_PCD_MspInit+0x48>)
 8009590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009592:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <HAL_PCD_MspInit+0x48>)
 8009594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009598:	6593      	str	r3, [r2, #88]	; 0x58
 800959a:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <HAL_PCD_MspInit+0x48>)
 800959c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	2014      	movs	r0, #20
 80095ac:	f7f8 f92b 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80095b0:	2014      	movs	r0, #20
 80095b2:	f7f8 f942 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	40005c00 	.word	0x40005c00
 80095c4:	40021000 	.word	0x40021000

080095c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe fd76 	bl	80080d0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	440b      	add	r3, r1
 800960c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	4619      	mov	r1, r3
 8009616:	f7fe fdae 	bl	8008176 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009634:	78fa      	ldrb	r2, [r7, #3]
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	440b      	add	r3, r1
 8009642:	333c      	adds	r3, #60	; 0x3c
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	4619      	mov	r1, r3
 800964a:	f7fe fdf7 	bl	800823c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800964e:	bf00      	nop
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fefb 	bl	8008460 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800967a:	2301      	movs	r3, #1
 800967c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d001      	beq.n	800968a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009686:	f7f7 fc85 	bl	8000f94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009690:	7bfa      	ldrb	r2, [r7, #15]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe fea8 	bl	80083ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe fe61 	bl	8008368 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fea3 	bl	800840a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096cc:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <HAL_PCD_SuspendCallback+0x30>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	4a03      	ldr	r2, [pc, #12]	; (80096e0 <HAL_PCD_SuspendCallback+0x30>)
 80096d2:	f043 0306 	orr.w	r3, r3, #6
 80096d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	e000ed00 	.word	0xe000ed00

080096e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096f4:	4b08      	ldr	r3, [pc, #32]	; (8009718 <HAL_PCD_ResumeCallback+0x34>)
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	4a07      	ldr	r2, [pc, #28]	; (8009718 <HAL_PCD_ResumeCallback+0x34>)
 80096fa:	f023 0306 	bic.w	r3, r3, #6
 80096fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009700:	f000 f9fa 	bl	8009af8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fe92 	bl	8008434 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	e000ed00 	.word	0xe000ed00

0800971c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009724:	4a2b      	ldr	r2, [pc, #172]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a29      	ldr	r2, [pc, #164]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009730:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009734:	4b27      	ldr	r3, [pc, #156]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009736:	4a28      	ldr	r2, [pc, #160]	; (80097d8 <USBD_LL_Init+0xbc>)
 8009738:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800973a:	4b26      	ldr	r3, [pc, #152]	; (80097d4 <USBD_LL_Init+0xb8>)
 800973c:	2208      	movs	r2, #8
 800973e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009740:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009742:	2202      	movs	r2, #2
 8009744:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009746:	4b23      	ldr	r3, [pc, #140]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009748:	2202      	movs	r2, #2
 800974a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800974c:	4b21      	ldr	r3, [pc, #132]	; (80097d4 <USBD_LL_Init+0xb8>)
 800974e:	2200      	movs	r2, #0
 8009750:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009752:	4b20      	ldr	r3, [pc, #128]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009754:	2200      	movs	r2, #0
 8009756:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009758:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <USBD_LL_Init+0xb8>)
 800975a:	2200      	movs	r2, #0
 800975c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800975e:	4b1d      	ldr	r3, [pc, #116]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009760:	2200      	movs	r2, #0
 8009762:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009764:	481b      	ldr	r0, [pc, #108]	; (80097d4 <USBD_LL_Init+0xb8>)
 8009766:	f7f8 fa37 	bl	8001bd8 <HAL_PCD_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009770:	f7f7 fc10 	bl	8000f94 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800977a:	2318      	movs	r3, #24
 800977c:	2200      	movs	r2, #0
 800977e:	2100      	movs	r1, #0
 8009780:	f7f9 fd25 	bl	80031ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800978a:	2358      	movs	r3, #88	; 0x58
 800978c:	2200      	movs	r2, #0
 800978e:	2180      	movs	r1, #128	; 0x80
 8009790:	f7f9 fd1d 	bl	80031ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800979a:	23c0      	movs	r3, #192	; 0xc0
 800979c:	2200      	movs	r2, #0
 800979e:	2181      	movs	r1, #129	; 0x81
 80097a0:	f7f9 fd15 	bl	80031ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097ae:	2200      	movs	r2, #0
 80097b0:	2101      	movs	r1, #1
 80097b2:	f7f9 fd0c 	bl	80031ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c0:	2200      	movs	r2, #0
 80097c2:	2182      	movs	r1, #130	; 0x82
 80097c4:	f7f9 fd03 	bl	80031ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20001344 	.word	0x20001344
 80097d8:	40005c00 	.word	0x40005c00

080097dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f8 fad5 	bl	8001da2 <HAL_PCD_Start>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 f980 	bl	8009b04 <USBD_Get_USB_Status>
 8009804:	4603      	mov	r3, r0
 8009806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009808:	7bbb      	ldrb	r3, [r7, #14]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	461a      	mov	r2, r3
 8009820:	4603      	mov	r3, r0
 8009822:	70fb      	strb	r3, [r7, #3]
 8009824:	460b      	mov	r3, r1
 8009826:	70bb      	strb	r3, [r7, #2]
 8009828:	4613      	mov	r3, r2
 800982a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800983a:	78bb      	ldrb	r3, [r7, #2]
 800983c:	883a      	ldrh	r2, [r7, #0]
 800983e:	78f9      	ldrb	r1, [r7, #3]
 8009840:	f7f8 fc44 	bl	80020cc <HAL_PCD_EP_Open>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f95a 	bl	8009b04 <USBD_Get_USB_Status>
 8009850:	4603      	mov	r3, r0
 8009852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009854:	7bbb      	ldrb	r3, [r7, #14]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7f8 fc8b 	bl	8002198 <HAL_PCD_EP_Close>
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	4618      	mov	r0, r3
 800988a:	f000 f93b 	bl	8009b04 <USBD_Get_USB_Status>
 800988e:	4603      	mov	r3, r0
 8009890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009892:	7bbb      	ldrb	r3, [r7, #14]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f8 fd4c 	bl	8002358 <HAL_PCD_EP_SetStall>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f91c 	bl	8009b04 <USBD_Get_USB_Status>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098f4:	78fa      	ldrb	r2, [r7, #3]
 80098f6:	4611      	mov	r1, r2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f8 fd8d 	bl	8002418 <HAL_PCD_EP_ClrStall>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f8fd 	bl	8009b04 <USBD_Get_USB_Status>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800992a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800992c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009930:	2b00      	cmp	r3, #0
 8009932:	da0c      	bge.n	800994e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993a:	68f9      	ldr	r1, [r7, #12]
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	440b      	add	r3, r1
 8009948:	3302      	adds	r3, #2
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	e00b      	b.n	8009966 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009954:	68f9      	ldr	r1, [r7, #12]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	440b      	add	r3, r1
 8009960:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009964:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800998c:	78fa      	ldrb	r2, [r7, #3]
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f7f8 fb76 	bl	8002082 <HAL_PCD_SetAddress>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f8b1 	bl	8009b04 <USBD_Get_USB_Status>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	460b      	mov	r3, r1
 80099be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099ce:	7af9      	ldrb	r1, [r7, #11]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	f7f8 fc7d 	bl	80022d2 <HAL_PCD_EP_Transmit>
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f890 	bl	8009b04 <USBD_Get_USB_Status>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	460b      	mov	r3, r1
 8009a00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a10:	7af9      	ldrb	r1, [r7, #11]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	f7f8 fc07 	bl	8002228 <HAL_PCD_EP_Receive>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f86f 	bl	8009b04 <USBD_Get_USB_Status>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f8 fc29 	bl	80022a2 <HAL_PCD_EP_GetRxCount>
 8009a50:	4603      	mov	r3, r0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <HAL_PCDEx_LPM_Callback+0x18>
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d013      	beq.n	8009a9a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a72:	e023      	b.n	8009abc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a7c:	f000 f83c 	bl	8009af8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a80:	4b10      	ldr	r3, [pc, #64]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	4a0f      	ldr	r2, [pc, #60]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a86:	f023 0306 	bic.w	r3, r3, #6
 8009a8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe fcce 	bl	8008434 <USBD_LL_Resume>
    break;
 8009a98:	e010      	b.n	8009abc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fcb2 	bl	800840a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aae:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	4a04      	ldr	r2, [pc, #16]	; (8009ac4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ab4:	f043 0306 	orr.w	r3, r3, #6
 8009ab8:	6113      	str	r3, [r2, #16]
    break;
 8009aba:	bf00      	nop
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	e000ed00 	.word	0xe000ed00

08009ac8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ad0:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <USBD_static_malloc+0x18>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	200001d4 	.word	0x200001d4

08009ae4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009afc:	f7f6 fd16 	bl	800052c <SystemClock_Config>
}
 8009b00:	bf00      	nop
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d817      	bhi.n	8009b48 <USBD_Get_USB_Status+0x44>
 8009b18:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <USBD_Get_USB_Status+0x1c>)
 8009b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1e:	bf00      	nop
 8009b20:	08009b31 	.word	0x08009b31
 8009b24:	08009b37 	.word	0x08009b37
 8009b28:	08009b3d 	.word	0x08009b3d
 8009b2c:	08009b43 	.word	0x08009b43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
    break;
 8009b34:	e00b      	b.n	8009b4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b36:	2303      	movs	r3, #3
 8009b38:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3a:	e008      	b.n	8009b4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b40:	e005      	b.n	8009b4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b42:	2303      	movs	r3, #3
 8009b44:	73fb      	strb	r3, [r7, #15]
    break;
 8009b46:	e002      	b.n	8009b4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b48:	2303      	movs	r3, #3
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	bf00      	nop
  }
  return usb_status;
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <__libc_init_array>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	4e0d      	ldr	r6, [pc, #52]	; (8009b94 <__libc_init_array+0x38>)
 8009b60:	4c0d      	ldr	r4, [pc, #52]	; (8009b98 <__libc_init_array+0x3c>)
 8009b62:	1ba4      	subs	r4, r4, r6
 8009b64:	10a4      	asrs	r4, r4, #2
 8009b66:	2500      	movs	r5, #0
 8009b68:	42a5      	cmp	r5, r4
 8009b6a:	d109      	bne.n	8009b80 <__libc_init_array+0x24>
 8009b6c:	4e0b      	ldr	r6, [pc, #44]	; (8009b9c <__libc_init_array+0x40>)
 8009b6e:	4c0c      	ldr	r4, [pc, #48]	; (8009ba0 <__libc_init_array+0x44>)
 8009b70:	f000 f82c 	bl	8009bcc <_init>
 8009b74:	1ba4      	subs	r4, r4, r6
 8009b76:	10a4      	asrs	r4, r4, #2
 8009b78:	2500      	movs	r5, #0
 8009b7a:	42a5      	cmp	r5, r4
 8009b7c:	d105      	bne.n	8009b8a <__libc_init_array+0x2e>
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b84:	4798      	blx	r3
 8009b86:	3501      	adds	r5, #1
 8009b88:	e7ee      	b.n	8009b68 <__libc_init_array+0xc>
 8009b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b8e:	4798      	blx	r3
 8009b90:	3501      	adds	r5, #1
 8009b92:	e7f2      	b.n	8009b7a <__libc_init_array+0x1e>
 8009b94:	08009c3c 	.word	0x08009c3c
 8009b98:	08009c3c 	.word	0x08009c3c
 8009b9c:	08009c3c 	.word	0x08009c3c
 8009ba0:	08009c40 	.word	0x08009c40

08009ba4 <memcpy>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	1e43      	subs	r3, r0, #1
 8009ba8:	440a      	add	r2, r1
 8009baa:	4291      	cmp	r1, r2
 8009bac:	d100      	bne.n	8009bb0 <memcpy+0xc>
 8009bae:	bd10      	pop	{r4, pc}
 8009bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bb8:	e7f7      	b.n	8009baa <memcpy+0x6>

08009bba <memset>:
 8009bba:	4402      	add	r2, r0
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d100      	bne.n	8009bc4 <memset+0xa>
 8009bc2:	4770      	bx	lr
 8009bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc8:	e7f9      	b.n	8009bbe <memset+0x4>
	...

08009bcc <_init>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr

08009bd8 <_fini>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	bf00      	nop
 8009bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bde:	bc08      	pop	{r3}
 8009be0:	469e      	mov	lr, r3
 8009be2:	4770      	bx	lr
