
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab04  0800ab04  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab04  0800ab04  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab04  0800ab04  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab08  0800ab08  0001ab08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800ab0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c4  20000184  0800ac90  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001748  0800ac90  00021748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1d2  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003590  00000000  00000000  0003c386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  0003f918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  00040cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002095e  00000000  00000000  00041f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f8d  00000000  00000000  0006287e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4e8d  00000000  00000000  0007480b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  00139714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aa94 	.word	0x0800aa94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800aa94 	.word	0x0800aa94

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <CDC_On_Receive>:
volatile uint8_t command_received = 0;
volatile uint8_t command_received_ticker = 0;

volatile float pGain, iGain, dGain = 0;

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b2c      	cmp	r3, #44	; 0x2c
 8000b14:	d10c      	bne.n	8000b30 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 8000b16:	222c      	movs	r2, #44	; 0x2c
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <CDC_On_Receive+0x34>)
 8000b1c:	f009 ffa6 	bl	800aa6c <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <CDC_On_Receive+0x34>)
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <CDC_On_Receive+0x38>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d102      	bne.n	8000b30 <CDC_On_Receive+0x2c>
			command_received = 1;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <CDC_On_Receive+0x3c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000544 	.word	0x20000544
 8000b3c:	00abcabc 	.word	0x00abcabc
 8000b40:	200001a0 	.word	0x200001a0
 8000b44:	00000000 	.word	0x00000000

08000b48 <Set_Motor_Speed_f>:

inline void Set_Motor_Speed_f(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, float motor_speed) {
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	ed87 0a01 	vstr	s0, [r7, #4]
	if (fabs(0 - motor_speed) > 0.1) {
 8000b56:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000c60 <Set_Motor_Speed_f+0x118>
 8000b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b62:	eef0 7ae7 	vabs.f32	s15, s15
 8000b66:	ee17 0a90 	vmov	r0, s15
 8000b6a:	f7ff fcb9 	bl	80004e0 <__aeabi_f2d>
 8000b6e:	a336      	add	r3, pc, #216	; (adr r3, 8000c48 <Set_Motor_Speed_f+0x100>)
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	f7ff ff9c 	bl	8000ab0 <__aeabi_dcmpgt>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d057      	beq.n	8000c2e <Set_Motor_Speed_f+0xe6>
		if (motor_speed > 0) {
 8000b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	dd28      	ble.n	8000bde <Set_Motor_Speed_f+0x96>
			// forward
			if (motor_speed > 100) {
 8000b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b90:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000c64 <Set_Motor_Speed_f+0x11c>
 8000b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9c:	dd01      	ble.n	8000ba2 <Set_Motor_Speed_f+0x5a>
				motor_speed = 100;
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <Set_Motor_Speed_f+0x120>)
 8000ba0:	607b      	str	r3, [r7, #4]
			}
			*channel_a = motor_speed * 65000.0 / 100.0;
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fc9c 	bl	80004e0 <__aeabi_f2d>
 8000ba8:	a329      	add	r3, pc, #164	; (adr r3, 8000c50 <Set_Motor_Speed_f+0x108>)
 8000baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bae:	f7ff fcef 	bl	8000590 <__aeabi_dmul>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460c      	mov	r4, r1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <Set_Motor_Speed_f+0x124>)
 8000bc0:	f7ff fe10 	bl	80007e4 <__aeabi_ddiv>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	4621      	mov	r1, r4
 8000bcc:	f7ff ff7a 	bl	8000ac4 <__aeabi_d2uiz>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	601a      	str	r2, [r3, #0]
			*channel_b = 0;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000bdc:	e02d      	b.n	8000c3a <Set_Motor_Speed_f+0xf2>
		} else if (motor_speed < 0) {
 8000bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	d400      	bmi.n	8000bee <Set_Motor_Speed_f+0xa6>
}
 8000bec:	e025      	b.n	8000c3a <Set_Motor_Speed_f+0xf2>
			if (motor_speed < -100) {
 8000bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bf2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000c70 <Set_Motor_Speed_f+0x128>
 8000bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfe:	d501      	bpl.n	8000c04 <Set_Motor_Speed_f+0xbc>
				motor_speed = -100;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <Set_Motor_Speed_f+0x12c>)
 8000c02:	607b      	str	r3, [r7, #4]
			*channel_b = motor_speed * -(65000.0 / 100.0);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fc6b 	bl	80004e0 <__aeabi_f2d>
 8000c0a:	a313      	add	r3, pc, #76	; (adr r3, 8000c58 <Set_Motor_Speed_f+0x110>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fcbe 	bl	8000590 <__aeabi_dmul>
 8000c14:	4603      	mov	r3, r0
 8000c16:	460c      	mov	r4, r1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	f7ff ff52 	bl	8000ac4 <__aeabi_d2uiz>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	601a      	str	r2, [r3, #0]
			*channel_a = 0;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	e005      	b.n	8000c3a <Set_Motor_Speed_f+0xf2>
		*channel_a = 0;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	bf00      	nop
 8000c44:	f3af 8000 	nop.w
 8000c48:	9999999a 	.word	0x9999999a
 8000c4c:	3fb99999 	.word	0x3fb99999
 8000c50:	00000000 	.word	0x00000000
 8000c54:	40efbd00 	.word	0x40efbd00
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	c0845000 	.word	0xc0845000
 8000c60:	00000000 	.word	0x00000000
 8000c64:	42c80000 	.word	0x42c80000
 8000c68:	42c80000 	.word	0x42c80000
 8000c6c:	40590000 	.word	0x40590000
 8000c70:	c2c80000 	.word	0xc2c80000
 8000c74:	c2c80000 	.word	0xc2c80000

08000c78 <Set_Thrower_Speed>:

inline void Set_Thrower_Speed(volatile uint32_t *channel_a, float thrower_speed) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	ed87 0a00 	vstr	s0, [r7]
	if (thrower_speed > 0) {
 8000c84:	edd7 7a00 	vldr	s15, [r7]
 8000c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c90:	dd1a      	ble.n	8000cc8 <Set_Thrower_Speed+0x50>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 8000c92:	edd7 7a00 	vldr	s15, [r7]
 8000c96:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000cdc <Set_Thrower_Speed+0x64>
 8000c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca2:	d900      	bls.n	8000ca6 <Set_Thrower_Speed+0x2e>
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000ca4:	e014      	b.n	8000cd0 <Set_Thrower_Speed+0x58>
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 8000ca6:	edd7 7a00 	vldr	s15, [r7]
 8000caa:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000ce0 <Set_Thrower_Speed+0x68>
 8000cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cbe:	ee17 2a90 	vmov	r2, s15
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	601a      	str	r2, [r3, #0]
}
 8000cc6:	e003      	b.n	8000cd0 <Set_Thrower_Speed+0x58>
		*channel_a = ESC_IDLE_CCR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	42c80000 	.word	0x42c80000
 8000ce0:	45834000 	.word	0x45834000

08000ce4 <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t *channel_a, float servo_speed,
		GPIO_PinState ir_status, int32_t ir_control) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	603a      	str	r2, [r7, #0]
 8000cf4:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <Set_Servo_Speed+0x24>
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d04b      	beq.n	8000d9a <Set_Servo_Speed+0xb6>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d048      	beq.n	8000d9a <Set_Servo_Speed+0xb6>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 8000d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	dd1a      	ble.n	8000d4c <Set_Servo_Speed+0x68>
 8000d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d1a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000da8 <Set_Servo_Speed+0xc4>
 8000d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	d811      	bhi.n	8000d4c <Set_Servo_Speed+0x68>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <Set_Servo_Speed+0xc8>)
 8000d2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d2e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d36:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000db0 <Set_Servo_Speed+0xcc>
 8000d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d42:	ee17 2a90 	vmov	r2, s15
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e026      	b.n	8000d9a <Set_Servo_Speed+0xb6>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <Set_Servo_Speed+0xc8>)
 8000d4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5a:	d51a      	bpl.n	8000d92 <Set_Servo_Speed+0xae>
 8000d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d60:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000db4 <Set_Servo_Speed+0xd0>
 8000d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	db11      	blt.n	8000d92 <Set_Servo_Speed+0xae>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <Set_Servo_Speed+0xc8>)
 8000d70:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d74:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8000d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000db8 <Set_Servo_Speed+0xd4>
 8000d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d88:	ee17 2a90 	vmov	r2, s15
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e003      	b.n	8000d9a <Set_Servo_Speed+0xb6>
		} else {
			*channel_a = 0;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d98:	e7ff      	b.n	8000d9a <Set_Servo_Speed+0xb6>
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	42c80000 	.word	0x42c80000
 8000dac:	20000544 	.word	0x20000544
 8000db0:	4592e000 	.word	0x4592e000
 8000db4:	c2c80000 	.word	0xc2c80000
 8000db8:	459c4000 	.word	0x459c4000
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <Calculate_PID>:

Motor motor1;
Motor motor2;
Motor motor3;

inline void Calculate_PID(Motor *motor) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
// based on "PID Without a PhD" by Tim Wescott
// https://www.embeddedrelated.com/showarticle/943.php
	if (motor->target_speed > 0.1 || motor->target_speed < -0.1) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fb87 	bl	80004e0 <__aeabi_f2d>
 8000dd2:	a376      	add	r3, pc, #472	; (adr r3, 8000fac <Calculate_PID+0x1ec>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff fe6a 	bl	8000ab0 <__aeabi_dcmpgt>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10d      	bne.n	8000dfe <Calculate_PID+0x3e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fb7a 	bl	80004e0 <__aeabi_f2d>
 8000dec:	a371      	add	r3, pc, #452	; (adr r3, 8000fb4 <Calculate_PID+0x1f4>)
 8000dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df2:	f7ff fe3f 	bl	8000a74 <__aeabi_dcmplt>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80ba 	beq.w	8000f72 <Calculate_PID+0x1b2>
//		} else {
//			pGain = 1;
//			iGain = 0.001;
//			dGain = 10;
//		}
		pGain = command.pGain;
 8000dfe:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <Calculate_PID+0x1c8>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	4a62      	ldr	r2, [pc, #392]	; (8000f8c <Calculate_PID+0x1cc>)
 8000e04:	6013      	str	r3, [r2, #0]
		iGain = command.iGain;
 8000e06:	4b60      	ldr	r3, [pc, #384]	; (8000f88 <Calculate_PID+0x1c8>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a61      	ldr	r2, [pc, #388]	; (8000f90 <Calculate_PID+0x1d0>)
 8000e0c:	6013      	str	r3, [r2, #0]
		dGain = command.dGain;
 8000e0e:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <Calculate_PID+0x1c8>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <Calculate_PID+0x1d4>)
 8000e14:	6013      	str	r3, [r2, #0]

		int error = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
		if (command.pid_type == 0) {
 8000e1a:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <Calculate_PID+0x1c8>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d110      	bne.n	8000e44 <Calculate_PID+0x84>
			error = motor->target_speed - motor->cur_enc_speed;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e00c      	b.n	8000e5e <Calculate_PID+0x9e>
		} else {
			error = motor->target_speed - motor->enc_speed_hist_avg;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e58:	ee17 3a90 	vmov	r3, s15
 8000e5c:	617b      	str	r3, [r7, #20]
		}
		pTerm = error * pGain;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <Calculate_PID+0x1cc>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e72:	edc7 7a04 	vstr	s15, [r7, #16]

		motor->err_sum += error;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	441a      	add	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
		motor->err_sum = clamp(-1000, 1000, motor->err_sum);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000e8a:	db07      	blt.n	8000e9c <Calculate_PID+0xdc>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e94:	bfa8      	it	ge
 8000e96:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000e9a:	e000      	b.n	8000e9e <Calculate_PID+0xde>
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <Calculate_PID+0x1d8>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
		iTerm = iGain * motor->err_sum;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <Calculate_PID+0x1d0>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb8:	edc7 7a03 	vstr	s15, [r7, #12]

		dTerm = dGain * (motor->prev_speed - motor->cur_enc_speed);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <Calculate_PID+0x1d4>)
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000edc:	edc7 7a02 	vstr	s15, [r7, #8]
		motor->prev_speed = motor->cur_enc_speed;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		motor->cur_speed = motor->cur_speed + pTerm + iTerm + dTerm;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		motor->cur_speed = clamp(-100, 100, motor->cur_speed);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000f1c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000f9c <Calculate_PID+0x1dc>
 8000f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f28:	dd01      	ble.n	8000f2e <Calculate_PID+0x16e>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e00c      	b.n	8000f48 <Calculate_PID+0x188>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000f34:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fa0 <Calculate_PID+0x1e0>
 8000f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	bf4c      	ite	mi
 8000f42:	2301      	movmi	r3, #1
 8000f44:	2300      	movpl	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <Calculate_PID+0x190>
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <Calculate_PID+0x1e4>)
 8000f4e:	e00d      	b.n	8000f6c <Calculate_PID+0x1ac>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000f56:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000f9c <Calculate_PID+0x1dc>
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd01      	ble.n	8000f68 <Calculate_PID+0x1a8>
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <Calculate_PID+0x1e8>)
 8000f66:	e001      	b.n	8000f6c <Calculate_PID+0x1ac>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (motor->target_speed > 0.1 || motor->target_speed < -0.1) {
 8000f70:	e003      	b.n	8000f7a <Calculate_PID+0x1ba>
	} else {
		motor->cur_speed = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	f3af 8000 	nop.w
 8000f88:	20000544 	.word	0x20000544
 8000f8c:	200005bc 	.word	0x200005bc
 8000f90:	20000680 	.word	0x20000680
 8000f94:	200001a4 	.word	0x200001a4
 8000f98:	fffffc18 	.word	0xfffffc18
 8000f9c:	42c80000 	.word	0x42c80000
 8000fa0:	c2c80000 	.word	0xc2c80000
 8000fa4:	c2c80000 	.word	0xc2c80000
 8000fa8:	42c80000 	.word	0x42c80000
 8000fac:	9999999a 	.word	0x9999999a
 8000fb0:	3fb99999 	.word	0x3fb99999
 8000fb4:	9999999a 	.word	0x9999999a
 8000fb8:	bfb99999 	.word	0xbfb99999

08000fbc <Calculate_Encoder_Diff>:

inline int Calculate_Encoder_Diff(uint16_t prev_pos, uint16_t cur_pos) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	80fb      	strh	r3, [r7, #6]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
	int diff = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d90c      	bls.n	8000ff4 <Calculate_Encoder_Diff+0x38>
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d807      	bhi.n	8000ff4 <Calculate_Encoder_Diff+0x38>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000fea:	33ff      	adds	r3, #255	; 0xff
 8000fec:	88ba      	ldrh	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e015      	b.n	8001020 <Calculate_Encoder_Diff+0x64>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d80c      	bhi.n	8001018 <Calculate_Encoder_Diff+0x5c>
 8000ffe:	88bb      	ldrh	r3, [r7, #4]
 8001000:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8001004:	4293      	cmp	r3, r2
 8001006:	d907      	bls.n	8001018 <Calculate_Encoder_Diff+0x5c>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800100e:	3bff      	subs	r3, #255	; 0xff
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e003      	b.n	8001020 <Calculate_Encoder_Diff+0x64>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 8001018:	88ba      	ldrh	r2, [r7, #4]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	60fb      	str	r3, [r7, #12]
	}
	return diff;	// clamp(-200, 200, diff) / 2;
 8001020:	68fb      	ldr	r3, [r7, #12]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <Handle_Encoder>:

void Handle_Encoder(Motor *motor, uint16_t count) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
	motor->cur_pos = count;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	805a      	strh	r2, [r3, #2]
	motor->cur_enc_speed = Calculate_Encoder_Diff(motor->prev_pos,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	885b      	ldrh	r3, [r3, #2]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f7ff ffb5 	bl	8000fbc <Calculate_Encoder_Diff>
 8001052:	4602      	mov	r2, r0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	605a      	str	r2, [r3, #4]
			motor->cur_pos);
	motor->prev_pos = motor->cur_pos;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	885a      	ldrh	r2, [r3, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	801a      	strh	r2, [r3, #0]

	motor->enc_speed_hist[motor->enc_speed_hist_cnt] = motor->cur_enc_speed;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3202      	adds	r2, #2
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (motor->enc_speed_hist_cnt >= 9) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	2b08      	cmp	r3, #8
 8001076:	dd03      	ble.n	8001080 <Handle_Encoder+0x50>
		motor->enc_speed_hist_cnt = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
 800107e:	e004      	b.n	800108a <Handle_Encoder+0x5a>
	} else {
		motor->enc_speed_hist_cnt += 1;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
	}

	int sum = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	e00a      	b.n	80010aa <Handle_Encoder+0x7a>
		sum += motor->enc_speed_hist[i];
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	3202      	adds	r2, #2
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	ddf1      	ble.n	8001094 <Handle_Encoder+0x64>
	}
	motor->enc_speed_hist_avg = sum / 10;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <Handle_Encoder+0xa4>)
 80010b4:	fb82 1203 	smull	r1, r2, r2, r3
 80010b8:	1092      	asrs	r2, r2, #2
 80010ba:	17db      	asrs	r3, r3, #31
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	66666667 	.word	0x66666667

080010d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	ed2d 8b02 	vpush	{d8}
 80010de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010e0:	f001 f991 	bl	8002406 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010e4:	f000 f93a 	bl	800135c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010e8:	f000 fd8e 	bl	8001c08 <MX_GPIO_Init>
	MX_TIM4_Init();
 80010ec:	f000 fb16 	bl	800171c <MX_TIM4_Init>
	MX_TIM8_Init();
 80010f0:	f000 fba0 	bl	8001834 <MX_TIM8_Init>
	MX_TIM15_Init();
 80010f4:	f000 fc0e 	bl	8001914 <MX_TIM15_Init>
	MX_TIM16_Init();
 80010f8:	f000 fc92 	bl	8001a20 <MX_TIM16_Init>
	MX_TIM1_Init();
 80010fc:	f000 f996 	bl	800142c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001100:	f000 fa44 	bl	800158c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001104:	f000 fa96 	bl	8001634 <MX_TIM3_Init>
	MX_TIM7_Init();
 8001108:	f000 fb5e 	bl	80017c8 <MX_TIM7_Init>
	MX_TIM17_Init();
 800110c:	f000 fd02 	bl	8001b14 <MX_TIM17_Init>
	MX_USB_Device_Init();
 8001110:	f008 ff90 	bl	800a034 <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001114:	2104      	movs	r1, #4
 8001116:	4876      	ldr	r0, [pc, #472]	; (80012f0 <main+0x218>)
 8001118:	f004 fa8a 	bl	8005630 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800111c:	2104      	movs	r1, #4
 800111e:	4875      	ldr	r0, [pc, #468]	; (80012f4 <main+0x21c>)
 8001120:	f004 fa86 	bl	8005630 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	4874      	ldr	r0, [pc, #464]	; (80012f8 <main+0x220>)
 8001128:	f004 fa82 	bl	8005630 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800112c:	2100      	movs	r1, #0
 800112e:	4873      	ldr	r0, [pc, #460]	; (80012fc <main+0x224>)
 8001130:	f004 f8d8 	bl	80052e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001134:	2104      	movs	r1, #4
 8001136:	4871      	ldr	r0, [pc, #452]	; (80012fc <main+0x224>)
 8001138:	f004 f8d4 	bl	80052e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800113c:	2108      	movs	r1, #8
 800113e:	486f      	ldr	r0, [pc, #444]	; (80012fc <main+0x224>)
 8001140:	f004 f8d0 	bl	80052e4 <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 0;
 8001144:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <main+0x228>)
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800114a:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <main+0x228>)
 800114c:	2200      	movs	r2, #0
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001150:	4b6b      	ldr	r3, [pc, #428]	; (8001300 <main+0x228>)
 8001152:	2200      	movs	r2, #0
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001156:	2100      	movs	r1, #0
 8001158:	486a      	ldr	r0, [pc, #424]	; (8001304 <main+0x22c>)
 800115a:	f004 f8c3 	bl	80052e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800115e:	2104      	movs	r1, #4
 8001160:	4868      	ldr	r0, [pc, #416]	; (8001304 <main+0x22c>)
 8001162:	f004 f8bf 	bl	80052e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001166:	2108      	movs	r1, #8
 8001168:	4866      	ldr	r0, [pc, #408]	; (8001304 <main+0x22c>)
 800116a:	f004 f8bb 	bl	80052e4 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 800116e:	4b66      	ldr	r3, [pc, #408]	; (8001308 <main+0x230>)
 8001170:	2200      	movs	r2, #0
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8001174:	4b64      	ldr	r3, [pc, #400]	; (8001308 <main+0x230>)
 8001176:	2200      	movs	r2, #0
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 800117a:	4b63      	ldr	r3, [pc, #396]	; (8001308 <main+0x230>)
 800117c:	2200      	movs	r2, #0
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001180:	2100      	movs	r1, #0
 8001182:	4862      	ldr	r0, [pc, #392]	; (800130c <main+0x234>)
 8001184:	f004 f8ae 	bl	80052e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	4861      	ldr	r0, [pc, #388]	; (8001310 <main+0x238>)
 800118c:	f004 f8aa 	bl	80052e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001190:	2100      	movs	r1, #0
 8001192:	4860      	ldr	r0, [pc, #384]	; (8001314 <main+0x23c>)
 8001194:	f004 f8a6 	bl	80052e4 <HAL_TIM_PWM_Start>
	TIM15->CCR1 = 0;
 8001198:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <main+0x240>)
 800119a:	2200      	movs	r2, #0
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = ESC_IDLE_CCR;
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <main+0x244>)
 80011a0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = 0;
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <main+0x248>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Base_Start_IT(&htim7);
 80011ac:	485d      	ldr	r0, [pc, #372]	; (8001324 <main+0x24c>)
 80011ae:	f003 ffd7 	bl	8005160 <HAL_TIM_Base_Start_IT>

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <main+0x250>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <main+0x250>)
 80011b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011bc:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80011be:	4b5b      	ldr	r3, [pc, #364]	; (800132c <main+0x254>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <main+0x254>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <main+0x254>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (command_received == 1) {
 80011d0:	4b57      	ldr	r3, [pc, #348]	; (8001330 <main+0x258>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d1fa      	bne.n	80011d0 <main+0xf8>
			command_received = 0;
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <main+0x258>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
			command_received_ticker = 140;
 80011e0:	4b54      	ldr	r3, [pc, #336]	; (8001334 <main+0x25c>)
 80011e2:	228c      	movs	r2, #140	; 0x8c
 80011e4:	701a      	strb	r2, [r3, #0]

			// toggle led
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80011e6:	2120      	movs	r1, #32
 80011e8:	4853      	ldr	r0, [pc, #332]	; (8001338 <main+0x260>)
 80011ea:	f001 fc3f 	bl	8002a6c <HAL_GPIO_TogglePin>

			feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80011ee:	2108      	movs	r1, #8
 80011f0:	4851      	ldr	r0, [pc, #324]	; (8001338 <main+0x260>)
 80011f2:	f001 fc0b 	bl	8002a0c <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b50      	ldr	r3, [pc, #320]	; (800133c <main+0x264>)
 80011fc:	615a      	str	r2, [r3, #20]

			if (fabs(0 - command.motor1) < 0.1) {
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <main+0x268>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001344 <main+0x26c>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	eef0 7ae7 	vabs.f32	s15, s15
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f964 	bl	80004e0 <__aeabi_f2d>
 8001218:	a333      	add	r3, pc, #204	; (adr r3, 80012e8 <main+0x210>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fc29 	bl	8000a74 <__aeabi_dcmplt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <main+0x156>
				motor1.err_sum = 0;
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <main+0x270>)
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
			}
			if (fabs(0 - command.motor2) < 0.1) {
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <main+0x268>)
 8001230:	edd3 7a01 	vldr	s15, [r3, #4]
 8001234:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001344 <main+0x26c>
 8001238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123c:	eef0 7ae7 	vabs.f32	s15, s15
 8001240:	ee17 0a90 	vmov	r0, s15
 8001244:	f7ff f94c 	bl	80004e0 <__aeabi_f2d>
 8001248:	a327      	add	r3, pc, #156	; (adr r3, 80012e8 <main+0x210>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fc11 	bl	8000a74 <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <main+0x186>
				motor2.err_sum = 0;
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <main+0x274>)
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
			}
			if (fabs(0 - command.motor3) < 0.1) {
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <main+0x268>)
 8001260:	edd3 7a02 	vldr	s15, [r3, #8]
 8001264:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001344 <main+0x26c>
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	eef0 7ae7 	vabs.f32	s15, s15
 8001270:	ee17 0a90 	vmov	r0, s15
 8001274:	f7ff f934 	bl	80004e0 <__aeabi_f2d>
 8001278:	a31b      	add	r3, pc, #108	; (adr r3, 80012e8 <main+0x210>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff fbf9 	bl	8000a74 <__aeabi_dcmplt>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <main+0x1b6>
				motor3.err_sum = 0;
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <main+0x278>)
 800128a:	2200      	movs	r2, #0
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
			}
			motor1.target_speed = command.motor1;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <main+0x268>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <main+0x270>)
 8001294:	6393      	str	r3, [r2, #56]	; 0x38
			motor2.target_speed = command.motor2;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <main+0x268>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <main+0x274>)
 800129c:	6393      	str	r3, [r2, #56]	; 0x38
			motor3.target_speed = command.motor3;
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <main+0x268>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4a2b      	ldr	r2, [pc, #172]	; (8001350 <main+0x278>)
 80012a4:	6393      	str	r3, [r2, #56]	; 0x38
//			pGain = command.pGain;
//			iGain = command.iGain;
//			dGain = command.dGain;

			Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <main+0x268>)
 80012a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ac:	eeb0 0a67 	vmov.f32	s0, s15
 80012b0:	4828      	ldr	r0, [pc, #160]	; (8001354 <main+0x27c>)
 80012b2:	f7ff fce1 	bl	8000c78 <Set_Thrower_Speed>

			Set_Servo_Speed(&(TIM17->CCR1), command.servo,
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <main+0x268>)
 80012b8:	ed93 8a04 	vldr	s16, [r3, #16]
 80012bc:	2108      	movs	r1, #8
 80012be:	481e      	ldr	r0, [pc, #120]	; (8001338 <main+0x260>)
 80012c0:	f001 fba4 	bl	8002a0c <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <main+0x268>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	461a      	mov	r2, r3
 80012ce:	eeb0 0a48 	vmov.f32	s0, s16
 80012d2:	4821      	ldr	r0, [pc, #132]	; (8001358 <main+0x280>)
 80012d4:	f7ff fd06 	bl	8000ce4 <Set_Servo_Speed>
					HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);

			CDC_Transmit_FS(&feedback, sizeof(feedback));
 80012d8:	212c      	movs	r1, #44	; 0x2c
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <main+0x264>)
 80012dc:	f008 ff6c 	bl	800a1b8 <CDC_Transmit_FS>
		if (command_received == 1) {
 80012e0:	e776      	b.n	80011d0 <main+0xf8>
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	9999999a 	.word	0x9999999a
 80012ec:	3fb99999 	.word	0x3fb99999
 80012f0:	20000684 	.word	0x20000684
 80012f4:	20000460 	.word	0x20000460
 80012f8:	20000414 	.word	0x20000414
 80012fc:	200005ec 	.word	0x200005ec
 8001300:	40012c00 	.word	0x40012c00
 8001304:	20000570 	.word	0x20000570
 8001308:	40000400 	.word	0x40000400
 800130c:	200004ac 	.word	0x200004ac
 8001310:	20000718 	.word	0x20000718
 8001314:	200004f8 	.word	0x200004f8
 8001318:	40014000 	.word	0x40014000
 800131c:	40014400 	.word	0x40014400
 8001320:	40014800 	.word	0x40014800
 8001324:	20000764 	.word	0x20000764
 8001328:	e000edf0 	.word	0xe000edf0
 800132c:	e0001000 	.word	0xe0001000
 8001330:	200001a0 	.word	0x200001a0
 8001334:	200001a1 	.word	0x200001a1
 8001338:	48000400 	.word	0x48000400
 800133c:	200005c0 	.word	0x200005c0
 8001340:	20000544 	.word	0x20000544
 8001344:	00000000 	.word	0x00000000
 8001348:	20000638 	.word	0x20000638
 800134c:	200003cc 	.word	0x200003cc
 8001350:	200006d0 	.word	0x200006d0
 8001354:	40014434 	.word	0x40014434
 8001358:	40014834 	.word	0x40014834

0800135c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b0a4      	sub	sp, #144	; 0x90
 8001360:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001366:	2238      	movs	r2, #56	; 0x38
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f009 fb89 	bl	800aa82 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001370:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001380:	463b      	mov	r3, r7
 8001382:	2244      	movs	r2, #68	; 0x44
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f009 fb7b 	bl	800aa82 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800138c:	2000      	movs	r0, #0
 800138e:	f002 feef 	bl	8004170 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001392:	2322      	movs	r3, #34	; 0x22
 8001394:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	2340      	movs	r3, #64	; 0x40
 800139e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a8:	2302      	movs	r3, #2
 80013aa:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 20;
 80013b0:	2314      	movs	r3, #20
 80013b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 ff83 	bl	80042d8 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x80>
		Error_Handler();
 80013d8:	f000 fd28 	bl	8001e2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2303      	movs	r3, #3
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80013f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013f4:	2104      	movs	r1, #4
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fa86 	bl	8004908 <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xaa>
		Error_Handler();
 8001402:	f000 fd13 	bl	8001e2c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140a:	603b      	str	r3, [r7, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001410:	463b      	mov	r3, r7
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fc5c 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xc6>
		Error_Handler();
 800141e:	f000 fd05 	bl	8001e2c <Error_Handler>
	}
}
 8001422:	bf00      	nop
 8001424:	3790      	adds	r7, #144	; 0x90
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b098      	sub	sp, #96	; 0x60
 8001430:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800143e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2234      	movs	r2, #52	; 0x34
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f009 fb12 	bl	800aa82 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <MX_TIM1_Init+0x158>)
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <MX_TIM1_Init+0x15c>)
 8001462:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001464:	4b47      	ldr	r3, [pc, #284]	; (8001584 <MX_TIM1_Init+0x158>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <MX_TIM1_Init+0x158>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <MX_TIM1_Init+0x158>)
 8001472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001476:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b42      	ldr	r3, [pc, #264]	; (8001584 <MX_TIM1_Init+0x158>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <MX_TIM1_Init+0x158>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <MX_TIM1_Init+0x158>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800148a:	483e      	ldr	r0, [pc, #248]	; (8001584 <MX_TIM1_Init+0x158>)
 800148c:	f003 fed2 	bl	8005234 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0x6e>
		Error_Handler();
 8001496:	f000 fcc9 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80014a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014aa:	4619      	mov	r1, r3
 80014ac:	4835      	ldr	r0, [pc, #212]	; (8001584 <MX_TIM1_Init+0x158>)
 80014ae:	f004 ffaf 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80014b8:	f000 fcb8 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014bc:	2360      	movs	r3, #96	; 0x60
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c8:	2300      	movs	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80014d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	4828      	ldr	r0, [pc, #160]	; (8001584 <MX_TIM1_Init+0x158>)
 80014e2:	f004 fab1 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80014ec:	f000 fc9e 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80014f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f8:	2204      	movs	r2, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <MX_TIM1_Init+0x158>)
 80014fe:	f004 faa3 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8001508:	f000 fc90 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001514:	2208      	movs	r2, #8
 8001516:	4619      	mov	r1, r3
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_TIM1_Init+0x158>)
 800151a:	f004 fa95 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8001524:	f000 fc82 	bl	8001e2c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800153c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001540:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800154e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM1_Init+0x158>)
 8001566:	f004 ffd5 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x148>
			!= HAL_OK) {
		Error_Handler();
 8001570:	f000 fc5c 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM1_Init+0x158>)
 8001576:	f000 fddd 	bl	8002134 <HAL_TIM_MspPostInit>

}
 800157a:	bf00      	nop
 800157c:	3760      	adds	r7, #96	; 0x60
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200005ec 	.word	0x200005ec
 8001588:	40012c00 	.word	0x40012c00

0800158c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2224      	movs	r2, #36	; 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f009 fa71 	bl	800aa82 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015d2:	2303      	movs	r3, #3
 80015d4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015da:	2301      	movs	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ea:	2301      	movs	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <MX_TIM2_Init+0xa4>)
 80015fe:	f003 ff71 	bl	80054e4 <HAL_TIM_Encoder_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x80>
		Error_Handler();
 8001608:	f000 fc10 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM2_Init+0xa4>)
 800161a:	f004 fef9 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001624:	f000 fc02 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3730      	adds	r7, #48	; 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000684 	.word	0x20000684

08001634 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_TIM3_Init+0xe0>)
 800165a:	4a2f      	ldr	r2, [pc, #188]	; (8001718 <MX_TIM3_Init+0xe4>)
 800165c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <MX_TIM3_Init+0xe0>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_TIM3_Init+0xe0>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <MX_TIM3_Init+0xe0>)
 800166c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001670:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_TIM3_Init+0xe0>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <MX_TIM3_Init+0xe0>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800167e:	4825      	ldr	r0, [pc, #148]	; (8001714 <MX_TIM3_Init+0xe0>)
 8001680:	f003 fdd8 	bl	8005234 <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x5a>
		Error_Handler();
 800168a:	f000 fbcf 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	481d      	ldr	r0, [pc, #116]	; (8001714 <MX_TIM3_Init+0xe0>)
 800169e:	f004 feb7 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80016a8:	f000 fbc0 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4814      	ldr	r0, [pc, #80]	; (8001714 <MX_TIM3_Init+0xe0>)
 80016c4:	f004 f9c0 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80016ce:	f000 fbad 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80016d6:	463b      	mov	r3, r7
 80016d8:	2204      	movs	r2, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_TIM3_Init+0xe0>)
 80016de:	f004 f9b3 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 80016e8:	f000 fba0 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80016f0:	463b      	mov	r3, r7
 80016f2:	2208      	movs	r2, #8
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <MX_TIM3_Init+0xe0>)
 80016f8:	f004 f9a6 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 8001702:	f000 fb93 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <MX_TIM3_Init+0xe0>)
 8001708:	f000 fd14 	bl	8002134 <HAL_TIM_MspPostInit>

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000570 	.word	0x20000570
 8001718:	40000400 	.word	0x40000400

0800171c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f009 f9a9 	bl	800aa82 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001730:	463b      	mov	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_TIM4_Init+0xa4>)
 800173c:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <MX_TIM4_Init+0xa8>)
 800173e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_TIM4_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_TIM4_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_TIM4_Init+0xa4>)
 800174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001752:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM4_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_TIM4_Init+0xa4>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001760:	2303      	movs	r3, #3
 8001762:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001778:	2301      	movs	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4619      	mov	r1, r3
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_TIM4_Init+0xa4>)
 800178c:	f003 feaa 	bl	80054e4 <HAL_TIM_Encoder_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM4_Init+0x7e>
		Error_Handler();
 8001796:	f000 fb49 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_TIM4_Init+0xa4>)
 80017a8:	f004 fe32 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80017b2:	f000 fb3b 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3730      	adds	r7, #48	; 0x30
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000460 	.word	0x20000460
 80017c4:	40000800 	.word	0x40000800

080017c8 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_TIM7_Init+0x64>)
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <MX_TIM7_Init+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 20;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_TIM7_Init+0x64>)
 80017e0:	2214      	movs	r2, #20
 80017e2:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_TIM7_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 63500;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_TIM7_Init+0x64>)
 80017ec:	f64f 020c 	movw	r2, #63500	; 0xf80c
 80017f0:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_TIM7_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM7_Init+0x64>)
 80017fa:	f003 fc59 	bl	80050b0 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM7_Init+0x40>
		Error_Handler();
 8001804:	f000 fb12 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_TIM7_Init+0x64>)
 8001816:	f004 fdfb 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001820:	f000 fb04 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000764 	.word	0x20000764
 8001830:	40001400 	.word	0x40001400

08001834 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b09a      	sub	sp, #104	; 0x68
 8001838:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800183a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f009 f91d 	bl	800aa82 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2234      	movs	r2, #52	; 0x34
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f009 f911 	bl	800aa82 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <MX_TIM8_Init+0xd8>)
 8001862:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <MX_TIM8_Init+0xdc>)
 8001864:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <MX_TIM8_Init+0xd8>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_TIM8_Init+0xd8>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_TIM8_Init+0xd8>)
 8001874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001878:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <MX_TIM8_Init+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <MX_TIM8_Init+0xd8>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_TIM8_Init+0xd8>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800188c:	2303      	movs	r3, #3
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001890:	2300      	movs	r3, #0
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001894:	2301      	movs	r3, #1
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	653b      	str	r3, [r7, #80]	; 0x50
	sConfig.IC1Filter = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a0:	2300      	movs	r3, #0
 80018a2:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018a4:	2301      	movs	r3, #1
 80018a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	663b      	str	r3, [r7, #96]	; 0x60
	sConfig.IC2Filter = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 80018b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b4:	4619      	mov	r1, r3
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <MX_TIM8_Init+0xd8>)
 80018b8:	f003 fe14 	bl	80054e4 <HAL_TIM_Encoder_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM8_Init+0x92>
		Error_Handler();
 80018c2:	f000 fab3 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80018d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d6:	4619      	mov	r1, r3
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <MX_TIM8_Init+0xd8>)
 80018da:	f004 fd99 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM8_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80018e4:	f000 faa2 	bl	8001e2c <Error_Handler>
	}
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_TIM8_Init+0xd8>)
 80018f6:	f004 fe0d 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM8_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8001900:	f000 fa94 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3768      	adds	r7, #104	; 0x68
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000414 	.word	0x20000414
 8001910:	40013400 	.word	0x40013400

08001914 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b098      	sub	sp, #96	; 0x60
 8001918:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800191a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2234      	movs	r2, #52	; 0x34
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f009 f89e 	bl	800aa82 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001948:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <MX_TIM15_Init+0x108>)
 800194a:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <MX_TIM15_Init+0x104>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <MX_TIM15_Init+0x104>)
 800195a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195e:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <MX_TIM15_Init+0x104>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001972:	4829      	ldr	r0, [pc, #164]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001974:	f003 fc5e 	bl	8005234 <HAL_TIM_PWM_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM15_Init+0x6e>
		Error_Handler();
 800197e:	f000 fa55 	bl	8001e2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 800198a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198e:	4619      	mov	r1, r3
 8001990:	4821      	ldr	r0, [pc, #132]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001992:	f004 fd3d 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM15_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800199c:	f000 fa46 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a0:	2360      	movs	r3, #96	; 0x60
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a8:	2300      	movs	r3, #0
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ac:	2300      	movs	r3, #0
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 80019bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4814      	ldr	r0, [pc, #80]	; (8001a18 <MX_TIM15_Init+0x104>)
 80019c6:	f004 f83f 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM15_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 80019d0:	f000 fa2c 	bl	8001e2c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM15_Init+0x104>)
 80019fc:	f004 fd8a 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM15_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8001a06:	f000 fa11 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM15_Init+0x104>)
 8001a0c:	f000 fb92 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001a10:	bf00      	nop
 8001a12:	3760      	adds	r7, #96	; 0x60
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200004ac 	.word	0x200004ac
 8001a1c:	40014000 	.word	0x40014000

08001a20 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	; 0x50
 8001a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2234      	movs	r2, #52	; 0x34
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f009 f81e 	bl	800aa82 <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <MX_TIM16_Init+0xf0>)
 8001a4a:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a4e:	2230      	movs	r2, #48	; 0x30
 8001a50:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65300;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a5a:	f64f 7214 	movw	r2, #65300	; 0xff14
 8001a5e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001a72:	4826      	ldr	r0, [pc, #152]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a74:	f003 fb1c 	bl	80050b0 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM16_Init+0x62>
		Error_Handler();
 8001a7e:	f000 f9d5 	bl	8001e2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 8001a82:	4822      	ldr	r0, [pc, #136]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001a84:	f003 fbd6 	bl	8005234 <HAL_TIM_PWM_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM16_Init+0x72>
		Error_Handler();
 8001a8e:	f000 f9cd 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a92:	2360      	movs	r3, #96	; 0x60
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 8001aae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4815      	ldr	r0, [pc, #84]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001ab8:	f003 ffc6 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM16_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8001ac2:	f000 f9b3 	bl	8001e2c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ade:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001aee:	f004 fd11 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM16_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8001af8:	f000 f998 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
	HAL_TIM_MspPostInit(&htim16);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <MX_TIM16_Init+0xec>)
 8001afe:	f000 fb19 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000718 	.word	0x20000718
 8001b10:	40014400 	.word	0x40014400

08001b14 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	; 0x50
 8001b18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2234      	movs	r2, #52	; 0x34
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f008 ffa4 	bl	800aa82 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b3c:	4a31      	ldr	r2, [pc, #196]	; (8001c04 <MX_TIM17_Init+0xf0>)
 8001b3e:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48;
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b42:	2230      	movs	r2, #48	; 0x30
 8001b44:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 65300;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b4e:	f64f 7214 	movw	r2, #65300	; 0xff14
 8001b52:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8001b66:	4826      	ldr	r0, [pc, #152]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b68:	f003 faa2 	bl	80050b0 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM17_Init+0x62>
		Error_Handler();
 8001b72:	f000 f95b 	bl	8001e2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8001b76:	4822      	ldr	r0, [pc, #136]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001b78:	f003 fb5c 	bl	8005234 <HAL_TIM_PWM_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM17_Init+0x72>
		Error_Handler();
 8001b82:	f000 f953 	bl	8001e2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 8001ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4815      	ldr	r0, [pc, #84]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001bac:	f003 ff4c 	bl	8005a48 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM17_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8001bb6:	f000 f939 	bl	8001e2c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001be2:	f004 fc97 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM17_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8001bec:	f000 f91e 	bl	8001e2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM17_Init+0xec>)
 8001bf2:	f000 fa9f 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3750      	adds	r7, #80	; 0x50
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200004f8 	.word	0x200004f8
 8001c04:	40014800 	.word	0x40014800

08001c08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_GPIO_Init+0x8c>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_GPIO_Init+0x8c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_GPIO_Init+0x8c>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_GPIO_Init+0x8c>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <MX_GPIO_Init+0x8c>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_GPIO_Init+0x8c>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2120      	movs	r1, #32
 8001c52:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c54:	f000 fef2 	bl	8002a3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480b      	ldr	r0, [pc, #44]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c6c:	f000 fd4c 	bl	8002708 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c70:	2320      	movs	r3, #32
 8001c72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0x90>)
 8001c88:	f000 fd3e 	bl	8002708 <HAL_GPIO_Init>

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000400 	.word	0x48000400

08001c9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
//	unsigned long t1 = DWT->CYCCNT;

	Handle_Encoder(&motor1, TIM2->CNT);
 8001ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	484c      	ldr	r0, [pc, #304]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001cb0:	f7ff f9be 	bl	8001030 <Handle_Encoder>
	Handle_Encoder(&motor2, TIM4->CNT);
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	484a      	ldr	r0, [pc, #296]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001cbe:	f7ff f9b7 	bl	8001030 <Handle_Encoder>
	Handle_Encoder(&motor3, TIM8->CNT);
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4849      	ldr	r0, [pc, #292]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001ccc:	f7ff f9b0 	bl	8001030 <Handle_Encoder>
	if (command.pid_type == 0) {
 8001cd0:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x74>
		feedback.motor1 = motor1.cur_enc_speed;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
		feedback.motor2 = motor2.cur_enc_speed;
 8001cea:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001cf8:	edc3 7a01 	vstr	s15, [r3, #4]
		feedback.motor3 = motor3.cur_enc_speed;
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d0a:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d0e:	e00b      	b.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0x8c>
	} else {
		feedback.motor1 = motor1.enc_speed_hist_avg;
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	4a38      	ldr	r2, [pc, #224]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d16:	6013      	str	r3, [r2, #0]
		feedback.motor2 = motor2.enc_speed_hist_avg;
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	4a36      	ldr	r2, [pc, #216]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d1e:	6053      	str	r3, [r2, #4]
		feedback.motor3 = motor3.enc_speed_hist_avg;
 8001d20:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d26:	6093      	str	r3, [r2, #8]
	}

	Calculate_PID(&motor1);
 8001d28:	482d      	ldr	r0, [pc, #180]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d2a:	f7ff f849 	bl	8000dc0 <Calculate_PID>
	Calculate_PID(&motor2);
 8001d2e:	482e      	ldr	r0, [pc, #184]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d30:	f7ff f846 	bl	8000dc0 <Calculate_PID>
	Calculate_PID(&motor3);
 8001d34:	482e      	ldr	r0, [pc, #184]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d36:	f7ff f843 	bl	8000dc0 <Calculate_PID>
	Set_Motor_Speed_f(&(TIM1->CCR2), &(TIM1->CCR3), motor1.cur_speed);
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d3c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d40:	eeb0 0a67 	vmov.f32	s0, s15
 8001d44:	492d      	ldr	r1, [pc, #180]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d46:	482e      	ldr	r0, [pc, #184]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001d48:	f7fe fefe 	bl	8000b48 <Set_Motor_Speed_f>
	Set_Motor_Speed_f(&(TIM1->CCR1), &(TIM3->CCR3), motor2.cur_speed);
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d4e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d52:	eeb0 0a67 	vmov.f32	s0, s15
 8001d56:	492b      	ldr	r1, [pc, #172]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001d58:	482b      	ldr	r0, [pc, #172]	; (8001e08 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001d5a:	f7fe fef5 	bl	8000b48 <Set_Motor_Speed_f>
	Set_Motor_Speed_f(&(TIM3->CCR1), &(TIM3->CCR2), motor3.cur_speed);
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d60:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d64:	eeb0 0a67 	vmov.f32	s0, s15
 8001d68:	4928      	ldr	r1, [pc, #160]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d6a:	4829      	ldr	r0, [pc, #164]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001d6c:	f7fe feec 	bl	8000b48 <Set_Motor_Speed_f>

// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 8001d70:	2108      	movs	r1, #8
 8001d72:	4828      	ldr	r0, [pc, #160]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001d74:	f000 fe4a 	bl	8002a0c <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_TIM_PeriodElapsedCallback+0xf0>
		TIM17->CCR1 = 0;
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
	}

// timeout
	if (command_received_ticker > 0) {
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x10a>
		command_received_ticker -= 1;
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001da2:	701a      	strb	r2, [r3, #0]
		// stop servo
		TIM17->CCR1 = 0;
	}
//	unsigned long t2 = DWT->CYCCNT;
//	unsigned long diff = t2 - t1;
}
 8001da4:	e018      	b.n	8001dd8 <HAL_TIM_PeriodElapsedCallback+0x13c>
		TIM1->CCR1 = 0;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001dcc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000638 	.word	0x20000638
 8001de4:	40000800 	.word	0x40000800
 8001de8:	200003cc 	.word	0x200003cc
 8001dec:	40013400 	.word	0x40013400
 8001df0:	200006d0 	.word	0x200006d0
 8001df4:	20000544 	.word	0x20000544
 8001df8:	200005c0 	.word	0x200005c0
 8001dfc:	40012c3c 	.word	0x40012c3c
 8001e00:	40012c38 	.word	0x40012c38
 8001e04:	4000043c 	.word	0x4000043c
 8001e08:	40012c34 	.word	0x40012c34
 8001e0c:	40000438 	.word	0x40000438
 8001e10:	40000434 	.word	0x40000434
 8001e14:	48000400 	.word	0x48000400
 8001e18:	40014800 	.word	0x40014800
 8001e1c:	200001a1 	.word	0x200001a1
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40014400 	.word	0x40014400

08001e2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x44>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_MspInit+0x44>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_MspInit+0x44>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x44>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x44>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6593      	str	r3, [r2, #88]	; 0x58
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x44>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e72:	f002 fa21 	bl	80042b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_TIM_PWM_MspInit+0x80>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10c      	bne.n	8001eb0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001eae:	e022      	b.n	8001ef6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_TIM_PWM_MspInit+0x88>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
}
 8001ed2:	e010      	b.n	8001ef6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_TIM_PWM_MspInit+0x8c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10b      	bne.n	8001ef6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_TIM_PWM_MspInit+0x84>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40014000 	.word	0x40014000

08001f14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d129      	bne.n	8001f8a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a53      	ldr	r2, [pc, #332]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f66:	2303      	movs	r3, #3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f76:	2301      	movs	r3, #1
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f000 fbc0 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f88:	e079      	b.n	800207e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_TIM_Encoder_MspInit+0x178>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d128      	bne.n	8001fe6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f94:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb0:	4a35      	ldr	r2, [pc, #212]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	482c      	ldr	r0, [pc, #176]	; (8002090 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001fe0:	f000 fb92 	bl	8002708 <HAL_GPIO_Init>
}
 8001fe4:	e04b      	b.n	800207e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <HAL_TIM_Encoder_MspInit+0x180>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d146      	bne.n	800207e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ff6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_TIM_Encoder_MspInit+0x174>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800204a:	2302      	movs	r3, #2
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002058:	f000 fb56 	bl	8002708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800205c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800206e:	230a      	movs	r3, #10
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <HAL_TIM_Encoder_MspInit+0x17c>)
 800207a:	f000 fb45 	bl	8002708 <HAL_GPIO_Init>
}
 800207e:	bf00      	nop
 8002080:	3738      	adds	r7, #56	; 0x38
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40000800 	.word	0x40000800
 8002090:	48000400 	.word	0x48000400
 8002094:	40013400 	.word	0x40013400

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_TIM_Base_MspInit+0x8c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d114      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 80020b0:	f043 0320 	orr.w	r3, r3, #32
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2037      	movs	r0, #55	; 0x37
 80020c8:	f000 fae9 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020cc:	2037      	movs	r0, #55	; 0x37
 80020ce:	f000 fb00 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80020d2:	e022      	b.n	800211a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_TIM_Base_MspInit+0x94>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10c      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
}
 80020f6:	e010      	b.n	800211a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_TIM_Base_MspInit+0x98>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10b      	bne.n	800211a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6613      	str	r3, [r2, #96]	; 0x60
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_TIM_Base_MspInit+0x90>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40001400 	.word	0x40001400
 8002128:	40021000 	.word	0x40021000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800

08002134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_TIM_MspPostInit+0x1b4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11e      	bne.n	8002194 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a64      	ldr	r2, [pc, #400]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b62      	ldr	r3, [pc, #392]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800216e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002180:	2306      	movs	r3, #6
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f000 fabb 	bl	8002708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002192:	e0a5      	b.n	80022e0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <HAL_TIM_MspPostInit+0x1bc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d139      	bne.n	8002212 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a4c      	ldr	r2, [pc, #304]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80021ce:	2350      	movs	r3, #80	; 0x50
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021de:	2302      	movs	r3, #2
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ec:	f000 fa8c 	bl	8002708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002200:	2302      	movs	r3, #2
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	483a      	ldr	r0, [pc, #232]	; (80022f4 <HAL_TIM_MspPostInit+0x1c0>)
 800220c:	f000 fa7c 	bl	8002708 <HAL_GPIO_Init>
}
 8002210:	e066      	b.n	80022e0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <HAL_TIM_MspPostInit+0x1c4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d11d      	bne.n	8002258 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002234:	2304      	movs	r3, #4
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002244:	2309      	movs	r3, #9
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f000 fa59 	bl	8002708 <HAL_GPIO_Init>
}
 8002256:	e043      	b.n	80022e0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <HAL_TIM_MspPostInit+0x1c8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d11c      	bne.n	800229c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4a21      	ldr	r2, [pc, #132]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800227a:	2310      	movs	r3, #16
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800228a:	2301      	movs	r3, #1
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002292:	4619      	mov	r1, r3
 8002294:	4817      	ldr	r0, [pc, #92]	; (80022f4 <HAL_TIM_MspPostInit+0x1c0>)
 8002296:	f000 fa37 	bl	8002708 <HAL_GPIO_Init>
}
 800229a:	e021      	b.n	80022e0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_TIM_MspPostInit+0x1cc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11c      	bne.n	80022e0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_TIM_MspPostInit+0x1b8>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80022ce:	2301      	movs	r3, #1
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022dc:	f000 fa14 	bl	8002708 <HAL_GPIO_Init>
}
 80022e0:	bf00      	nop
 80022e2:	3738      	adds	r7, #56	; 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	48000400 	.word	0x48000400
 80022f8:	40014000 	.word	0x40014000
 80022fc:	40014400 	.word	0x40014400
 8002300:	40014800 	.word	0x40014800

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f000 f8a8 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USB_LP_IRQHandler+0x10>)
 8002366:	f000 fca2 	bl	8002cae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20001454 	.word	0x20001454

08002374 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <TIM7_IRQHandler+0x10>)
 800237a:	f003 f9e6 	bl	800574a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000764 	.word	0x20000764

08002388 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <SystemInit+0x28>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <SystemInit+0x28>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SystemInit+0x28>)
 800239e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a2:	609a      	str	r2, [r3, #8]
#endif
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480d      	ldr	r0, [pc, #52]	; (80023f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80023ba:	490e      	ldr	r1, [pc, #56]	; (80023f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <LoopForever+0xe>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d0:	4c0b      	ldr	r4, [pc, #44]	; (8002400 <LoopForever+0x16>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023de:	f7ff ffd3 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e2:	f008 fb1f 	bl	800aa24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e6:	f7fe fe77 	bl	80010d8 <main>

080023ea <LoopForever>:

LoopForever:
    b LoopForever
 80023ea:	e7fe      	b.n	80023ea <LoopForever>
  ldr   r0, =_estack
 80023ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80023f8:	0800ab0c 	.word	0x0800ab0c
  ldr r2, =_sbss
 80023fc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8002400:	20001748 	.word	0x20001748

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>

08002406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 f939 	bl	8002688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f80e 	bl	8002438 <HAL_InitTick>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	e001      	b.n	800242c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002428:	f7ff fd08 	bl	8001e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800242c:	79fb      	ldrb	r3, [r7, #7]

}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <HAL_InitTick+0x68>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d022      	beq.n	8002492 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_InitTick+0x6c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_InitTick+0x68>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002458:	fbb1 f3f3 	udiv	r3, r1, r3
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f944 	bl	80026ee <HAL_SYSTICK_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10f      	bne.n	800248c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d809      	bhi.n	8002486 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002472:	2200      	movs	r2, #0
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	f04f 30ff 	mov.w	r0, #4294967295
 800247a:	f000 f910 	bl	800269e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_InitTick+0x70>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e007      	b.n	8002496 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e004      	b.n	8002496 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000004 	.word	0x20000004

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x1c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_IncTick+0x20>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_IncTick+0x1c>)
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200007b0 	.word	0x200007b0
 80024cc:	20000008 	.word	0x20000008

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200007b0 	.word	0x200007b0

080024e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	db0b      	blt.n	8002576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <__NVIC_EnableIRQ+0x38>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	2001      	movs	r0, #1
 800256e:	fa00 f202 	lsl.w	r2, r0, r2
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002654:	d301      	bcc.n	800265a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <SysTick_Config+0x40>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002662:	210f      	movs	r1, #15
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f7ff ff8e 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <SysTick_Config+0x40>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <SysTick_Config+0x40>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	e000e010 	.word	0xe000e010

08002688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff29 	bl	80024e8 <__NVIC_SetPriorityGrouping>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff40 	bl	8002530 <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff90 	bl	80025dc <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5f 	bl	8002588 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff33 	bl	800254c <__NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffa4 	bl	8002644 <SysTick_Config>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002716:	e15a      	b.n	80029ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 814c 	beq.w	80029c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00b      	beq.n	8002750 <HAL_GPIO_Init+0x48>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d007      	beq.n	8002750 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002744:	2b11      	cmp	r3, #17
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b12      	cmp	r3, #18
 800274e:	d130      	bne.n	80027b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002786:	2201      	movs	r2, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0201 	and.w	r2, r3, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0xea>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b12      	cmp	r3, #18
 80027f0:	d123      	bne.n	800283a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80a6 	beq.w	80029c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287c:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <HAL_GPIO_Init+0x2e4>)
 800287e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002880:	4a5a      	ldr	r2, [pc, #360]	; (80029ec <HAL_GPIO_Init+0x2e4>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6613      	str	r3, [r2, #96]	; 0x60
 8002888:	4b58      	ldr	r3, [pc, #352]	; (80029ec <HAL_GPIO_Init+0x2e4>)
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002894:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_GPIO_Init+0x2e8>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028be:	d01f      	beq.n	8002900 <HAL_GPIO_Init+0x1f8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a4c      	ldr	r2, [pc, #304]	; (80029f4 <HAL_GPIO_Init+0x2ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d019      	beq.n	80028fc <HAL_GPIO_Init+0x1f4>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a4b      	ldr	r2, [pc, #300]	; (80029f8 <HAL_GPIO_Init+0x2f0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_GPIO_Init+0x1f0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <HAL_GPIO_Init+0x2f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1ec>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a49      	ldr	r2, [pc, #292]	; (8002a00 <HAL_GPIO_Init+0x2f8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1e8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a48      	ldr	r2, [pc, #288]	; (8002a04 <HAL_GPIO_Init+0x2fc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1e4>
 80028e8:	2305      	movs	r3, #5
 80028ea:	e00a      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028ec:	2306      	movs	r3, #6
 80028ee:	e008      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e006      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028f4:	2303      	movs	r3, #3
 80028f6:	e004      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_GPIO_Init+0x1fa>
 8002900:	2300      	movs	r3, #0
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	4093      	lsls	r3, r2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002912:	4937      	ldr	r1, [pc, #220]	; (80029f0 <HAL_GPIO_Init+0x2e8>)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_GPIO_Init+0x300>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002944:	4a30      	ldr	r2, [pc, #192]	; (8002a08 <HAL_GPIO_Init+0x300>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <HAL_GPIO_Init+0x300>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800296e:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <HAL_GPIO_Init+0x300>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_GPIO_Init+0x300>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_GPIO_Init+0x300>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_GPIO_Init+0x300>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029c2:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <HAL_GPIO_Init+0x300>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f ae9d 	bne.w	8002718 <HAL_GPIO_Init+0x10>
  }
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010000 	.word	0x40010000
 80029f4:	48000400 	.word	0x48000400
 80029f8:	48000800 	.word	0x48000800
 80029fc:	48000c00 	.word	0x48000c00
 8002a00:	48001000 	.word	0x48001000
 8002a04:	48001400 	.word	0x48001400
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e001      	b.n	8002a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43d9      	mvns	r1, r3
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b08b      	sub	sp, #44	; 0x2c
 8002aa4:	af06      	add	r7, sp, #24
 8002aa6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0d7      	b.n	8002c62 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f007 fcbc 	bl	800a444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fe18 	bl	800670e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e04c      	b.n	8002b7e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3301      	adds	r3, #1
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	b298      	uxth	r0, r3
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3336      	adds	r3, #54	; 0x36
 8002b22:	4602      	mov	r2, r0
 8002b24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3303      	adds	r3, #3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	333c      	adds	r3, #60	; 0x3c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3340      	adds	r3, #64	; 0x40
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d3ad      	bcc.n	8002ae4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e044      	b.n	8002c18 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	3301      	adds	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3b5      	bcc.n	8002b8e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	687e      	ldr	r6, [r7, #4]
 8002c2a:	466d      	mov	r5, sp
 8002c2c:	f106 0410 	add.w	r4, r6, #16
 8002c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	602b      	str	r3, [r5, #0]
 8002c38:	1d33      	adds	r3, r6, #4
 8002c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	f003 fd81 	bl	8006744 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f001 fa5e 	bl	800411c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_PCD_Start+0x16>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e012      	b.n	8002ca6 <HAL_PCD_Start+0x3c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fd27 	bl	80066e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fd13 	bl	80086c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 fd18 	bl	80086f0 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d102      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb5b 	bl	8003388 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f005 fd0a 	bl	80086f0 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d112      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f007 fc1a 	bl	800a53a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d06:	2100      	movs	r1, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f91e 	bl	8002f4a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f005 fcec 	bl	80086f0 <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d22:	d10b      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d36:	b292      	uxth	r2, r2
 8002d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f005 fcd5 	bl	80086f0 <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d10b      	bne.n	8002d6a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d64:	b292      	uxth	r2, r2
 8002d66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f005 fcbe 	bl	80086f0 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d133      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0204 	bic.w	r2, r2, #4
 8002d92:	b292      	uxth	r2, r2
 8002d94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0208 	bic.w	r2, r2, #8
 8002daa:	b292      	uxth	r2, r2
 8002dac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f007 fdad 	bl	800a924 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f007 fbee 	bl	800a5ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de2:	b292      	uxth	r2, r2
 8002de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 fc7f 	bl	80086f0 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d126      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0208 	orr.w	r2, r2, #8
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0204 	orr.w	r2, r2, #4
 8002e40:	b292      	uxth	r2, r2
 8002e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f007 fb96 	bl	800a578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f005 fc4d 	bl	80086f0 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d13f      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d12b      	bne.n	8002eda <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0204 	orr.w	r2, r2, #4
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0208 	orr.w	r2, r2, #8
 8002eac:	b292      	uxth	r2, r2
 8002eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f007 fd26 	bl	800a924 <HAL_PCDEx_LPM_Callback>
 8002ed8:	e002      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f007 fb4c 	bl	800a578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f005 fc03 	bl	80086f0 <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef4:	d10e      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f007 fb05 	bl	800a51e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f005 fbe9 	bl	80086f0 <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f28:	d10b      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_SetAddress+0x1a>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e013      	b.n	8002f8c <HAL_PCD_SetAddress+0x42>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f005 fb8c 	bl	800869a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	70fb      	strb	r3, [r7, #3]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	803b      	strh	r3, [r7, #0]
 8002faa:	4613      	mov	r3, r2
 8002fac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da0e      	bge.n	8002fd8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00e      	b.n	8002ff6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003002:	883a      	ldrh	r2, [r7, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	78ba      	ldrb	r2, [r7, #2]
 800300c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003020:	78bb      	ldrb	r3, [r7, #2]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d102      	bne.n	800302c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_EP_Open+0xa6>
 8003036:	2302      	movs	r3, #2
 8003038:	e00e      	b.n	8003058 <HAL_PCD_EP_Open+0xc4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fb9d 	bl	8006788 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003056:	7afb      	ldrb	r3, [r7, #11]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800306c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003070:	2b00      	cmp	r3, #0
 8003072:	da0e      	bge.n	8003092 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	705a      	strb	r2, [r3, #1]
 8003090:	e00e      	b.n	80030b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 0207 	and.w	r2, r3, #7
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_PCD_EP_Close+0x6a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e00e      	b.n	80030e8 <HAL_PCD_EP_Close+0x88>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 fec3 	bl	8006e64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003100:	7afb      	ldrb	r3, [r7, #11]
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003130:	7afb      	ldrb	r3, [r7, #11]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	b2da      	uxtb	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6979      	ldr	r1, [r7, #20]
 800314c:	4618      	mov	r0, r3
 800314e:	f004 f876 	bl	800723e <USB_EPStartXfer>
 8003152:	e005      	b.n	8003160 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 f86f 	bl	800723e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0207 	and.w	r2, r3, #7
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800318c:	681b      	ldr	r3, [r3, #0]
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	460b      	mov	r3, r1
 80031a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	7afb      	ldrb	r3, [r7, #11]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2201      	movs	r2, #1
 80031e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 f81b 	bl	800723e <USB_EPStartXfer>
 8003208:	e005      	b.n	8003216 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	4618      	mov	r0, r3
 8003212:	f004 f814 	bl	800723e <USB_EPStartXfer>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	f003 0207 	and.w	r2, r3, #7
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d901      	bls.n	800323e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e04c      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da0e      	bge.n	8003264 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	705a      	strb	r2, [r3, #1]
 8003262:	e00c      	b.n	800327e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_PCD_EP_SetStall+0x7e>
 800329a:	2302      	movs	r3, #2
 800329c:	e01c      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xb8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f005 f8f5 	bl	800849c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f005 fa21 	bl	8008710 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d901      	bls.n	80032fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e040      	b.n	8003380 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	da0e      	bge.n	8003324 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	705a      	strb	r2, [r3, #1]
 8003322:	e00e      	b.n	8003342 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 0207 	and.w	r2, r3, #7
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_PCD_EP_ClrStall+0x82>
 800335e:	2302      	movs	r3, #2
 8003360:	e00e      	b.n	8003380 <HAL_PCD_EP_ClrStall+0xa0>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	4618      	mov	r0, r3
 8003372:	f005 f8e4 	bl	800853e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08e      	sub	sp, #56	; 0x38
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003390:	e2d1      	b.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800339a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800339c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80033a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f040 8152 	bne.w	8003656 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d150      	bne.n	800345e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033cc:	81fb      	strh	r3, [r7, #14]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033dc:	b29b      	uxth	r3, r3
 80033de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3328      	adds	r3, #40	; 0x28
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	441a      	add	r2, r3
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800341c:	2100      	movs	r1, #0
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f007 f863 	bl	800a4ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8282 	beq.w	8003936 <PCD_EP_ISR_Handler+0x5ae>
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 827d 	bne.w	8003936 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003448:	b2da      	uxtb	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b292      	uxth	r2, r2
 8003450:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800345c:	e26b      	b.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800346e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d032      	beq.n	80034de <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003480:	b29b      	uxth	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	4413      	add	r3, r2
 8003492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f005 f979 	bl	80087aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034c4:	4013      	ands	r3, r2
 80034c6:	823b      	strh	r3, [r7, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	8a3a      	ldrh	r2, [r7, #16]
 80034ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034d2:	b292      	uxth	r2, r2
 80034d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f006 ffda 	bl	800a490 <HAL_PCD_SetupStageCallback>
 80034dc:	e22b      	b.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f280 8227 	bge.w	8003936 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034f4:	4013      	ands	r3, r2
 80034f6:	83bb      	strh	r3, [r7, #28]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	8bba      	ldrh	r2, [r7, #28]
 80034fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003502:	b292      	uxth	r2, r2
 8003504:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	4413      	add	r3, r2
 8003520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d019      	beq.n	800356a <PCD_EP_ISR_Handler+0x1e2>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d015      	beq.n	800356a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	6959      	ldr	r1, [r3, #20]
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800354e:	b29b      	uxth	r3, r3
 8003550:	f005 f92b 	bl	80087aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	441a      	add	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003562:	2100      	movs	r1, #0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f006 ffa5 	bl	800a4b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003578:	b29b      	uxth	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d112      	bne.n	80035b8 <PCD_EP_ISR_Handler+0x230>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800359c:	b29a      	uxth	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e02f      	b.n	8003618 <PCD_EP_ISR_Handler+0x290>
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b3e      	cmp	r3, #62	; 0x3e
 80035be:	d813      	bhi.n	80035e8 <PCD_EP_ISR_Handler+0x260>
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <PCD_EP_ISR_Handler+0x252>
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3301      	adds	r3, #1
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	b29b      	uxth	r3, r3
 80035de:	029b      	lsls	r3, r3, #10
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	e017      	b.n	8003618 <PCD_EP_ISR_Handler+0x290>
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <PCD_EP_ISR_Handler+0x27a>
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	3b01      	subs	r3, #1
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	b29b      	uxth	r3, r3
 8003606:	029b      	lsls	r3, r3, #10
 8003608:	b29b      	uxth	r3, r3
 800360a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003612:	b29a      	uxth	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003628:	827b      	strh	r3, [r7, #18]
 800362a:	8a7b      	ldrh	r3, [r7, #18]
 800362c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003630:	827b      	strh	r3, [r7, #18]
 8003632:	8a7b      	ldrh	r3, [r7, #18]
 8003634:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003638:	827b      	strh	r3, [r7, #18]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	8a7b      	ldrh	r3, [r7, #18]
 8003640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	b29b      	uxth	r3, r3
 8003652:	8013      	strh	r3, [r2, #0]
 8003654:	e16f      	b.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003668:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800366c:	2b00      	cmp	r3, #0
 800366e:	f280 80e4 	bge.w	800383a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003688:	4013      	ands	r3, r2
 800368a:	853b      	strh	r3, [r7, #40]	; 0x28
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800369c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a0:	b292      	uxth	r2, r2
 80036a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	7b1b      	ldrb	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d120      	bne.n	8003704 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80036e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8083 	beq.w	80037f6 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	6959      	ldr	r1, [r3, #20]
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	88da      	ldrh	r2, [r3, #6]
 80036fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036fe:	f005 f854 	bl	80087aa <USB_ReadPMA>
 8003702:	e078      	b.n	80037f6 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d108      	bne.n	800371e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800370c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800370e:	461a      	mov	r2, r3
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f91d 	bl	8003952 <HAL_PCD_EP_DB_Receive>
 8003718:	4603      	mov	r3, r0
 800371a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800371c:	e06b      	b.n	80037f6 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	847b      	strh	r3, [r7, #34]	; 0x22
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	441a      	add	r2, r3
 8003748:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800374a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003756:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800375a:	b29b      	uxth	r3, r3
 800375c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01f      	beq.n	80037b8 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	4413      	add	r3, r2
 8003792:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800379e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d028      	beq.n	80037f6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	6959      	ldr	r1, [r3, #20]
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	891a      	ldrh	r2, [r3, #8]
 80037b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037b2:	f004 fffa 	bl	80087aa <USB_ReadPMA>
 80037b6:	e01e      	b.n	80037f6 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	6959      	ldr	r1, [r3, #20]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	895a      	ldrh	r2, [r3, #10]
 80037f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037f2:	f004 ffda 	bl	80087aa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037fc:	441a      	add	r2, r3
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003808:	441a      	add	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <PCD_EP_ISR_Handler+0x498>
 8003816:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	429a      	cmp	r2, r3
 800381e:	d206      	bcs.n	800382e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f006 fe44 	bl	800a4b4 <HAL_PCD_DataOutStageCallback>
 800382c:	e005      	b.n	800383a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003834:	4618      	mov	r0, r3
 8003836:	f003 fd02 	bl	800723e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800383a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d078      	beq.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8003844:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	843b      	strh	r3, [r7, #32]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	441a      	add	r2, r3
 8003882:	8c3b      	ldrh	r3, [r7, #32]
 8003884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388c:	b29b      	uxth	r3, r3
 800388e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	78db      	ldrb	r3, [r3, #3]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d108      	bne.n	80038aa <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800389c:	2b02      	cmp	r3, #2
 800389e:	d144      	bne.n	800392a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13f      	bne.n	800392a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ce:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	8bfb      	ldrh	r3, [r7, #30]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d906      	bls.n	80038e8 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	8bfb      	ldrh	r3, [r7, #30]
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	619a      	str	r2, [r3, #24]
 80038e6:	e002      	b.n	80038ee <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2200      	movs	r2, #0
 80038ec:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f006 fdf4 	bl	800a4ea <HAL_PCD_DataInStageCallback>
 8003902:	e018      	b.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	8bfb      	ldrh	r3, [r7, #30]
 800390a:	441a      	add	r2, r3
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	8bfb      	ldrh	r3, [r7, #30]
 8003916:	441a      	add	r2, r3
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003922:	4618      	mov	r0, r3
 8003924:	f003 fc8b 	bl	800723e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003928:	e005      	b.n	8003936 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800392a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800392c:	461a      	mov	r2, r3
 800392e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f917 	bl	8003b64 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800393e:	b29b      	uxth	r3, r3
 8003940:	b21b      	sxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	f6ff ad25 	blt.w	8003392 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3738      	adds	r7, #56	; 0x38
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b088      	sub	sp, #32
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d07c      	beq.n	8003a64 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	4413      	add	r3, r2
 8003984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	8b7b      	ldrh	r3, [r7, #26]
 8003996:	429a      	cmp	r2, r3
 8003998:	d306      	bcc.n	80039a8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	8b7b      	ldrh	r3, [r7, #26]
 80039a0:	1ad2      	subs	r2, r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	619a      	str	r2, [r3, #24]
 80039a6:	e002      	b.n	80039ae <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d123      	bne.n	80039fe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d0:	833b      	strh	r3, [r7, #24]
 80039d2:	8b3b      	ldrh	r3, [r7, #24]
 80039d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039d8:	833b      	strh	r3, [r7, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	8b3b      	ldrh	r3, [r7, #24]
 80039ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01f      	beq.n	8003a48 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	82fb      	strh	r3, [r7, #22]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a48:	8b7b      	ldrh	r3, [r7, #26]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8085 	beq.w	8003b5a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6959      	ldr	r1, [r3, #20]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	891a      	ldrh	r2, [r3, #8]
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	f004 fea4 	bl	80087aa <USB_ReadPMA>
 8003a62:	e07a      	b.n	8003b5a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a88:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	8b7b      	ldrh	r3, [r7, #26]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d306      	bcc.n	8003aa2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	8b7b      	ldrh	r3, [r7, #26]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	619a      	str	r2, [r3, #24]
 8003aa0:	e002      	b.n	8003aa8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d123      	bne.n	8003af8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	83fb      	strh	r3, [r7, #30]
 8003acc:	8bfb      	ldrh	r3, [r7, #30]
 8003ace:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ad2:	83fb      	strh	r3, [r7, #30]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	8bfb      	ldrh	r3, [r7, #30]
 8003ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1c:	83bb      	strh	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	8bbb      	ldrh	r3, [r7, #28]
 8003b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b42:	8b7b      	ldrh	r3, [r7, #26]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6959      	ldr	r1, [r3, #20]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	895a      	ldrh	r2, [r3, #10]
 8003b54:	8b7b      	ldrh	r3, [r7, #26]
 8003b56:	f004 fe28 	bl	80087aa <USB_ReadPMA>
    }
  }

  return count;
 8003b5a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b092      	sub	sp, #72	; 0x48
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8130 	beq.w	8003dde <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d906      	bls.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	619a      	str	r2, [r3, #24]
 8003bba:	e002      	b.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12c      	bne.n	8003c24 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f006 fc8a 	bl	800a4ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 822d 	beq.w	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	827b      	strh	r3, [r7, #18]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	441a      	add	r2, r3
 8003c0c:	8a7b      	ldrh	r3, [r7, #18]
 8003c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	8013      	strh	r3, [r2, #0]
 8003c22:	e20b      	b.n	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01f      	beq.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 81e1 	bne.w	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c80:	441a      	add	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d309      	bcc.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	621a      	str	r2, [r3, #32]
 8003cb0:	e014      	b.n	8003cdc <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8003cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003cc6:	e009      	b.n	8003cdc <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d155      	bne.n	8003d90 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	00da      	lsls	r2, r3, #3
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d112      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e047      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d3c:	d811      	bhi.n	8003d62 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	3301      	adds	r3, #1
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	029b      	lsls	r3, r3, #10
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	801a      	strh	r2, [r3, #0]
 8003d60:	e032      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_PCD_EP_DB_Transmit+0x214>
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	029b      	lsls	r3, r3, #10
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	801a      	strh	r2, [r3, #0]
 8003d8e:	e01b      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d117      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x264>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	4413      	add	r3, r2
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6959      	ldr	r1, [r3, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	891a      	ldrh	r2, [r3, #8]
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f004 fca6 	bl	8008728 <USB_WritePMA>
 8003ddc:	e12e      	b.n	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e02:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d306      	bcc.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e14:	1ad2      	subs	r2, r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	619a      	str	r2, [r3, #24]
 8003e1a:	e002      	b.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d12c      	bne.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f006 fb5a 	bl	800a4ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 80fd 	bne.w	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	8013      	strh	r3, [r2, #0]
 8003e82:	e0db      	b.n	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11f      	bne.n	8003ece <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	f040 80b1 	bne.w	800403c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003eec:	441a      	add	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6a1a      	ldr	r2, [r3, #32]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d309      	bcc.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6a1a      	ldr	r2, [r3, #32]
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	1ad2      	subs	r2, r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	621a      	str	r2, [r3, #32]
 8003f10:	e014      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003f1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f26:	e009      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d155      	bne.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x492>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	4413      	add	r3, r2
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d112      	bne.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x43a>
 8003f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e044      	b.n	8004028 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa2:	d811      	bhi.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x464>
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_PCD_EP_DB_Transmit+0x456>
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	029b      	lsls	r3, r3, #10
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	e02f      	b.n	8004028 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_PCD_EP_DB_Transmit+0x47a>
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	e018      	b.n	8004028 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d114      	bne.n	8004028 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	4413      	add	r3, r2
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	00da      	lsls	r2, r3, #3
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	4413      	add	r3, r2
 800401a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800401e:	633b      	str	r3, [r7, #48]	; 0x30
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	b29a      	uxth	r2, r3
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6959      	ldr	r1, [r3, #20]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	895a      	ldrh	r2, [r3, #10]
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	b29b      	uxth	r3, r3
 8004038:	f004 fb76 	bl	8008728 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004056:	823b      	strh	r3, [r7, #16]
 8004058:	8a3b      	ldrh	r3, [r7, #16]
 800405a:	f083 0310 	eor.w	r3, r3, #16
 800405e:	823b      	strh	r3, [r7, #16]
 8004060:	8a3b      	ldrh	r3, [r7, #16]
 8004062:	f083 0320 	eor.w	r3, r3, #32
 8004066:	823b      	strh	r3, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	8a3b      	ldrh	r3, [r7, #16]
 8004078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3748      	adds	r7, #72	; 0x48
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	817b      	strh	r3, [r7, #10]
 80040a4:	4613      	mov	r3, r2
 80040a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80040a8:	897b      	ldrh	r3, [r7, #10]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e009      	b.n	80040e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040cc:	897a      	ldrh	r2, [r7, #10]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	80da      	strh	r2, [r3, #6]
 80040f4:	e00b      	b.n	800410e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2201      	movs	r2, #1
 80040fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	b29a      	uxth	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b29a      	uxth	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004140:	b29b      	uxth	r3, r3
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004154:	b29b      	uxth	r3, r3
 8004156:	f043 0302 	orr.w	r3, r3, #2
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d141      	bne.n	8004202 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800417e:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d131      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800418c:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004192:	4a46      	ldr	r2, [pc, #280]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041a4:	4a41      	ldr	r2, [pc, #260]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ac:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2232      	movs	r2, #50	; 0x32
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	4a3f      	ldr	r2, [pc, #252]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	0c9b      	lsrs	r3, r3, #18
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041c2:	e002      	b.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ca:	4b38      	ldr	r3, [pc, #224]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d102      	bne.n	80041de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f2      	bne.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ea:	d158      	bne.n	800429e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e057      	b.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041f0:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f6:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004200:	e04d      	b.n	800429e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d141      	bne.n	800428e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800420a:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d131      	bne.n	800427c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421e:	4a23      	ldr	r2, [pc, #140]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004236:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004238:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2232      	movs	r2, #50	; 0x32
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	0c9b      	lsrs	r3, r3, #18
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424e:	e002      	b.n	8004256 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3b01      	subs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004262:	d102      	bne.n	800426a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f2      	bne.n	8004250 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004276:	d112      	bne.n	800429e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e011      	b.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800428c:	e007      	b.n	800429e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40007000 	.word	0x40007000
 80042b0:	20000000 	.word	0x20000000
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c6:	6093      	str	r3, [r2, #8]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40007000 	.word	0x40007000

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e308      	b.n	80048fc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d075      	beq.n	80043e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	4ba3      	ldr	r3, [pc, #652]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	4ba0      	ldr	r3, [pc, #640]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d102      	bne.n	8004316 <HAL_RCC_OscConfig+0x3e>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b03      	cmp	r3, #3
 8004314:	d002      	beq.n	800431c <HAL_RCC_OscConfig+0x44>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05b      	beq.n	80043e0 <HAL_RCC_OscConfig+0x108>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d157      	bne.n	80043e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e2e3      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x74>
 800433e:	4b91      	ldr	r3, [pc, #580]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a90      	ldr	r2, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x98>
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a8a      	ldr	r2, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a83      	ldr	r2, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a80      	ldr	r2, [pc, #512]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe f89e 	bl	80024d0 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe f89a 	bl	80024d0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e2a8      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xc0>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe f88a 	bl	80024d0 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe f886 	bl	80024d0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e294      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d2:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0xe8>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d075      	beq.n	80044da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f8:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b0c      	cmp	r3, #12
 8004406:	d102      	bne.n	800440e <HAL_RCC_OscConfig+0x136>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d002      	beq.n	8004414 <HAL_RCC_OscConfig+0x13c>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11f      	bne.n	8004454 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_OscConfig+0x154>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e267      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b55      	ldr	r3, [pc, #340]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	4952      	ldr	r1, [pc, #328]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004440:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd fff7 	bl	8002438 <HAL_InitTick>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d043      	beq.n	80044d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e253      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d023      	beq.n	80044a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800445c:	4b49      	ldr	r3, [pc, #292]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a48      	ldr	r2, [pc, #288]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe f832 	bl	80024d0 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004470:	f7fe f82e 	bl	80024d0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e23c      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004482:	4b40      	ldr	r3, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	4939      	ldr	r1, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
 80044a2:	e01a      	b.n	80044da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a4:	4b37      	ldr	r3, [pc, #220]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a36      	ldr	r2, [pc, #216]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe f80e 	bl	80024d0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b8:	f7fe f80a 	bl	80024d0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e218      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x1e0>
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d03c      	beq.n	8004560 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01c      	beq.n	8004528 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f4:	4a23      	ldr	r2, [pc, #140]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fe:	f7fd ffe7 	bl	80024d0 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004506:	f7fd ffe3 	bl	80024d0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1f1      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ef      	beq.n	8004506 <HAL_RCC_OscConfig+0x22e>
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd ffca 	bl	80024d0 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004540:	f7fd ffc6 	bl	80024d0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e1d4      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ef      	bne.n	8004540 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80ab 	beq.w	80046c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004572:	4b04      	ldr	r3, [pc, #16]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x2b4>
 800457e:	2301      	movs	r3, #1
 8004580:	e005      	b.n	800458e <HAL_RCC_OscConfig+0x2b6>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	20000004 	.word	0x20000004
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4baf      	ldr	r3, [pc, #700]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	4aae      	ldr	r2, [pc, #696]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6593      	str	r3, [r2, #88]	; 0x58
 800459e:	4bac      	ldr	r3, [pc, #688]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045aa:	2301      	movs	r3, #1
 80045ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ae:	4ba9      	ldr	r3, [pc, #676]	; (8004854 <HAL_RCC_OscConfig+0x57c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d118      	bne.n	80045ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ba:	4ba6      	ldr	r3, [pc, #664]	; (8004854 <HAL_RCC_OscConfig+0x57c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4aa5      	ldr	r2, [pc, #660]	; (8004854 <HAL_RCC_OscConfig+0x57c>)
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c6:	f7fd ff83 	bl	80024d0 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ce:	f7fd ff7f 	bl	80024d0 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e18d      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e0:	4b9c      	ldr	r3, [pc, #624]	; (8004854 <HAL_RCC_OscConfig+0x57c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_RCC_OscConfig+0x32e>
 80045f4:	4b96      	ldr	r3, [pc, #600]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	4a95      	ldr	r2, [pc, #596]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004604:	e024      	b.n	8004650 <HAL_RCC_OscConfig+0x378>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b05      	cmp	r3, #5
 800460c:	d110      	bne.n	8004630 <HAL_RCC_OscConfig+0x358>
 800460e:	4b90      	ldr	r3, [pc, #576]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004614:	4a8e      	ldr	r2, [pc, #568]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461e:	4b8c      	ldr	r3, [pc, #560]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	4a8a      	ldr	r2, [pc, #552]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462e:	e00f      	b.n	8004650 <HAL_RCC_OscConfig+0x378>
 8004630:	4b87      	ldr	r3, [pc, #540]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a86      	ldr	r2, [pc, #536]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004640:	4b83      	ldr	r3, [pc, #524]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	4a82      	ldr	r2, [pc, #520]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d016      	beq.n	8004686 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd ff3a 	bl	80024d0 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd ff36 	bl	80024d0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e142      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004676:	4b76      	ldr	r3, [pc, #472]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ed      	beq.n	8004660 <HAL_RCC_OscConfig+0x388>
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd ff23 	bl	80024d0 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd ff1f 	bl	80024d0 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e12b      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ed      	bne.n	800468e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a64      	ldr	r2, [pc, #400]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d03c      	beq.n	800474a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01c      	beq.n	8004712 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046d8:	4b5d      	ldr	r3, [pc, #372]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80046da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046de:	4a5c      	ldr	r2, [pc, #368]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd fef2 	bl	80024d0 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f0:	f7fd feee 	bl	80024d0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0fc      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004702:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ef      	beq.n	80046f0 <HAL_RCC_OscConfig+0x418>
 8004710:	e01b      	b.n	800474a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004712:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004718:	4a4d      	ldr	r2, [pc, #308]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fd fed5 	bl	80024d0 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800472a:	f7fd fed1 	bl	80024d0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0df      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800473c:	4b44      	ldr	r3, [pc, #272]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800473e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ef      	bne.n	800472a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80d3 	beq.w	80048fa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004754:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b0c      	cmp	r3, #12
 800475e:	f000 808d 	beq.w	800487c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d15a      	bne.n	8004820 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a38      	ldr	r2, [pc, #224]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fd feab 	bl	80024d0 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477e:	f7fd fea7 	bl	80024d0 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0b5      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479c:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_OscConfig+0x580>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6a11      	ldr	r1, [r2, #32]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ac:	3a01      	subs	r2, #1
 80047ae:	0112      	lsls	r2, r2, #4
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047b6:	0212      	lsls	r2, r2, #8
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0552      	lsls	r2, r2, #21
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0652      	lsls	r2, r2, #25
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047d6:	06d2      	lsls	r2, r2, #27
 80047d8:	430a      	orrs	r2, r1
 80047da:	491d      	ldr	r1, [pc, #116]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 80047f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fe6a 	bl	80024d0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fd fe66 	bl	80024d0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e074      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x528>
 800481e:	e06c      	b.n	80048fa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a04      	ldr	r2, [pc, #16]	; (8004850 <HAL_RCC_OscConfig+0x578>)
 800483e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004846:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd fe42 	bl	80024d0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484e:	e00e      	b.n	800486e <HAL_RCC_OscConfig+0x596>
 8004850:	40021000 	.word	0x40021000
 8004854:	40007000 	.word	0x40007000
 8004858:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fd fe38 	bl	80024d0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e046      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800486e:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_OscConfig+0x62c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x584>
 800487a:	e03e      	b.n	80048fa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e039      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_RCC_OscConfig+0x62c>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0203 	and.w	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	429a      	cmp	r2, r3
 800489a:	d12c      	bne.n	80048f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	3b01      	subs	r3, #1
 80048a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d123      	bne.n	80048f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d113      	bne.n	80048f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	3b01      	subs	r3, #1
 80048dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e11e      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b91      	ldr	r3, [pc, #580]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d910      	bls.n	8004950 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b8e      	ldr	r3, [pc, #568]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 020f 	bic.w	r2, r3, #15
 8004936:	498c      	ldr	r1, [pc, #560]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b8a      	ldr	r3, [pc, #552]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e106      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d073      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d129      	bne.n	80049b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004964:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0f4      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004974:	f000 f966 	bl	8004c44 <RCC_GetSysClockFreqFromPLLSource>
 8004978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4a7c      	ldr	r2, [pc, #496]	; (8004b70 <HAL_RCC_ClockConfig+0x268>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d93f      	bls.n	8004a02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004982:	4b7a      	ldr	r3, [pc, #488]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004996:	2b00      	cmp	r3, #0
 8004998:	d033      	beq.n	8004a02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d12f      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049a2:	4b72      	ldr	r3, [pc, #456]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049aa:	4a70      	ldr	r2, [pc, #448]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e024      	b.n	8004a02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c0:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0c6      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d0:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0be      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049e0:	f000 f8ce 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4a61      	ldr	r2, [pc, #388]	; (8004b70 <HAL_RCC_ClockConfig+0x268>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d909      	bls.n	8004a02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f6:	4a5d      	ldr	r2, [pc, #372]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 80049f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a02:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4957      	ldr	r1, [pc, #348]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fd fd5c 	bl	80024d0 <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1c:	f7fd fd58 	bl	80024d0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e095      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 020c 	and.w	r2, r3, #12
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1eb      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d023      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a42      	ldr	r2, [pc, #264]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a74:	4b3d      	ldr	r3, [pc, #244]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a7c:	4a3b      	ldr	r2, [pc, #236]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4936      	ldr	r1, [pc, #216]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a9e:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aaa:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d21d      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 020f 	bic.w	r2, r3, #15
 8004ac0:	4929      	ldr	r1, [pc, #164]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ac8:	f7fd fd02 	bl	80024d0 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fd fcfe 	bl	80024d0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e03b      	b.n	8004b5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCC_ClockConfig+0x260>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1ed      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4917      	ldr	r1, [pc, #92]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	490f      	ldr	r1, [pc, #60]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b32:	f000 f825 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004b36:	4601      	mov	r1, r0
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_ClockConfig+0x264>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <HAL_RCC_ClockConfig+0x26c>)
 8004b44:	5cd3      	ldrb	r3, [r2, r3]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <HAL_RCC_ClockConfig+0x270>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_RCC_ClockConfig+0x274>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fc6e 	bl	8002438 <HAL_InitTick>
 8004b5c:	4603      	mov	r3, r0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	04c4b400 	.word	0x04c4b400
 8004b74:	0800aaf4 	.word	0x0800aaf4
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	20000004 	.word	0x20000004

08004b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d102      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e047      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d102      	bne.n	8004baa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ba4:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e03e      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d136      	bne.n	8004c24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bde:	68d2      	ldr	r2, [r2, #12]
 8004be0:	0a12      	lsrs	r2, r2, #8
 8004be2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	617b      	str	r3, [r7, #20]
      break;
 8004bec:	e00c      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bee:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	0a12      	lsrs	r2, r2, #8
 8004bfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
      break;
 8004c06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	0e5b      	lsrs	r3, r3, #25
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	3301      	adds	r3, #1
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	e001      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c28:	693b      	ldr	r3, [r7, #16]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	007a1200 	.word	0x007a1200

08004c44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d10c      	bne.n	8004c82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c72:	68d2      	ldr	r2, [r2, #12]
 8004c74:	0a12      	lsrs	r2, r2, #8
 8004c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
    break;
 8004c80:	e00c      	b.n	8004c9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	0a12      	lsrs	r2, r2, #8
 8004c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]
    break;
 8004c9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0e5b      	lsrs	r3, r3, #25
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cb6:	687b      	ldr	r3, [r7, #4]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	007a1200 	.word	0x007a1200
 8004ccc:	00f42400 	.word	0x00f42400

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cd8:	2300      	movs	r3, #0
 8004cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8098 	beq.w	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf2:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	4a3f      	ldr	r2, [pc, #252]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6593      	str	r3, [r2, #88]	; 0x58
 8004d0a:	4b3d      	ldr	r3, [pc, #244]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d16:	2301      	movs	r3, #1
 8004d18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a39      	ldr	r2, [pc, #228]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d26:	f7fd fbd3 	bl	80024d0 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2c:	e009      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2e:	f7fd fbcf 	bl	80024d0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d902      	bls.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004d40:	e005      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d42:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0ef      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d159      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01e      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d019      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d70:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d7c:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8c:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fd fb8f 	bl	80024d0 <HAL_GetTick>
 8004db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db4:	e00b      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fd fb8b 	bl	80024d0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d902      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	74fb      	strb	r3, [r7, #19]
            break;
 8004dcc:	e006      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dce:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ec      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	4903      	ldr	r1, [pc, #12]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004df8:	e008      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	74bb      	strb	r3, [r7, #18]
 8004dfe:	e005      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e0c:	7c7b      	ldrb	r3, [r7, #17]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d105      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e12:	4ba6      	ldr	r3, [pc, #664]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4aa5      	ldr	r2, [pc, #660]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e2a:	4ba0      	ldr	r3, [pc, #640]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f023 0203 	bic.w	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	499c      	ldr	r1, [pc, #624]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e4c:	4b97      	ldr	r3, [pc, #604]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f023 020c 	bic.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	4994      	ldr	r1, [pc, #592]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e6e:	4b8f      	ldr	r3, [pc, #572]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	498b      	ldr	r1, [pc, #556]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e90:	4b86      	ldr	r3, [pc, #536]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4983      	ldr	r1, [pc, #524]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eb2:	4b7e      	ldr	r3, [pc, #504]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	497a      	ldr	r1, [pc, #488]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ed4:	4b75      	ldr	r3, [pc, #468]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	4972      	ldr	r1, [pc, #456]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ef6:	4b6d      	ldr	r3, [pc, #436]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4969      	ldr	r1, [pc, #420]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f18:	4b64      	ldr	r3, [pc, #400]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	4961      	ldr	r1, [pc, #388]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	4958      	ldr	r1, [pc, #352]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f5c:	4b53      	ldr	r3, [pc, #332]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	4950      	ldr	r1, [pc, #320]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a4a      	ldr	r2, [pc, #296]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f94:	4b45      	ldr	r3, [pc, #276]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	4942      	ldr	r1, [pc, #264]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb4:	4b3d      	ldr	r3, [pc, #244]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a3c      	ldr	r2, [pc, #240]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fcc:	4b37      	ldr	r3, [pc, #220]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4934      	ldr	r1, [pc, #208]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fec:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a2e      	ldr	r2, [pc, #184]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005004:	4b29      	ldr	r3, [pc, #164]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	4926      	ldr	r1, [pc, #152]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005022:	d105      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005024:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a20      	ldr	r2, [pc, #128]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800502a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800502e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005042:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	4918      	ldr	r1, [pc, #96]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800505c:	4b13      	ldr	r3, [pc, #76]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a12      	ldr	r2, [pc, #72]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005066:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d015      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	490a      	ldr	r1, [pc, #40]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005092:	d105      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a04      	ldr	r2, [pc, #16]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800509a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000

080050b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e049      	b.n	8005156 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fc ffde 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f000 fde2 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d001      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e04a      	b.n	800520e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <HAL_TIM_Base_Start_IT+0xbc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x6c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a2:	d013      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x6c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_TIM_Base_Start_IT+0xc0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x6c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <HAL_TIM_Base_Start_IT+0xc4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x6c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_TIM_Base_Start_IT+0xc8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x6c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_TIM_Base_Start_IT+0xcc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d115      	bne.n	80051f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_TIM_Base_Start_IT+0xd0>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b06      	cmp	r3, #6
 80051dc:	d015      	beq.n	800520a <HAL_TIM_Base_Start_IT+0xaa>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e4:	d011      	beq.n	800520a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	e008      	b.n	800520a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e000      	b.n	800520c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40013400 	.word	0x40013400
 800522c:	40014000 	.word	0x40014000
 8005230:	00010007 	.word	0x00010007

08005234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e049      	b.n	80052da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fe12 	bl	8001e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f000 fd20 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <HAL_TIM_PWM_Start+0x24>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e03c      	b.n	8005382 <HAL_TIM_PWM_Start+0x9e>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d109      	bne.n	8005322 <HAL_TIM_PWM_Start+0x3e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e02f      	b.n	8005382 <HAL_TIM_PWM_Start+0x9e>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start+0x58>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e022      	b.n	8005382 <HAL_TIM_PWM_Start+0x9e>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b0c      	cmp	r3, #12
 8005340:	d109      	bne.n	8005356 <HAL_TIM_PWM_Start+0x72>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e015      	b.n	8005382 <HAL_TIM_PWM_Start+0x9e>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b10      	cmp	r3, #16
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x8c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e008      	b.n	8005382 <HAL_TIM_PWM_Start+0x9e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e097      	b.n	80054ba <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xb6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005398:	e023      	b.n	80053e2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0xc6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	e01b      	b.n	80053e2 <HAL_TIM_PWM_Start+0xfe>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Start+0xd6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	e013      	b.n	80053e2 <HAL_TIM_PWM_Start+0xfe>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	d104      	bne.n	80053ca <HAL_TIM_PWM_Start+0xe6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c8:	e00b      	b.n	80053e2 <HAL_TIM_PWM_Start+0xfe>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d104      	bne.n	80053da <HAL_TIM_PWM_Start+0xf6>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d8:	e003      	b.n	80053e2 <HAL_TIM_PWM_Start+0xfe>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 ffea 	bl	80063c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a33      	ldr	r2, [pc, #204]	; (80054c4 <HAL_TIM_PWM_Start+0x1e0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIM_PWM_Start+0x13e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a32      	ldr	r2, [pc, #200]	; (80054c8 <HAL_TIM_PWM_Start+0x1e4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIM_PWM_Start+0x13e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a30      	ldr	r2, [pc, #192]	; (80054cc <HAL_TIM_PWM_Start+0x1e8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIM_PWM_Start+0x13e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <HAL_TIM_PWM_Start+0x1ec>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIM_PWM_Start+0x13e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <HAL_TIM_PWM_Start+0x1f0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Start+0x142>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_TIM_PWM_Start+0x144>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <HAL_TIM_PWM_Start+0x1e0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_TIM_PWM_Start+0x194>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d013      	beq.n	8005478 <HAL_TIM_PWM_Start+0x194>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <HAL_TIM_PWM_Start+0x1f4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_TIM_PWM_Start+0x194>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <HAL_TIM_PWM_Start+0x1f8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_TIM_PWM_Start+0x194>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <HAL_TIM_PWM_Start+0x1e4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_PWM_Start+0x194>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIM_PWM_Start+0x1e8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d115      	bne.n	80054a4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <HAL_TIM_PWM_Start+0x1fc>)
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d015      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x1d2>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	d011      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	e008      	b.n	80054b6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40013400 	.word	0x40013400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	00010007 	.word	0x00010007

080054e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e097      	b.n	8005628 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7fc fd01 	bl	8001f14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005528:	f023 0307 	bic.w	r3, r3, #7
 800552c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fbbd 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	4313      	orrs	r3, r2
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005584:	f023 030c 	bic.w	r3, r3, #12
 8005588:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	4313      	orrs	r3, r2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	011a      	lsls	r2, r3, #4
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	031b      	lsls	r3, r3, #12
 80055b4:	4313      	orrs	r3, r2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	4313      	orrs	r3, r2
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005640:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005648:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005650:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005658:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d110      	bne.n	8005682 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d102      	bne.n	800566c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005666:	7b7b      	ldrb	r3, [r7, #13]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d001      	beq.n	8005670 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e068      	b.n	8005742 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005680:	e031      	b.n	80056e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d110      	bne.n	80056aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005688:	7bbb      	ldrb	r3, [r7, #14]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d102      	bne.n	8005694 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800568e:	7b3b      	ldrb	r3, [r7, #12]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e054      	b.n	8005742 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a8:	e01d      	b.n	80056e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d108      	bne.n	80056c2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b0:	7bbb      	ldrb	r3, [r7, #14]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b6:	7b7b      	ldrb	r3, [r7, #13]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d102      	bne.n	80056c2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056bc:	7b3b      	ldrb	r3, [r7, #12]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d001      	beq.n	80056c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e03d      	b.n	8005742 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_TIM_Encoder_Start+0xc2>
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d008      	beq.n	8005702 <HAL_TIM_Encoder_Start+0xd2>
 80056f0:	e00f      	b.n	8005712 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2201      	movs	r2, #1
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fe62 	bl	80063c4 <TIM_CCxChannelCmd>
      break;
 8005700:	e016      	b.n	8005730 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	2104      	movs	r1, #4
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fe5a 	bl	80063c4 <TIM_CCxChannelCmd>
      break;
 8005710:	e00e      	b.n	8005730 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	2100      	movs	r1, #0
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fe52 	bl	80063c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	2104      	movs	r1, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fe4b 	bl	80063c4 <TIM_CCxChannelCmd>
      break;
 800572e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b02      	cmp	r3, #2
 800575e:	d122      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b02      	cmp	r3, #2
 800576c:	d11b      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0202 	mvn.w	r2, #2
 8005776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fa75 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 8005792:	e005      	b.n	80057a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fa67 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa78 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d122      	bne.n	80057fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d11b      	bne.n	80057fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0204 	mvn.w	r2, #4
 80057ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fa4b 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 80057e6:	e005      	b.n	80057f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa3d 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa4e 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d122      	bne.n	800584e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b08      	cmp	r3, #8
 8005814:	d11b      	bne.n	800584e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f06f 0208 	mvn.w	r2, #8
 800581e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2204      	movs	r2, #4
 8005824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa21 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 800583a:	e005      	b.n	8005848 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa13 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa24 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b10      	cmp	r3, #16
 800585a:	d122      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b10      	cmp	r3, #16
 8005868:	d11b      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0210 	mvn.w	r2, #16
 8005872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2208      	movs	r2, #8
 8005878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f9f7 	bl	8005c7c <HAL_TIM_IC_CaptureCallback>
 800588e:	e005      	b.n	800589c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f9e9 	bl	8005c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9fa 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0201 	mvn.w	r2, #1
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fc f9e7 	bl	8001c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d10e      	bne.n	80058fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d107      	bne.n	80058fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 feb7 	bl	8006668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005908:	d10e      	bne.n	8005928 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d107      	bne.n	8005928 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 feaa 	bl	800667c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9a8 	bl	8005ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0220 	mvn.w	r2, #32
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fe6a 	bl	8006654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598e:	d10f      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fe70 	bl	8006690 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059be:	d10f      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fe62 	bl	80066a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ee:	d10f      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fe:	d107      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fe54 	bl	80066b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a1e:	d10f      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a2e:	d107      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fe46 	bl	80066cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e0fd      	b.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b14      	cmp	r3, #20
 8005a6e:	f200 80f0 	bhi.w	8005c52 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005c53 	.word	0x08005c53
 8005a80:	08005c53 	.word	0x08005c53
 8005a84:	08005c53 	.word	0x08005c53
 8005a88:	08005b0d 	.word	0x08005b0d
 8005a8c:	08005c53 	.word	0x08005c53
 8005a90:	08005c53 	.word	0x08005c53
 8005a94:	08005c53 	.word	0x08005c53
 8005a98:	08005b4f 	.word	0x08005b4f
 8005a9c:	08005c53 	.word	0x08005c53
 8005aa0:	08005c53 	.word	0x08005c53
 8005aa4:	08005c53 	.word	0x08005c53
 8005aa8:	08005b8f 	.word	0x08005b8f
 8005aac:	08005c53 	.word	0x08005c53
 8005ab0:	08005c53 	.word	0x08005c53
 8005ab4:	08005c53 	.word	0x08005c53
 8005ab8:	08005bd1 	.word	0x08005bd1
 8005abc:	08005c53 	.word	0x08005c53
 8005ac0:	08005c53 	.word	0x08005c53
 8005ac4:	08005c53 	.word	0x08005c53
 8005ac8:	08005c11 	.word	0x08005c11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f980 	bl	8005dd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0208 	orr.w	r2, r2, #8
 8005ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0204 	bic.w	r2, r2, #4
 8005af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
      break;
 8005b0a:	e0a3      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f9f0 	bl	8005ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6999      	ldr	r1, [r3, #24]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	021a      	lsls	r2, r3, #8
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	619a      	str	r2, [r3, #24]
      break;
 8005b4c:	e082      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fa59 	bl	800600c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0208 	orr.w	r2, r2, #8
 8005b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0204 	bic.w	r2, r2, #4
 8005b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	61da      	str	r2, [r3, #28]
      break;
 8005b8c:	e062      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fac1 	bl	800611c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69d9      	ldr	r1, [r3, #28]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	021a      	lsls	r2, r3, #8
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	61da      	str	r2, [r3, #28]
      break;
 8005bce:	e041      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb2a 	bl	8006230 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0208 	orr.w	r2, r2, #8
 8005bea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c0e:	e021      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fb6e 	bl	80062f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	021a      	lsls	r2, r3, #8
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005c50:	e000      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005c52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop

08005c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3c      	ldr	r2, [pc, #240]	; (8005dbc <TIM_Base_SetConfig+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00f      	beq.n	8005cf0 <TIM_Base_SetConfig+0x38>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d00b      	beq.n	8005cf0 <TIM_Base_SetConfig+0x38>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a39      	ldr	r2, [pc, #228]	; (8005dc0 <TIM_Base_SetConfig+0x108>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <TIM_Base_SetConfig+0x38>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a38      	ldr	r2, [pc, #224]	; (8005dc4 <TIM_Base_SetConfig+0x10c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_Base_SetConfig+0x38>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a37      	ldr	r2, [pc, #220]	; (8005dc8 <TIM_Base_SetConfig+0x110>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d108      	bne.n	8005d02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2d      	ldr	r2, [pc, #180]	; (8005dbc <TIM_Base_SetConfig+0x104>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01b      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d017      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <TIM_Base_SetConfig+0x108>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <TIM_Base_SetConfig+0x10c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_Base_SetConfig+0x110>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <TIM_Base_SetConfig+0x118>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_Base_SetConfig+0x8a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a25      	ldr	r2, [pc, #148]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d108      	bne.n	8005d54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <TIM_Base_SetConfig+0x104>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0xe8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <TIM_Base_SetConfig+0x110>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0xe8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a10      	ldr	r2, [pc, #64]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0xe8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <TIM_Base_SetConfig+0x118>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0xe8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a0e      	ldr	r2, [pc, #56]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800

08005dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f023 0201 	bic.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 0302 	bic.w	r3, r3, #2
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <TIM_OC1_SetConfig+0x10c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_OC1_SetConfig+0x80>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <TIM_OC1_SetConfig+0x110>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_OC1_SetConfig+0x80>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <TIM_OC1_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC1_SetConfig+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <TIM_OC1_SetConfig+0x118>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC1_SetConfig+0x80>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <TIM_OC1_SetConfig+0x11c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10c      	bne.n	8005e72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0308 	bic.w	r3, r3, #8
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 0304 	bic.w	r3, r3, #4
 8005e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <TIM_OC1_SetConfig+0x10c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_OC1_SetConfig+0xc2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <TIM_OC1_SetConfig+0x110>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_OC1_SetConfig+0xc2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a19      	ldr	r2, [pc, #100]	; (8005eec <TIM_OC1_SetConfig+0x114>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_OC1_SetConfig+0xc2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <TIM_OC1_SetConfig+0x118>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC1_SetConfig+0xc2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <TIM_OC1_SetConfig+0x11c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d111      	bne.n	8005ebe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40013400 	.word	0x40013400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800

08005ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0210 	bic.w	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0320 	bic.w	r3, r3, #32
 8005f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a28      	ldr	r2, [pc, #160]	; (8005ff8 <TIM_OC2_SetConfig+0x100>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_OC2_SetConfig+0x6c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a27      	ldr	r2, [pc, #156]	; (8005ffc <TIM_OC2_SetConfig+0x104>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10d      	bne.n	8005f80 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a1d      	ldr	r2, [pc, #116]	; (8005ff8 <TIM_OC2_SetConfig+0x100>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00f      	beq.n	8005fa8 <TIM_OC2_SetConfig+0xb0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a1c      	ldr	r2, [pc, #112]	; (8005ffc <TIM_OC2_SetConfig+0x104>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <TIM_OC2_SetConfig+0xb0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <TIM_OC2_SetConfig+0x108>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <TIM_OC2_SetConfig+0xb0>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <TIM_OC2_SetConfig+0x10c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC2_SetConfig+0xb0>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a19      	ldr	r2, [pc, #100]	; (8006008 <TIM_OC2_SetConfig+0x110>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d113      	bne.n	8005fd0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40013400 	.word	0x40013400
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800

0800600c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a27      	ldr	r2, [pc, #156]	; (8006108 <TIM_OC3_SetConfig+0xfc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_OC3_SetConfig+0x6a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a26      	ldr	r2, [pc, #152]	; (800610c <TIM_OC3_SetConfig+0x100>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10d      	bne.n	8006092 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800607c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1c      	ldr	r2, [pc, #112]	; (8006108 <TIM_OC3_SetConfig+0xfc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00f      	beq.n	80060ba <TIM_OC3_SetConfig+0xae>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <TIM_OC3_SetConfig+0x100>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_OC3_SetConfig+0xae>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <TIM_OC3_SetConfig+0x104>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d007      	beq.n	80060ba <TIM_OC3_SetConfig+0xae>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a19      	ldr	r2, [pc, #100]	; (8006114 <TIM_OC3_SetConfig+0x108>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_OC3_SetConfig+0xae>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <TIM_OC3_SetConfig+0x10c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d113      	bne.n	80060e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	621a      	str	r2, [r3, #32]
}
 80060fc:	bf00      	nop
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800

0800611c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	031b      	lsls	r3, r3, #12
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a28      	ldr	r2, [pc, #160]	; (800621c <TIM_OC4_SetConfig+0x100>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_OC4_SetConfig+0x6c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <TIM_OC4_SetConfig+0x104>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d10d      	bne.n	80061a4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800618e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	031b      	lsls	r3, r3, #12
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1d      	ldr	r2, [pc, #116]	; (800621c <TIM_OC4_SetConfig+0x100>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00f      	beq.n	80061cc <TIM_OC4_SetConfig+0xb0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <TIM_OC4_SetConfig+0x104>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00b      	beq.n	80061cc <TIM_OC4_SetConfig+0xb0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <TIM_OC4_SetConfig+0x108>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d007      	beq.n	80061cc <TIM_OC4_SetConfig+0xb0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <TIM_OC4_SetConfig+0x10c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d003      	beq.n	80061cc <TIM_OC4_SetConfig+0xb0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a19      	ldr	r2, [pc, #100]	; (800622c <TIM_OC4_SetConfig+0x110>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d113      	bne.n	80061f4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800

08006230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006274:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC5_SetConfig+0xb4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_OC5_SetConfig+0x7a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <TIM_OC5_SetConfig+0xb8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_OC5_SetConfig+0x7a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <TIM_OC5_SetConfig+0xbc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_OC5_SetConfig+0x7a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <TIM_OC5_SetConfig+0xc0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC5_SetConfig+0x7a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <TIM_OC5_SetConfig+0xc4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d109      	bne.n	80062be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800

080062f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800633e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	051b      	lsls	r3, r3, #20
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <TIM_OC6_SetConfig+0xb8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00f      	beq.n	8006374 <TIM_OC6_SetConfig+0x7c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <TIM_OC6_SetConfig+0xbc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_OC6_SetConfig+0x7c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <TIM_OC6_SetConfig+0xc0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_OC6_SetConfig+0x7c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a15      	ldr	r2, [pc, #84]	; (80063bc <TIM_OC6_SetConfig+0xc4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC6_SetConfig+0x7c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <TIM_OC6_SetConfig+0xc8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d109      	bne.n	8006388 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800637a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40012c00 	.word	0x40012c00
 80063b4:	40013400 	.word	0x40013400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800

080063c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2201      	movs	r2, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006424:	2302      	movs	r3, #2
 8006426:	e065      	b.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2c      	ldr	r2, [pc, #176]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006462:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649e:	d013      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a12      	ldr	r2, [pc, #72]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40013400 	.word	0x40013400
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40014000 	.word	0x40014000

08006514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800652c:	2302      	movs	r3, #2
 800652e:	e087      	b.n	8006640 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	041b      	lsls	r3, r3, #16
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a27      	ldr	r2, [pc, #156]	; (800664c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a25      	ldr	r2, [pc, #148]	; (8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d106      	bne.n	80065cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1e      	ldr	r2, [pc, #120]	; (800664c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1d      	ldr	r2, [pc, #116]	; (8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d126      	bne.n	800662e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	051b      	lsls	r3, r3, #20
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0e      	ldr	r2, [pc, #56]	; (800664c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d106      	bne.n	800662e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40013400 	.word	0x40013400

08006654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066f0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80066f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006716:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800671a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	b29b      	uxth	r3, r3
 8006728:	43db      	mvns	r3, r3
 800672a:	b29b      	uxth	r3, r3
 800672c:	4013      	ands	r3, r2
 800672e:	b29a      	uxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006744:	b084      	sub	sp, #16
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	f107 0014 	add.w	r0, r7, #20
 8006752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	b004      	add	sp, #16
 8006784:	4770      	bx	lr
	...

08006788 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006788:	b480      	push	{r7}
 800678a:	b09b      	sub	sp, #108	; 0x6c
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	78db      	ldrb	r3, [r3, #3]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d81f      	bhi.n	80067fa <USB_ActivateEndpoint+0x72>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USB_ActivateEndpoint+0x38>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067ed 	.word	0x080067ed
 80067c8:	08006803 	.word	0x08006803
 80067cc:	080067df 	.word	0x080067df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80067d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80067dc:	e012      	b.n	8006804 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80067de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80067e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80067ea:	e00b      	b.n	8006804 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80067ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80067f8:	e004      	b.n	8006804 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006800:	e000      	b.n	8006804 <USB_ActivateEndpoint+0x7c>
      break;
 8006802:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	441a      	add	r2, r3
 800680e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	b21b      	sxth	r3, r3
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	b21a      	sxth	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b21b      	sxth	r3, r3
 8006846:	4313      	orrs	r3, r2
 8006848:	b21b      	sxth	r3, r3
 800684a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800685c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686c:	b29b      	uxth	r3, r3
 800686e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	7b1b      	ldrb	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 8149 	bne.w	8006b0c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8084 	beq.w	800698c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	4413      	add	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	88db      	ldrh	r3, [r3, #6]
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	81fb      	strh	r3, [r7, #14]
 80068c6:	89fb      	ldrh	r3, [r7, #14]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01b      	beq.n	8006908 <USB_ActivateEndpoint+0x180>
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	81bb      	strh	r3, [r7, #12]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	89bb      	ldrh	r3, [r7, #12]
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006900:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	78db      	ldrb	r3, [r3, #3]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d020      	beq.n	8006952 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006926:	813b      	strh	r3, [r7, #8]
 8006928:	893b      	ldrh	r3, [r7, #8]
 800692a:	f083 0320 	eor.w	r3, r3, #32
 800692e:	813b      	strh	r3, [r7, #8]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	893b      	ldrh	r3, [r7, #8]
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
 8006950:	e27f      	b.n	8006e52 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006968:	817b      	strh	r3, [r7, #10]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	897b      	ldrh	r3, [r7, #10]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]
 800698a:	e262      	b.n	8006e52 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	4413      	add	r3, r2
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	88db      	ldrh	r3, [r3, #6]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	4413      	add	r3, r2
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	00da      	lsls	r2, r3, #3
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	4413      	add	r3, r2
 80069de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d112      	bne.n	8006a12 <USB_ActivateEndpoint+0x28a>
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	801a      	strh	r2, [r3, #0]
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e02f      	b.n	8006a72 <USB_ActivateEndpoint+0x2ea>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b3e      	cmp	r3, #62	; 0x3e
 8006a18:	d813      	bhi.n	8006a42 <USB_ActivateEndpoint+0x2ba>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	663b      	str	r3, [r7, #96]	; 0x60
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <USB_ActivateEndpoint+0x2ac>
 8006a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a30:	3301      	adds	r3, #1
 8006a32:	663b      	str	r3, [r7, #96]	; 0x60
 8006a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	e017      	b.n	8006a72 <USB_ActivateEndpoint+0x2ea>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	663b      	str	r3, [r7, #96]	; 0x60
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <USB_ActivateEndpoint+0x2d4>
 8006a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	83fb      	strh	r3, [r7, #30]
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <USB_ActivateEndpoint+0x33a>
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	83bb      	strh	r3, [r7, #28]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	8bbb      	ldrh	r3, [r7, #28]
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	837b      	strh	r3, [r7, #26]
 8006ada:	8b7b      	ldrh	r3, [r7, #26]
 8006adc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ae0:	837b      	strh	r3, [r7, #26]
 8006ae2:	8b7b      	ldrh	r3, [r7, #26]
 8006ae4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ae8:	837b      	strh	r3, [r7, #26]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	8b7b      	ldrh	r3, [r7, #26]
 8006af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	8013      	strh	r3, [r2, #0]
 8006b0a:	e1a2      	b.n	8006e52 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	441a      	add	r2, r3
 8006b30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b58:	4413      	add	r3, r2
 8006b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	00da      	lsls	r2, r3, #3
 8006b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	891b      	ldrh	r3, [r3, #8]
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	4413      	add	r3, r2
 8006b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	00da      	lsls	r2, r3, #3
 8006b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b98:	4413      	add	r3, r2
 8006b9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	895b      	ldrh	r3, [r3, #10]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8091 	bne.w	8006cdc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006bc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01b      	beq.n	8006c0a <USB_ActivateEndpoint+0x482>
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	441a      	add	r2, r3
 8006bf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	873b      	strh	r3, [r7, #56]	; 0x38
 8006c18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01b      	beq.n	8006c5a <USB_ActivateEndpoint+0x4d2>
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	441a      	add	r2, r3
 8006c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006c72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006c7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb8:	867b      	strh	r3, [r7, #50]	; 0x32
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	441a      	add	r2, r3
 8006cc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]
 8006cda:	e0ba      	b.n	8006e52 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006cec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01d      	beq.n	8006d34 <USB_ActivateEndpoint+0x5ac>
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	441a      	add	r2, r3
 8006d1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006d44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01d      	beq.n	8006d8c <USB_ActivateEndpoint+0x604>
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	78db      	ldrb	r3, [r3, #3]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d024      	beq.n	8006dde <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006daa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006dae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006db2:	f083 0320 	eor.w	r3, r3, #32
 8006db6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	8013      	strh	r3, [r2, #0]
 8006ddc:	e01d      	b.n	8006e1a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006e52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	376c      	adds	r7, #108	; 0x6c
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop

08006e64 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b08d      	sub	sp, #52	; 0x34
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	7b1b      	ldrb	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 808e 	bne.w	8006f94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d044      	beq.n	8006f0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	81bb      	strh	r3, [r7, #12]
 8006e8e:	89bb      	ldrh	r3, [r7, #12]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01b      	beq.n	8006ed0 <USB_DeactivateEndpoint+0x6c>
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eae:	817b      	strh	r3, [r7, #10]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee6:	813b      	strh	r3, [r7, #8]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	893b      	ldrh	r3, [r7, #8]
 8006ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	8013      	strh	r3, [r2, #0]
 8006f08:	e192      	b.n	8007230 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	827b      	strh	r3, [r7, #18]
 8006f18:	8a7b      	ldrh	r3, [r7, #18]
 8006f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01b      	beq.n	8006f5a <USB_DeactivateEndpoint+0xf6>
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	823b      	strh	r3, [r7, #16]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	8a3b      	ldrh	r3, [r7, #16]
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f70:	81fb      	strh	r3, [r7, #14]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	441a      	add	r2, r3
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8013      	strh	r3, [r2, #0]
 8006f92:	e14d      	b.n	8007230 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 80a5 	bne.w	80070e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	843b      	strh	r3, [r7, #32]
 8006fac:	8c3b      	ldrh	r3, [r7, #32]
 8006fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d01b      	beq.n	8006fee <USB_DeactivateEndpoint+0x18a>
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	83fb      	strh	r3, [r7, #30]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	8bfb      	ldrh	r3, [r7, #30]
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	83bb      	strh	r3, [r7, #28]
 8006ffc:	8bbb      	ldrh	r3, [r7, #28]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d01b      	beq.n	800703e <USB_DeactivateEndpoint+0x1da>
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701c:	837b      	strh	r3, [r7, #26]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	8b7b      	ldrh	r3, [r7, #26]
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	833b      	strh	r3, [r7, #24]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	8b3b      	ldrh	r3, [r7, #24]
 8007062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800706e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007072:	b29b      	uxth	r3, r3
 8007074:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	82fb      	strh	r3, [r7, #22]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	441a      	add	r2, r3
 8007098:	8afb      	ldrh	r3, [r7, #22]
 800709a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c4:	82bb      	strh	r3, [r7, #20]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	441a      	add	r2, r3
 80070d0:	8abb      	ldrh	r3, [r7, #20]
 80070d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]
 80070e6:	e0a3      	b.n	8007230 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80070f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01b      	beq.n	8007138 <USB_DeactivateEndpoint+0x2d4>
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800712c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <USB_DeactivateEndpoint+0x324>
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	853b      	strh	r3, [r7, #40]	; 0x28
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007184:	b29b      	uxth	r3, r3
 8007186:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	b29b      	uxth	r3, r3
 80071be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	441a      	add	r2, r3
 80071e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3734      	adds	r7, #52	; 0x34
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b0c4      	sub	sp, #272	; 0x110
 8007242:	af00      	add	r7, sp, #0
 8007244:	1d3b      	adds	r3, r7, #4
 8007246:	6018      	str	r0, [r3, #0]
 8007248:	463b      	mov	r3, r7
 800724a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b01      	cmp	r3, #1
 8007254:	f040 8566 	bne.w	8007d24 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d905      	bls.n	8007274 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007272:	e004      	b.n	800727e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800727e:	463b      	mov	r3, r7
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	7b1b      	ldrb	r3, [r3, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d12c      	bne.n	80072e2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6959      	ldr	r1, [r3, #20]
 800728e:	463b      	mov	r3, r7
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	88da      	ldrh	r2, [r3, #6]
 8007294:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007298:	b29b      	uxth	r3, r3
 800729a:	1d38      	adds	r0, r7, #4
 800729c:	6800      	ldr	r0, [r0, #0]
 800729e:	f001 fa43 	bl	8008728 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072a2:	1d3b      	adds	r3, r7, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	1d3b      	adds	r3, r7, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4413      	add	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	463b      	mov	r3, r7
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	00da      	lsls	r2, r3, #3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80072ca:	f107 0310 	add.w	r3, r7, #16
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	f107 0310 	add.w	r3, r7, #16
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	f000 bcec 	b.w	8007cba <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80072e2:	463b      	mov	r3, r7
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	78db      	ldrb	r3, [r3, #3]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	f040 8356 	bne.w	800799a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80072ee:	463b      	mov	r3, r7
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	463b      	mov	r3, r7
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	f240 82fa 	bls.w	80078f4 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	463b      	mov	r3, r7
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800731e:	1d3b      	adds	r3, r7, #4
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007338:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800733c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007340:	b29b      	uxth	r3, r3
 8007342:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	463b      	mov	r3, r7
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 815e 	beq.w	8007638 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	463b      	mov	r3, r7
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d164      	bne.n	8007456 <USB_EPStartXfer+0x218>
 800738c:	1d3b      	adds	r3, r7, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	4413      	add	r3, r2
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	4413      	add	r3, r2
 80073b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d112      	bne.n	80073e4 <USB_EPStartXfer+0x1a6>
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	e054      	b.n	800748e <USB_EPStartXfer+0x250>
 80073e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073e8:	2b3e      	cmp	r3, #62	; 0x3e
 80073ea:	d817      	bhi.n	800741c <USB_EPStartXfer+0x1de>
 80073ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <USB_EPStartXfer+0x1ce>
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007406:	3301      	adds	r3, #1
 8007408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007410:	b29b      	uxth	r3, r3
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	b29a      	uxth	r2, r3
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	e038      	b.n	800748e <USB_EPStartXfer+0x250>
 800741c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <USB_EPStartXfer+0x1fe>
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007436:	3b01      	subs	r3, #1
 8007438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007440:	b29b      	uxth	r3, r3
 8007442:	029b      	lsls	r3, r3, #10
 8007444:	b29b      	uxth	r3, r3
 8007446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744e:	b29a      	uxth	r2, r3
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e01b      	b.n	800748e <USB_EPStartXfer+0x250>
 8007456:	463b      	mov	r3, r7
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	785b      	ldrb	r3, [r3, #1]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d116      	bne.n	800748e <USB_EPStartXfer+0x250>
 8007460:	1d3b      	adds	r3, r7, #4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746e:	4413      	add	r3, r2
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	00da      	lsls	r2, r3, #3
 800747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747c:	4413      	add	r3, r2
 800747e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
 8007484:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007488:	b29a      	uxth	r2, r3
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800748e:	463b      	mov	r3, r7
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	895b      	ldrh	r3, [r3, #10]
 8007494:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007498:	463b      	mov	r3, r7
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6959      	ldr	r1, [r3, #20]
 800749e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80074a8:	1d38      	adds	r0, r7, #4
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	f001 f93c 	bl	8008728 <USB_WritePMA>
            ep->xfer_buff += len;
 80074b0:	463b      	mov	r3, r7
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695a      	ldr	r2, [r3, #20]
 80074b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ba:	441a      	add	r2, r3
 80074bc:	463b      	mov	r3, r7
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074c2:	463b      	mov	r3, r7
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d90e      	bls.n	80074f0 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80074d2:	463b      	mov	r3, r7
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	621a      	str	r2, [r3, #32]
 80074ee:	e008      	b.n	8007502 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007502:	463b      	mov	r3, r7
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d164      	bne.n	80075d6 <USB_EPStartXfer+0x398>
 800750c:	1d3b      	adds	r3, r7, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	1d3b      	adds	r3, r7, #4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751a:	b29b      	uxth	r3, r3
 800751c:	461a      	mov	r2, r3
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	463b      	mov	r3, r7
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	00da      	lsls	r2, r3, #3
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800753a:	2b00      	cmp	r3, #0
 800753c:	d112      	bne.n	8007564 <USB_EPStartXfer+0x326>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007548:	b29a      	uxth	r2, r3
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	e057      	b.n	8007614 <USB_EPStartXfer+0x3d6>
 8007564:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007568:	2b3e      	cmp	r3, #62	; 0x3e
 800756a:	d817      	bhi.n	800759c <USB_EPStartXfer+0x35e>
 800756c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007576:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <USB_EPStartXfer+0x34e>
 8007582:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800758c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007590:	b29b      	uxth	r3, r3
 8007592:	029b      	lsls	r3, r3, #10
 8007594:	b29a      	uxth	r2, r3
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e03b      	b.n	8007614 <USB_EPStartXfer+0x3d6>
 800759c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <USB_EPStartXfer+0x37e>
 80075b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e01e      	b.n	8007614 <USB_EPStartXfer+0x3d6>
 80075d6:	463b      	mov	r3, r7
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d119      	bne.n	8007614 <USB_EPStartXfer+0x3d6>
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
 80075e6:	1d3b      	adds	r3, r7, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	4413      	add	r3, r2
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
 80075f8:	463b      	mov	r3, r7
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	00da      	lsls	r2, r3, #3
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	4413      	add	r3, r2
 8007604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800760e:	b29a      	uxth	r2, r3
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	891b      	ldrh	r3, [r3, #8]
 800761a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800761e:	463b      	mov	r3, r7
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6959      	ldr	r1, [r3, #20]
 8007624:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007628:	b29b      	uxth	r3, r3
 800762a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800762e:	1d38      	adds	r0, r7, #4
 8007630:	6800      	ldr	r0, [r0, #0]
 8007632:	f001 f879 	bl	8008728 <USB_WritePMA>
 8007636:	e340      	b.n	8007cba <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007638:	463b      	mov	r3, r7
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d164      	bne.n	800770c <USB_EPStartXfer+0x4ce>
 8007642:	1d3b      	adds	r3, r7, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007648:	1d3b      	adds	r3, r7, #4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007650:	b29b      	uxth	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	4413      	add	r3, r2
 8007658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800765a:	463b      	mov	r3, r7
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	00da      	lsls	r2, r3, #3
 8007662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007664:	4413      	add	r3, r2
 8007666:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800766a:	64bb      	str	r3, [r7, #72]	; 0x48
 800766c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007670:	2b00      	cmp	r3, #0
 8007672:	d112      	bne.n	800769a <USB_EPStartXfer+0x45c>
 8007674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800767e:	b29a      	uxth	r2, r3
 8007680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007692:	b29a      	uxth	r2, r3
 8007694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	e057      	b.n	800774a <USB_EPStartXfer+0x50c>
 800769a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800769e:	2b3e      	cmp	r3, #62	; 0x3e
 80076a0:	d817      	bhi.n	80076d2 <USB_EPStartXfer+0x494>
 80076a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <USB_EPStartXfer+0x484>
 80076b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076bc:	3301      	adds	r3, #1
 80076be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e03b      	b.n	800774a <USB_EPStartXfer+0x50c>
 80076d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <USB_EPStartXfer+0x4b4>
 80076e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007704:	b29a      	uxth	r2, r3
 8007706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007708:	801a      	strh	r2, [r3, #0]
 800770a:	e01e      	b.n	800774a <USB_EPStartXfer+0x50c>
 800770c:	463b      	mov	r3, r7
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	785b      	ldrb	r3, [r3, #1]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d119      	bne.n	800774a <USB_EPStartXfer+0x50c>
 8007716:	1d3b      	adds	r3, r7, #4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	657b      	str	r3, [r7, #84]	; 0x54
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007724:	b29b      	uxth	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800772a:	4413      	add	r3, r2
 800772c:	657b      	str	r3, [r7, #84]	; 0x54
 800772e:	463b      	mov	r3, r7
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	00da      	lsls	r2, r3, #3
 8007736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007738:	4413      	add	r3, r2
 800773a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800773e:	653b      	str	r3, [r7, #80]	; 0x50
 8007740:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007744:	b29a      	uxth	r2, r3
 8007746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007748:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800774a:	463b      	mov	r3, r7
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	891b      	ldrh	r3, [r3, #8]
 8007750:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007754:	463b      	mov	r3, r7
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6959      	ldr	r1, [r3, #20]
 800775a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800775e:	b29b      	uxth	r3, r3
 8007760:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007764:	1d38      	adds	r0, r7, #4
 8007766:	6800      	ldr	r0, [r0, #0]
 8007768:	f000 ffde 	bl	8008728 <USB_WritePMA>
            ep->xfer_buff += len;
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007776:	441a      	add	r2, r3
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800777e:	463b      	mov	r3, r7
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	463b      	mov	r3, r7
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d90e      	bls.n	80077ac <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800778e:	463b      	mov	r3, r7
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8007798:	463b      	mov	r3, r7
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077a2:	1ad2      	subs	r2, r2, r3
 80077a4:	463b      	mov	r3, r7
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	621a      	str	r2, [r3, #32]
 80077aa:	e008      	b.n	80077be <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80077b6:	463b      	mov	r3, r7
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077be:	1d3b      	adds	r3, r7, #4
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	647b      	str	r3, [r7, #68]	; 0x44
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d164      	bne.n	8007898 <USB_EPStartXfer+0x65a>
 80077ce:	1d3b      	adds	r3, r7, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077dc:	b29b      	uxth	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	4413      	add	r3, r2
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	00da      	lsls	r2, r3, #3
 80077ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80077f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d112      	bne.n	8007826 <USB_EPStartXfer+0x5e8>
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780a:	b29a      	uxth	r2, r3
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e054      	b.n	80078d0 <USB_EPStartXfer+0x692>
 8007826:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800782a:	2b3e      	cmp	r3, #62	; 0x3e
 800782c:	d817      	bhi.n	800785e <USB_EPStartXfer+0x620>
 800782e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007838:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <USB_EPStartXfer+0x610>
 8007844:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007848:	3301      	adds	r3, #1
 800784a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800784e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007852:	b29b      	uxth	r3, r3
 8007854:	029b      	lsls	r3, r3, #10
 8007856:	b29a      	uxth	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e038      	b.n	80078d0 <USB_EPStartXfer+0x692>
 800785e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007868:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <USB_EPStartXfer+0x640>
 8007874:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007878:	3b01      	subs	r3, #1
 800787a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800787e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007882:	b29b      	uxth	r3, r3
 8007884:	029b      	lsls	r3, r3, #10
 8007886:	b29b      	uxth	r3, r3
 8007888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007890:	b29a      	uxth	r2, r3
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	e01b      	b.n	80078d0 <USB_EPStartXfer+0x692>
 8007898:	463b      	mov	r3, r7
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	785b      	ldrb	r3, [r3, #1]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d116      	bne.n	80078d0 <USB_EPStartXfer+0x692>
 80078a2:	1d3b      	adds	r3, r7, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b0:	4413      	add	r3, r2
 80078b2:	647b      	str	r3, [r7, #68]	; 0x44
 80078b4:	463b      	mov	r3, r7
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	00da      	lsls	r2, r3, #3
 80078bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078be:	4413      	add	r3, r2
 80078c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078c4:	643b      	str	r3, [r7, #64]	; 0x40
 80078c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078d0:	463b      	mov	r3, r7
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	895b      	ldrh	r3, [r3, #10]
 80078d6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078da:	463b      	mov	r3, r7
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6959      	ldr	r1, [r3, #20]
 80078e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80078ea:	1d38      	adds	r0, r7, #4
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f000 ff1b 	bl	8008728 <USB_WritePMA>
 80078f2:	e1e2      	b.n	8007cba <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80078fe:	1d3b      	adds	r3, r7, #4
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	463b      	mov	r3, r7
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007918:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800791c:	1d3b      	adds	r3, r7, #4
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	463b      	mov	r3, r7
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	441a      	add	r2, r3
 800792a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800792e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793e:	b29b      	uxth	r3, r3
 8007940:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	663b      	str	r3, [r7, #96]	; 0x60
 8007948:	1d3b      	adds	r3, r7, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007956:	4413      	add	r3, r2
 8007958:	663b      	str	r3, [r7, #96]	; 0x60
 800795a:	463b      	mov	r3, r7
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00da      	lsls	r2, r3, #3
 8007962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007964:	4413      	add	r3, r2
 8007966:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800796a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007970:	b29a      	uxth	r2, r3
 8007972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007974:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007976:	463b      	mov	r3, r7
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	891b      	ldrh	r3, [r3, #8]
 800797c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007980:	463b      	mov	r3, r7
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6959      	ldr	r1, [r3, #20]
 8007986:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800798a:	b29b      	uxth	r3, r3
 800798c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007990:	1d38      	adds	r0, r7, #4
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	f000 fec8 	bl	8008728 <USB_WritePMA>
 8007998:	e18f      	b.n	8007cba <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	463b      	mov	r3, r7
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 808f 	beq.w	8007ad4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079b6:	1d3b      	adds	r3, r7, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80079bc:	463b      	mov	r3, r7
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d164      	bne.n	8007a90 <USB_EPStartXfer+0x852>
 80079c6:	1d3b      	adds	r3, r7, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	673b      	str	r3, [r7, #112]	; 0x70
 80079cc:	1d3b      	adds	r3, r7, #4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079da:	4413      	add	r3, r2
 80079dc:	673b      	str	r3, [r7, #112]	; 0x70
 80079de:	463b      	mov	r3, r7
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	00da      	lsls	r2, r3, #3
 80079e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e8:	4413      	add	r3, r2
 80079ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d112      	bne.n	8007a1e <USB_EPStartXfer+0x7e0>
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e054      	b.n	8007ac8 <USB_EPStartXfer+0x88a>
 8007a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a22:	2b3e      	cmp	r3, #62	; 0x3e
 8007a24:	d817      	bhi.n	8007a56 <USB_EPStartXfer+0x818>
 8007a26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a2a:	085b      	lsrs	r3, r3, #1
 8007a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <USB_EPStartXfer+0x808>
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	3301      	adds	r3, #1
 8007a42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	029b      	lsls	r3, r3, #10
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e038      	b.n	8007ac8 <USB_EPStartXfer+0x88a>
 8007a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USB_EPStartXfer+0x838>
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	e01b      	b.n	8007ac8 <USB_EPStartXfer+0x88a>
 8007a90:	463b      	mov	r3, r7
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d116      	bne.n	8007ac8 <USB_EPStartXfer+0x88a>
 8007a9a:	1d3b      	adds	r3, r7, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa8:	4413      	add	r3, r2
 8007aaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007aac:	463b      	mov	r3, r7
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00da      	lsls	r2, r3, #3
 8007ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007abc:	677b      	str	r3, [r7, #116]	; 0x74
 8007abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ac8:	463b      	mov	r3, r7
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	895b      	ldrh	r3, [r3, #10]
 8007ace:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8007ad2:	e097      	b.n	8007c04 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ad4:	463b      	mov	r3, r7
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d168      	bne.n	8007bb0 <USB_EPStartXfer+0x972>
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ae6:	1d3b      	adds	r3, r7, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007af6:	4413      	add	r3, r2
 8007af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007afc:	463b      	mov	r3, r7
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	00da      	lsls	r2, r3, #3
 8007b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d112      	bne.n	8007b3e <USB_EPStartXfer+0x900>
 8007b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b3a:	801a      	strh	r2, [r3, #0]
 8007b3c:	e05d      	b.n	8007bfa <USB_EPStartXfer+0x9bc>
 8007b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b42:	2b3e      	cmp	r3, #62	; 0x3e
 8007b44:	d817      	bhi.n	8007b76 <USB_EPStartXfer+0x938>
 8007b46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <USB_EPStartXfer+0x928>
 8007b5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b60:	3301      	adds	r3, #1
 8007b62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	029b      	lsls	r3, r3, #10
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b72:	801a      	strh	r2, [r3, #0]
 8007b74:	e041      	b.n	8007bfa <USB_EPStartXfer+0x9bc>
 8007b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <USB_EPStartXfer+0x958>
 8007b8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b90:	3b01      	subs	r3, #1
 8007b92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	029b      	lsls	r3, r3, #10
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e024      	b.n	8007bfa <USB_EPStartXfer+0x9bc>
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d11f      	bne.n	8007bfa <USB_EPStartXfer+0x9bc>
 8007bba:	1d3b      	adds	r3, r7, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	00da      	lsls	r2, r3, #3
 8007be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007be4:	4413      	add	r3, r2
 8007be6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	891b      	ldrh	r3, [r3, #8]
 8007c00:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6959      	ldr	r1, [r3, #20]
 8007c0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007c14:	1d38      	adds	r0, r7, #4
 8007c16:	6800      	ldr	r0, [r0, #0]
 8007c18:	f000 fd86 	bl	8008728 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d122      	bne.n	8007c6c <USB_EPStartXfer+0xa2e>
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007c44:	1d3b      	adds	r3, r7, #4
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	463b      	mov	r3, r7
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	8013      	strh	r3, [r2, #0]
 8007c6a:	e026      	b.n	8007cba <USB_EPStartXfer+0xa7c>
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d121      	bne.n	8007cba <USB_EPStartXfer+0xa7c>
 8007c76:	1d3b      	adds	r3, r7, #4
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c90:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007c94:	1d3b      	adds	r3, r7, #4
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007cba:	1d3b      	adds	r3, r7, #4
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f107 020e 	add.w	r2, r7, #14
 8007cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd8:	8013      	strh	r3, [r2, #0]
 8007cda:	f107 030e 	add.w	r3, r7, #14
 8007cde:	f107 020e 	add.w	r2, r7, #14
 8007ce2:	8812      	ldrh	r2, [r2, #0]
 8007ce4:	f082 0210 	eor.w	r2, r2, #16
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	f107 030e 	add.w	r3, r7, #14
 8007cee:	f107 020e 	add.w	r2, r7, #14
 8007cf2:	8812      	ldrh	r2, [r2, #0]
 8007cf4:	f082 0220 	eor.w	r2, r2, #32
 8007cf8:	801a      	strh	r2, [r3, #0]
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	441a      	add	r2, r3
 8007d08:	f107 030e 	add.w	r3, r7, #14
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	8013      	strh	r3, [r2, #0]
 8007d22:	e3b5      	b.n	8008490 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d24:	463b      	mov	r3, r7
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	7b1b      	ldrb	r3, [r3, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 8090 	bne.w	8007e50 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8007d30:	463b      	mov	r3, r7
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699a      	ldr	r2, [r3, #24]
 8007d36:	463b      	mov	r3, r7
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d90e      	bls.n	8007d5e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8007d40:	463b      	mov	r3, r7
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d54:	1ad2      	subs	r2, r2, r3
 8007d56:	463b      	mov	r3, r7
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	619a      	str	r2, [r3, #24]
 8007d5c:	e008      	b.n	8007d70 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8007d5e:	463b      	mov	r3, r7
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d70:	1d3b      	adds	r3, r7, #4
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d78:	1d3b      	adds	r3, r7, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d8e:	463b      	mov	r3, r7
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00da      	lsls	r2, r3, #3
 8007d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d116      	bne.n	8007dda <USB_EPStartXfer+0xb9c>
 8007dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dbe:	801a      	strh	r2, [r3, #0]
 8007dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	e32c      	b.n	8008434 <USB_EPStartXfer+0x11f6>
 8007dda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dde:	2b3e      	cmp	r3, #62	; 0x3e
 8007de0:	d818      	bhi.n	8007e14 <USB_EPStartXfer+0xbd6>
 8007de2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <USB_EPStartXfer+0xbc4>
 8007df8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	029b      	lsls	r3, r3, #10
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e30f      	b.n	8008434 <USB_EPStartXfer+0x11f6>
 8007e14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <USB_EPStartXfer+0xbf6>
 8007e2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	029b      	lsls	r3, r3, #10
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	e2f1      	b.n	8008434 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007e50:	463b      	mov	r3, r7
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	78db      	ldrb	r3, [r3, #3]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	f040 818f 	bne.w	800817a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d175      	bne.n	8007f52 <USB_EPStartXfer+0xd14>
 8007e66:	1d3b      	adds	r3, r7, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e6e:	1d3b      	adds	r3, r7, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e7e:	4413      	add	r3, r2
 8007e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e84:	463b      	mov	r3, r7
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	00da      	lsls	r2, r3, #3
 8007e8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e90:	4413      	add	r3, r2
 8007e92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d116      	bne.n	8007ed2 <USB_EPStartXfer+0xc94>
 8007ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	e065      	b.n	8007f9e <USB_EPStartXfer+0xd60>
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	2b3e      	cmp	r3, #62	; 0x3e
 8007eda:	d81a      	bhi.n	8007f12 <USB_EPStartXfer+0xcd4>
 8007edc:	463b      	mov	r3, r7
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ee8:	463b      	mov	r3, r7
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <USB_EPStartXfer+0xcc2>
 8007ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007efa:	3301      	adds	r3, #1
 8007efc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	029b      	lsls	r3, r3, #10
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e045      	b.n	8007f9e <USB_EPStartXfer+0xd60>
 8007f12:	463b      	mov	r3, r7
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f1e:	463b      	mov	r3, r7
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <USB_EPStartXfer+0xcf8>
 8007f2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f30:	3b01      	subs	r3, #1
 8007f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	e025      	b.n	8007f9e <USB_EPStartXfer+0xd60>
 8007f52:	463b      	mov	r3, r7
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d120      	bne.n	8007f9e <USB_EPStartXfer+0xd60>
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f64:	1d3b      	adds	r3, r7, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f74:	4413      	add	r3, r2
 8007f76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	00da      	lsls	r2, r3, #3
 8007f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f86:	4413      	add	r3, r2
 8007f88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fa6:	463b      	mov	r3, r7
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d175      	bne.n	800809c <USB_EPStartXfer+0xe5e>
 8007fb0:	1d3b      	adds	r3, r7, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fb8:	1d3b      	adds	r3, r7, #4
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fc8:	4413      	add	r3, r2
 8007fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fce:	463b      	mov	r3, r7
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	00da      	lsls	r2, r3, #3
 8007fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fda:	4413      	add	r3, r2
 8007fdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d116      	bne.n	800801c <USB_EPStartXfer+0xdde>
 8007fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	e061      	b.n	80080e0 <USB_EPStartXfer+0xea2>
 800801c:	463b      	mov	r3, r7
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b3e      	cmp	r3, #62	; 0x3e
 8008024:	d81a      	bhi.n	800805c <USB_EPStartXfer+0xe1e>
 8008026:	463b      	mov	r3, r7
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008032:	463b      	mov	r3, r7
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <USB_EPStartXfer+0xe0c>
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008044:	3301      	adds	r3, #1
 8008046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800804a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804e:	b29b      	uxth	r3, r3
 8008050:	029b      	lsls	r3, r3, #10
 8008052:	b29a      	uxth	r2, r3
 8008054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	e041      	b.n	80080e0 <USB_EPStartXfer+0xea2>
 800805c:	463b      	mov	r3, r7
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008068:	463b      	mov	r3, r7
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	2b00      	cmp	r3, #0
 8008074:	d104      	bne.n	8008080 <USB_EPStartXfer+0xe42>
 8008076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807a:	3b01      	subs	r3, #1
 800807c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008084:	b29b      	uxth	r3, r3
 8008086:	029b      	lsls	r3, r3, #10
 8008088:	b29b      	uxth	r3, r3
 800808a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008092:	b29a      	uxth	r2, r3
 8008094:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	e021      	b.n	80080e0 <USB_EPStartXfer+0xea2>
 800809c:	463b      	mov	r3, r7
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	785b      	ldrb	r3, [r3, #1]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d11c      	bne.n	80080e0 <USB_EPStartXfer+0xea2>
 80080a6:	1d3b      	adds	r3, r7, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080b6:	4413      	add	r3, r2
 80080b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080bc:	463b      	mov	r3, r7
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	00da      	lsls	r2, r3, #3
 80080c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080c8:	4413      	add	r3, r2
 80080ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080de:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80080e0:	463b      	mov	r3, r7
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 81a4 	beq.w	8008434 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008100:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <USB_EPStartXfer+0xeda>
 800810c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10d      	bne.n	8008134 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008118:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800811c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 8187 	bne.w	8008434 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008126:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800812a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 8180 	bne.w	8008434 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008134:	1d3b      	adds	r3, r7, #4
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008152:	1d3b      	adds	r3, r7, #4
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	463b      	mov	r3, r7
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	441a      	add	r2, r3
 8008160:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]
 8008178:	e15c      	b.n	8008434 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	78db      	ldrb	r3, [r3, #3]
 8008180:	2b01      	cmp	r3, #1
 8008182:	f040 8155 	bne.w	8008430 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8008186:	463b      	mov	r3, r7
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	463b      	mov	r3, r7
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	429a      	cmp	r2, r3
 8008194:	d90e      	bls.n	80081b4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8008196:	463b      	mov	r3, r7
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80081a0:	463b      	mov	r3, r7
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	463b      	mov	r3, r7
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	619a      	str	r2, [r3, #24]
 80081b2:	e008      	b.n	80081c6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80081b4:	463b      	mov	r3, r7
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80081be:	463b      	mov	r3, r7
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d16f      	bne.n	80082b0 <USB_EPStartXfer+0x1072>
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081d8:	1d3b      	adds	r3, r7, #4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081e8:	4413      	add	r3, r2
 80081ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081ee:	463b      	mov	r3, r7
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	00da      	lsls	r2, r3, #3
 80081f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081fa:	4413      	add	r3, r2
 80081fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008204:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008208:	2b00      	cmp	r3, #0
 800820a:	d116      	bne.n	800823a <USB_EPStartXfer+0xffc>
 800820c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008230:	b29a      	uxth	r2, r3
 8008232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e05f      	b.n	80082fa <USB_EPStartXfer+0x10bc>
 800823a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800823e:	2b3e      	cmp	r3, #62	; 0x3e
 8008240:	d818      	bhi.n	8008274 <USB_EPStartXfer+0x1036>
 8008242:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800824c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <USB_EPStartXfer+0x1024>
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825c:	3301      	adds	r3, #1
 800825e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008266:	b29b      	uxth	r3, r3
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	b29a      	uxth	r2, r3
 800826c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e042      	b.n	80082fa <USB_EPStartXfer+0x10bc>
 8008274:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800827e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008282:	f003 031f 	and.w	r3, r3, #31
 8008286:	2b00      	cmp	r3, #0
 8008288:	d104      	bne.n	8008294 <USB_EPStartXfer+0x1056>
 800828a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800828e:	3b01      	subs	r3, #1
 8008290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	b29b      	uxth	r3, r3
 800829a:	029b      	lsls	r3, r3, #10
 800829c:	b29b      	uxth	r3, r3
 800829e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	e024      	b.n	80082fa <USB_EPStartXfer+0x10bc>
 80082b0:	463b      	mov	r3, r7
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d11f      	bne.n	80082fa <USB_EPStartXfer+0x10bc>
 80082ba:	1d3b      	adds	r3, r7, #4
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082c2:	1d3b      	adds	r3, r7, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082d2:	4413      	add	r3, r2
 80082d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	00da      	lsls	r2, r3, #3
 80082e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082e4:	4413      	add	r3, r2
 80082e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008302:	463b      	mov	r3, r7
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d16f      	bne.n	80083ec <USB_EPStartXfer+0x11ae>
 800830c:	1d3b      	adds	r3, r7, #4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008314:	1d3b      	adds	r3, r7, #4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800831c:	b29b      	uxth	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008324:	4413      	add	r3, r2
 8008326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800832a:	463b      	mov	r3, r7
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	00da      	lsls	r2, r3, #3
 8008332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008336:	4413      	add	r3, r2
 8008338:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800833c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008340:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008344:	2b00      	cmp	r3, #0
 8008346:	d116      	bne.n	8008376 <USB_EPStartXfer+0x1138>
 8008348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008354:	b29a      	uxth	r2, r3
 8008356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800836c:	b29a      	uxth	r2, r3
 800836e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e05e      	b.n	8008434 <USB_EPStartXfer+0x11f6>
 8008376:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800837a:	2b3e      	cmp	r3, #62	; 0x3e
 800837c:	d818      	bhi.n	80083b0 <USB_EPStartXfer+0x1172>
 800837e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <USB_EPStartXfer+0x1160>
 8008394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008398:	3301      	adds	r3, #1
 800839a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800839e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	029b      	lsls	r3, r3, #10
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e041      	b.n	8008434 <USB_EPStartXfer+0x11f6>
 80083b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <USB_EPStartXfer+0x1192>
 80083c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ca:	3b01      	subs	r3, #1
 80083cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	029b      	lsls	r3, r3, #10
 80083d8:	b29b      	uxth	r3, r3
 80083da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e023      	b.n	8008434 <USB_EPStartXfer+0x11f6>
 80083ec:	463b      	mov	r3, r7
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d11e      	bne.n	8008434 <USB_EPStartXfer+0x11f6>
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fe:	b29b      	uxth	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008406:	4413      	add	r3, r2
 8008408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	00da      	lsls	r2, r3, #3
 8008414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008418:	4413      	add	r3, r2
 800841a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800841e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008422:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008426:	b29a      	uxth	r2, r3
 8008428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	e001      	b.n	8008434 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e02e      	b.n	8008492 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008452:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008456:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800845a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800845e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008462:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008466:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800846a:	1d3b      	adds	r3, r7, #4
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	463b      	mov	r3, r7
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d020      	beq.n	80084f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c4:	81bb      	strh	r3, [r7, #12]
 80084c6:	89bb      	ldrh	r3, [r7, #12]
 80084c8:	f083 0310 	eor.w	r3, r3, #16
 80084cc:	81bb      	strh	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	89bb      	ldrh	r3, [r7, #12]
 80084da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]
 80084ee:	e01f      	b.n	8008530 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	81fb      	strh	r3, [r7, #14]
 8008508:	89fb      	ldrh	r3, [r7, #14]
 800850a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800850e:	81fb      	strh	r3, [r7, #14]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	441a      	add	r2, r3
 800851a:	89fb      	ldrh	r3, [r7, #14]
 800851c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852c:	b29b      	uxth	r3, r3
 800852e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	7b1b      	ldrb	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f040 809d 	bne.w	800868c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d04c      	beq.n	80085f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	823b      	strh	r3, [r7, #16]
 8008568:	8a3b      	ldrh	r3, [r7, #16]
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d01b      	beq.n	80085aa <USB_EPClearStall+0x6c>
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	81fb      	strh	r3, [r7, #14]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	78db      	ldrb	r3, [r3, #3]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d06c      	beq.n	800868c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c8:	81bb      	strh	r3, [r7, #12]
 80085ca:	89bb      	ldrh	r3, [r7, #12]
 80085cc:	f083 0320 	eor.w	r3, r3, #32
 80085d0:	81bb      	strh	r3, [r7, #12]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	89bb      	ldrh	r3, [r7, #12]
 80085de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	8013      	strh	r3, [r2, #0]
 80085f2:	e04b      	b.n	800868c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	82fb      	strh	r3, [r7, #22]
 8008602:	8afb      	ldrh	r3, [r7, #22]
 8008604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01b      	beq.n	8008644 <USB_EPClearStall+0x106>
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b29b      	uxth	r3, r3
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008622:	82bb      	strh	r3, [r7, #20]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	441a      	add	r2, r3
 800862e:	8abb      	ldrh	r3, [r7, #20]
 8008630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	b29b      	uxth	r3, r3
 8008642:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865a:	827b      	strh	r3, [r7, #18]
 800865c:	8a7b      	ldrh	r3, [r7, #18]
 800865e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008662:	827b      	strh	r3, [r7, #18]
 8008664:	8a7b      	ldrh	r3, [r7, #18]
 8008666:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800866a:	827b      	strh	r3, [r7, #18]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	8a7b      	ldrh	r3, [r7, #18]
 8008678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008688:	b29b      	uxth	r3, r3
 800868a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d103      	bne.n	80086b4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2280      	movs	r2, #128	; 0x80
 80086b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80086fe:	b29b      	uxth	r3, r3
 8008700:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008702:	68fb      	ldr	r3, [r7, #12]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008728:	b480      	push	{r7}
 800872a:	b08d      	sub	sp, #52	; 0x34
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4611      	mov	r1, r2
 8008734:	461a      	mov	r2, r3
 8008736:	460b      	mov	r3, r1
 8008738:	80fb      	strh	r3, [r7, #6]
 800873a:	4613      	mov	r3, r2
 800873c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800873e:	88bb      	ldrh	r3, [r7, #4]
 8008740:	3301      	adds	r3, #1
 8008742:	085b      	lsrs	r3, r3, #1
 8008744:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875e:	e01b      	b.n	8008798 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	3301      	adds	r3, #1
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	b29b      	uxth	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	b29a      	uxth	r2, r3
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	3302      	adds	r3, #2
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	3301      	adds	r3, #1
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	3b01      	subs	r3, #1
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e0      	bne.n	8008760 <USB_WritePMA+0x38>
  }
}
 800879e:	bf00      	nop
 80087a0:	3734      	adds	r7, #52	; 0x34
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b08b      	sub	sp, #44	; 0x2c
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	4611      	mov	r1, r2
 80087b6:	461a      	mov	r2, r3
 80087b8:	460b      	mov	r3, r1
 80087ba:	80fb      	strh	r3, [r7, #6]
 80087bc:	4613      	mov	r3, r2
 80087be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087c0:	88bb      	ldrh	r3, [r7, #4]
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087d0:	88fa      	ldrh	r2, [r7, #6]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087da:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
 80087e0:	e018      	b.n	8008814 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	3302      	adds	r3, #2
 80087ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	3301      	adds	r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	b2da      	uxtb	r2, r3
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3301      	adds	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	3b01      	subs	r3, #1
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e3      	bne.n	80087e2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800881a:	88bb      	ldrh	r3, [r7, #4]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	701a      	strb	r2, [r3, #0]
  }
}
 8008836:	bf00      	nop
 8008838:	372c      	adds	r7, #44	; 0x2c
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800884e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008852:	f002 f89d 	bl	800a990 <USBD_static_malloc>
 8008856:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d105      	bne.n	800886a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008866:	2302      	movs	r3, #2
 8008868:	e066      	b.n	8008938 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7c1b      	ldrb	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d119      	bne.n	80088ae <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800887a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800887e:	2202      	movs	r2, #2
 8008880:	2181      	movs	r1, #129	; 0x81
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f001 ff29 	bl	800a6da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800888e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008892:	2202      	movs	r2, #2
 8008894:	2101      	movs	r1, #1
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 ff1f 	bl	800a6da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2210      	movs	r2, #16
 80088a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088ac:	e016      	b.n	80088dc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	2202      	movs	r2, #2
 80088b2:	2181      	movs	r1, #129	; 0x81
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 ff10 	bl	800a6da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088c0:	2340      	movs	r3, #64	; 0x40
 80088c2:	2202      	movs	r2, #2
 80088c4:	2101      	movs	r1, #1
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 ff07 	bl	800a6da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2210      	movs	r2, #16
 80088d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088dc:	2308      	movs	r3, #8
 80088de:	2203      	movs	r2, #3
 80088e0:	2182      	movs	r1, #130	; 0x82
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 fef9 	bl	800a6da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7c1b      	ldrb	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800891c:	2101      	movs	r1, #1
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 ffcb 	bl	800a8ba <USBD_LL_PrepareReceive>
 8008924:	e007      	b.n	8008936 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	2101      	movs	r1, #1
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 ffc2 	bl	800a8ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800894c:	2181      	movs	r1, #129	; 0x81
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 fee9 	bl	800a726 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800895a:	2101      	movs	r1, #1
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fee2 	bl	800a726 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800896a:	2182      	movs	r1, #130	; 0x82
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 feda 	bl	800a726 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00e      	beq.n	80089aa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800899c:	4618      	mov	r0, r3
 800899e:	f002 f805 	bl	800a9ac <USBD_static_free>
    pdev->pClassData = NULL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d03a      	beq.n	8008a54 <USBD_CDC_Setup+0xa0>
 80089de:	2b20      	cmp	r3, #32
 80089e0:	f040 8097 	bne.w	8008b12 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d029      	beq.n	8008a40 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	b25b      	sxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da11      	bge.n	8008a1a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	88d2      	ldrh	r2, [r2, #6]
 8008a08:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a0a:	6939      	ldr	r1, [r7, #16]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	88db      	ldrh	r3, [r3, #6]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fa8d 	bl	8009f32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a18:	e082      	b.n	8008b20 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	785a      	ldrb	r2, [r3, #1]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	88db      	ldrh	r3, [r3, #6]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a30:	6939      	ldr	r1, [r7, #16]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	88db      	ldrh	r3, [r3, #6]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 faa6 	bl	8009f8a <USBD_CtlPrepareRx>
      break;
 8008a3e:	e06f      	b.n	8008b20 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	7850      	ldrb	r0, [r2, #1]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	4798      	blx	r3
      break;
 8008a52:	e065      	b.n	8008b20 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b0b      	cmp	r3, #11
 8008a5a:	d84f      	bhi.n	8008afc <USBD_CDC_Setup+0x148>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <USBD_CDC_Setup+0xb0>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a95 	.word	0x08008a95
 8008a68:	08008b0b 	.word	0x08008b0b
 8008a6c:	08008afd 	.word	0x08008afd
 8008a70:	08008afd 	.word	0x08008afd
 8008a74:	08008afd 	.word	0x08008afd
 8008a78:	08008afd 	.word	0x08008afd
 8008a7c:	08008afd 	.word	0x08008afd
 8008a80:	08008afd 	.word	0x08008afd
 8008a84:	08008afd 	.word	0x08008afd
 8008a88:	08008afd 	.word	0x08008afd
 8008a8c:	08008abd 	.word	0x08008abd
 8008a90:	08008ae5 	.word	0x08008ae5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d107      	bne.n	8008aae <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fa43 	bl	8009f32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aac:	e030      	b.n	8008b10 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f9cd 	bl	8009e50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8008aba:	e029      	b.n	8008b10 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d107      	bne.n	8008ad6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ac6:	f107 030f 	add.w	r3, r7, #15
 8008aca:	2201      	movs	r2, #1
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fa2f 	bl	8009f32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ad4:	e01c      	b.n	8008b10 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f9b9 	bl	8009e50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae2:	e015      	b.n	8008b10 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d00f      	beq.n	8008b0e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 f9ad 	bl	8009e50 <USBD_CtlError>
            ret = USBD_FAIL;
 8008af6:	2303      	movs	r3, #3
 8008af8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008afa:	e008      	b.n	8008b0e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f9a6 	bl	8009e50 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b04:	2303      	movs	r3, #3
 8008b06:	75fb      	strb	r3, [r7, #23]
          break;
 8008b08:	e002      	b.n	8008b10 <USBD_CDC_Setup+0x15c>
          break;
 8008b0a:	bf00      	nop
 8008b0c:	e008      	b.n	8008b20 <USBD_CDC_Setup+0x16c>
          break;
 8008b0e:	bf00      	nop
      }
      break;
 8008b10:	e006      	b.n	8008b20 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f99b 	bl	8009e50 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e04f      	b.n	8008bee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	440b      	add	r3, r1
 8008b64:	3318      	adds	r3, #24
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d029      	beq.n	8008bc0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	3318      	adds	r3, #24
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	78f9      	ldrb	r1, [r7, #3]
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	460b      	mov	r3, r1
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	4403      	add	r3, r0
 8008b8c:	3338      	adds	r3, #56	; 0x38
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b94:	fb03 f301 	mul.w	r3, r3, r1
 8008b98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d110      	bne.n	8008bc0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	3318      	adds	r3, #24
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 fe5d 	bl	800a878 <USBD_LL_Transmit>
 8008bbe:	e015      	b.n	8008bec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00b      	beq.n	8008bec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e015      	b.n	8008c44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fe6d 	bl	800a8fc <USBD_LL_GetRxDataSize>
 8008c22:	4602      	mov	r2, r0
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c5a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d015      	beq.n	8008c92 <USBD_CDC_EP0_RxReady+0x46>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c6c:	2bff      	cmp	r3, #255	; 0xff
 8008c6e:	d010      	beq.n	8008c92 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008c7e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c86:	b292      	uxth	r2, r2
 8008c88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2243      	movs	r2, #67	; 0x43
 8008ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008caa:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	20000094 	.word	0x20000094

08008cbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2243      	movs	r2, #67	; 0x43
 8008cc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008cca:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	20000050 	.word	0x20000050

08008cdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2243      	movs	r2, #67	; 0x43
 8008ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	200000d8 	.word	0x200000d8

08008cfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	220a      	movs	r2, #10
 8008d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d0a:	4b03      	ldr	r3, [pc, #12]	; (8008d18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	2000000c 	.word	0x2000000c

08008d1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e004      	b.n	8008d3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b087      	sub	sp, #28
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d88:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e01a      	b.n	8008df8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d114      	bne.n	8008df6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008dea:	2181      	movs	r1, #129	; 0x81
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fd43 	bl	800a878 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e016      	b.n	8008e4c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	7c1b      	ldrb	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d109      	bne.n	8008e3a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e30:	2101      	movs	r1, #1
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fd41 	bl	800a8ba <USBD_LL_PrepareReceive>
 8008e38:	e007      	b.n	8008e4a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e40:	2340      	movs	r3, #64	; 0x40
 8008e42:	2101      	movs	r1, #1
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fd38 	bl	800a8ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e01f      	b.n	8008eac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	79fa      	ldrb	r2, [r7, #7]
 8008e9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f001 fb9f 	bl	800a5e4 <USBD_LL_Init>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e016      	b.n	8008efa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	f107 020e 	add.w	r2, r7, #14
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fbca 	bl	800a6a4 <USBD_LL_Start>
 8008f10:	4603      	mov	r3, r0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d009      	beq.n	8008f5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	78fa      	ldrb	r2, [r7, #3]
 8008f54:	4611      	mov	r1, r2
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d007      	beq.n	8008f8e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
  }

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ff16 	bl	8009ddc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fcc:	f003 031f 	and.w	r3, r3, #31
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d00e      	beq.n	8008ff2 <USBD_LL_SetupStage+0x5a>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d302      	bcc.n	8008fde <USBD_LL_SetupStage+0x46>
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d014      	beq.n	8009006 <USBD_LL_SetupStage+0x6e>
 8008fdc:	e01d      	b.n	800901a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f9d6 	bl	8009398 <USBD_StdDevReq>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff0:	e020      	b.n	8009034 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa3a 	bl	8009474 <USBD_StdItfReq>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]
      break;
 8009004:	e016      	b.n	8009034 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa76 	bl	8009500 <USBD_StdEPReq>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	e00c      	b.n	8009034 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fb9b 	bl	800a764 <USBD_LL_StallEP>
 800902e:	4603      	mov	r3, r0
 8009030:	73fb      	strb	r3, [r7, #15]
      break;
 8009032:	bf00      	nop
  }

  return ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b086      	sub	sp, #24
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	460b      	mov	r3, r1
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d137      	bne.n	80090c2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009058:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009060:	2b03      	cmp	r3, #3
 8009062:	d14a      	bne.n	80090fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	429a      	cmp	r2, r3
 800906e:	d913      	bls.n	8009098 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	4293      	cmp	r3, r2
 8009088:	bf28      	it	cs
 800908a:	4613      	movcs	r3, r2
 800908c:	461a      	mov	r2, r3
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 ff97 	bl	8009fc4 <USBD_CtlContinueRx>
 8009096:	e030      	b.n	80090fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d105      	bne.n	80090ba <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 ff93 	bl	8009fe6 <USBD_CtlSendStatus>
 80090c0:	e01b      	b.n	80090fa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d013      	beq.n	80090f6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d10e      	bne.n	80090f6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	7afa      	ldrb	r2, [r7, #11]
 80090e2:	4611      	mov	r1, r2
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	4798      	blx	r3
 80090e8:	4603      	mov	r3, r0
 80090ea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	e002      	b.n	80090fc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e000      	b.n	80090fc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	460b      	mov	r3, r1
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009112:	7afb      	ldrb	r3, [r7, #11]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d16a      	bne.n	80091ee <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3314      	adds	r3, #20
 800911c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009124:	2b02      	cmp	r3, #2
 8009126:	d155      	bne.n	80091d4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	429a      	cmp	r2, r3
 8009132:	d914      	bls.n	800915e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	1ad2      	subs	r2, r2, r3
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	461a      	mov	r2, r3
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 ff0c 	bl	8009f68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009150:	2300      	movs	r3, #0
 8009152:	2200      	movs	r2, #0
 8009154:	2100      	movs	r1, #0
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f001 fbaf 	bl	800a8ba <USBD_LL_PrepareReceive>
 800915c:	e03a      	b.n	80091d4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	d11c      	bne.n	80091a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009172:	429a      	cmp	r2, r3
 8009174:	d316      	bcc.n	80091a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009180:	429a      	cmp	r2, r3
 8009182:	d20f      	bcs.n	80091a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009184:	2200      	movs	r2, #0
 8009186:	2100      	movs	r1, #0
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 feed 	bl	8009f68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009196:	2300      	movs	r3, #0
 8009198:	2200      	movs	r2, #0
 800919a:	2100      	movs	r1, #0
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f001 fb8c 	bl	800a8ba <USBD_LL_PrepareReceive>
 80091a2:	e017      	b.n	80091d4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d105      	bne.n	80091c6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091c6:	2180      	movs	r1, #128	; 0x80
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f001 facb 	bl	800a764 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 ff1c 	bl	800a00c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d123      	bne.n	8009226 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fe9b 	bl	8008f1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091ec:	e01b      	b.n	8009226 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d013      	beq.n	8009222 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009200:	2b03      	cmp	r3, #3
 8009202:	d10e      	bne.n	8009222 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	7afa      	ldrb	r2, [r7, #11]
 800920e:	4611      	mov	r1, r2
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	4798      	blx	r3
 8009214:	4603      	mov	r3, r0
 8009216:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	e002      	b.n	8009228 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	e000      	b.n	8009228 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	6852      	ldr	r2, [r2, #4]
 800926c:	b2d2      	uxtb	r2, r2
 800926e:	4611      	mov	r1, r2
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	2200      	movs	r2, #0
 8009278:	2100      	movs	r1, #0
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fa2d 	bl	800a6da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2240      	movs	r2, #64	; 0x40
 800928c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	2200      	movs	r2, #0
 8009294:	2180      	movs	r1, #128	; 0x80
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fa1f 	bl	800a6da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2240      	movs	r2, #64	; 0x40
 80092a6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b083      	sub	sp, #12
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2204      	movs	r2, #4
 80092ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930a:	2b04      	cmp	r3, #4
 800930c:	d105      	bne.n	800931a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009336:	2b03      	cmp	r3, #3
 8009338:	d10b      	bne.n	8009352 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	3301      	adds	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800937a:	8a3b      	ldrh	r3, [r7, #16]
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	b21a      	sxth	r2, r3
 8009380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009384:	4313      	orrs	r3, r2
 8009386:	b21b      	sxth	r3, r3
 8009388:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800938a:	89fb      	ldrh	r3, [r7, #14]
}
 800938c:	4618      	mov	r0, r3
 800938e:	371c      	adds	r7, #28
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d004      	beq.n	80093bc <USBD_StdDevReq+0x24>
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d002      	beq.n	80093bc <USBD_StdDevReq+0x24>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <USBD_StdDevReq+0x38>
 80093ba:	e050      	b.n	800945e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
    break;
 80093ce:	e04b      	b.n	8009468 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	d83c      	bhi.n	8009452 <USBD_StdDevReq+0xba>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBD_StdDevReq+0x48>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	08009435 	.word	0x08009435
 80093e4:	08009449 	.word	0x08009449
 80093e8:	08009453 	.word	0x08009453
 80093ec:	0800943f 	.word	0x0800943f
 80093f0:	08009453 	.word	0x08009453
 80093f4:	08009413 	.word	0x08009413
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009453 	.word	0x08009453
 8009400:	0800942b 	.word	0x0800942b
 8009404:	0800941d 	.word	0x0800941d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f9d0 	bl	80097b0 <USBD_GetDescriptor>
      break;
 8009410:	e024      	b.n	800945c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fb5f 	bl	8009ad8 <USBD_SetAddress>
      break;
 800941a:	e01f      	b.n	800945c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fb9c 	bl	8009b5c <USBD_SetConfig>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]
      break;
 8009428:	e018      	b.n	800945c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fc39 	bl	8009ca4 <USBD_GetConfig>
      break;
 8009432:	e013      	b.n	800945c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fc68 	bl	8009d0c <USBD_GetStatus>
      break;
 800943c:	e00e      	b.n	800945c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fc96 	bl	8009d72 <USBD_SetFeature>
      break;
 8009446:	e009      	b.n	800945c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fca5 	bl	8009d9a <USBD_ClrFeature>
      break;
 8009450:	e004      	b.n	800945c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fcfb 	bl	8009e50 <USBD_CtlError>
      break;
 800945a:	bf00      	nop
    }
    break;
 800945c:	e004      	b.n	8009468 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fcf5 	bl	8009e50 <USBD_CtlError>
    break;
 8009466:	bf00      	nop
  }

  return ret;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop

08009474 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800948a:	2b20      	cmp	r3, #32
 800948c:	d003      	beq.n	8009496 <USBD_StdItfReq+0x22>
 800948e:	2b40      	cmp	r3, #64	; 0x40
 8009490:	d001      	beq.n	8009496 <USBD_StdItfReq+0x22>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d12a      	bne.n	80094ec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949c:	3b01      	subs	r3, #1
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d81d      	bhi.n	80094de <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	889b      	ldrh	r3, [r3, #4]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d813      	bhi.n	80094d4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d110      	bne.n	80094e8 <USBD_StdItfReq+0x74>
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10d      	bne.n	80094e8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fd8a 	bl	8009fe6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80094d2:	e009      	b.n	80094e8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fcba 	bl	8009e50 <USBD_CtlError>
      break;
 80094dc:	e004      	b.n	80094e8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fcb5 	bl	8009e50 <USBD_CtlError>
      break;
 80094e6:	e000      	b.n	80094ea <USBD_StdItfReq+0x76>
      break;
 80094e8:	bf00      	nop
    }
    break;
 80094ea:	e004      	b.n	80094f6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fcae 	bl	8009e50 <USBD_CtlError>
    break;
 80094f4:	bf00      	nop
  }

  return ret;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	889b      	ldrh	r3, [r3, #4]
 8009512:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800951c:	2b20      	cmp	r3, #32
 800951e:	d004      	beq.n	800952a <USBD_StdEPReq+0x2a>
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d002      	beq.n	800952a <USBD_StdEPReq+0x2a>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00a      	beq.n	800953e <USBD_StdEPReq+0x3e>
 8009528:	e137      	b.n	800979a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	e132      	b.n	80097a4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d03e      	beq.n	80095c4 <USBD_StdEPReq+0xc4>
 8009546:	2b03      	cmp	r3, #3
 8009548:	d002      	beq.n	8009550 <USBD_StdEPReq+0x50>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d079      	beq.n	8009642 <USBD_StdEPReq+0x142>
 800954e:	e11e      	b.n	800978e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009556:	2b02      	cmp	r3, #2
 8009558:	d002      	beq.n	8009560 <USBD_StdEPReq+0x60>
 800955a:	2b03      	cmp	r3, #3
 800955c:	d015      	beq.n	800958a <USBD_StdEPReq+0x8a>
 800955e:	e02b      	b.n	80095b8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00c      	beq.n	8009580 <USBD_StdEPReq+0x80>
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	2b80      	cmp	r3, #128	; 0x80
 800956a:	d009      	beq.n	8009580 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 f8f7 	bl	800a764 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009576:	2180      	movs	r1, #128	; 0x80
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 f8f3 	bl	800a764 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800957e:	e020      	b.n	80095c2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fc64 	bl	8009e50 <USBD_CtlError>
        break;
 8009588:	e01b      	b.n	80095c2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	885b      	ldrh	r3, [r3, #2]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10e      	bne.n	80095b0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <USBD_StdEPReq+0xb0>
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b80      	cmp	r3, #128	; 0x80
 800959c:	d008      	beq.n	80095b0 <USBD_StdEPReq+0xb0>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	88db      	ldrh	r3, [r3, #6]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f8da 	bl	800a764 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fd18 	bl	8009fe6 <USBD_CtlSendStatus>

        break;
 80095b6:	e004      	b.n	80095c2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fc48 	bl	8009e50 <USBD_CtlError>
        break;
 80095c0:	bf00      	nop
      }
      break;
 80095c2:	e0e9      	b.n	8009798 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d002      	beq.n	80095d4 <USBD_StdEPReq+0xd4>
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d015      	beq.n	80095fe <USBD_StdEPReq+0xfe>
 80095d2:	e02f      	b.n	8009634 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00c      	beq.n	80095f4 <USBD_StdEPReq+0xf4>
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b80      	cmp	r3, #128	; 0x80
 80095de:	d009      	beq.n	80095f4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 f8bd 	bl	800a764 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ea:	2180      	movs	r1, #128	; 0x80
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 f8b9 	bl	800a764 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80095f2:	e025      	b.n	8009640 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fc2a 	bl	8009e50 <USBD_CtlError>
        break;
 80095fc:	e020      	b.n	8009640 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	885b      	ldrh	r3, [r3, #2]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d11b      	bne.n	800963e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 f8c4 	bl	800a7a2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fce3 	bl	8009fe6 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4798      	blx	r3
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009632:	e004      	b.n	800963e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fc0a 	bl	8009e50 <USBD_CtlError>
        break;
 800963c:	e000      	b.n	8009640 <USBD_StdEPReq+0x140>
        break;
 800963e:	bf00      	nop
      }
      break;
 8009640:	e0aa      	b.n	8009798 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009648:	2b02      	cmp	r3, #2
 800964a:	d002      	beq.n	8009652 <USBD_StdEPReq+0x152>
 800964c:	2b03      	cmp	r3, #3
 800964e:	d032      	beq.n	80096b6 <USBD_StdEPReq+0x1b6>
 8009650:	e097      	b.n	8009782 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <USBD_StdEPReq+0x168>
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b80      	cmp	r3, #128	; 0x80
 800965c:	d004      	beq.n	8009668 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fbf5 	bl	8009e50 <USBD_CtlError>
          break;
 8009666:	e091      	b.n	800978c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800966c:	2b00      	cmp	r3, #0
 800966e:	da0b      	bge.n	8009688 <USBD_StdEPReq+0x188>
 8009670:	7bbb      	ldrb	r3, [r7, #14]
 8009672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	3310      	adds	r3, #16
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4413      	add	r3, r2
 8009684:	3304      	adds	r3, #4
 8009686:	e00b      	b.n	80096a0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	4413      	add	r3, r2
 800969e:	3304      	adds	r3, #4
 80096a0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2202      	movs	r2, #2
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fc3f 	bl	8009f32 <USBD_CtlSendData>
        break;
 80096b4:	e06a      	b.n	800978c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80096b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	da11      	bge.n	80096e2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	f003 020f 	and.w	r2, r3, #15
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	3324      	adds	r3, #36	; 0x24
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d117      	bne.n	8009708 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fbb8 	bl	8009e50 <USBD_CtlError>
            break;
 80096e0:	e054      	b.n	800978c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	f003 020f 	and.w	r2, r3, #15
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	440b      	add	r3, r1
 80096f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d104      	bne.n	8009708 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fba5 	bl	8009e50 <USBD_CtlError>
            break;
 8009706:	e041      	b.n	800978c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800970c:	2b00      	cmp	r3, #0
 800970e:	da0b      	bge.n	8009728 <USBD_StdEPReq+0x228>
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	3310      	adds	r3, #16
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	4413      	add	r3, r2
 8009724:	3304      	adds	r3, #4
 8009726:	e00b      	b.n	8009740 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	4413      	add	r3, r2
 800973e:	3304      	adds	r3, #4
 8009740:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <USBD_StdEPReq+0x24e>
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b80      	cmp	r3, #128	; 0x80
 800974c:	d103      	bne.n	8009756 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	e00e      	b.n	8009774 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 f840 	bl	800a7e0 <USBD_LL_IsStallEP>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2201      	movs	r2, #1
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e002      	b.n	8009774 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2200      	movs	r2, #0
 8009772:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2202      	movs	r2, #2
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fbd9 	bl	8009f32 <USBD_CtlSendData>
          break;
 8009780:	e004      	b.n	800978c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fb63 	bl	8009e50 <USBD_CtlError>
        break;
 800978a:	bf00      	nop
      }
      break;
 800978c:	e004      	b.n	8009798 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fb5d 	bl	8009e50 <USBD_CtlError>
      break;
 8009796:	bf00      	nop
    }
    break;
 8009798:	e004      	b.n	80097a4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fb57 	bl	8009e50 <USBD_CtlError>
    break;
 80097a2:	bf00      	nop
  }

  return ret;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	885b      	ldrh	r3, [r3, #2]
 80097ca:	0a1b      	lsrs	r3, r3, #8
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	2b0e      	cmp	r3, #14
 80097d2:	f200 8152 	bhi.w	8009a7a <USBD_GetDescriptor+0x2ca>
 80097d6:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <USBD_GetDescriptor+0x2c>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	0800984d 	.word	0x0800984d
 80097e0:	08009865 	.word	0x08009865
 80097e4:	080098a5 	.word	0x080098a5
 80097e8:	08009a7b 	.word	0x08009a7b
 80097ec:	08009a7b 	.word	0x08009a7b
 80097f0:	08009a1b 	.word	0x08009a1b
 80097f4:	08009a47 	.word	0x08009a47
 80097f8:	08009a7b 	.word	0x08009a7b
 80097fc:	08009a7b 	.word	0x08009a7b
 8009800:	08009a7b 	.word	0x08009a7b
 8009804:	08009a7b 	.word	0x08009a7b
 8009808:	08009a7b 	.word	0x08009a7b
 800980c:	08009a7b 	.word	0x08009a7b
 8009810:	08009a7b 	.word	0x08009a7b
 8009814:	08009819 	.word	0x08009819
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800983a:	e126      	b.n	8009a8a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fb06 	bl	8009e50 <USBD_CtlError>
      err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
    break;
 800984a:	e11e      	b.n	8009a8a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	7c12      	ldrb	r2, [r2, #16]
 8009858:	f107 0108 	add.w	r1, r7, #8
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
 8009860:	60f8      	str	r0, [r7, #12]
    break;
 8009862:	e112      	b.n	8009a8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	7c1b      	ldrb	r3, [r3, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	f107 0208 	add.w	r2, r7, #8
 8009878:	4610      	mov	r0, r2
 800987a:	4798      	blx	r3
 800987c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3301      	adds	r3, #1
 8009882:	2202      	movs	r2, #2
 8009884:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009886:	e100      	b.n	8009a8a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	f107 0208 	add.w	r2, r7, #8
 8009894:	4610      	mov	r0, r2
 8009896:	4798      	blx	r3
 8009898:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3301      	adds	r3, #1
 800989e:	2202      	movs	r2, #2
 80098a0:	701a      	strb	r2, [r3, #0]
    break;
 80098a2:	e0f2      	b.n	8009a8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	885b      	ldrh	r3, [r3, #2]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	f200 80ac 	bhi.w	8009a08 <USBD_GetDescriptor+0x258>
 80098b0:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <USBD_GetDescriptor+0x108>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	08009905 	.word	0x08009905
 80098c0:	08009939 	.word	0x08009939
 80098c4:	0800996d 	.word	0x0800996d
 80098c8:	080099a1 	.word	0x080099a1
 80098cc:	080099d5 	.word	0x080099d5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	7c12      	ldrb	r2, [r2, #16]
 80098e8:	f107 0108 	add.w	r1, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098f2:	e091      	b.n	8009a18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 faaa 	bl	8009e50 <USBD_CtlError>
        err++;
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	3301      	adds	r3, #1
 8009900:	72fb      	strb	r3, [r7, #11]
      break;
 8009902:	e089      	b.n	8009a18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00b      	beq.n	8009928 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	7c12      	ldrb	r2, [r2, #16]
 800991c:	f107 0108 	add.w	r1, r7, #8
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009926:	e077      	b.n	8009a18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa90 	bl	8009e50 <USBD_CtlError>
        err++;
 8009930:	7afb      	ldrb	r3, [r7, #11]
 8009932:	3301      	adds	r3, #1
 8009934:	72fb      	strb	r3, [r7, #11]
      break;
 8009936:	e06f      	b.n	8009a18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	7c12      	ldrb	r2, [r2, #16]
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800995a:	e05d      	b.n	8009a18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa76 	bl	8009e50 <USBD_CtlError>
        err++;
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	3301      	adds	r3, #1
 8009968:	72fb      	strb	r3, [r7, #11]
      break;
 800996a:	e055      	b.n	8009a18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 0108 	add.w	r1, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998e:	e043      	b.n	8009a18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa5c 	bl	8009e50 <USBD_CtlError>
        err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
      break;
 800999e:	e03b      	b.n	8009a18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	7c12      	ldrb	r2, [r2, #16]
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	4610      	mov	r0, r2
 80099be:	4798      	blx	r3
 80099c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099c2:	e029      	b.n	8009a18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa42 	bl	8009e50 <USBD_CtlError>
        err++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
      break;
 80099d2:	e021      	b.n	8009a18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099f6:	e00f      	b.n	8009a18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa28 	bl	8009e50 <USBD_CtlError>
        err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
      break;
 8009a06:	e007      	b.n	8009a18 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fa20 	bl	8009e50 <USBD_CtlError>
      err++;
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	3301      	adds	r3, #1
 8009a14:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009a16:	bf00      	nop
    }
    break;
 8009a18:	e037      	b.n	8009a8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7c1b      	ldrb	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a2a:	f107 0208 	add.w	r2, r7, #8
 8009a2e:	4610      	mov	r0, r2
 8009a30:	4798      	blx	r3
 8009a32:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a34:	e029      	b.n	8009a8a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa09 	bl	8009e50 <USBD_CtlError>
      err++;
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	3301      	adds	r3, #1
 8009a42:	72fb      	strb	r3, [r7, #11]
    break;
 8009a44:	e021      	b.n	8009a8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	7c1b      	ldrb	r3, [r3, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10d      	bne.n	8009a6a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a56:	f107 0208 	add.w	r2, r7, #8
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4798      	blx	r3
 8009a5e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3301      	adds	r3, #1
 8009a64:	2207      	movs	r2, #7
 8009a66:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a68:	e00f      	b.n	8009a8a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f9ef 	bl	8009e50 <USBD_CtlError>
      err++;
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	3301      	adds	r3, #1
 8009a76:	72fb      	strb	r3, [r7, #11]
    break;
 8009a78:	e007      	b.n	8009a8a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f9e7 	bl	8009e50 <USBD_CtlError>
    err++;
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	3301      	adds	r3, #1
 8009a86:	72fb      	strb	r3, [r7, #11]
    break;
 8009a88:	bf00      	nop
  }

  if (err != 0U)
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d11e      	bne.n	8009ace <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	88db      	ldrh	r3, [r3, #6]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d016      	beq.n	8009ac6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009a98:	893b      	ldrh	r3, [r7, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00e      	beq.n	8009abc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	88da      	ldrh	r2, [r3, #6]
 8009aa2:	893b      	ldrh	r3, [r7, #8]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bf28      	it	cs
 8009aa8:	4613      	movcs	r3, r2
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009aae:	893b      	ldrh	r3, [r7, #8]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa3c 	bl	8009f32 <USBD_CtlSendData>
 8009aba:	e009      	b.n	8009ad0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f9c6 	bl	8009e50 <USBD_CtlError>
 8009ac4:	e004      	b.n	8009ad0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa8d 	bl	8009fe6 <USBD_CtlSendStatus>
 8009acc:	e000      	b.n	8009ad0 <USBD_GetDescriptor+0x320>
    return;
 8009ace:	bf00      	nop
    }
  }
}
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop

08009ad8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	889b      	ldrh	r3, [r3, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d130      	bne.n	8009b4c <USBD_SetAddress+0x74>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	88db      	ldrh	r3, [r3, #6]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d12c      	bne.n	8009b4c <USBD_SetAddress+0x74>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	885b      	ldrh	r3, [r3, #2]
 8009af6:	2b7f      	cmp	r3, #127	; 0x7f
 8009af8:	d828      	bhi.n	8009b4c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	885b      	ldrh	r3, [r3, #2]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d104      	bne.n	8009b1a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f99c 	bl	8009e50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b18:	e01c      	b.n	8009b54 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7bfa      	ldrb	r2, [r7, #15]
 8009b1e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fe87 	bl	800a83a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fa5a 	bl	8009fe6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d004      	beq.n	8009b42 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b40:	e008      	b.n	8009b54 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	e003      	b.n	8009b54 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f97e 	bl	8009e50 <USBD_CtlError>
  }
}
 8009b54:	bf00      	nop
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009b72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b74:	4b4a      	ldr	r3, [pc, #296]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d905      	bls.n	8009b88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f966 	bl	8009e50 <USBD_CtlError>
    return USBD_FAIL;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e087      	b.n	8009c98 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d002      	beq.n	8009b98 <USBD_SetConfig+0x3c>
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d025      	beq.n	8009be2 <USBD_SetConfig+0x86>
 8009b96:	e071      	b.n	8009c7c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009b98:	4b41      	ldr	r3, [pc, #260]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01c      	beq.n	8009bda <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009ba0:	4b3f      	ldr	r3, [pc, #252]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009baa:	4b3d      	ldr	r3, [pc, #244]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff f9bd 	bl	8008f30 <USBD_SetClassConfig>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f944 	bl	8009e50 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009bc8:	e065      	b.n	8009c96 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa0b 	bl	8009fe6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009bd8:	e05d      	b.n	8009c96 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa03 	bl	8009fe6 <USBD_CtlSendStatus>
    break;
 8009be0:	e059      	b.n	8009c96 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009be2:	4b2f      	ldr	r3, [pc, #188]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d112      	bne.n	8009c10 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009bf2:	4b2b      	ldr	r3, [pc, #172]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bfc:	4b28      	ldr	r3, [pc, #160]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff f9b0 	bl	8008f68 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f9ec 	bl	8009fe6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009c0e:	e042      	b.n	8009c96 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009c10:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d02a      	beq.n	8009c74 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff f99e 	bl	8008f68 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009c2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c36:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff f977 	bl	8008f30 <USBD_SetClassConfig>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00f      	beq.n	8009c6c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8fe 	bl	8009e50 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff f983 	bl	8008f68 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2202      	movs	r2, #2
 8009c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009c6a:	e014      	b.n	8009c96 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f9ba 	bl	8009fe6 <USBD_CtlSendStatus>
    break;
 8009c72:	e010      	b.n	8009c96 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f9b6 	bl	8009fe6 <USBD_CtlSendStatus>
    break;
 8009c7a:	e00c      	b.n	8009c96 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f8e6 	bl	8009e50 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c84:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <USBD_SetConfig+0x144>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff f96c 	bl	8008f68 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009c90:	2303      	movs	r3, #3
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	bf00      	nop
  }

  return ret;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	200001a8 	.word	0x200001a8

08009ca4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	88db      	ldrh	r3, [r3, #6]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d004      	beq.n	8009cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f8c9 	bl	8009e50 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009cbe:	e021      	b.n	8009d04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	db17      	blt.n	8009cfa <USBD_GetConfig+0x56>
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	dd02      	ble.n	8009cd4 <USBD_GetConfig+0x30>
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d00b      	beq.n	8009cea <USBD_GetConfig+0x46>
 8009cd2:	e012      	b.n	8009cfa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f925 	bl	8009f32 <USBD_CtlSendData>
      break;
 8009ce8:	e00c      	b.n	8009d04 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3304      	adds	r3, #4
 8009cee:	2201      	movs	r2, #1
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f91d 	bl	8009f32 <USBD_CtlSendData>
      break;
 8009cf8:	e004      	b.n	8009d04 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f8a7 	bl	8009e50 <USBD_CtlError>
      break;
 8009d02:	bf00      	nop
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d81e      	bhi.n	8009d60 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	88db      	ldrh	r3, [r3, #6]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d004      	beq.n	8009d34 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f88f 	bl	8009e50 <USBD_CtlError>
      break;
 8009d32:	e01a      	b.n	8009d6a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f043 0202 	orr.w	r2, r3, #2
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	330c      	adds	r3, #12
 8009d54:	2202      	movs	r2, #2
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f8ea 	bl	8009f32 <USBD_CtlSendData>
    break;
 8009d5e:	e004      	b.n	8009d6a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f874 	bl	8009e50 <USBD_CtlError>
    break;
 8009d68:	bf00      	nop
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	885b      	ldrh	r3, [r3, #2]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d106      	bne.n	8009d92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f92a 	bl	8009fe6 <USBD_CtlSendStatus>
  }
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d80b      	bhi.n	8009dc8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	885b      	ldrh	r3, [r3, #2]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d10c      	bne.n	8009dd2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f910 	bl	8009fe6 <USBD_CtlSendStatus>
      }
      break;
 8009dc6:	e004      	b.n	8009dd2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f840 	bl	8009e50 <USBD_CtlError>
      break;
 8009dd0:	e000      	b.n	8009dd4 <USBD_ClrFeature+0x3a>
      break;
 8009dd2:	bf00      	nop
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	781a      	ldrb	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3301      	adds	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff faa8 	bl	800935c <SWAPBYTE>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f7ff fa9b 	bl	800935c <SWAPBYTE>
 8009e26:	4603      	mov	r3, r0
 8009e28:	461a      	mov	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3301      	adds	r3, #1
 8009e32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3301      	adds	r3, #1
 8009e38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff fa8e 	bl	800935c <SWAPBYTE>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	80da      	strh	r2, [r3, #6]
}
 8009e48:	bf00      	nop
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e5a:	2180      	movs	r1, #128	; 0x80
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc81 	bl	800a764 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e62:	2100      	movs	r1, #0
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fc7d 	bl	800a764 <USBD_LL_StallEP>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d036      	beq.n	8009ef6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e8c:	6938      	ldr	r0, [r7, #16]
 8009e8e:	f000 f836 	bl	8009efe <USBD_GetLen>
 8009e92:	4603      	mov	r3, r0
 8009e94:	3301      	adds	r3, #1
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	7812      	ldrb	r2, [r2, #0]
 8009eaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	2203      	movs	r2, #3
 8009eba:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ec2:	e013      	b.n	8009eec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4413      	add	r3, r2
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	7812      	ldrb	r2, [r2, #0]
 8009ece:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	613b      	str	r3, [r7, #16]
    idx++;
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e7      	bne.n	8009ec4 <USBD_GetString+0x52>
 8009ef4:	e000      	b.n	8009ef8 <USBD_GetString+0x86>
    return;
 8009ef6:	bf00      	nop
  }
}
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f0e:	e005      	b.n	8009f1c <USBD_GetLen+0x1e>
  {
    len++;
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	3301      	adds	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1f5      	bne.n	8009f10 <USBD_GetLen+0x12>
  }

  return len;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2202      	movs	r2, #2
 8009f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	2100      	movs	r1, #0
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 fc8d 	bl	800a878 <USBD_LL_Transmit>

  return USBD_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fc7c 	bl	800a878 <USBD_LL_Transmit>

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fc80 	bl	800a8ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 fc6f 	bl	800a8ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2204      	movs	r2, #4
 8009ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fc3b 	bl	800a878 <USBD_LL_Transmit>

  return USBD_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2205      	movs	r2, #5
 800a018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a01c:	2300      	movs	r3, #0
 800a01e:	2200      	movs	r2, #0
 800a020:	2100      	movs	r1, #0
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fc49 	bl	800a8ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a038:	2200      	movs	r2, #0
 800a03a:	4912      	ldr	r1, [pc, #72]	; (800a084 <MX_USB_Device_Init+0x50>)
 800a03c:	4812      	ldr	r0, [pc, #72]	; (800a088 <MX_USB_Device_Init+0x54>)
 800a03e:	f7fe ff09 	bl	8008e54 <USBD_Init>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a048:	f7f7 fef0 	bl	8001e2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a04c:	490f      	ldr	r1, [pc, #60]	; (800a08c <MX_USB_Device_Init+0x58>)
 800a04e:	480e      	ldr	r0, [pc, #56]	; (800a088 <MX_USB_Device_Init+0x54>)
 800a050:	f7fe ff30 	bl	8008eb4 <USBD_RegisterClass>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a05a:	f7f7 fee7 	bl	8001e2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a05e:	490c      	ldr	r1, [pc, #48]	; (800a090 <MX_USB_Device_Init+0x5c>)
 800a060:	4809      	ldr	r0, [pc, #36]	; (800a088 <MX_USB_Device_Init+0x54>)
 800a062:	f7fe fe5b 	bl	8008d1c <USBD_CDC_RegisterInterface>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a06c:	f7f7 fede 	bl	8001e2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a070:	4805      	ldr	r0, [pc, #20]	; (800a088 <MX_USB_Device_Init+0x54>)
 800a072:	f7fe ff46 	bl	8008f02 <USBD_Start>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a07c:	f7f7 fed6 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a080:	bf00      	nop
 800a082:	bd80      	pop	{r7, pc}
 800a084:	20000130 	.word	0x20000130
 800a088:	200007b4 	.word	0x200007b4
 800a08c:	20000018 	.word	0x20000018
 800a090:	2000011c 	.word	0x2000011c

0800a094 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a098:	2200      	movs	r2, #0
 800a09a:	4905      	ldr	r1, [pc, #20]	; (800a0b0 <CDC_Init_FS+0x1c>)
 800a09c:	4805      	ldr	r0, [pc, #20]	; (800a0b4 <CDC_Init_FS+0x20>)
 800a09e:	f7fe fe52 	bl	8008d46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a0a2:	4905      	ldr	r1, [pc, #20]	; (800a0b8 <CDC_Init_FS+0x24>)
 800a0a4:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <CDC_Init_FS+0x20>)
 800a0a6:	f7fe fe67 	bl	8008d78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000e6c 	.word	0x20000e6c
 800a0b4:	200007b4 	.word	0x200007b4
 800a0b8:	20000a84 	.word	0x20000a84

0800a0bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a0c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	71fb      	strb	r3, [r7, #7]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b23      	cmp	r3, #35	; 0x23
 800a0e0:	d84a      	bhi.n	800a178 <CDC_Control_FS+0xac>
 800a0e2:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <CDC_Control_FS+0x1c>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a179 	.word	0x0800a179
 800a0ec:	0800a179 	.word	0x0800a179
 800a0f0:	0800a179 	.word	0x0800a179
 800a0f4:	0800a179 	.word	0x0800a179
 800a0f8:	0800a179 	.word	0x0800a179
 800a0fc:	0800a179 	.word	0x0800a179
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a179 	.word	0x0800a179
 800a108:	0800a179 	.word	0x0800a179
 800a10c:	0800a179 	.word	0x0800a179
 800a110:	0800a179 	.word	0x0800a179
 800a114:	0800a179 	.word	0x0800a179
 800a118:	0800a179 	.word	0x0800a179
 800a11c:	0800a179 	.word	0x0800a179
 800a120:	0800a179 	.word	0x0800a179
 800a124:	0800a179 	.word	0x0800a179
 800a128:	0800a179 	.word	0x0800a179
 800a12c:	0800a179 	.word	0x0800a179
 800a130:	0800a179 	.word	0x0800a179
 800a134:	0800a179 	.word	0x0800a179
 800a138:	0800a179 	.word	0x0800a179
 800a13c:	0800a179 	.word	0x0800a179
 800a140:	0800a179 	.word	0x0800a179
 800a144:	0800a179 	.word	0x0800a179
 800a148:	0800a179 	.word	0x0800a179
 800a14c:	0800a179 	.word	0x0800a179
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a179 	.word	0x0800a179
 800a15c:	0800a179 	.word	0x0800a179
 800a160:	0800a179 	.word	0x0800a179
 800a164:	0800a179 	.word	0x0800a179
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a179 	.word	0x0800a179
 800a170:	0800a179 	.word	0x0800a179
 800a174:	0800a179 	.word	0x0800a179
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a178:	bf00      	nop
  }

  return (USBD_OK);
 800a17a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7f6 fcb5 	bl	8000b04 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	4805      	ldr	r0, [pc, #20]	; (800a1b4 <CDC_Receive_FS+0x2c>)
 800a19e:	f7fe fdeb 	bl	8008d78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1a2:	4804      	ldr	r0, [pc, #16]	; (800a1b4 <CDC_Receive_FS+0x2c>)
 800a1a4:	f7fe fe2c 	bl	8008e00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200007b4 	.word	0x200007b4

0800a1b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a1c8:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <CDC_Transmit_FS+0x48>)
 800a1ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e00b      	b.n	800a1f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a1de:	887b      	ldrh	r3, [r7, #2]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4806      	ldr	r0, [pc, #24]	; (800a200 <CDC_Transmit_FS+0x48>)
 800a1e6:	f7fe fdae 	bl	8008d46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a1ea:	4805      	ldr	r0, [pc, #20]	; (800a200 <CDC_Transmit_FS+0x48>)
 800a1ec:	f7fe fdd8 	bl	8008da0 <USBD_CDC_TransmitPacket>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200007b4 	.word	0x200007b4

0800a204 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
	...

0800a228 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	6039      	str	r1, [r7, #0]
 800a232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2212      	movs	r2, #18
 800a238:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a23a:	4b03      	ldr	r3, [pc, #12]	; (800a248 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000150 	.word	0x20000150

0800a24c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	4603      	mov	r3, r0
 800a254:	6039      	str	r1, [r7, #0]
 800a256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2204      	movs	r2, #4
 800a25c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a25e:	4b03      	ldr	r3, [pc, #12]	; (800a26c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	20000164 	.word	0x20000164

0800a270 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d105      	bne.n	800a28e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4907      	ldr	r1, [pc, #28]	; (800a2a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a286:	4808      	ldr	r0, [pc, #32]	; (800a2a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a288:	f7ff fdf3 	bl	8009e72 <USBD_GetString>
 800a28c:	e004      	b.n	800a298 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	4904      	ldr	r1, [pc, #16]	; (800a2a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a292:	4805      	ldr	r0, [pc, #20]	; (800a2a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a294:	f7ff fded 	bl	8009e72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a298:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20001254 	.word	0x20001254
 800a2a8:	0800aaac 	.word	0x0800aaac

0800a2ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	4904      	ldr	r1, [pc, #16]	; (800a2cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a2bc:	4804      	ldr	r0, [pc, #16]	; (800a2d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a2be:	f7ff fdd8 	bl	8009e72 <USBD_GetString>
  return USBD_StrDesc;
 800a2c2:	4b02      	ldr	r3, [pc, #8]	; (800a2cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20001254 	.word	0x20001254
 800a2d0:	0800aac4 	.word	0x0800aac4

0800a2d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	6039      	str	r1, [r7, #0]
 800a2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	221a      	movs	r2, #26
 800a2e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2e6:	f000 f843 	bl	800a370 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a2ea:	4b02      	ldr	r3, [pc, #8]	; (800a2f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20000168 	.word	0x20000168

0800a2f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	6039      	str	r1, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d105      	bne.n	800a316 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	4907      	ldr	r1, [pc, #28]	; (800a32c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a30e:	4808      	ldr	r0, [pc, #32]	; (800a330 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a310:	f7ff fdaf 	bl	8009e72 <USBD_GetString>
 800a314:	e004      	b.n	800a320 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	4904      	ldr	r1, [pc, #16]	; (800a32c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a31a:	4805      	ldr	r0, [pc, #20]	; (800a330 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a31c:	f7ff fda9 	bl	8009e72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20001254 	.word	0x20001254
 800a330:	0800aad8 	.word	0x0800aad8

0800a334 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d105      	bne.n	800a352 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4907      	ldr	r1, [pc, #28]	; (800a368 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a34a:	4808      	ldr	r0, [pc, #32]	; (800a36c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a34c:	f7ff fd91 	bl	8009e72 <USBD_GetString>
 800a350:	e004      	b.n	800a35c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	4904      	ldr	r1, [pc, #16]	; (800a368 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a356:	4805      	ldr	r0, [pc, #20]	; (800a36c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a358:	f7ff fd8b 	bl	8009e72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a35c:	4b02      	ldr	r3, [pc, #8]	; (800a368 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20001254 	.word	0x20001254
 800a36c:	0800aae4 	.word	0x0800aae4

0800a370 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a376:	4b0f      	ldr	r3, [pc, #60]	; (800a3b4 <Get_SerialNum+0x44>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a37c:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <Get_SerialNum+0x48>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a382:	4b0e      	ldr	r3, [pc, #56]	; (800a3bc <Get_SerialNum+0x4c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d009      	beq.n	800a3aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a396:	2208      	movs	r2, #8
 800a398:	4909      	ldr	r1, [pc, #36]	; (800a3c0 <Get_SerialNum+0x50>)
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f814 	bl	800a3c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	4908      	ldr	r1, [pc, #32]	; (800a3c4 <Get_SerialNum+0x54>)
 800a3a4:	68b8      	ldr	r0, [r7, #8]
 800a3a6:	f000 f80f 	bl	800a3c8 <IntToUnicode>
  }
}
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	1fff7590 	.word	0x1fff7590
 800a3b8:	1fff7594 	.word	0x1fff7594
 800a3bc:	1fff7598 	.word	0x1fff7598
 800a3c0:	2000016a 	.word	0x2000016a
 800a3c4:	2000017a 	.word	0x2000017a

0800a3c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]
 800a3de:	e027      	b.n	800a430 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	0f1b      	lsrs	r3, r3, #28
 800a3e4:	2b09      	cmp	r3, #9
 800a3e6:	d80b      	bhi.n	800a400 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	0f1b      	lsrs	r3, r3, #28
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	440b      	add	r3, r1
 800a3f8:	3230      	adds	r2, #48	; 0x30
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	e00a      	b.n	800a416 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	0f1b      	lsrs	r3, r3, #28
 800a404:	b2da      	uxtb	r2, r3
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	4619      	mov	r1, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	440b      	add	r3, r1
 800a410:	3237      	adds	r2, #55	; 0x37
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	011b      	lsls	r3, r3, #4
 800a41a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	3301      	adds	r3, #1
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	4413      	add	r3, r2
 800a426:	2200      	movs	r2, #0
 800a428:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	3301      	adds	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
 800a430:	7dfa      	ldrb	r2, [r7, #23]
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	429a      	cmp	r2, r3
 800a436:	d3d3      	bcc.n	800a3e0 <IntToUnicode+0x18>
  }
}
 800a438:	bf00      	nop
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a0d      	ldr	r2, [pc, #52]	; (800a488 <HAL_PCD_MspInit+0x44>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d113      	bne.n	800a47e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a456:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <HAL_PCD_MspInit+0x48>)
 800a458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45a:	4a0c      	ldr	r2, [pc, #48]	; (800a48c <HAL_PCD_MspInit+0x48>)
 800a45c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a460:	6593      	str	r3, [r2, #88]	; 0x58
 800a462:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <HAL_PCD_MspInit+0x48>)
 800a464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a46e:	2200      	movs	r2, #0
 800a470:	2100      	movs	r1, #0
 800a472:	2014      	movs	r0, #20
 800a474:	f7f8 f913 	bl	800269e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a478:	2014      	movs	r0, #20
 800a47a:	f7f8 f92a 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	40005c00 	.word	0x40005c00
 800a48c:	40021000 	.word	0x40021000

0800a490 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fe fd76 	bl	8008f98 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a4c6:	78fa      	ldrb	r2, [r7, #3]
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	440b      	add	r3, r1
 800a4d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f7fe fdae 	bl	800903e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a4e2:	bf00      	nop
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a4fc:	78fa      	ldrb	r2, [r7, #3]
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	440b      	add	r3, r1
 800a50a:	333c      	adds	r3, #60	; 0x3c
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	4619      	mov	r1, r3
 800a512:	f7fe fdf7 	bl	8009104 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fefb 	bl	8009328 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a542:	2301      	movs	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d001      	beq.n	800a552 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a54e:	f7f7 fc6d 	bl	8001e2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a558:	7bfa      	ldrb	r2, [r7, #15]
 800a55a:	4611      	mov	r1, r2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe fea8 	bl	80092b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fe61 	bl	8009230 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fea3 	bl	80092d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a594:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <HAL_PCD_SuspendCallback+0x30>)
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	4a03      	ldr	r2, [pc, #12]	; (800a5a8 <HAL_PCD_SuspendCallback+0x30>)
 800a59a:	f043 0306 	orr.w	r3, r3, #6
 800a59e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed00 	.word	0xe000ed00

0800a5ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d007      	beq.n	800a5cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5bc:	4b08      	ldr	r3, [pc, #32]	; (800a5e0 <HAL_PCD_ResumeCallback+0x34>)
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	4a07      	ldr	r2, [pc, #28]	; (800a5e0 <HAL_PCD_ResumeCallback+0x34>)
 800a5c2:	f023 0306 	bic.w	r3, r3, #6
 800a5c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a5c8:	f000 f9fa 	bl	800a9c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fe92 	bl	80092fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	e000ed00 	.word	0xe000ed00

0800a5e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a5ec:	4a2b      	ldr	r2, [pc, #172]	; (800a69c <USBD_LL_Init+0xb8>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a29      	ldr	r2, [pc, #164]	; (800a69c <USBD_LL_Init+0xb8>)
 800a5f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a5fc:	4b27      	ldr	r3, [pc, #156]	; (800a69c <USBD_LL_Init+0xb8>)
 800a5fe:	4a28      	ldr	r2, [pc, #160]	; (800a6a0 <USBD_LL_Init+0xbc>)
 800a600:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a602:	4b26      	ldr	r3, [pc, #152]	; (800a69c <USBD_LL_Init+0xb8>)
 800a604:	2208      	movs	r2, #8
 800a606:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a608:	4b24      	ldr	r3, [pc, #144]	; (800a69c <USBD_LL_Init+0xb8>)
 800a60a:	2202      	movs	r2, #2
 800a60c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a60e:	4b23      	ldr	r3, [pc, #140]	; (800a69c <USBD_LL_Init+0xb8>)
 800a610:	2202      	movs	r2, #2
 800a612:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a614:	4b21      	ldr	r3, [pc, #132]	; (800a69c <USBD_LL_Init+0xb8>)
 800a616:	2200      	movs	r2, #0
 800a618:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a61a:	4b20      	ldr	r3, [pc, #128]	; (800a69c <USBD_LL_Init+0xb8>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a620:	4b1e      	ldr	r3, [pc, #120]	; (800a69c <USBD_LL_Init+0xb8>)
 800a622:	2200      	movs	r2, #0
 800a624:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a626:	4b1d      	ldr	r3, [pc, #116]	; (800a69c <USBD_LL_Init+0xb8>)
 800a628:	2200      	movs	r2, #0
 800a62a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a62c:	481b      	ldr	r0, [pc, #108]	; (800a69c <USBD_LL_Init+0xb8>)
 800a62e:	f7f8 fa37 	bl	8002aa0 <HAL_PCD_Init>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a638:	f7f7 fbf8 	bl	8001e2c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a642:	2318      	movs	r3, #24
 800a644:	2200      	movs	r2, #0
 800a646:	2100      	movs	r1, #0
 800a648:	f7f9 fd25 	bl	8004096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a652:	2358      	movs	r3, #88	; 0x58
 800a654:	2200      	movs	r2, #0
 800a656:	2180      	movs	r1, #128	; 0x80
 800a658:	f7f9 fd1d 	bl	8004096 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a662:	23c0      	movs	r3, #192	; 0xc0
 800a664:	2200      	movs	r2, #0
 800a666:	2181      	movs	r1, #129	; 0x81
 800a668:	f7f9 fd15 	bl	8004096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a672:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a676:	2200      	movs	r2, #0
 800a678:	2101      	movs	r1, #1
 800a67a:	f7f9 fd0c 	bl	8004096 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a684:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a688:	2200      	movs	r2, #0
 800a68a:	2182      	movs	r1, #130	; 0x82
 800a68c:	f7f9 fd03 	bl	8004096 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20001454 	.word	0x20001454
 800a6a0:	40005c00 	.word	0x40005c00

0800a6a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7f8 fad5 	bl	8002c6a <HAL_PCD_Start>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f980 	bl	800a9cc <USBD_Get_USB_Status>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	70fb      	strb	r3, [r7, #3]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70bb      	strb	r3, [r7, #2]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a702:	78bb      	ldrb	r3, [r7, #2]
 800a704:	883a      	ldrh	r2, [r7, #0]
 800a706:	78f9      	ldrb	r1, [r7, #3]
 800a708:	f7f8 fc44 	bl	8002f94 <HAL_PCD_EP_Open>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f95a 	bl	800a9cc <USBD_Get_USB_Status>
 800a718:	4603      	mov	r3, r0
 800a71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	460b      	mov	r3, r1
 800a730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a740:	78fa      	ldrb	r2, [r7, #3]
 800a742:	4611      	mov	r1, r2
 800a744:	4618      	mov	r0, r3
 800a746:	f7f8 fc8b 	bl	8003060 <HAL_PCD_EP_Close>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f93b 	bl	800a9cc <USBD_Get_USB_Status>
 800a756:	4603      	mov	r3, r0
 800a758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a77e:	78fa      	ldrb	r2, [r7, #3]
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f7f8 fd4c 	bl	8003220 <HAL_PCD_EP_SetStall>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a78c:	7bfb      	ldrb	r3, [r7, #15]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 f91c 	bl	800a9cc <USBD_Get_USB_Status>
 800a794:	4603      	mov	r3, r0
 800a796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a798:	7bbb      	ldrb	r3, [r7, #14]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f8 fd8d 	bl	80032e0 <HAL_PCD_EP_ClrStall>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f8fd 	bl	800a9cc <USBD_Get_USB_Status>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da0c      	bge.n	800a816 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	440b      	add	r3, r1
 800a810:	3302      	adds	r3, #2
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	e00b      	b.n	800a82e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a81c:	68f9      	ldr	r1, [r7, #12]
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	440b      	add	r3, r1
 800a828:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a82c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a854:	78fa      	ldrb	r2, [r7, #3]
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f8 fb76 	bl	8002f4a <HAL_PCD_SetAddress>
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 f8b1 	bl	800a9cc <USBD_Get_USB_Status>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	607a      	str	r2, [r7, #4]
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	460b      	mov	r3, r1
 800a886:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a896:	7af9      	ldrb	r1, [r7, #11]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f7f8 fc7d 	bl	800319a <HAL_PCD_EP_Transmit>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f890 	bl	800a9cc <USBD_Get_USB_Status>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a8d8:	7af9      	ldrb	r1, [r7, #11]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	f7f8 fc07 	bl	80030f0 <HAL_PCD_EP_Receive>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 f86f 	bl	800a9cc <USBD_Get_USB_Status>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a90e:	78fa      	ldrb	r2, [r7, #3]
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7f8 fc29 	bl	800316a <HAL_PCD_EP_GetRxCount>
 800a918:	4603      	mov	r3, r0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <HAL_PCDEx_LPM_Callback+0x18>
 800a936:	2b01      	cmp	r3, #1
 800a938:	d013      	beq.n	800a962 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a93a:	e023      	b.n	800a984 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d007      	beq.n	800a954 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a944:	f000 f83c 	bl	800a9c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a948:	4b10      	ldr	r3, [pc, #64]	; (800a98c <HAL_PCDEx_LPM_Callback+0x68>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	4a0f      	ldr	r2, [pc, #60]	; (800a98c <HAL_PCDEx_LPM_Callback+0x68>)
 800a94e:	f023 0306 	bic.w	r3, r3, #6
 800a952:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe fcce 	bl	80092fc <USBD_LL_Resume>
    break;
 800a960:	e010      	b.n	800a984 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fe fcb2 	bl	80092d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <HAL_PCDEx_LPM_Callback+0x68>)
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	4a04      	ldr	r2, [pc, #16]	; (800a98c <HAL_PCDEx_LPM_Callback+0x68>)
 800a97c:	f043 0306 	orr.w	r3, r3, #6
 800a980:	6113      	str	r3, [r2, #16]
    break;
 800a982:	bf00      	nop
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	e000ed00 	.word	0xe000ed00

0800a990 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <USBD_static_malloc+0x18>)
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	200001ac 	.word	0x200001ac

0800a9ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]

}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a9c4:	f7f6 fcca 	bl	800135c <SystemClock_Config>
}
 800a9c8:	bf00      	nop
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9da:	79fb      	ldrb	r3, [r7, #7]
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d817      	bhi.n	800aa10 <USBD_Get_USB_Status+0x44>
 800a9e0:	a201      	add	r2, pc, #4	; (adr r2, 800a9e8 <USBD_Get_USB_Status+0x1c>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800a9f9 	.word	0x0800a9f9
 800a9ec:	0800a9ff 	.word	0x0800a9ff
 800a9f0:	0800aa05 	.word	0x0800aa05
 800a9f4:	0800aa0b 	.word	0x0800aa0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9fc:	e00b      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	73fb      	strb	r3, [r7, #15]
    break;
 800aa02:	e008      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa04:	2301      	movs	r3, #1
 800aa06:	73fb      	strb	r3, [r7, #15]
    break;
 800aa08:	e005      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0e:	e002      	b.n	800aa16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa10:	2303      	movs	r3, #3
 800aa12:	73fb      	strb	r3, [r7, #15]
    break;
 800aa14:	bf00      	nop
  }
  return usb_status;
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <__libc_init_array>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4e0d      	ldr	r6, [pc, #52]	; (800aa5c <__libc_init_array+0x38>)
 800aa28:	4c0d      	ldr	r4, [pc, #52]	; (800aa60 <__libc_init_array+0x3c>)
 800aa2a:	1ba4      	subs	r4, r4, r6
 800aa2c:	10a4      	asrs	r4, r4, #2
 800aa2e:	2500      	movs	r5, #0
 800aa30:	42a5      	cmp	r5, r4
 800aa32:	d109      	bne.n	800aa48 <__libc_init_array+0x24>
 800aa34:	4e0b      	ldr	r6, [pc, #44]	; (800aa64 <__libc_init_array+0x40>)
 800aa36:	4c0c      	ldr	r4, [pc, #48]	; (800aa68 <__libc_init_array+0x44>)
 800aa38:	f000 f82c 	bl	800aa94 <_init>
 800aa3c:	1ba4      	subs	r4, r4, r6
 800aa3e:	10a4      	asrs	r4, r4, #2
 800aa40:	2500      	movs	r5, #0
 800aa42:	42a5      	cmp	r5, r4
 800aa44:	d105      	bne.n	800aa52 <__libc_init_array+0x2e>
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa4c:	4798      	blx	r3
 800aa4e:	3501      	adds	r5, #1
 800aa50:	e7ee      	b.n	800aa30 <__libc_init_array+0xc>
 800aa52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa56:	4798      	blx	r3
 800aa58:	3501      	adds	r5, #1
 800aa5a:	e7f2      	b.n	800aa42 <__libc_init_array+0x1e>
 800aa5c:	0800ab04 	.word	0x0800ab04
 800aa60:	0800ab04 	.word	0x0800ab04
 800aa64:	0800ab04 	.word	0x0800ab04
 800aa68:	0800ab08 	.word	0x0800ab08

0800aa6c <memcpy>:
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	1e43      	subs	r3, r0, #1
 800aa70:	440a      	add	r2, r1
 800aa72:	4291      	cmp	r1, r2
 800aa74:	d100      	bne.n	800aa78 <memcpy+0xc>
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa80:	e7f7      	b.n	800aa72 <memcpy+0x6>

0800aa82 <memset>:
 800aa82:	4402      	add	r2, r0
 800aa84:	4603      	mov	r3, r0
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d100      	bne.n	800aa8c <memset+0xa>
 800aa8a:	4770      	bx	lr
 800aa8c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa90:	e7f9      	b.n	800aa86 <memset+0x4>
	...

0800aa94 <_init>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	bf00      	nop
 800aa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9a:	bc08      	pop	{r3}
 800aa9c:	469e      	mov	lr, r3
 800aa9e:	4770      	bx	lr

0800aaa0 <_fini>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	bf00      	nop
 800aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa6:	bc08      	pop	{r3}
 800aaa8:	469e      	mov	lr, r3
 800aaaa:	4770      	bx	lr
